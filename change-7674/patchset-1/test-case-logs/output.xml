<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171030 15:13:06.976" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/tmp/fspcibld/10510/obmc-robot/tests" name="Tests" id="s1">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Clear System Entry From Knownhosts</arg>
</arguments>
<kw library="connection_client" name="Clear System Entry From Knownhosts">
<doc>Delete OPENBMC_HOST entry from known_hosts file.</doc>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>sed '/${OPENBMC_HOST}/d' -i ~/.ssh/known_hosts</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20171030 15:13:08.406" level="INFO">${cmd} = sed '/9.3.86.161/d' -i ~/.ssh/known_hosts</msg>
<status endtime="20171030 15:13:08.406" status="PASS" starttime="20171030 15:13:08.405"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:13:08.410" level="INFO">Running command 'sed '/9.3.86.161/d' -i ~/.ssh/known_hosts 2&gt;&amp;1'.</msg>
<msg timestamp="20171030 15:13:08.413" level="INFO">${rc} = 2</msg>
<msg timestamp="20171030 15:13:08.413" level="INFO">${output} = sed: can't read /home/fspcibld/.ssh/known_hosts: No such file or directory</msg>
<status endtime="20171030 15:13:08.413" status="PASS" starttime="20171030 15:13:08.406"></status>
</kw>
<status endtime="20171030 15:13:08.413" status="PASS" starttime="20171030 15:13:08.405"></status>
</kw>
<status endtime="20171030 15:13:08.414" status="PASS" starttime="20171030 15:13:08.405"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171030 15:13:08.419" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20171030 15:13:08.419" status="FAIL" starttime="20171030 15:13:08.418"></status>
</kw>
<msg timestamp="20171030 15:13:08.419" level="INFO">${has_host} = False</msg>
<status endtime="20171030 15:13:08.419" status="PASS" starttime="20171030 15:13:08.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20171030 15:13:08.422" status="PASS" starttime="20171030 15:13:08.420"></status>
</kw>
<status endtime="20171030 15:13:08.423" status="PASS" starttime="20171030 15:13:08.419"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20171030 15:13:08.424" level="INFO">${port_num} = 22</msg>
<status endtime="20171030 15:13:08.425" status="PASS" starttime="20171030 15:13:08.424"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20171030 15:13:08.425" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20171030 15:13:08.425" status="PASS" starttime="20171030 15:13:08.425"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20171030 15:13:08.426" level="INFO">${https_num} = 443</msg>
<status endtime="20171030 15:13:08.426" status="PASS" starttime="20171030 15:13:08.426"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20171030 15:13:08.427" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20171030 15:13:08.427" status="PASS" starttime="20171030 15:13:08.426"></status>
</kw>
<status endtime="20171030 15:13:08.427" status="PASS" starttime="20171030 15:13:08.424"></status>
</kw>
<status endtime="20171030 15:13:08.427" status="PASS" starttime="20171030 15:13:08.423"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171030 15:13:08.428" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20171030 15:13:08.428" status="FAIL" starttime="20171030 15:13:08.428"></status>
</kw>
<msg timestamp="20171030 15:13:08.428" level="INFO">${has_port} = False</msg>
<status endtime="20171030 15:13:08.428" status="PASS" starttime="20171030 15:13:08.427"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20171030 15:13:08.430" status="PASS" starttime="20171030 15:13:08.430"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20171030 15:13:08.432" status="PASS" starttime="20171030 15:13:08.431"></status>
</kw>
<status endtime="20171030 15:13:08.432" status="PASS" starttime="20171030 15:13:08.429"></status>
</kw>
<status endtime="20171030 15:13:08.432" status="PASS" starttime="20171030 15:13:08.429"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171030 15:13:08.432" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171030 15:13:09.679" level="INFO">Read output:</msg>
<status endtime="20171030 15:13:09.680" status="PASS" starttime="20171030 15:13:08.432"></status>
</kw>
<status endtime="20171030 15:13:09.680" status="PASS" starttime="20171030 15:13:08.415"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:13:09.681" level="WARN">Keyword 'Execute Command' found both from a custom test library 'SSHLibrary' and a standard library 'Telnet'. The custom keyword is used. To select explicitly, and to get rid of this warning, use either 'SSHLibrary.Execute Command' or 'Telnet.Execute Command'.</msg>
<msg timestamp="20171030 15:13:09.682" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20171030 15:13:09.769" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171030 15:13:09.769" level="INFO">${output} = VERSION_ID="v1.99.10-230-g490e2be"</msg>
<msg timestamp="20171030 15:13:09.769" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:13:09.769" status="PASS" starttime="20171030 15:13:09.681"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171030 15:13:09.770" level="INFO">Length is 0</msg>
<status endtime="20171030 15:13:09.770" status="PASS" starttime="20171030 15:13:09.769"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171030 15:13:09.770" level="INFO">VERSION_ID="v1.99.10-230-g490e2be"</msg>
<status endtime="20171030 15:13:09.770" status="PASS" starttime="20171030 15:13:09.770"></status>
</kw>
<status endtime="20171030 15:13:09.770" status="PASS" starttime="20171030 15:13:09.681"></status>
</kw>
<status endtime="20171030 15:13:09.771" status="PASS" starttime="20171030 15:13:09.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="code_update_utils" name="Get Host Software Objects Details">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg timestamp="20171030 15:13:09.772" level="INFO">${software} = []</msg>
<status endtime="20171030 15:13:09.772" status="PASS" starttime="20171030 15:13:09.772"></status>
</kw>
<kw library="code_update_utils" name="Get Software Objects">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg timestamp="20171030 15:13:09.773" level="INFO">${host_list} = []</msg>
<status endtime="20171030 15:13:09.774" status="PASS" starttime="20171030 15:13:09.773"></status>
</kw>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:09.777" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:09.778" status="PASS" starttime="20171030 15:13:09.777"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:09.778" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:09.778" status="PASS" starttime="20171030 15:13:09.778"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:09.779" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:09.779" status="PASS" starttime="20171030 15:13:09.779"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:09.780" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:09.780" status="PASS" starttime="20171030 15:13:09.779"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:10.045" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:10.045" status="PASS" starttime="20171030 15:13:09.781"></status>
</kw>
<msg timestamp="20171030 15:13:10.045" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:10.045" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:10.045" status="PASS" starttime="20171030 15:13:09.780"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:10.046" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:10.046" status="PASS" starttime="20171030 15:13:10.046"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:10.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:10.047" status="PASS" starttime="20171030 15:13:10.046"></status>
</kw>
<status endtime="20171030 15:13:10.047" status="PASS" starttime="20171030 15:13:09.776"></status>
</kw>
<status endtime="20171030 15:13:10.047" status="PASS" starttime="20171030 15:13:09.776"></status>
</kw>
<status endtime="20171030 15:13:10.047" status="PASS" starttime="20171030 15:13:09.775"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:10.048" level="INFO">${base_uri} = /xyz/openbmc_project/software/</msg>
<status endtime="20171030 15:13:10.048" status="PASS" starttime="20171030 15:13:10.047"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:10.050" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status endtime="20171030 15:13:10.050" status="PASS" starttime="20171030 15:13:10.049"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:10.051" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status endtime="20171030 15:13:10.051" status="PASS" starttime="20171030 15:13:10.051"></status>
</kw>
<status endtime="20171030 15:13:10.051" status="PASS" starttime="20171030 15:13:10.050"></status>
</kw>
<status endtime="20171030 15:13:10.051" status="PASS" starttime="20171030 15:13:10.049"></status>
</kw>
<status endtime="20171030 15:13:10.051" status="PASS" starttime="20171030 15:13:10.048"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:10.243" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg timestamp="20171030 15:13:10.243" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:10.243" status="PASS" starttime="20171030 15:13:10.052"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:10.246" level="INFO">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/faec71ec", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_pr...</msg>
<status endtime="20171030 15:13:10.246" status="PASS" starttime="20171030 15:13:10.245"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:10.247" level="INFO">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/faec71ec", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/612e0eb6", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:10.247" status="PASS" starttime="20171030 15:13:10.247"></status>
</kw>
<status endtime="20171030 15:13:10.247" status="PASS" starttime="20171030 15:13:10.246"></status>
</kw>
<status endtime="20171030 15:13:10.247" status="PASS" starttime="20171030 15:13:10.244"></status>
</kw>
<status endtime="20171030 15:13:10.247" status="PASS" starttime="20171030 15:13:10.244"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:10.248" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:10.248" status="PASS" starttime="20171030 15:13:10.248"></status>
</kw>
<msg timestamp="20171030 15:13:10.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:10.248" status="PASS" starttime="20171030 15:13:09.774"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:10.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:10.249" status="PASS" starttime="20171030 15:13:10.248"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:13:10.249" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/faec71ec", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/612e0eb6", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:10.249" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:10.250" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/xyz/openbmc_project/software/faec71ec', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_projec...</msg>
<status endtime="20171030 15:13:10.250" status="PASS" starttime="20171030 15:13:10.249"></status>
</kw>
<msg timestamp="20171030 15:13:10.250" level="INFO">${sw_list} = [u'/xyz/openbmc_project/software/faec71ec', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/612e0eb6', u'/xyz/openbmc_project/softwa...</msg>
<status endtime="20171030 15:13:10.250" status="PASS" starttime="20171030 15:13:09.774"></status>
</kw>
<kw type="for" name="${index} IN [ @{sw_list} ]">
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/faec71ec">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:10.253" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:10.254" status="PASS" starttime="20171030 15:13:10.253"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:10.254" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:10.254" status="PASS" starttime="20171030 15:13:10.254"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:10.255" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:10.255" status="PASS" starttime="20171030 15:13:10.255"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:10.256" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:10.256" status="PASS" starttime="20171030 15:13:10.255"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:10.759" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:10.759" status="PASS" starttime="20171030 15:13:10.257"></status>
</kw>
<msg timestamp="20171030 15:13:10.759" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:10.759" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:10.759" status="PASS" starttime="20171030 15:13:10.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:10.760" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:10.760" status="PASS" starttime="20171030 15:13:10.760"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:10.761" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:10.761" status="PASS" starttime="20171030 15:13:10.760"></status>
</kw>
<status endtime="20171030 15:13:10.761" status="PASS" starttime="20171030 15:13:10.253"></status>
</kw>
<status endtime="20171030 15:13:10.761" status="PASS" starttime="20171030 15:13:10.252"></status>
</kw>
<status endtime="20171030 15:13:10.761" status="PASS" starttime="20171030 15:13:10.252"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:10.762" level="INFO">${base_uri} = /xyz/openbmc_project/software/faec71ec/attr/Purpose</msg>
<status endtime="20171030 15:13:10.762" status="PASS" starttime="20171030 15:13:10.762"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:13:10.763" status="PASS" starttime="20171030 15:13:10.762"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:10.889" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/faec71ec/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171030 15:13:10.889" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:10.889" status="PASS" starttime="20171030 15:13:10.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:13:10.890" status="PASS" starttime="20171030 15:13:10.890"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:10.891" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:10.891" status="PASS" starttime="20171030 15:13:10.891"></status>
</kw>
<msg timestamp="20171030 15:13:10.891" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:10.891" status="PASS" starttime="20171030 15:13:10.251"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status endtime="20171030 15:13:10.892" status="PASS" starttime="20171030 15:13:10.891"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:13:10.892" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:10.892" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:10.892" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC'}</msg>
<status endtime="20171030 15:13:10.893" status="PASS" starttime="20171030 15:13:10.892"></status>
</kw>
<msg timestamp="20171030 15:13:10.893" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status endtime="20171030 15:13:10.893" status="PASS" starttime="20171030 15:13:10.250"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171030 15:13:10.894" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20171030 15:13:10.894" status="PASS" starttime="20171030 15:13:10.893"></status>
</kw>
<status endtime="20171030 15:13:10.894" status="PASS" starttime="20171030 15:13:10.250"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/active">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:10.897" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:10.897" status="PASS" starttime="20171030 15:13:10.897"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:10.898" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:10.898" status="PASS" starttime="20171030 15:13:10.898"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:10.899" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:10.899" status="PASS" starttime="20171030 15:13:10.898"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:10.899" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:10.899" status="PASS" starttime="20171030 15:13:10.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:11.096" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:11.096" status="PASS" starttime="20171030 15:13:10.900"></status>
</kw>
<msg timestamp="20171030 15:13:11.096" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:11.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:11.097" status="PASS" starttime="20171030 15:13:10.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:11.097" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:11.097" status="PASS" starttime="20171030 15:13:11.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:11.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:11.098" status="PASS" starttime="20171030 15:13:11.098"></status>
</kw>
<status endtime="20171030 15:13:11.098" status="PASS" starttime="20171030 15:13:10.896"></status>
</kw>
<status endtime="20171030 15:13:11.098" status="PASS" starttime="20171030 15:13:10.896"></status>
</kw>
<status endtime="20171030 15:13:11.098" status="PASS" starttime="20171030 15:13:10.895"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:11.099" level="INFO">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status endtime="20171030 15:13:11.099" status="PASS" starttime="20171030 15:13:11.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:13:11.100" status="PASS" starttime="20171030 15:13:11.099"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:11.192" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171030 15:13:11.192" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20171030 15:13:11.192" status="PASS" starttime="20171030 15:13:11.100"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:13:11.193" status="PASS" starttime="20171030 15:13:11.193"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:11.194" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:11.194" status="PASS" starttime="20171030 15:13:11.193"></status>
</kw>
<msg timestamp="20171030 15:13:11.194" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20171030 15:13:11.194" status="PASS" starttime="20171030 15:13:10.894"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:11.195" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20171030 15:13:11.195" status="PASS" starttime="20171030 15:13:11.194"></status>
</kw>
<msg timestamp="20171030 15:13:11.195" level="INFO">${attr_purpose} = None</msg>
<status endtime="20171030 15:13:11.195" status="PASS" starttime="20171030 15:13:10.894"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171030 15:13:11.195" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20171030 15:13:11.196" status="PASS" starttime="20171030 15:13:11.195"></status>
</kw>
<status endtime="20171030 15:13:11.196" status="PASS" starttime="20171030 15:13:10.894"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/7a9ef57c">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:11.199" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:11.199" status="PASS" starttime="20171030 15:13:11.198"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:11.200" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:11.200" status="PASS" starttime="20171030 15:13:11.199"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:11.200" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:11.200" status="PASS" starttime="20171030 15:13:11.200"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:11.201" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:11.201" status="PASS" starttime="20171030 15:13:11.201"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:11.393" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:11.393" status="PASS" starttime="20171030 15:13:11.202"></status>
</kw>
<msg timestamp="20171030 15:13:11.393" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:11.393" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:11.393" status="PASS" starttime="20171030 15:13:11.201"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:11.394" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:11.394" status="PASS" starttime="20171030 15:13:11.394"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:11.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:11.395" status="PASS" starttime="20171030 15:13:11.394"></status>
</kw>
<status endtime="20171030 15:13:11.395" status="PASS" starttime="20171030 15:13:11.198"></status>
</kw>
<status endtime="20171030 15:13:11.395" status="PASS" starttime="20171030 15:13:11.197"></status>
</kw>
<status endtime="20171030 15:13:11.395" status="PASS" starttime="20171030 15:13:11.197"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:11.396" level="INFO">${base_uri} = /xyz/openbmc_project/software/7a9ef57c/attr/Purpose</msg>
<status endtime="20171030 15:13:11.396" status="PASS" starttime="20171030 15:13:11.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:13:11.396" status="PASS" starttime="20171030 15:13:11.396"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:11.514" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171030 15:13:11.514" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:11.514" status="PASS" starttime="20171030 15:13:11.397"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:13:11.515" status="PASS" starttime="20171030 15:13:11.514"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:11.515" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:11.515" status="PASS" starttime="20171030 15:13:11.515"></status>
</kw>
<msg timestamp="20171030 15:13:11.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:11.515" status="PASS" starttime="20171030 15:13:11.196"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status endtime="20171030 15:13:11.516" status="PASS" starttime="20171030 15:13:11.516"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:13:11.517" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:11.517" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:11.517" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host'}</msg>
<status endtime="20171030 15:13:11.517" status="PASS" starttime="20171030 15:13:11.516"></status>
</kw>
<msg timestamp="20171030 15:13:11.517" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status endtime="20171030 15:13:11.517" status="PASS" starttime="20171030 15:13:11.196"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status endtime="20171030 15:13:11.518" status="PASS" starttime="20171030 15:13:11.517"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status endtime="20171030 15:13:11.518" status="PASS" starttime="20171030 15:13:11.518"></status>
</kw>
<status endtime="20171030 15:13:11.518" status="PASS" starttime="20171030 15:13:11.196"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/612e0eb6">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:11.522" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:11.522" status="PASS" starttime="20171030 15:13:11.521"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:11.522" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:11.523" status="PASS" starttime="20171030 15:13:11.522"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:11.523" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:11.523" status="PASS" starttime="20171030 15:13:11.523"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:11.524" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:11.524" status="PASS" starttime="20171030 15:13:11.524"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:11.704" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:11.704" status="PASS" starttime="20171030 15:13:11.525"></status>
</kw>
<msg timestamp="20171030 15:13:11.704" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:11.704" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:11.704" status="PASS" starttime="20171030 15:13:11.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:11.705" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:11.705" status="PASS" starttime="20171030 15:13:11.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:11.706" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:11.706" status="PASS" starttime="20171030 15:13:11.705"></status>
</kw>
<status endtime="20171030 15:13:11.706" status="PASS" starttime="20171030 15:13:11.521"></status>
</kw>
<status endtime="20171030 15:13:11.706" status="PASS" starttime="20171030 15:13:11.520"></status>
</kw>
<status endtime="20171030 15:13:11.706" status="PASS" starttime="20171030 15:13:11.520"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:11.707" level="INFO">${base_uri} = /xyz/openbmc_project/software/612e0eb6/attr/Purpose</msg>
<status endtime="20171030 15:13:11.707" status="PASS" starttime="20171030 15:13:11.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:13:11.708" status="PASS" starttime="20171030 15:13:11.707"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:11.866" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/612e0eb6/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171030 15:13:11.866" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:11.866" status="PASS" starttime="20171030 15:13:11.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:13:11.867" status="PASS" starttime="20171030 15:13:11.867"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:11.867" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:11.868" status="PASS" starttime="20171030 15:13:11.867"></status>
</kw>
<msg timestamp="20171030 15:13:11.868" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:11.868" status="PASS" starttime="20171030 15:13:11.519"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status endtime="20171030 15:13:11.868" status="PASS" starttime="20171030 15:13:11.868"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:13:11.869" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:11.869" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:11.869" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC'}</msg>
<status endtime="20171030 15:13:11.869" status="PASS" starttime="20171030 15:13:11.869"></status>
</kw>
<msg timestamp="20171030 15:13:11.869" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status endtime="20171030 15:13:11.870" status="PASS" starttime="20171030 15:13:11.519"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171030 15:13:11.870" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20171030 15:13:11.870" status="PASS" starttime="20171030 15:13:11.870"></status>
</kw>
<status endtime="20171030 15:13:11.870" status="PASS" starttime="20171030 15:13:11.519"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/8764baa3">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:11.874" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:11.874" status="PASS" starttime="20171030 15:13:11.873"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:11.875" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:11.875" status="PASS" starttime="20171030 15:13:11.874"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:11.875" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:11.875" status="PASS" starttime="20171030 15:13:11.875"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:11.876" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:11.876" status="PASS" starttime="20171030 15:13:11.876"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:12.085" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:12.085" status="PASS" starttime="20171030 15:13:11.877"></status>
</kw>
<msg timestamp="20171030 15:13:12.085" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:12.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:12.085" status="PASS" starttime="20171030 15:13:11.876"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:12.086" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:12.086" status="PASS" starttime="20171030 15:13:12.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:12.087" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:12.087" status="PASS" starttime="20171030 15:13:12.086"></status>
</kw>
<status endtime="20171030 15:13:12.087" status="PASS" starttime="20171030 15:13:11.873"></status>
</kw>
<status endtime="20171030 15:13:12.087" status="PASS" starttime="20171030 15:13:11.872"></status>
</kw>
<status endtime="20171030 15:13:12.087" status="PASS" starttime="20171030 15:13:11.872"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:12.088" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status endtime="20171030 15:13:12.088" status="PASS" starttime="20171030 15:13:12.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:13:12.089" status="PASS" starttime="20171030 15:13:12.088"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:12.223" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171030 15:13:12.224" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:12.224" status="PASS" starttime="20171030 15:13:12.089"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:13:12.224" status="PASS" starttime="20171030 15:13:12.224"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:12.225" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:12.225" status="PASS" starttime="20171030 15:13:12.225"></status>
</kw>
<msg timestamp="20171030 15:13:12.225" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:12.225" status="PASS" starttime="20171030 15:13:11.871"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status endtime="20171030 15:13:12.226" status="PASS" starttime="20171030 15:13:12.226"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:13:12.226" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:12.227" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:12.227" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host'}</msg>
<status endtime="20171030 15:13:12.227" status="PASS" starttime="20171030 15:13:12.226"></status>
</kw>
<msg timestamp="20171030 15:13:12.227" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status endtime="20171030 15:13:12.227" status="PASS" starttime="20171030 15:13:11.871"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status endtime="20171030 15:13:12.228" status="PASS" starttime="20171030 15:13:12.228"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status endtime="20171030 15:13:12.229" status="PASS" starttime="20171030 15:13:12.228"></status>
</kw>
<status endtime="20171030 15:13:12.229" status="PASS" starttime="20171030 15:13:11.870"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/functional">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:12.232" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:12.232" status="PASS" starttime="20171030 15:13:12.231"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:12.233" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:12.233" status="PASS" starttime="20171030 15:13:12.233"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:12.234" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:12.234" status="PASS" starttime="20171030 15:13:12.233"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:12.234" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:12.235" status="PASS" starttime="20171030 15:13:12.234"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:12.422" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:12.422" status="PASS" starttime="20171030 15:13:12.235"></status>
</kw>
<msg timestamp="20171030 15:13:12.422" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:12.422" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:12.422" status="PASS" starttime="20171030 15:13:12.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:12.423" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:12.423" status="PASS" starttime="20171030 15:13:12.422"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:12.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:12.424" status="PASS" starttime="20171030 15:13:12.423"></status>
</kw>
<status endtime="20171030 15:13:12.424" status="PASS" starttime="20171030 15:13:12.231"></status>
</kw>
<status endtime="20171030 15:13:12.424" status="PASS" starttime="20171030 15:13:12.231"></status>
</kw>
<status endtime="20171030 15:13:12.424" status="PASS" starttime="20171030 15:13:12.230"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:12.424" level="INFO">${base_uri} = /xyz/openbmc_project/software/functional/attr/Purpose</msg>
<status endtime="20171030 15:13:12.425" status="PASS" starttime="20171030 15:13:12.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:13:12.425" status="PASS" starttime="20171030 15:13:12.425"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:12.484" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/functional/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20171030 15:13:12.484" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20171030 15:13:12.484" status="PASS" starttime="20171030 15:13:12.425"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:13:12.485" status="PASS" starttime="20171030 15:13:12.484"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:12.485" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:12.485" status="PASS" starttime="20171030 15:13:12.485"></status>
</kw>
<msg timestamp="20171030 15:13:12.486" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20171030 15:13:12.486" status="PASS" starttime="20171030 15:13:12.229"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:12.486" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20171030 15:13:12.486" status="PASS" starttime="20171030 15:13:12.486"></status>
</kw>
<msg timestamp="20171030 15:13:12.487" level="INFO">${attr_purpose} = None</msg>
<status endtime="20171030 15:13:12.487" status="PASS" starttime="20171030 15:13:12.229"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20171030 15:13:12.487" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20171030 15:13:12.487" status="PASS" starttime="20171030 15:13:12.487"></status>
</kw>
<status endtime="20171030 15:13:12.487" status="PASS" starttime="20171030 15:13:12.229"></status>
</kw>
<status endtime="20171030 15:13:12.488" status="PASS" starttime="20171030 15:13:10.250"></status>
</kw>
<msg timestamp="20171030 15:13:12.488" level="INFO">${pnor_details} = [u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/8764baa3']</msg>
<status endtime="20171030 15:13:12.488" status="PASS" starttime="20171030 15:13:09.773"></status>
</kw>
<kw type="for" name="${pnor} IN [ @{pnor_details} ]">
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/7a9ef57c">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:12.491" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:12.492" status="PASS" starttime="20171030 15:13:12.491"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:12.492" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:12.492" status="PASS" starttime="20171030 15:13:12.492"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:12.493" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:12.493" status="PASS" starttime="20171030 15:13:12.492"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:12.494" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:12.494" status="PASS" starttime="20171030 15:13:12.493"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:12.672" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:12.672" status="PASS" starttime="20171030 15:13:12.495"></status>
</kw>
<msg timestamp="20171030 15:13:12.672" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:12.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:12.673" status="PASS" starttime="20171030 15:13:12.494"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:12.673" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:12.673" status="PASS" starttime="20171030 15:13:12.673"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:12.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:12.674" status="PASS" starttime="20171030 15:13:12.674"></status>
</kw>
<status endtime="20171030 15:13:12.674" status="PASS" starttime="20171030 15:13:12.490"></status>
</kw>
<status endtime="20171030 15:13:12.674" status="PASS" starttime="20171030 15:13:12.490"></status>
</kw>
<status endtime="20171030 15:13:12.675" status="PASS" starttime="20171030 15:13:12.489"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:12.675" level="INFO">${base_uri} = /xyz/openbmc_project/software/7a9ef57c</msg>
<status endtime="20171030 15:13:12.675" status="PASS" starttime="20171030 15:13:12.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:13:12.676" status="PASS" starttime="20171030 15:13:12.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:12.801" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c, headers=None json=None</msg>
<msg timestamp="20171030 15:13:12.801" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:12.801" status="PASS" starttime="20171030 15:13:12.676"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:13:12.802" status="PASS" starttime="20171030 15:13:12.802"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:12.803" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:12.803" status="PASS" starttime="20171030 15:13:12.802"></status>
</kw>
<msg timestamp="20171030 15:13:12.803" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:12.803" status="PASS" starttime="20171030 15:13:12.488"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171030 15:13:12.804" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
    "Path": "", 
    "Priority": 1, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:12.804" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:12.804" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'Requested...</msg>
<status endtime="20171030 15:13:12.804" status="PASS" starttime="20171030 15:13:12.803"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status endtime="20171030 15:13:12.804" status="PASS" starttime="20171030 15:13:12.804"></status>
</kw>
<status endtime="20171030 15:13:12.804" status="PASS" starttime="20171030 15:13:12.488"></status>
</kw>
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/8764baa3">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:12.808" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:12.809" status="PASS" starttime="20171030 15:13:12.808"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:12.809" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:12.809" status="PASS" starttime="20171030 15:13:12.809"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:12.810" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:12.810" status="PASS" starttime="20171030 15:13:12.810"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:12.811" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:12.811" status="PASS" starttime="20171030 15:13:12.810"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:13.024" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:13.024" status="PASS" starttime="20171030 15:13:12.812"></status>
</kw>
<msg timestamp="20171030 15:13:13.025" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:13.025" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:13.025" status="PASS" starttime="20171030 15:13:12.811"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:13.025" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:13.025" status="PASS" starttime="20171030 15:13:13.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:13.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:13.026" status="PASS" starttime="20171030 15:13:13.026"></status>
</kw>
<status endtime="20171030 15:13:13.026" status="PASS" starttime="20171030 15:13:12.808"></status>
</kw>
<status endtime="20171030 15:13:13.026" status="PASS" starttime="20171030 15:13:12.807"></status>
</kw>
<status endtime="20171030 15:13:13.027" status="PASS" starttime="20171030 15:13:12.806"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:13.027" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status endtime="20171030 15:13:13.027" status="PASS" starttime="20171030 15:13:13.027"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:13:13.028" status="PASS" starttime="20171030 15:13:13.028"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:13.205" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg timestamp="20171030 15:13:13.206" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:13.206" status="PASS" starttime="20171030 15:13:13.028"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:13:13.206" status="PASS" starttime="20171030 15:13:13.206"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:13.207" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:13.207" status="PASS" starttime="20171030 15:13:13.207"></status>
</kw>
<msg timestamp="20171030 15:13:13.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:13.207" status="PASS" starttime="20171030 15:13:12.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171030 15:13:13.208" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:13.208" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:13.208" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'Requested...</msg>
<status endtime="20171030 15:13:13.208" status="PASS" starttime="20171030 15:13:13.208"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status endtime="20171030 15:13:13.209" status="PASS" starttime="20171030 15:13:13.209"></status>
</kw>
<status endtime="20171030 15:13:13.209" status="PASS" starttime="20171030 15:13:12.805"></status>
</kw>
<status endtime="20171030 15:13:13.209" status="PASS" starttime="20171030 15:13:12.488"></status>
</kw>
<msg timestamp="20171030 15:13:13.210" level="INFO">${software} = [{u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'RequestedActivation': u'xyz.openbmc_project.Software.Activa...</msg>
<status endtime="20171030 15:13:13.210" status="PASS" starttime="20171030 15:13:09.771"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg timestamp="20171030 15:13:13.210" level="INFO">[{u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Priority': 1, u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'Path': u''}, {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Priority': 0, u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'Path': u''}]</msg>
<status endtime="20171030 15:13:13.210" status="PASS" starttime="20171030 15:13:13.210"></status>
</kw>
<status endtime="20171030 15:13:13.210" status="PASS" starttime="20171030 15:13:09.771"></status>
</kw>
<status endtime="20171030 15:13:13.211" status="PASS" starttime="20171030 15:13:09.771"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171030 15:13:13.225" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:13:13.226" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171030 15:13:14.888" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171030 15:13:14.889" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171030 15:13:14.957" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171030 15:13:14.967" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171030 15:13:14.967" level="INFO">${stderr} = </msg>
<msg timestamp="20171030 15:13:14.967" level="INFO">${rc} = 0</msg>
<status endtime="20171030 15:13:14.967" status="PASS" starttime="20171030 15:13:13.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171030 15:13:14.968" level="INFO">Length is 0</msg>
<status endtime="20171030 15:13:14.968" status="PASS" starttime="20171030 15:13:14.968"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171030 15:13:14.969" level="INFO">Length is 11</msg>
<status endtime="20171030 15:13:14.969" status="PASS" starttime="20171030 15:13:14.968"></status>
</kw>
<msg timestamp="20171030 15:13:14.969" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20171030 15:13:14.969" status="PASS" starttime="20171030 15:13:13.211"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20171030 15:13:14.969" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20171030 15:13:14.970" status="PASS" starttime="20171030 15:13:14.969"></status>
</kw>
<status endtime="20171030 15:13:14.970" status="PASS" starttime="20171030 15:13:13.211"></status>
</kw>
<status endtime="20171030 15:13:14.970" status="PASS" starttime="20171030 15:13:13.211"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171030 15:13:14.973" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20171030 15:13:14.973" status="FAIL" starttime="20171030 15:13:14.972"></status>
</kw>
<msg timestamp="20171030 15:13:14.973" level="INFO">${has_host} = False</msg>
<status endtime="20171030 15:13:14.973" status="PASS" starttime="20171030 15:13:14.972"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20171030 15:13:14.974" status="PASS" starttime="20171030 15:13:14.974"></status>
</kw>
<status endtime="20171030 15:13:14.975" status="PASS" starttime="20171030 15:13:14.973"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20171030 15:13:14.978" level="INFO">${port_num} = 22</msg>
<status endtime="20171030 15:13:14.978" status="PASS" starttime="20171030 15:13:14.976"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20171030 15:13:14.978" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20171030 15:13:14.978" status="PASS" starttime="20171030 15:13:14.978"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20171030 15:13:14.979" level="INFO">${https_num} = 443</msg>
<status endtime="20171030 15:13:14.979" status="PASS" starttime="20171030 15:13:14.979"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20171030 15:13:14.980" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20171030 15:13:14.980" status="PASS" starttime="20171030 15:13:14.979"></status>
</kw>
<status endtime="20171030 15:13:14.980" status="PASS" starttime="20171030 15:13:14.975"></status>
</kw>
<status endtime="20171030 15:13:14.980" status="PASS" starttime="20171030 15:13:14.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171030 15:13:14.981" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20171030 15:13:14.981" status="FAIL" starttime="20171030 15:13:14.981"></status>
</kw>
<msg timestamp="20171030 15:13:14.981" level="INFO">${has_port} = False</msg>
<status endtime="20171030 15:13:14.981" status="PASS" starttime="20171030 15:13:14.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20171030 15:13:14.983" status="PASS" starttime="20171030 15:13:14.983"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20171030 15:13:14.985" status="PASS" starttime="20171030 15:13:14.984"></status>
</kw>
<status endtime="20171030 15:13:14.985" status="PASS" starttime="20171030 15:13:14.983"></status>
</kw>
<status endtime="20171030 15:13:14.985" status="PASS" starttime="20171030 15:13:14.982"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171030 15:13:14.986" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171030 15:13:16.695" level="INFO">Read output:</msg>
<status endtime="20171030 15:13:16.695" status="PASS" starttime="20171030 15:13:14.985"></status>
</kw>
<status endtime="20171030 15:13:16.696" status="PASS" starttime="20171030 15:13:14.971"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:13:16.697" level="WARN">Keyword 'Execute Command' found both from a custom test library 'SSHLibrary' and a standard library 'Telnet'. The custom keyword is used. To select explicitly, and to get rid of this warning, use either 'SSHLibrary.Execute Command' or 'Telnet.Execute Command'.</msg>
<msg timestamp="20171030 15:13:16.698" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20171030 15:13:16.860" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171030 15:13:16.860" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20171030 15:13:16.860" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:13:16.860" status="PASS" starttime="20171030 15:13:16.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171030 15:13:16.861" level="INFO">Length is 0</msg>
<status endtime="20171030 15:13:16.861" status="PASS" starttime="20171030 15:13:16.861"></status>
</kw>
<msg timestamp="20171030 15:13:16.861" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20171030 15:13:16.861" status="PASS" starttime="20171030 15:13:16.696"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20171030 15:13:16.862" status="PASS" starttime="20171030 15:13:16.862"></status>
</kw>
<status endtime="20171030 15:13:16.862" status="PASS" starttime="20171030 15:13:14.971"></status>
</kw>
<status endtime="20171030 15:13:16.863" status="PASS" starttime="20171030 15:13:14.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Set Boot Defaults</arg>
</arguments>
<kw name="Set Boot Defaults">
<kw library="utils" name="Set Control Boot Mode">
<doc>Set given boot mode on the boot object path attribute.</doc>
<arguments>
<arg>${CONTROL_HOST_URI}/boot</arg>
<arg>${BOOT_MODE_REGULAR}</arg>
</arguments>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${boot_mode}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171030 15:13:16.865" level="INFO">${valueDict} = {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}</msg>
<status endtime="20171030 15:13:16.865" status="PASS" starttime="20171030 15:13:16.865"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${boot_path}</arg>
<arg>BootMode</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:16.867" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0//boot</msg>
<status endtime="20171030 15:13:16.867" status="PASS" starttime="20171030 15:13:16.867"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:16.872" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:16.872" status="PASS" starttime="20171030 15:13:16.871"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:16.873" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:16.873" status="PASS" starttime="20171030 15:13:16.873"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:16.874" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:16.874" status="PASS" starttime="20171030 15:13:16.874"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:16.875" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:16.875" status="PASS" starttime="20171030 15:13:16.875"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:17.274" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:17.275" status="PASS" starttime="20171030 15:13:16.876"></status>
</kw>
<msg timestamp="20171030 15:13:17.275" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:17.275" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:17.275" status="PASS" starttime="20171030 15:13:16.876"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:17.276" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:17.276" status="PASS" starttime="20171030 15:13:17.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:17.276" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:17.276" status="PASS" starttime="20171030 15:13:17.276"></status>
</kw>
<status endtime="20171030 15:13:17.277" status="PASS" starttime="20171030 15:13:16.870"></status>
</kw>
<status endtime="20171030 15:13:17.277" status="PASS" starttime="20171030 15:13:16.869"></status>
</kw>
<status endtime="20171030 15:13:17.277" status="PASS" starttime="20171030 15:13:16.869"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:17.277" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0//boot/attr/BootMode</msg>
<status endtime="20171030 15:13:17.277" status="PASS" starttime="20171030 15:13:17.277"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:17.278" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:17.278" status="PASS" starttime="20171030 15:13:17.278"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20171030 15:13:17.279" status="PASS" starttime="20171030 15:13:17.279"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:17.281" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/control/host0//boot/attr/BootMode, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}, u'headers': {u'Content-Ty...</msg>
<status endtime="20171030 15:13:17.281" status="PASS" starttime="20171030 15:13:17.280"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:17.282" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/control/host0//boot/attr/BootMode, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20171030 15:13:17.282" status="PASS" starttime="20171030 15:13:17.282"></status>
</kw>
<status endtime="20171030 15:13:17.283" status="PASS" starttime="20171030 15:13:17.282"></status>
</kw>
<status endtime="20171030 15:13:17.283" status="PASS" starttime="20171030 15:13:17.279"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:17.522" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0//boot/attr/BootMode, data={"data": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171030 15:13:17.522" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:17.522" status="PASS" starttime="20171030 15:13:17.283"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:17.523" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:17.523" status="PASS" starttime="20171030 15:13:17.523"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:17.524" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:17.525" status="PASS" starttime="20171030 15:13:17.524"></status>
</kw>
<status endtime="20171030 15:13:17.525" status="PASS" starttime="20171030 15:13:17.523"></status>
</kw>
<status endtime="20171030 15:13:17.525" status="PASS" starttime="20171030 15:13:17.522"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:17.525" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:17.525" status="PASS" starttime="20171030 15:13:17.525"></status>
</kw>
<msg timestamp="20171030 15:13:17.526" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:17.526" status="PASS" starttime="20171030 15:13:16.868"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:17.526" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:17.526" status="PASS" starttime="20171030 15:13:17.526"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171030 15:13:17.527" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20171030 15:13:17.527" status="PASS" starttime="20171030 15:13:17.527"></status>
</kw>
<status endtime="20171030 15:13:17.527" status="PASS" starttime="20171030 15:13:16.866"></status>
</kw>
<status endtime="20171030 15:13:17.527" status="PASS" starttime="20171030 15:13:16.864"></status>
</kw>
<kw library="utils" name="Set Control Boot Mode">
<doc>Set given boot mode on the boot object path attribute.</doc>
<arguments>
<arg>${CONTROL_HOST_URI}/boot/one_time</arg>
<arg>${BOOT_MODE_REGULAR}</arg>
</arguments>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${boot_mode}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171030 15:13:17.528" level="INFO">${valueDict} = {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}</msg>
<status endtime="20171030 15:13:17.528" status="PASS" starttime="20171030 15:13:17.528"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${boot_path}</arg>
<arg>BootMode</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:17.530" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0//boot/one_time</msg>
<status endtime="20171030 15:13:17.530" status="PASS" starttime="20171030 15:13:17.529"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:17.532" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:17.533" status="PASS" starttime="20171030 15:13:17.532"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:17.533" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:17.533" status="PASS" starttime="20171030 15:13:17.533"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:17.534" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:17.534" status="PASS" starttime="20171030 15:13:17.534"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:17.535" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:17.535" status="PASS" starttime="20171030 15:13:17.534"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:17.739" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:17.739" status="PASS" starttime="20171030 15:13:17.536"></status>
</kw>
<msg timestamp="20171030 15:13:17.739" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:17.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:17.739" status="PASS" starttime="20171030 15:13:17.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:17.740" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:17.740" status="PASS" starttime="20171030 15:13:17.740"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:17.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:17.741" status="PASS" starttime="20171030 15:13:17.740"></status>
</kw>
<status endtime="20171030 15:13:17.741" status="PASS" starttime="20171030 15:13:17.531"></status>
</kw>
<status endtime="20171030 15:13:17.741" status="PASS" starttime="20171030 15:13:17.531"></status>
</kw>
<status endtime="20171030 15:13:17.741" status="PASS" starttime="20171030 15:13:17.530"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:17.742" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0//boot/one_time/attr/BootMode</msg>
<status endtime="20171030 15:13:17.742" status="PASS" starttime="20171030 15:13:17.742"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:17.743" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:17.743" status="PASS" starttime="20171030 15:13:17.742"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20171030 15:13:17.743" status="PASS" starttime="20171030 15:13:17.743"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:17.745" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/control/host0//boot/one_time/attr/BootMode, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}, u'headers': {u'C...</msg>
<status endtime="20171030 15:13:17.745" status="PASS" starttime="20171030 15:13:17.744"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:17.746" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/control/host0//boot/one_time/attr/BootMode, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20171030 15:13:17.746" status="PASS" starttime="20171030 15:13:17.746"></status>
</kw>
<status endtime="20171030 15:13:17.746" status="PASS" starttime="20171030 15:13:17.745"></status>
</kw>
<status endtime="20171030 15:13:17.746" status="PASS" starttime="20171030 15:13:17.743"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:17.923" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0//boot/one_time/attr/BootMode, data={"data": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171030 15:13:17.923" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:17.923" status="PASS" starttime="20171030 15:13:17.746"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:17.924" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:17.925" status="PASS" starttime="20171030 15:13:17.924"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:17.925" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:17.926" status="PASS" starttime="20171030 15:13:17.925"></status>
</kw>
<status endtime="20171030 15:13:17.926" status="PASS" starttime="20171030 15:13:17.925"></status>
</kw>
<status endtime="20171030 15:13:17.926" status="PASS" starttime="20171030 15:13:17.923"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:17.926" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:17.926" status="PASS" starttime="20171030 15:13:17.926"></status>
</kw>
<msg timestamp="20171030 15:13:17.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:17.927" status="PASS" starttime="20171030 15:13:17.530"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:17.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:17.927" status="PASS" starttime="20171030 15:13:17.927"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171030 15:13:17.928" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20171030 15:13:17.928" status="PASS" starttime="20171030 15:13:17.928"></status>
</kw>
<status endtime="20171030 15:13:17.928" status="PASS" starttime="20171030 15:13:17.529"></status>
</kw>
<status endtime="20171030 15:13:17.928" status="PASS" starttime="20171030 15:13:17.527"></status>
</kw>
<status endtime="20171030 15:13:17.928" status="PASS" starttime="20171030 15:13:16.863"></status>
</kw>
<status endtime="20171030 15:13:17.928" status="PASS" starttime="20171030 15:13:16.863"></status>
</kw>
<status endtime="20171030 15:13:17.929" status="PASS" starttime="20171030 15:13:08.404"></status>
</kw>
<suite source="/tmp/fspcibld/10510/obmc-robot/tests/security" name="Security" id="s1-s1">
<suite source="/tmp/fspcibld/10510/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:17.975" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:17.976" status="PASS" starttime="20171030 15:13:17.975"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:17.976" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:17.976" status="PASS" starttime="20171030 15:13:17.976"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:17.977" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:17.977" status="PASS" starttime="20171030 15:13:17.976"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:17.977" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:17.977" status="PASS" starttime="20171030 15:13:17.977"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:18.201" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:18.201" status="PASS" starttime="20171030 15:13:17.978"></status>
</kw>
<msg timestamp="20171030 15:13:18.201" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:18.202" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:18.202" status="PASS" starttime="20171030 15:13:17.978"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:18.202" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:18.202" status="PASS" starttime="20171030 15:13:18.202"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:18.203" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:18.203" status="PASS" starttime="20171030 15:13:18.203"></status>
</kw>
<status endtime="20171030 15:13:18.203" status="PASS" starttime="20171030 15:13:17.974"></status>
</kw>
<status endtime="20171030 15:13:18.203" status="PASS" starttime="20171030 15:13:17.974"></status>
</kw>
<status endtime="20171030 15:13:18.203" status="PASS" starttime="20171030 15:13:17.973"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20171030 15:13:18.205" status="PASS" starttime="20171030 15:13:18.204"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171030 15:13:18.242" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20171030 15:13:18.242" status="PASS" starttime="20171030 15:13:18.205"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171030 15:13:18.252" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20171030 15:13:18.252" status="PASS" starttime="20171030 15:13:18.242"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171030 15:13:18.254" level="INFO">${cur_time} = 2017-10-30 15:13:18:253884</msg>
<status endtime="20171030 15:13:18.254" status="PASS" starttime="20171030 15:13:18.254"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171030 15:13:18.255" level="INFO">${cur_time} = 20171030151318253884</msg>
<status endtime="20171030 15:13:18.255" status="PASS" starttime="20171030 15:13:18.254"></status>
</kw>
<status endtime="20171030 15:13:18.255" status="PASS" starttime="20171030 15:13:18.253"></status>
</kw>
<msg timestamp="20171030 15:13:18.259" level="INFO">${FFDC_TIME} = 20171030151318253884</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171030 15:13:18.261" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20171030 15:13:18.261" status="PASS" starttime="20171030 15:13:18.260"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171030 15:13:18.262" level="INFO">${suite_name} = 20171030151318253884_TestsSecurityTestSsl</msg>
<status endtime="20171030 15:13:18.262" status="PASS" starttime="20171030 15:13:18.261"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171030 15:13:18.263" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20171030 15:13:18.263" status="PASS" starttime="20171030 15:13:18.262"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171030 15:13:18.263" level="INFO">${test_name} = 20171030151318253884_TestSSLConnection</msg>
<status endtime="20171030 15:13:18.264" status="PASS" starttime="20171030 15:13:18.263"></status>
</kw>
<status endtime="20171030 15:13:18.264" status="PASS" starttime="20171030 15:13:18.260"></status>
</kw>
<msg timestamp="20171030 15:13:18.264" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/10510/obmc-robot/logs/20171030151318253884_TestsSecurityTestSsl/20171030151318253884_TestSSLConnection/</msg>
<msg timestamp="20171030 15:13:18.272" level="INFO">${FFDC_PREFIX} = 20171030151318253884_</msg>
<status endtime="20171030 15:13:18.272" status="PASS" starttime="20171030 15:13:18.253"></status>
</kw>
<status endtime="20171030 15:13:18.273" status="PASS" starttime="20171030 15:13:18.252"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20171030 15:13:18.274" status="PASS" starttime="20171030 15:13:18.273"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:13:18.275" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs"&gt;/tmp/fspcibld/10510/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20171030 15:13:18.275" status="PASS" starttime="20171030 15:13:18.274"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171030 15:13:18.276" level="FAIL">File '/tmp/fspcibld/10510/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20171030 15:13:18.276" status="FAIL" starttime="20171030 15:13:18.275"></status>
</kw>
<msg timestamp="20171030 15:13:18.276" level="INFO">${exist} = False</msg>
<status endtime="20171030 15:13:18.276" status="PASS" starttime="20171030 15:13:18.275"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:13:18.277" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:13:18.277" status="PASS" starttime="20171030 15:13:18.277"></status>
</kw>
<status endtime="20171030 15:13:18.277" status="PASS" starttime="20171030 15:13:18.276"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20171030 15:13:18.278" status="PASS" starttime="20171030 15:13:18.277"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171030 15:13:18.279" level="INFO">${cur_time} = 2017-10-30 15:13:18:278473</msg>
<status endtime="20171030 15:13:18.279" status="PASS" starttime="20171030 15:13:18.278"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171030 15:13:18.279" level="INFO">${cur_time} = 20171030151318278473</msg>
<status endtime="20171030 15:13:18.279" status="PASS" starttime="20171030 15:13:18.279"></status>
</kw>
<msg timestamp="20171030 15:13:18.279" level="INFO">${cur_time} = 20171030151318278473</msg>
<status endtime="20171030 15:13:18.279" status="PASS" starttime="20171030 15:13:18.278"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:13:18.280" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:13:18.280" status="PASS" starttime="20171030 15:13:18.280"></status>
</kw>
<status endtime="20171030 15:13:18.281" status="PASS" starttime="20171030 15:13:18.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status endtime="20171030 15:13:18.281" status="PASS" starttime="20171030 15:13:18.281"></status>
</kw>
<status endtime="20171030 15:13:18.281" status="PASS" starttime="20171030 15:13:18.204"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20171030 15:13:18.281" status="PASS" starttime="20171030 15:13:17.972" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:18.282" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:18.283" status="PASS" starttime="20171030 15:13:18.282"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20171030 15:13:18.283" status="PASS" starttime="20171030 15:13:17.931"></status>
</suite>
<status endtime="20171030 15:13:18.286" status="PASS" starttime="20171030 15:13:17.929"></status>
</suite>
<suite source="/tmp/fspcibld/10510/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171030 15:13:18.329" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:13:18.329" status="PASS" starttime="20171030 15:13:18.329"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171030 15:13:18.330" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:13:18.330" status="PASS" starttime="20171030 15:13:18.330"></status>
</kw>
<msg timestamp="20171030 15:13:18.330" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:13:18.330" status="PASS" starttime="20171030 15:13:18.329"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171030 15:13:18.332" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:13:18.332" status="PASS" starttime="20171030 15:13:18.332"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171030 15:13:18.333" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:13:18.333" status="PASS" starttime="20171030 15:13:18.333"></status>
</kw>
<msg timestamp="20171030 15:13:18.333" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:13:18.333" status="PASS" starttime="20171030 15:13:18.331"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:13:18.335" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw'</msg>
<status endtime="20171030 15:13:18.335" status="PASS" starttime="20171030 15:13:18.334"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:13:18.335" status="PASS" starttime="20171030 15:13:18.335"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:13:18.339" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171030 15:13:18.344" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:13:18.344" level="INFO">${output} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:13:18.344" status="PASS" starttime="20171030 15:13:18.336"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20171030 15:13:18.347" status="PASS" starttime="20171030 15:13:18.346"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171030 15:13:18.348" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status endtime="20171030 15:13:18.348" status="PASS" starttime="20171030 15:13:18.348"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171030 15:13:18.349" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:13:18.349" status="PASS" starttime="20171030 15:13:18.349"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:13:18.350" level="INFO">${cmd_buf} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:13:18.351" status="PASS" starttime="20171030 15:13:18.349"></status>
</kw>
<msg timestamp="20171030 15:13:18.351" level="INFO">${search_string} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:13:18.351" status="PASS" starttime="20171030 15:13:18.334"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171030 15:13:18.352" level="INFO">${search_string} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status endtime="20171030 15:13:18.352" status="PASS" starttime="20171030 15:13:18.352"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:13:18.353" level="INFO">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20171030 15:13:18.353" status="PASS" starttime="20171030 15:13:18.353"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:13:18.354" status="PASS" starttime="20171030 15:13:18.353"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171030 15:13:18.358" level="INFO">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171030 15:13:18.368" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:13:18.368" level="INFO">${os_con_pid} = </msg>
<status endtime="20171030 15:13:18.368" status="PASS" starttime="20171030 15:13:18.354"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20171030 15:13:18.371" status="PASS" starttime="20171030 15:13:18.370"></status>
</kw>
<msg timestamp="20171030 15:13:18.372" level="INFO">${os_con_pid} = </msg>
<status endtime="20171030 15:13:18.372" status="PASS" starttime="20171030 15:13:18.334"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:13:18.374" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20171030 15:13:18.374" status="PASS" starttime="20171030 15:13:18.372"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:13:18.392" status="PASS" starttime="20171030 15:13:18.376"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:13:18.394" level="INFO">${rc} = None</msg>
<msg timestamp="20171030 15:13:18.394" level="INFO">${output} = None</msg>
<status endtime="20171030 15:13:18.394" status="PASS" starttime="20171030 15:13:18.393"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20171030 15:13:18.396" status="PASS" starttime="20171030 15:13:18.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20171030 15:13:18.401" level="FAIL">Source file '/tmp/9.3.86.161_os_console.txt' does not exist.</msg>
<status endtime="20171030 15:13:18.402" status="FAIL" starttime="20171030 15:13:18.400"></status>
</kw>
<status endtime="20171030 15:13:18.402" status="PASS" starttime="20171030 15:13:18.400"></status>
</kw>
<status endtime="20171030 15:13:18.402" status="PASS" starttime="20171030 15:13:18.397"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:13:18.403" level="INFO">${output} = </msg>
<status endtime="20171030 15:13:18.403" status="PASS" starttime="20171030 15:13:18.402"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171030 15:13:18.404" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20171030 15:13:18.404" status="PASS" starttime="20171030 15:13:18.403"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status endtime="20171030 15:13:18.453" status="PASS" starttime="20171030 15:13:18.405"></status>
</kw>
<msg timestamp="20171030 15:13:18.455" level="INFO">${rc} = 1</msg>
<msg timestamp="20171030 15:13:18.455" level="INFO">${output} = </msg>
<status endtime="20171030 15:13:18.455" status="PASS" starttime="20171030 15:13:18.404"></status>
</kw>
<msg timestamp="20171030 15:13:18.456" level="INFO">${log_output} = </msg>
<status endtime="20171030 15:13:18.456" status="PASS" starttime="20171030 15:13:18.331"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:13:18.459" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:13:18.459" status="PASS" starttime="20171030 15:13:18.458"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:13:18.461" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw'</msg>
<status endtime="20171030 15:13:18.461" status="PASS" starttime="20171030 15:13:18.460"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:13:18.461" status="PASS" starttime="20171030 15:13:18.461"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:13:18.465" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171030 15:13:18.469" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:13:18.469" level="INFO">${output} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:13:18.469" status="PASS" starttime="20171030 15:13:18.462"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20171030 15:13:18.472" status="PASS" starttime="20171030 15:13:18.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171030 15:13:18.473" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status endtime="20171030 15:13:18.474" status="PASS" starttime="20171030 15:13:18.473"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171030 15:13:18.474" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:13:18.474" status="PASS" starttime="20171030 15:13:18.474"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:13:18.476" level="INFO">${cmd_buf} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:13:18.476" status="PASS" starttime="20171030 15:13:18.475"></status>
</kw>
<msg timestamp="20171030 15:13:18.476" level="INFO">${sub_cmd_buf} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:13:18.476" status="PASS" starttime="20171030 15:13:18.459"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:13:18.477" level="INFO">${cmd_buf} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status endtime="20171030 15:13:18.477" status="PASS" starttime="20171030 15:13:18.477"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:13:18.478" status="PASS" starttime="20171030 15:13:18.477"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:13:18.482" level="INFO">Running command '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20171030 15:13:18.485" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:13:18.485" level="INFO">${output} = </msg>
<status endtime="20171030 15:13:18.485" status="PASS" starttime="20171030 15:13:18.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20171030 15:13:18.489" status="PASS" starttime="20171030 15:13:18.488"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20171030 15:13:19.490" level="INFO">Slept 1 second</msg>
<status endtime="20171030 15:13:19.490" status="PASS" starttime="20171030 15:13:18.489"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:13:19.493" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw'</msg>
<status endtime="20171030 15:13:19.493" status="PASS" starttime="20171030 15:13:19.492"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:13:19.496" status="PASS" starttime="20171030 15:13:19.494"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:13:19.500" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171030 15:13:19.505" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:13:19.505" level="INFO">${output} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:13:19.505" status="PASS" starttime="20171030 15:13:19.497"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20171030 15:13:19.508" status="PASS" starttime="20171030 15:13:19.507"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171030 15:13:19.509" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status endtime="20171030 15:13:19.509" status="PASS" starttime="20171030 15:13:19.509"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171030 15:13:19.510" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:13:19.510" status="PASS" starttime="20171030 15:13:19.510"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:13:19.512" level="INFO">${cmd_buf} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:13:19.512" status="PASS" starttime="20171030 15:13:19.511"></status>
</kw>
<msg timestamp="20171030 15:13:19.512" level="INFO">${search_string} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:13:19.512" status="PASS" starttime="20171030 15:13:19.492"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171030 15:13:19.513" level="INFO">${search_string} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status endtime="20171030 15:13:19.513" status="PASS" starttime="20171030 15:13:19.512"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:13:19.514" level="INFO">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20171030 15:13:19.514" status="PASS" starttime="20171030 15:13:19.513"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:13:19.514" status="PASS" starttime="20171030 15:13:19.514"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171030 15:13:19.518" level="INFO">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171030 15:13:19.529" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:13:19.529" level="INFO">${os_con_pid} = 202</msg>
<status endtime="20171030 15:13:19.529" status="PASS" starttime="20171030 15:13:19.515"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20171030 15:13:19.532" status="PASS" starttime="20171030 15:13:19.532"></status>
</kw>
<msg timestamp="20171030 15:13:19.533" level="INFO">${os_con_pid} = 202</msg>
<status endtime="20171030 15:13:19.533" status="PASS" starttime="20171030 15:13:19.490"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg timestamp="20171030 15:13:19.534" level="INFO">Length is 3</msg>
<status endtime="20171030 15:13:19.534" status="PASS" starttime="20171030 15:13:19.534"></status>
</kw>
<status endtime="20171030 15:13:19.534" status="PASS" starttime="20171030 15:13:18.328"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20171030 15:13:19.536" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171030 15:13:19.539" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20171030 15:13:19.539" status="PASS" starttime="20171030 15:13:19.538"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:19.541" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20171030 15:13:19.541" status="PASS" starttime="20171030 15:13:19.541"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:19.547" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:19.548" status="PASS" starttime="20171030 15:13:19.546"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:19.549" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:19.549" status="PASS" starttime="20171030 15:13:19.548"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:19.550" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:19.550" status="PASS" starttime="20171030 15:13:19.549"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:19.551" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:19.551" status="PASS" starttime="20171030 15:13:19.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:19.746" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:19.746" status="PASS" starttime="20171030 15:13:19.552"></status>
</kw>
<msg timestamp="20171030 15:13:19.747" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:19.747" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:19.747" status="PASS" starttime="20171030 15:13:19.551"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:19.748" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:19.748" status="PASS" starttime="20171030 15:13:19.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:19.748" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:19.748" status="PASS" starttime="20171030 15:13:19.748"></status>
</kw>
<status endtime="20171030 15:13:19.749" status="PASS" starttime="20171030 15:13:19.545"></status>
</kw>
<status endtime="20171030 15:13:19.749" status="PASS" starttime="20171030 15:13:19.544"></status>
</kw>
<status endtime="20171030 15:13:19.749" status="PASS" starttime="20171030 15:13:19.543"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:19.749" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20171030 15:13:19.749" status="PASS" starttime="20171030 15:13:19.749"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:19.750" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:19.750" status="PASS" starttime="20171030 15:13:19.750"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20171030 15:13:19.751" status="PASS" starttime="20171030 15:13:19.750"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:19.753" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20171030 15:13:19.753" status="PASS" starttime="20171030 15:13:19.752"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:19.754" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20171030 15:13:19.754" status="PASS" starttime="20171030 15:13:19.754"></status>
</kw>
<status endtime="20171030 15:13:19.754" status="PASS" starttime="20171030 15:13:19.753"></status>
</kw>
<status endtime="20171030 15:13:19.755" status="PASS" starttime="20171030 15:13:19.751"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:20.026" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171030 15:13:20.027" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:20.027" status="PASS" starttime="20171030 15:13:19.755"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:20.028" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:20.028" status="PASS" starttime="20171030 15:13:20.028"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:20.030" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:20.030" status="PASS" starttime="20171030 15:13:20.029"></status>
</kw>
<status endtime="20171030 15:13:20.030" status="PASS" starttime="20171030 15:13:20.029"></status>
</kw>
<status endtime="20171030 15:13:20.030" status="PASS" starttime="20171030 15:13:20.027"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:20.030" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:20.031" status="PASS" starttime="20171030 15:13:20.030"></status>
</kw>
<msg timestamp="20171030 15:13:20.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:20.031" status="PASS" starttime="20171030 15:13:19.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:20.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:20.032" status="PASS" starttime="20171030 15:13:20.031"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171030 15:13:20.032" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20171030 15:13:20.032" status="PASS" starttime="20171030 15:13:20.032"></status>
</kw>
<status endtime="20171030 15:13:20.032" status="PASS" starttime="20171030 15:13:19.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20171030 15:13:20.033" status="PASS" starttime="20171030 15:13:20.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:20.039" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:20.039" status="PASS" starttime="20171030 15:13:20.039"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:20.040" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:20.040" status="PASS" starttime="20171030 15:13:20.040"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:20.041" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:20.041" status="PASS" starttime="20171030 15:13:20.040"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:20.041" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:20.041" status="PASS" starttime="20171030 15:13:20.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:20.974" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:20.974" status="PASS" starttime="20171030 15:13:20.042"></status>
</kw>
<msg timestamp="20171030 15:13:20.974" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:20.974" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:20.974" status="PASS" starttime="20171030 15:13:20.042"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:20.975" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:20.975" status="PASS" starttime="20171030 15:13:20.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:20.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:20.975" status="PASS" starttime="20171030 15:13:20.975"></status>
</kw>
<status endtime="20171030 15:13:20.976" status="PASS" starttime="20171030 15:13:20.038"></status>
</kw>
<status endtime="20171030 15:13:20.976" status="PASS" starttime="20171030 15:13:20.038"></status>
</kw>
<status endtime="20171030 15:13:20.976" status="PASS" starttime="20171030 15:13:20.037"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:20.976" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:13:20.976" status="PASS" starttime="20171030 15:13:20.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:20.978" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:13:20.979" status="PASS" starttime="20171030 15:13:20.978"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:20.979" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:13:20.980" status="PASS" starttime="20171030 15:13:20.979"></status>
</kw>
<status endtime="20171030 15:13:20.980" status="PASS" starttime="20171030 15:13:20.979"></status>
</kw>
<status endtime="20171030 15:13:20.980" status="PASS" starttime="20171030 15:13:20.977"></status>
</kw>
<status endtime="20171030 15:13:20.980" status="PASS" starttime="20171030 15:13:20.977"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:21.210" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:13:21.211" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:21.211" status="PASS" starttime="20171030 15:13:20.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:21.212" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:21.213" status="PASS" starttime="20171030 15:13:21.212"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:21.213" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:21.214" status="PASS" starttime="20171030 15:13:21.213"></status>
</kw>
<status endtime="20171030 15:13:21.214" status="PASS" starttime="20171030 15:13:21.213"></status>
</kw>
<status endtime="20171030 15:13:21.214" status="PASS" starttime="20171030 15:13:21.211"></status>
</kw>
<status endtime="20171030 15:13:21.214" status="PASS" starttime="20171030 15:13:21.211"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:21.214" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:21.214" status="PASS" starttime="20171030 15:13:21.214"></status>
</kw>
<msg timestamp="20171030 15:13:21.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:21.215" status="PASS" starttime="20171030 15:13:20.037"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:21.215" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:21.215" status="PASS" starttime="20171030 15:13:21.215"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:13:21.216" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:21.216" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:21.216" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20171030 15:13:21.216" status="PASS" starttime="20171030 15:13:21.216"></status>
</kw>
<msg timestamp="20171030 15:13:21.216" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20171030 15:13:21.216" status="PASS" starttime="20171030 15:13:20.036"></status>
</kw>
<msg timestamp="20171030 15:13:21.217" level="INFO">${power_state} = Off</msg>
<status endtime="20171030 15:13:21.217" status="PASS" starttime="20171030 15:13:20.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:13:21.217" status="PASS" starttime="20171030 15:13:21.217"></status>
</kw>
<status endtime="20171030 15:13:21.217" status="PASS" starttime="20171030 15:13:20.035"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:21.223" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:21.223" status="PASS" starttime="20171030 15:13:21.221"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:21.224" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:21.224" status="PASS" starttime="20171030 15:13:21.224"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:21.225" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:21.225" status="PASS" starttime="20171030 15:13:21.225"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:21.226" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:21.226" status="PASS" starttime="20171030 15:13:21.225"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:21.652" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:21.652" status="PASS" starttime="20171030 15:13:21.227"></status>
</kw>
<msg timestamp="20171030 15:13:21.652" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:21.652" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:21.652" status="PASS" starttime="20171030 15:13:21.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:21.653" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:21.653" status="PASS" starttime="20171030 15:13:21.652"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:21.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:21.653" status="PASS" starttime="20171030 15:13:21.653"></status>
</kw>
<status endtime="20171030 15:13:21.654" status="PASS" starttime="20171030 15:13:21.220"></status>
</kw>
<status endtime="20171030 15:13:21.654" status="PASS" starttime="20171030 15:13:21.220"></status>
</kw>
<status endtime="20171030 15:13:21.654" status="PASS" starttime="20171030 15:13:21.219"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:21.654" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:13:21.654" status="PASS" starttime="20171030 15:13:21.654"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:21.657" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:13:21.657" status="PASS" starttime="20171030 15:13:21.656"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:21.658" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:13:21.658" status="PASS" starttime="20171030 15:13:21.657"></status>
</kw>
<status endtime="20171030 15:13:21.658" status="PASS" starttime="20171030 15:13:21.657"></status>
</kw>
<status endtime="20171030 15:13:21.658" status="PASS" starttime="20171030 15:13:21.655"></status>
</kw>
<status endtime="20171030 15:13:21.658" status="PASS" starttime="20171030 15:13:21.655"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:21.864" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:13:21.864" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:21.864" status="PASS" starttime="20171030 15:13:21.659"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:21.866" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:21.866" status="PASS" starttime="20171030 15:13:21.866"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:21.867" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:21.867" status="PASS" starttime="20171030 15:13:21.867"></status>
</kw>
<status endtime="20171030 15:13:21.867" status="PASS" starttime="20171030 15:13:21.866"></status>
</kw>
<status endtime="20171030 15:13:21.867" status="PASS" starttime="20171030 15:13:21.865"></status>
</kw>
<status endtime="20171030 15:13:21.867" status="PASS" starttime="20171030 15:13:21.865"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:21.868" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:21.868" status="PASS" starttime="20171030 15:13:21.868"></status>
</kw>
<msg timestamp="20171030 15:13:21.868" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:21.868" status="PASS" starttime="20171030 15:13:21.218"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:21.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:21.869" status="PASS" starttime="20171030 15:13:21.868"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:13:21.869" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:21.869" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:21.870" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20171030 15:13:21.870" status="PASS" starttime="20171030 15:13:21.869"></status>
</kw>
<msg timestamp="20171030 15:13:21.870" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20171030 15:13:21.870" status="PASS" starttime="20171030 15:13:21.218"></status>
</kw>
<msg timestamp="20171030 15:13:21.870" level="INFO">${host_state} = Off</msg>
<status endtime="20171030 15:13:21.870" status="PASS" starttime="20171030 15:13:21.217"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:13:21.871" status="PASS" starttime="20171030 15:13:21.870"></status>
</kw>
<status endtime="20171030 15:13:21.871" status="PASS" starttime="20171030 15:13:20.035"></status>
</kw>
<status endtime="20171030 15:13:21.871" status="PASS" starttime="20171030 15:13:20.035"></status>
</kw>
<status endtime="20171030 15:13:21.871" status="PASS" starttime="20171030 15:13:20.034"></status>
</kw>
<msg timestamp="20171030 15:13:21.871" level="INFO">${status} = True</msg>
<status endtime="20171030 15:13:21.871" status="PASS" starttime="20171030 15:13:20.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status endtime="20171030 15:13:21.872" status="PASS" starttime="20171030 15:13:21.871"></status>
</kw>
<status endtime="20171030 15:13:21.872" status="PASS" starttime="20171030 15:13:19.537"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171030 15:13:21.873" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20171030 15:13:21.873" status="PASS" starttime="20171030 15:13:21.873"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:21.874" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20171030 15:13:21.874" status="PASS" starttime="20171030 15:13:21.874"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:21.877" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:21.878" status="PASS" starttime="20171030 15:13:21.877"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:21.878" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:21.878" status="PASS" starttime="20171030 15:13:21.878"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:21.879" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:21.879" status="PASS" starttime="20171030 15:13:21.879"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:21.880" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:21.880" status="PASS" starttime="20171030 15:13:21.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:22.142" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:22.142" status="PASS" starttime="20171030 15:13:21.880"></status>
</kw>
<msg timestamp="20171030 15:13:22.142" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:22.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:22.142" status="PASS" starttime="20171030 15:13:21.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:22.143" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:22.143" status="PASS" starttime="20171030 15:13:22.143"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:22.144" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:22.144" status="PASS" starttime="20171030 15:13:22.143"></status>
</kw>
<status endtime="20171030 15:13:22.144" status="PASS" starttime="20171030 15:13:21.876"></status>
</kw>
<status endtime="20171030 15:13:22.144" status="PASS" starttime="20171030 15:13:21.876"></status>
</kw>
<status endtime="20171030 15:13:22.144" status="PASS" starttime="20171030 15:13:21.875"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:22.145" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20171030 15:13:22.145" status="PASS" starttime="20171030 15:13:22.144"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:22.145" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:22.145" status="PASS" starttime="20171030 15:13:22.145"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20171030 15:13:22.146" status="PASS" starttime="20171030 15:13:22.146"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:22.148" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20171030 15:13:22.148" status="PASS" starttime="20171030 15:13:22.147"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:22.149" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20171030 15:13:22.149" status="PASS" starttime="20171030 15:13:22.148"></status>
</kw>
<status endtime="20171030 15:13:22.149" status="PASS" starttime="20171030 15:13:22.148"></status>
</kw>
<status endtime="20171030 15:13:22.149" status="PASS" starttime="20171030 15:13:22.146"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:22.585" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171030 15:13:22.585" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:22.585" status="PASS" starttime="20171030 15:13:22.149"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:22.587" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:22.587" status="PASS" starttime="20171030 15:13:22.586"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:22.587" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:22.588" status="PASS" starttime="20171030 15:13:22.587"></status>
</kw>
<status endtime="20171030 15:13:22.588" status="PASS" starttime="20171030 15:13:22.587"></status>
</kw>
<status endtime="20171030 15:13:22.588" status="PASS" starttime="20171030 15:13:22.585"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:22.588" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:22.588" status="PASS" starttime="20171030 15:13:22.588"></status>
</kw>
<msg timestamp="20171030 15:13:22.589" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:22.589" status="PASS" starttime="20171030 15:13:21.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:22.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:22.589" status="PASS" starttime="20171030 15:13:22.589"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171030 15:13:22.590" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20171030 15:13:22.590" status="PASS" starttime="20171030 15:13:22.590"></status>
</kw>
<status endtime="20171030 15:13:22.590" status="PASS" starttime="20171030 15:13:21.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20171030 15:13:22.591" status="PASS" starttime="20171030 15:13:22.590"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:22.596" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:22.596" status="PASS" starttime="20171030 15:13:22.595"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:22.597" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:22.597" status="PASS" starttime="20171030 15:13:22.596"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:22.597" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:22.597" status="PASS" starttime="20171030 15:13:22.597"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:22.598" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:22.598" status="PASS" starttime="20171030 15:13:22.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:23.973" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:23.973" status="PASS" starttime="20171030 15:13:22.599"></status>
</kw>
<msg timestamp="20171030 15:13:23.973" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:23.974" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:23.974" status="PASS" starttime="20171030 15:13:22.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:23.974" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:23.974" status="PASS" starttime="20171030 15:13:23.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:23.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:23.975" status="PASS" starttime="20171030 15:13:23.975"></status>
</kw>
<status endtime="20171030 15:13:23.975" status="PASS" starttime="20171030 15:13:22.595"></status>
</kw>
<status endtime="20171030 15:13:23.975" status="PASS" starttime="20171030 15:13:22.594"></status>
</kw>
<status endtime="20171030 15:13:23.975" status="PASS" starttime="20171030 15:13:22.594"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:23.976" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:13:23.976" status="PASS" starttime="20171030 15:13:23.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:23.978" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:13:23.978" status="PASS" starttime="20171030 15:13:23.977"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:23.979" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:13:23.979" status="PASS" starttime="20171030 15:13:23.979"></status>
</kw>
<status endtime="20171030 15:13:23.979" status="PASS" starttime="20171030 15:13:23.978"></status>
</kw>
<status endtime="20171030 15:13:23.979" status="PASS" starttime="20171030 15:13:23.977"></status>
</kw>
<status endtime="20171030 15:13:23.979" status="PASS" starttime="20171030 15:13:23.976"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:33.078" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:13:33.078" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:33.078" status="PASS" starttime="20171030 15:13:23.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:33.080" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:33.080" status="PASS" starttime="20171030 15:13:33.079"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:33.081" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:33.081" status="PASS" starttime="20171030 15:13:33.081"></status>
</kw>
<status endtime="20171030 15:13:33.081" status="PASS" starttime="20171030 15:13:33.080"></status>
</kw>
<status endtime="20171030 15:13:33.081" status="PASS" starttime="20171030 15:13:33.079"></status>
</kw>
<status endtime="20171030 15:13:33.081" status="PASS" starttime="20171030 15:13:33.078"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:33.082" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:33.082" status="PASS" starttime="20171030 15:13:33.082"></status>
</kw>
<msg timestamp="20171030 15:13:33.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:33.082" status="PASS" starttime="20171030 15:13:22.593"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:33.083" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:33.083" status="PASS" starttime="20171030 15:13:33.082"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:13:33.083" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:33.083" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:33.083" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20171030 15:13:33.083" status="PASS" starttime="20171030 15:13:33.083"></status>
</kw>
<msg timestamp="20171030 15:13:33.084" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20171030 15:13:33.084" status="PASS" starttime="20171030 15:13:22.593"></status>
</kw>
<msg timestamp="20171030 15:13:33.084" level="INFO">${power_state} = Off</msg>
<status endtime="20171030 15:13:33.084" status="PASS" starttime="20171030 15:13:22.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:13:33.085" level="FAIL">On != Off</msg>
<status endtime="20171030 15:13:33.085" status="FAIL" starttime="20171030 15:13:33.084"></status>
</kw>
<status endtime="20171030 15:13:33.085" status="FAIL" starttime="20171030 15:13:22.592"></status>
</kw>
<status endtime="20171030 15:13:33.085" status="FAIL" starttime="20171030 15:13:22.592"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:43.091" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:43.091" status="PASS" starttime="20171030 15:13:43.090"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:43.092" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:43.092" status="PASS" starttime="20171030 15:13:43.091"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:43.092" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:43.093" status="PASS" starttime="20171030 15:13:43.092"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:43.094" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:43.094" status="PASS" starttime="20171030 15:13:43.093"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:43.329" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:43.329" status="PASS" starttime="20171030 15:13:43.095"></status>
</kw>
<msg timestamp="20171030 15:13:43.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:43.329" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:43.329" status="PASS" starttime="20171030 15:13:43.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:43.330" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:43.330" status="PASS" starttime="20171030 15:13:43.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:43.331" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:43.331" status="PASS" starttime="20171030 15:13:43.330"></status>
</kw>
<status endtime="20171030 15:13:43.331" status="PASS" starttime="20171030 15:13:43.090"></status>
</kw>
<status endtime="20171030 15:13:43.331" status="PASS" starttime="20171030 15:13:43.089"></status>
</kw>
<status endtime="20171030 15:13:43.331" status="PASS" starttime="20171030 15:13:43.088"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:43.332" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:13:43.332" status="PASS" starttime="20171030 15:13:43.331"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:43.334" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:13:43.334" status="PASS" starttime="20171030 15:13:43.333"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:43.335" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:13:43.335" status="PASS" starttime="20171030 15:13:43.334"></status>
</kw>
<status endtime="20171030 15:13:43.335" status="PASS" starttime="20171030 15:13:43.334"></status>
</kw>
<status endtime="20171030 15:13:43.335" status="PASS" starttime="20171030 15:13:43.332"></status>
</kw>
<status endtime="20171030 15:13:43.335" status="PASS" starttime="20171030 15:13:43.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:46.295" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:13:46.296" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:46.296" status="PASS" starttime="20171030 15:13:43.335"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:46.298" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:46.298" status="PASS" starttime="20171030 15:13:46.297"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:46.299" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:46.299" status="PASS" starttime="20171030 15:13:46.299"></status>
</kw>
<status endtime="20171030 15:13:46.299" status="PASS" starttime="20171030 15:13:46.298"></status>
</kw>
<status endtime="20171030 15:13:46.299" status="PASS" starttime="20171030 15:13:46.297"></status>
</kw>
<status endtime="20171030 15:13:46.299" status="PASS" starttime="20171030 15:13:46.296"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:46.300" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:46.300" status="PASS" starttime="20171030 15:13:46.299"></status>
</kw>
<msg timestamp="20171030 15:13:46.300" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:46.300" status="PASS" starttime="20171030 15:13:43.087"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:46.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:46.301" status="PASS" starttime="20171030 15:13:46.300"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:13:46.301" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:46.301" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:46.301" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20171030 15:13:46.301" status="PASS" starttime="20171030 15:13:46.301"></status>
</kw>
<msg timestamp="20171030 15:13:46.302" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20171030 15:13:46.302" status="PASS" starttime="20171030 15:13:43.087"></status>
</kw>
<msg timestamp="20171030 15:13:46.302" level="INFO">${power_state} = Off</msg>
<status endtime="20171030 15:13:46.302" status="PASS" starttime="20171030 15:13:43.087"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:13:46.303" level="FAIL">On != Off</msg>
<status endtime="20171030 15:13:46.303" status="FAIL" starttime="20171030 15:13:46.302"></status>
</kw>
<status endtime="20171030 15:13:46.303" status="FAIL" starttime="20171030 15:13:43.086"></status>
</kw>
<status endtime="20171030 15:13:46.303" status="FAIL" starttime="20171030 15:13:43.086"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:56.308" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:56.308" status="PASS" starttime="20171030 15:13:56.308"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:56.309" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:56.309" status="PASS" starttime="20171030 15:13:56.309"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:56.310" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:56.310" status="PASS" starttime="20171030 15:13:56.309"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:56.310" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:56.310" status="PASS" starttime="20171030 15:13:56.310"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:56.832" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:56.832" status="PASS" starttime="20171030 15:13:56.311"></status>
</kw>
<msg timestamp="20171030 15:13:56.832" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:56.832" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:56.833" status="PASS" starttime="20171030 15:13:56.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:56.833" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:56.833" status="PASS" starttime="20171030 15:13:56.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:56.834" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:56.834" status="PASS" starttime="20171030 15:13:56.833"></status>
</kw>
<status endtime="20171030 15:13:56.834" status="PASS" starttime="20171030 15:13:56.307"></status>
</kw>
<status endtime="20171030 15:13:56.834" status="PASS" starttime="20171030 15:13:56.307"></status>
</kw>
<status endtime="20171030 15:13:56.834" status="PASS" starttime="20171030 15:13:56.306"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:56.835" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:13:56.835" status="PASS" starttime="20171030 15:13:56.835"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:56.837" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:13:56.838" status="PASS" starttime="20171030 15:13:56.837"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:56.838" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:13:56.839" status="PASS" starttime="20171030 15:13:56.838"></status>
</kw>
<status endtime="20171030 15:13:56.839" status="PASS" starttime="20171030 15:13:56.838"></status>
</kw>
<status endtime="20171030 15:13:56.839" status="PASS" starttime="20171030 15:13:56.836"></status>
</kw>
<status endtime="20171030 15:13:56.839" status="PASS" starttime="20171030 15:13:56.835"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:57.153" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:13:57.153" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:57.153" status="PASS" starttime="20171030 15:13:56.839"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:57.155" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:57.155" status="PASS" starttime="20171030 15:13:57.154"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:57.156" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:57.156" status="PASS" starttime="20171030 15:13:57.155"></status>
</kw>
<status endtime="20171030 15:13:57.156" status="PASS" starttime="20171030 15:13:57.155"></status>
</kw>
<status endtime="20171030 15:13:57.156" status="PASS" starttime="20171030 15:13:57.154"></status>
</kw>
<status endtime="20171030 15:13:57.156" status="PASS" starttime="20171030 15:13:57.153"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:57.156" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:57.157" status="PASS" starttime="20171030 15:13:57.156"></status>
</kw>
<msg timestamp="20171030 15:13:57.157" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:57.157" status="PASS" starttime="20171030 15:13:56.305"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:57.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:57.157" status="PASS" starttime="20171030 15:13:57.157"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:13:57.158" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:57.158" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:57.158" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:13:57.158" status="PASS" starttime="20171030 15:13:57.158"></status>
</kw>
<msg timestamp="20171030 15:13:57.158" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:13:57.159" status="PASS" starttime="20171030 15:13:56.305"></status>
</kw>
<msg timestamp="20171030 15:13:57.159" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:13:57.159" status="PASS" starttime="20171030 15:13:56.304"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:13:57.159" status="PASS" starttime="20171030 15:13:57.159"></status>
</kw>
<status endtime="20171030 15:13:57.159" status="PASS" starttime="20171030 15:13:56.304"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:57.163" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:57.164" status="PASS" starttime="20171030 15:13:57.163"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:57.165" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:57.165" status="PASS" starttime="20171030 15:13:57.164"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:57.165" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:57.165" status="PASS" starttime="20171030 15:13:57.165"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:57.166" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:57.166" status="PASS" starttime="20171030 15:13:57.166"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:58.324" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:58.324" status="PASS" starttime="20171030 15:13:57.167"></status>
</kw>
<msg timestamp="20171030 15:13:58.324" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:58.324" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:58.324" status="PASS" starttime="20171030 15:13:57.166"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:58.325" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:58.325" status="PASS" starttime="20171030 15:13:58.324"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:58.326" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:58.326" status="PASS" starttime="20171030 15:13:58.326"></status>
</kw>
<status endtime="20171030 15:13:58.327" status="PASS" starttime="20171030 15:13:57.162"></status>
</kw>
<status endtime="20171030 15:13:58.327" status="PASS" starttime="20171030 15:13:57.162"></status>
</kw>
<status endtime="20171030 15:13:58.327" status="PASS" starttime="20171030 15:13:57.161"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:58.327" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:13:58.327" status="PASS" starttime="20171030 15:13:58.327"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:58.330" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:13:58.330" status="PASS" starttime="20171030 15:13:58.329"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:58.330" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:13:58.331" status="PASS" starttime="20171030 15:13:58.330"></status>
</kw>
<status endtime="20171030 15:13:58.331" status="PASS" starttime="20171030 15:13:58.330"></status>
</kw>
<status endtime="20171030 15:13:58.331" status="PASS" starttime="20171030 15:13:58.328"></status>
</kw>
<status endtime="20171030 15:13:58.331" status="PASS" starttime="20171030 15:13:58.328"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:58.427" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:13:58.427" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:58.427" status="PASS" starttime="20171030 15:13:58.331"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:58.429" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:58.429" status="PASS" starttime="20171030 15:13:58.429"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:58.430" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:58.430" status="PASS" starttime="20171030 15:13:58.430"></status>
</kw>
<status endtime="20171030 15:13:58.430" status="PASS" starttime="20171030 15:13:58.429"></status>
</kw>
<status endtime="20171030 15:13:58.431" status="PASS" starttime="20171030 15:13:58.428"></status>
</kw>
<status endtime="20171030 15:13:58.431" status="PASS" starttime="20171030 15:13:58.428"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:58.431" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:58.431" status="PASS" starttime="20171030 15:13:58.431"></status>
</kw>
<msg timestamp="20171030 15:13:58.431" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:58.431" status="PASS" starttime="20171030 15:13:57.161"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:58.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:58.432" status="PASS" starttime="20171030 15:13:58.432"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:13:58.433" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:58.433" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:58.433" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:13:58.433" status="PASS" starttime="20171030 15:13:58.433"></status>
</kw>
<msg timestamp="20171030 15:13:58.433" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:13:58.433" status="PASS" starttime="20171030 15:13:57.160"></status>
</kw>
<msg timestamp="20171030 15:13:58.434" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:13:58.434" status="PASS" starttime="20171030 15:13:57.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:13:58.434" status="PASS" starttime="20171030 15:13:58.434"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:13:58.439" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:13:58.439" status="PASS" starttime="20171030 15:13:58.438"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:13:58.440" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:13:58.440" status="PASS" starttime="20171030 15:13:58.439"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:13:58.440" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:13:58.440" status="PASS" starttime="20171030 15:13:58.440"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:13:58.441" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:13:58.441" status="PASS" starttime="20171030 15:13:58.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:13:58.618" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:13:58.619" status="PASS" starttime="20171030 15:13:58.442"></status>
</kw>
<msg timestamp="20171030 15:13:58.619" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:13:58.619" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:58.619" status="PASS" starttime="20171030 15:13:58.441"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:13:58.620" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:58.620" status="PASS" starttime="20171030 15:13:58.619"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:58.620" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:58.620" status="PASS" starttime="20171030 15:13:58.620"></status>
</kw>
<status endtime="20171030 15:13:58.621" status="PASS" starttime="20171030 15:13:58.438"></status>
</kw>
<status endtime="20171030 15:13:58.621" status="PASS" starttime="20171030 15:13:58.437"></status>
</kw>
<status endtime="20171030 15:13:58.621" status="PASS" starttime="20171030 15:13:58.437"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:13:58.621" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:13:58.621" status="PASS" starttime="20171030 15:13:58.621"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:58.624" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:13:58.624" status="PASS" starttime="20171030 15:13:58.623"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:58.625" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:13:58.625" status="PASS" starttime="20171030 15:13:58.624"></status>
</kw>
<status endtime="20171030 15:13:58.625" status="PASS" starttime="20171030 15:13:58.624"></status>
</kw>
<status endtime="20171030 15:13:58.625" status="PASS" starttime="20171030 15:13:58.622"></status>
</kw>
<status endtime="20171030 15:13:58.625" status="PASS" starttime="20171030 15:13:58.622"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:13:58.725" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:13:58.726" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:58.726" status="PASS" starttime="20171030 15:13:58.625"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:13:58.728" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:58.728" status="PASS" starttime="20171030 15:13:58.727"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:13:58.729" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:13:58.729" status="PASS" starttime="20171030 15:13:58.728"></status>
</kw>
<status endtime="20171030 15:13:58.729" status="PASS" starttime="20171030 15:13:58.728"></status>
</kw>
<status endtime="20171030 15:13:58.729" status="PASS" starttime="20171030 15:13:58.727"></status>
</kw>
<status endtime="20171030 15:13:58.729" status="PASS" starttime="20171030 15:13:58.726"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:13:58.729" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:13:58.730" status="PASS" starttime="20171030 15:13:58.729"></status>
</kw>
<msg timestamp="20171030 15:13:58.730" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:13:58.730" status="PASS" starttime="20171030 15:13:58.436"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:13:58.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:13:58.730" status="PASS" starttime="20171030 15:13:58.730"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:13:58.731" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:13:58.731" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:13:58.731" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20171030 15:13:58.731" status="PASS" starttime="20171030 15:13:58.731"></status>
</kw>
<msg timestamp="20171030 15:13:58.731" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20171030 15:13:58.731" status="PASS" starttime="20171030 15:13:58.435"></status>
</kw>
<msg timestamp="20171030 15:13:58.732" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20171030 15:13:58.732" status="PASS" starttime="20171030 15:13:58.435"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:13:58.732" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:13:58.732" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20171030 15:13:58.733" status="FAIL" starttime="20171030 15:13:58.732"></status>
</kw>
<status endtime="20171030 15:13:58.733" status="FAIL" starttime="20171030 15:13:58.434"></status>
</kw>
<status endtime="20171030 15:13:58.733" status="FAIL" starttime="20171030 15:13:56.303"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:14:08.738" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:14:08.739" status="PASS" starttime="20171030 15:14:08.738"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:14:08.739" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:14:08.739" status="PASS" starttime="20171030 15:14:08.739"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:14:08.740" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:14:08.740" status="PASS" starttime="20171030 15:14:08.740"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:14:08.741" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:14:08.741" status="PASS" starttime="20171030 15:14:08.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:14:09.110" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:14:09.110" status="PASS" starttime="20171030 15:14:08.741"></status>
</kw>
<msg timestamp="20171030 15:14:09.110" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:14:09.110" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:09.110" status="PASS" starttime="20171030 15:14:08.741"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:14:09.111" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:09.111" status="PASS" starttime="20171030 15:14:09.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:09.112" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:09.112" status="PASS" starttime="20171030 15:14:09.111"></status>
</kw>
<status endtime="20171030 15:14:09.112" status="PASS" starttime="20171030 15:14:08.737"></status>
</kw>
<status endtime="20171030 15:14:09.112" status="PASS" starttime="20171030 15:14:08.737"></status>
</kw>
<status endtime="20171030 15:14:09.112" status="PASS" starttime="20171030 15:14:08.736"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:14:09.113" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:14:09.113" status="PASS" starttime="20171030 15:14:09.113"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:09.115" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:09.115" status="PASS" starttime="20171030 15:14:09.114"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:09.116" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:09.116" status="PASS" starttime="20171030 15:14:09.116"></status>
</kw>
<status endtime="20171030 15:14:09.116" status="PASS" starttime="20171030 15:14:09.115"></status>
</kw>
<status endtime="20171030 15:14:09.117" status="PASS" starttime="20171030 15:14:09.114"></status>
</kw>
<status endtime="20171030 15:14:09.117" status="PASS" starttime="20171030 15:14:09.113"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:14:09.180" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:14:09.180" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:09.180" status="PASS" starttime="20171030 15:14:09.117"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:09.182" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:09.182" status="PASS" starttime="20171030 15:14:09.182"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:09.183" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:09.183" status="PASS" starttime="20171030 15:14:09.183"></status>
</kw>
<status endtime="20171030 15:14:09.183" status="PASS" starttime="20171030 15:14:09.182"></status>
</kw>
<status endtime="20171030 15:14:09.184" status="PASS" starttime="20171030 15:14:09.181"></status>
</kw>
<status endtime="20171030 15:14:09.184" status="PASS" starttime="20171030 15:14:09.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:14:09.184" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:14:09.184" status="PASS" starttime="20171030 15:14:09.184"></status>
</kw>
<msg timestamp="20171030 15:14:09.184" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:09.184" status="PASS" starttime="20171030 15:14:08.735"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:09.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:09.185" status="PASS" starttime="20171030 15:14:09.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:14:09.186" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:14:09.186" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:14:09.186" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:14:09.186" status="PASS" starttime="20171030 15:14:09.185"></status>
</kw>
<msg timestamp="20171030 15:14:09.186" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:14:09.186" status="PASS" starttime="20171030 15:14:08.735"></status>
</kw>
<msg timestamp="20171030 15:14:09.186" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:14:09.186" status="PASS" starttime="20171030 15:14:08.734"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:14:09.187" status="PASS" starttime="20171030 15:14:09.187"></status>
</kw>
<status endtime="20171030 15:14:09.187" status="PASS" starttime="20171030 15:14:08.734"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:14:09.191" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:14:09.191" status="PASS" starttime="20171030 15:14:09.190"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:14:09.192" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:14:09.192" status="PASS" starttime="20171030 15:14:09.192"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:14:09.193" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:14:09.193" status="PASS" starttime="20171030 15:14:09.192"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:14:09.193" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:14:09.193" status="PASS" starttime="20171030 15:14:09.193"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:14:09.945" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:14:09.945" status="PASS" starttime="20171030 15:14:09.194"></status>
</kw>
<msg timestamp="20171030 15:14:09.945" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:14:09.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:09.946" status="PASS" starttime="20171030 15:14:09.194"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:14:09.946" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:09.946" status="PASS" starttime="20171030 15:14:09.946"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:09.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:09.947" status="PASS" starttime="20171030 15:14:09.947"></status>
</kw>
<status endtime="20171030 15:14:09.947" status="PASS" starttime="20171030 15:14:09.190"></status>
</kw>
<status endtime="20171030 15:14:09.947" status="PASS" starttime="20171030 15:14:09.189"></status>
</kw>
<status endtime="20171030 15:14:09.947" status="PASS" starttime="20171030 15:14:09.189"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:14:09.948" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:14:09.948" status="PASS" starttime="20171030 15:14:09.948"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:09.950" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:09.950" status="PASS" starttime="20171030 15:14:09.950"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:09.951" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:09.951" status="PASS" starttime="20171030 15:14:09.951"></status>
</kw>
<status endtime="20171030 15:14:09.951" status="PASS" starttime="20171030 15:14:09.951"></status>
</kw>
<status endtime="20171030 15:14:09.952" status="PASS" starttime="20171030 15:14:09.949"></status>
</kw>
<status endtime="20171030 15:14:09.952" status="PASS" starttime="20171030 15:14:09.949"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:14:10.300" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:14:10.300" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:10.300" status="PASS" starttime="20171030 15:14:09.952"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:10.303" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:10.303" status="PASS" starttime="20171030 15:14:10.302"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:10.304" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:10.304" status="PASS" starttime="20171030 15:14:10.304"></status>
</kw>
<status endtime="20171030 15:14:10.304" status="PASS" starttime="20171030 15:14:10.303"></status>
</kw>
<status endtime="20171030 15:14:10.304" status="PASS" starttime="20171030 15:14:10.301"></status>
</kw>
<status endtime="20171030 15:14:10.304" status="PASS" starttime="20171030 15:14:10.300"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:14:10.305" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:14:10.305" status="PASS" starttime="20171030 15:14:10.305"></status>
</kw>
<msg timestamp="20171030 15:14:10.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:10.305" status="PASS" starttime="20171030 15:14:09.188"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:10.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:10.306" status="PASS" starttime="20171030 15:14:10.305"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:14:10.306" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:14:10.307" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:14:10.307" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:14:10.307" status="PASS" starttime="20171030 15:14:10.306"></status>
</kw>
<msg timestamp="20171030 15:14:10.307" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:14:10.307" status="PASS" starttime="20171030 15:14:09.188"></status>
</kw>
<msg timestamp="20171030 15:14:10.307" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:14:10.307" status="PASS" starttime="20171030 15:14:09.187"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:14:10.308" status="PASS" starttime="20171030 15:14:10.308"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:14:10.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:14:10.316" status="PASS" starttime="20171030 15:14:10.315"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:14:10.317" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:14:10.317" status="PASS" starttime="20171030 15:14:10.316"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:14:10.317" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:14:10.317" status="PASS" starttime="20171030 15:14:10.317"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:14:10.318" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:14:10.318" status="PASS" starttime="20171030 15:14:10.318"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:14:10.932" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:14:10.932" status="PASS" starttime="20171030 15:14:10.319"></status>
</kw>
<msg timestamp="20171030 15:14:10.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:14:10.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:10.932" status="PASS" starttime="20171030 15:14:10.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:14:10.933" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:10.933" status="PASS" starttime="20171030 15:14:10.933"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:10.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:10.934" status="PASS" starttime="20171030 15:14:10.933"></status>
</kw>
<status endtime="20171030 15:14:10.934" status="PASS" starttime="20171030 15:14:10.314"></status>
</kw>
<status endtime="20171030 15:14:10.934" status="PASS" starttime="20171030 15:14:10.314"></status>
</kw>
<status endtime="20171030 15:14:10.934" status="PASS" starttime="20171030 15:14:10.313"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:14:10.935" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:14:10.935" status="PASS" starttime="20171030 15:14:10.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:10.937" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:14:10.937" status="PASS" starttime="20171030 15:14:10.936"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:10.938" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:14:10.938" status="PASS" starttime="20171030 15:14:10.938"></status>
</kw>
<status endtime="20171030 15:14:10.938" status="PASS" starttime="20171030 15:14:10.937"></status>
</kw>
<status endtime="20171030 15:14:10.938" status="PASS" starttime="20171030 15:14:10.936"></status>
</kw>
<status endtime="20171030 15:14:10.939" status="PASS" starttime="20171030 15:14:10.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:14:11.144" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:14:11.144" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:11.144" status="PASS" starttime="20171030 15:14:10.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:11.146" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:11.146" status="PASS" starttime="20171030 15:14:11.146"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:11.147" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:11.147" status="PASS" starttime="20171030 15:14:11.147"></status>
</kw>
<status endtime="20171030 15:14:11.148" status="PASS" starttime="20171030 15:14:11.147"></status>
</kw>
<status endtime="20171030 15:14:11.148" status="PASS" starttime="20171030 15:14:11.145"></status>
</kw>
<status endtime="20171030 15:14:11.148" status="PASS" starttime="20171030 15:14:11.145"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:14:11.148" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:14:11.148" status="PASS" starttime="20171030 15:14:11.148"></status>
</kw>
<msg timestamp="20171030 15:14:11.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:11.149" status="PASS" starttime="20171030 15:14:10.312"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:11.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:11.149" status="PASS" starttime="20171030 15:14:11.149"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:14:11.150" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:14:11.150" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:14:11.150" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:14:11.150" status="PASS" starttime="20171030 15:14:11.149"></status>
</kw>
<msg timestamp="20171030 15:14:11.150" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:14:11.150" status="PASS" starttime="20171030 15:14:10.312"></status>
</kw>
<msg timestamp="20171030 15:14:11.150" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:14:11.150" status="PASS" starttime="20171030 15:14:10.308"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:14:11.151" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:14:11.151" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:14:11.151" status="FAIL" starttime="20171030 15:14:11.151"></status>
</kw>
<status endtime="20171030 15:14:11.151" status="FAIL" starttime="20171030 15:14:10.308"></status>
</kw>
<status endtime="20171030 15:14:11.152" status="FAIL" starttime="20171030 15:14:08.733"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:14:21.157" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:14:21.157" status="PASS" starttime="20171030 15:14:21.156"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:14:21.158" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:14:21.158" status="PASS" starttime="20171030 15:14:21.158"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:14:21.158" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:14:21.159" status="PASS" starttime="20171030 15:14:21.158"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:14:21.159" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:14:21.159" status="PASS" starttime="20171030 15:14:21.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:14:21.590" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:14:21.590" status="PASS" starttime="20171030 15:14:21.160"></status>
</kw>
<msg timestamp="20171030 15:14:21.590" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:14:21.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:21.590" status="PASS" starttime="20171030 15:14:21.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:14:21.591" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:21.591" status="PASS" starttime="20171030 15:14:21.591"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:21.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:21.592" status="PASS" starttime="20171030 15:14:21.591"></status>
</kw>
<status endtime="20171030 15:14:21.592" status="PASS" starttime="20171030 15:14:21.156"></status>
</kw>
<status endtime="20171030 15:14:21.592" status="PASS" starttime="20171030 15:14:21.155"></status>
</kw>
<status endtime="20171030 15:14:21.592" status="PASS" starttime="20171030 15:14:21.155"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:14:21.593" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:14:21.593" status="PASS" starttime="20171030 15:14:21.592"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:21.595" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:21.595" status="PASS" starttime="20171030 15:14:21.594"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:21.596" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:21.596" status="PASS" starttime="20171030 15:14:21.596"></status>
</kw>
<status endtime="20171030 15:14:21.596" status="PASS" starttime="20171030 15:14:21.595"></status>
</kw>
<status endtime="20171030 15:14:21.596" status="PASS" starttime="20171030 15:14:21.594"></status>
</kw>
<status endtime="20171030 15:14:21.596" status="PASS" starttime="20171030 15:14:21.593"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:14:22.203" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:14:22.203" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:22.203" status="PASS" starttime="20171030 15:14:21.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:22.205" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:22.205" status="PASS" starttime="20171030 15:14:22.204"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:22.206" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:22.206" status="PASS" starttime="20171030 15:14:22.206"></status>
</kw>
<status endtime="20171030 15:14:22.206" status="PASS" starttime="20171030 15:14:22.205"></status>
</kw>
<status endtime="20171030 15:14:22.206" status="PASS" starttime="20171030 15:14:22.204"></status>
</kw>
<status endtime="20171030 15:14:22.206" status="PASS" starttime="20171030 15:14:22.203"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:14:22.207" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:14:22.207" status="PASS" starttime="20171030 15:14:22.207"></status>
</kw>
<msg timestamp="20171030 15:14:22.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:22.207" status="PASS" starttime="20171030 15:14:21.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:22.208" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:22.208" status="PASS" starttime="20171030 15:14:22.207"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:14:22.208" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:14:22.208" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:14:22.209" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:14:22.209" status="PASS" starttime="20171030 15:14:22.208"></status>
</kw>
<msg timestamp="20171030 15:14:22.209" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:14:22.209" status="PASS" starttime="20171030 15:14:21.153"></status>
</kw>
<msg timestamp="20171030 15:14:22.209" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:14:22.209" status="PASS" starttime="20171030 15:14:21.153"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:14:22.210" status="PASS" starttime="20171030 15:14:22.209"></status>
</kw>
<status endtime="20171030 15:14:22.210" status="PASS" starttime="20171030 15:14:21.153"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:14:22.214" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:14:22.214" status="PASS" starttime="20171030 15:14:22.213"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:14:22.215" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:14:22.215" status="PASS" starttime="20171030 15:14:22.214"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:14:22.215" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:14:22.216" status="PASS" starttime="20171030 15:14:22.215"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:14:22.216" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:14:22.216" status="PASS" starttime="20171030 15:14:22.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:14:22.782" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:14:22.783" status="PASS" starttime="20171030 15:14:22.217"></status>
</kw>
<msg timestamp="20171030 15:14:22.783" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:14:22.783" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:22.783" status="PASS" starttime="20171030 15:14:22.217"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:14:22.784" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:22.784" status="PASS" starttime="20171030 15:14:22.783"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:22.784" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:22.784" status="PASS" starttime="20171030 15:14:22.784"></status>
</kw>
<status endtime="20171030 15:14:22.785" status="PASS" starttime="20171030 15:14:22.213"></status>
</kw>
<status endtime="20171030 15:14:22.785" status="PASS" starttime="20171030 15:14:22.212"></status>
</kw>
<status endtime="20171030 15:14:22.785" status="PASS" starttime="20171030 15:14:22.212"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:14:22.785" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:14:22.786" status="PASS" starttime="20171030 15:14:22.785"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:22.788" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:22.788" status="PASS" starttime="20171030 15:14:22.787"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:22.789" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:22.789" status="PASS" starttime="20171030 15:14:22.789"></status>
</kw>
<status endtime="20171030 15:14:22.789" status="PASS" starttime="20171030 15:14:22.788"></status>
</kw>
<status endtime="20171030 15:14:22.789" status="PASS" starttime="20171030 15:14:22.786"></status>
</kw>
<status endtime="20171030 15:14:22.789" status="PASS" starttime="20171030 15:14:22.786"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:14:25.565" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:14:25.565" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:25.565" status="PASS" starttime="20171030 15:14:22.790"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:25.567" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:25.567" status="PASS" starttime="20171030 15:14:25.567"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:25.568" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:25.568" status="PASS" starttime="20171030 15:14:25.568"></status>
</kw>
<status endtime="20171030 15:14:25.569" status="PASS" starttime="20171030 15:14:25.568"></status>
</kw>
<status endtime="20171030 15:14:25.569" status="PASS" starttime="20171030 15:14:25.566"></status>
</kw>
<status endtime="20171030 15:14:25.569" status="PASS" starttime="20171030 15:14:25.566"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:14:25.569" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:14:25.569" status="PASS" starttime="20171030 15:14:25.569"></status>
</kw>
<msg timestamp="20171030 15:14:25.569" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:25.569" status="PASS" starttime="20171030 15:14:22.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:25.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:25.570" status="PASS" starttime="20171030 15:14:25.570"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:14:25.571" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:14:25.571" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:14:25.571" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:14:25.571" status="PASS" starttime="20171030 15:14:25.570"></status>
</kw>
<msg timestamp="20171030 15:14:25.571" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:14:25.571" status="PASS" starttime="20171030 15:14:22.210"></status>
</kw>
<msg timestamp="20171030 15:14:25.571" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:14:25.572" status="PASS" starttime="20171030 15:14:22.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:14:25.572" status="PASS" starttime="20171030 15:14:25.572"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:14:25.576" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:14:25.577" status="PASS" starttime="20171030 15:14:25.576"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:14:25.578" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:14:25.578" status="PASS" starttime="20171030 15:14:25.577"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:14:25.578" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:14:25.578" status="PASS" starttime="20171030 15:14:25.578"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:14:25.579" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:14:25.579" status="PASS" starttime="20171030 15:14:25.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:14:25.755" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:14:25.755" status="PASS" starttime="20171030 15:14:25.580"></status>
</kw>
<msg timestamp="20171030 15:14:25.756" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:14:25.756" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:25.756" status="PASS" starttime="20171030 15:14:25.579"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:14:25.757" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:25.757" status="PASS" starttime="20171030 15:14:25.756"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:25.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:25.757" status="PASS" starttime="20171030 15:14:25.757"></status>
</kw>
<status endtime="20171030 15:14:25.757" status="PASS" starttime="20171030 15:14:25.576"></status>
</kw>
<status endtime="20171030 15:14:25.758" status="PASS" starttime="20171030 15:14:25.575"></status>
</kw>
<status endtime="20171030 15:14:25.758" status="PASS" starttime="20171030 15:14:25.575"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:14:25.758" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:14:25.758" status="PASS" starttime="20171030 15:14:25.758"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:25.761" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:14:25.761" status="PASS" starttime="20171030 15:14:25.760"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:25.762" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:14:25.762" status="PASS" starttime="20171030 15:14:25.761"></status>
</kw>
<status endtime="20171030 15:14:25.762" status="PASS" starttime="20171030 15:14:25.761"></status>
</kw>
<status endtime="20171030 15:14:25.762" status="PASS" starttime="20171030 15:14:25.759"></status>
</kw>
<status endtime="20171030 15:14:25.762" status="PASS" starttime="20171030 15:14:25.759"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:14:26.215" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:14:26.215" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:26.215" status="PASS" starttime="20171030 15:14:25.762"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:26.217" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:26.217" status="PASS" starttime="20171030 15:14:26.217"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:26.218" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:26.219" status="PASS" starttime="20171030 15:14:26.218"></status>
</kw>
<status endtime="20171030 15:14:26.219" status="PASS" starttime="20171030 15:14:26.218"></status>
</kw>
<status endtime="20171030 15:14:26.219" status="PASS" starttime="20171030 15:14:26.216"></status>
</kw>
<status endtime="20171030 15:14:26.219" status="PASS" starttime="20171030 15:14:26.216"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:14:26.219" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:14:26.219" status="PASS" starttime="20171030 15:14:26.219"></status>
</kw>
<msg timestamp="20171030 15:14:26.220" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:26.220" status="PASS" starttime="20171030 15:14:25.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:26.220" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:26.220" status="PASS" starttime="20171030 15:14:26.220"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:14:26.221" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:14:26.221" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:14:26.221" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:14:26.221" status="PASS" starttime="20171030 15:14:26.221"></status>
</kw>
<msg timestamp="20171030 15:14:26.221" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:14:26.221" status="PASS" starttime="20171030 15:14:25.573"></status>
</kw>
<msg timestamp="20171030 15:14:26.222" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:14:26.222" status="PASS" starttime="20171030 15:14:25.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:14:26.222" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:14:26.222" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:14:26.222" status="FAIL" starttime="20171030 15:14:26.222"></status>
</kw>
<status endtime="20171030 15:14:26.223" status="FAIL" starttime="20171030 15:14:25.572"></status>
</kw>
<status endtime="20171030 15:14:26.223" status="FAIL" starttime="20171030 15:14:21.152"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:14:36.228" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:14:36.228" status="PASS" starttime="20171030 15:14:36.228"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:14:36.229" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:14:36.229" status="PASS" starttime="20171030 15:14:36.229"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:14:36.230" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:14:36.230" status="PASS" starttime="20171030 15:14:36.229"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:14:36.230" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:14:36.230" status="PASS" starttime="20171030 15:14:36.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:14:36.750" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:14:36.750" status="PASS" starttime="20171030 15:14:36.231"></status>
</kw>
<msg timestamp="20171030 15:14:36.750" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:14:36.750" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:36.750" status="PASS" starttime="20171030 15:14:36.231"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:14:36.751" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:36.751" status="PASS" starttime="20171030 15:14:36.750"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:36.752" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:36.752" status="PASS" starttime="20171030 15:14:36.751"></status>
</kw>
<status endtime="20171030 15:14:36.752" status="PASS" starttime="20171030 15:14:36.227"></status>
</kw>
<status endtime="20171030 15:14:36.752" status="PASS" starttime="20171030 15:14:36.227"></status>
</kw>
<status endtime="20171030 15:14:36.752" status="PASS" starttime="20171030 15:14:36.226"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:14:36.753" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:14:36.753" status="PASS" starttime="20171030 15:14:36.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:36.755" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:36.755" status="PASS" starttime="20171030 15:14:36.754"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:36.756" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:36.756" status="PASS" starttime="20171030 15:14:36.756"></status>
</kw>
<status endtime="20171030 15:14:36.756" status="PASS" starttime="20171030 15:14:36.755"></status>
</kw>
<status endtime="20171030 15:14:36.756" status="PASS" starttime="20171030 15:14:36.754"></status>
</kw>
<status endtime="20171030 15:14:36.756" status="PASS" starttime="20171030 15:14:36.753"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:14:36.820" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:14:36.820" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:36.820" status="PASS" starttime="20171030 15:14:36.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:36.822" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:36.822" status="PASS" starttime="20171030 15:14:36.822"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:36.823" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:36.823" status="PASS" starttime="20171030 15:14:36.823"></status>
</kw>
<status endtime="20171030 15:14:36.823" status="PASS" starttime="20171030 15:14:36.822"></status>
</kw>
<status endtime="20171030 15:14:36.823" status="PASS" starttime="20171030 15:14:36.821"></status>
</kw>
<status endtime="20171030 15:14:36.823" status="PASS" starttime="20171030 15:14:36.821"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:14:36.824" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:14:36.824" status="PASS" starttime="20171030 15:14:36.824"></status>
</kw>
<msg timestamp="20171030 15:14:36.824" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:36.824" status="PASS" starttime="20171030 15:14:36.225"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:36.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:36.825" status="PASS" starttime="20171030 15:14:36.824"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:14:36.825" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:14:36.825" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:14:36.826" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:14:36.826" status="PASS" starttime="20171030 15:14:36.825"></status>
</kw>
<msg timestamp="20171030 15:14:36.826" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:14:36.826" status="PASS" starttime="20171030 15:14:36.225"></status>
</kw>
<msg timestamp="20171030 15:14:36.826" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:14:36.826" status="PASS" starttime="20171030 15:14:36.224"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:14:36.827" status="PASS" starttime="20171030 15:14:36.827"></status>
</kw>
<status endtime="20171030 15:14:36.827" status="PASS" starttime="20171030 15:14:36.224"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:14:36.831" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:14:36.831" status="PASS" starttime="20171030 15:14:36.831"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:14:36.832" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:14:36.832" status="PASS" starttime="20171030 15:14:36.832"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:14:36.833" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:14:36.833" status="PASS" starttime="20171030 15:14:36.833"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:14:36.834" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:14:36.834" status="PASS" starttime="20171030 15:14:36.833"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:14:37.476" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:14:37.477" status="PASS" starttime="20171030 15:14:36.834"></status>
</kw>
<msg timestamp="20171030 15:14:37.477" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:14:37.477" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:37.477" status="PASS" starttime="20171030 15:14:36.834"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:14:37.477" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:37.478" status="PASS" starttime="20171030 15:14:37.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:37.478" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:37.478" status="PASS" starttime="20171030 15:14:37.478"></status>
</kw>
<status endtime="20171030 15:14:37.478" status="PASS" starttime="20171030 15:14:36.830"></status>
</kw>
<status endtime="20171030 15:14:37.478" status="PASS" starttime="20171030 15:14:36.829"></status>
</kw>
<status endtime="20171030 15:14:37.479" status="PASS" starttime="20171030 15:14:36.829"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:14:37.479" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:14:37.479" status="PASS" starttime="20171030 15:14:37.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:37.481" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:37.481" status="PASS" starttime="20171030 15:14:37.481"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:37.482" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:37.482" status="PASS" starttime="20171030 15:14:37.482"></status>
</kw>
<status endtime="20171030 15:14:37.482" status="PASS" starttime="20171030 15:14:37.481"></status>
</kw>
<status endtime="20171030 15:14:37.483" status="PASS" starttime="20171030 15:14:37.480"></status>
</kw>
<status endtime="20171030 15:14:37.483" status="PASS" starttime="20171030 15:14:37.479"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:14:37.631" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:14:37.631" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:37.631" status="PASS" starttime="20171030 15:14:37.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:37.633" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:37.633" status="PASS" starttime="20171030 15:14:37.633"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:37.634" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:37.634" status="PASS" starttime="20171030 15:14:37.634"></status>
</kw>
<status endtime="20171030 15:14:37.634" status="PASS" starttime="20171030 15:14:37.633"></status>
</kw>
<status endtime="20171030 15:14:37.634" status="PASS" starttime="20171030 15:14:37.632"></status>
</kw>
<status endtime="20171030 15:14:37.635" status="PASS" starttime="20171030 15:14:37.632"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:14:37.635" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:14:37.635" status="PASS" starttime="20171030 15:14:37.635"></status>
</kw>
<msg timestamp="20171030 15:14:37.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:37.635" status="PASS" starttime="20171030 15:14:36.828"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:37.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:37.636" status="PASS" starttime="20171030 15:14:37.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:14:37.637" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:14:37.637" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:14:37.637" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:14:37.637" status="PASS" starttime="20171030 15:14:37.636"></status>
</kw>
<msg timestamp="20171030 15:14:37.637" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:14:37.637" status="PASS" starttime="20171030 15:14:36.827"></status>
</kw>
<msg timestamp="20171030 15:14:37.637" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:14:37.637" status="PASS" starttime="20171030 15:14:36.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:14:37.638" status="PASS" starttime="20171030 15:14:37.638"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:14:37.642" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:14:37.643" status="PASS" starttime="20171030 15:14:37.642"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:14:37.643" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:14:37.643" status="PASS" starttime="20171030 15:14:37.643"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:14:37.645" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:14:37.645" status="PASS" starttime="20171030 15:14:37.644"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:14:37.646" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:14:37.646" status="PASS" starttime="20171030 15:14:37.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:14:38.496" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:14:38.496" status="PASS" starttime="20171030 15:14:37.647"></status>
</kw>
<msg timestamp="20171030 15:14:38.496" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:14:38.496" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:38.496" status="PASS" starttime="20171030 15:14:37.646"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:14:38.497" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:38.497" status="PASS" starttime="20171030 15:14:38.496"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:38.497" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:38.498" status="PASS" starttime="20171030 15:14:38.497"></status>
</kw>
<status endtime="20171030 15:14:38.498" status="PASS" starttime="20171030 15:14:37.641"></status>
</kw>
<status endtime="20171030 15:14:38.498" status="PASS" starttime="20171030 15:14:37.641"></status>
</kw>
<status endtime="20171030 15:14:38.498" status="PASS" starttime="20171030 15:14:37.640"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:14:38.498" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:14:38.498" status="PASS" starttime="20171030 15:14:38.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:38.501" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:14:38.501" status="PASS" starttime="20171030 15:14:38.500"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:38.502" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:14:38.502" status="PASS" starttime="20171030 15:14:38.502"></status>
</kw>
<status endtime="20171030 15:14:38.502" status="PASS" starttime="20171030 15:14:38.501"></status>
</kw>
<status endtime="20171030 15:14:38.502" status="PASS" starttime="20171030 15:14:38.499"></status>
</kw>
<status endtime="20171030 15:14:38.502" status="PASS" starttime="20171030 15:14:38.499"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:14:38.728" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:14:38.729" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:38.729" status="PASS" starttime="20171030 15:14:38.503"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:38.731" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:38.731" status="PASS" starttime="20171030 15:14:38.730"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:38.731" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:38.732" status="PASS" starttime="20171030 15:14:38.731"></status>
</kw>
<status endtime="20171030 15:14:38.732" status="PASS" starttime="20171030 15:14:38.731"></status>
</kw>
<status endtime="20171030 15:14:38.732" status="PASS" starttime="20171030 15:14:38.730"></status>
</kw>
<status endtime="20171030 15:14:38.732" status="PASS" starttime="20171030 15:14:38.729"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:14:38.732" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:14:38.732" status="PASS" starttime="20171030 15:14:38.732"></status>
</kw>
<msg timestamp="20171030 15:14:38.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:38.733" status="PASS" starttime="20171030 15:14:37.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:38.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:38.733" status="PASS" starttime="20171030 15:14:38.733"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:14:38.734" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:14:38.734" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:14:38.734" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:14:38.734" status="PASS" starttime="20171030 15:14:38.734"></status>
</kw>
<msg timestamp="20171030 15:14:38.734" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:14:38.734" status="PASS" starttime="20171030 15:14:37.639"></status>
</kw>
<msg timestamp="20171030 15:14:38.735" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:14:38.735" status="PASS" starttime="20171030 15:14:37.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:14:38.736" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:14:38.736" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:14:38.736" status="FAIL" starttime="20171030 15:14:38.735"></status>
</kw>
<status endtime="20171030 15:14:38.736" status="FAIL" starttime="20171030 15:14:37.638"></status>
</kw>
<status endtime="20171030 15:14:38.736" status="FAIL" starttime="20171030 15:14:36.223"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:14:48.741" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:14:48.742" status="PASS" starttime="20171030 15:14:48.741"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:14:48.742" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:14:48.742" status="PASS" starttime="20171030 15:14:48.742"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:14:48.743" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:14:48.743" status="PASS" starttime="20171030 15:14:48.742"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:14:48.743" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:14:48.743" status="PASS" starttime="20171030 15:14:48.743"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:14:49.403" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:14:49.403" status="PASS" starttime="20171030 15:14:48.745"></status>
</kw>
<msg timestamp="20171030 15:14:49.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:14:49.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:49.403" status="PASS" starttime="20171030 15:14:48.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:14:49.404" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:49.404" status="PASS" starttime="20171030 15:14:49.403"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:49.404" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:49.404" status="PASS" starttime="20171030 15:14:49.404"></status>
</kw>
<status endtime="20171030 15:14:49.405" status="PASS" starttime="20171030 15:14:48.740"></status>
</kw>
<status endtime="20171030 15:14:49.405" status="PASS" starttime="20171030 15:14:48.740"></status>
</kw>
<status endtime="20171030 15:14:49.405" status="PASS" starttime="20171030 15:14:48.739"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:14:49.405" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:14:49.405" status="PASS" starttime="20171030 15:14:49.405"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:49.408" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:49.408" status="PASS" starttime="20171030 15:14:49.407"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:49.409" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:49.409" status="PASS" starttime="20171030 15:14:49.408"></status>
</kw>
<status endtime="20171030 15:14:49.409" status="PASS" starttime="20171030 15:14:49.408"></status>
</kw>
<status endtime="20171030 15:14:49.409" status="PASS" starttime="20171030 15:14:49.406"></status>
</kw>
<status endtime="20171030 15:14:49.409" status="PASS" starttime="20171030 15:14:49.406"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:14:49.840" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:14:49.840" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:49.840" status="PASS" starttime="20171030 15:14:49.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:49.842" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:49.842" status="PASS" starttime="20171030 15:14:49.842"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:49.843" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:49.843" status="PASS" starttime="20171030 15:14:49.843"></status>
</kw>
<status endtime="20171030 15:14:49.843" status="PASS" starttime="20171030 15:14:49.843"></status>
</kw>
<status endtime="20171030 15:14:49.844" status="PASS" starttime="20171030 15:14:49.841"></status>
</kw>
<status endtime="20171030 15:14:49.844" status="PASS" starttime="20171030 15:14:49.841"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:14:49.844" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:14:49.844" status="PASS" starttime="20171030 15:14:49.844"></status>
</kw>
<msg timestamp="20171030 15:14:49.844" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:49.844" status="PASS" starttime="20171030 15:14:48.738"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:49.845" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:49.845" status="PASS" starttime="20171030 15:14:49.845"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:14:49.846" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:14:49.846" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:14:49.846" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:14:49.846" status="PASS" starttime="20171030 15:14:49.845"></status>
</kw>
<msg timestamp="20171030 15:14:49.846" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:14:49.846" status="PASS" starttime="20171030 15:14:48.738"></status>
</kw>
<msg timestamp="20171030 15:14:49.847" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:14:49.847" status="PASS" starttime="20171030 15:14:48.738"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:14:49.847" status="PASS" starttime="20171030 15:14:49.847"></status>
</kw>
<status endtime="20171030 15:14:49.847" status="PASS" starttime="20171030 15:14:48.737"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:14:49.853" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:14:49.853" status="PASS" starttime="20171030 15:14:49.851"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:14:49.854" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:14:49.854" status="PASS" starttime="20171030 15:14:49.853"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:14:49.854" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:14:49.854" status="PASS" starttime="20171030 15:14:49.854"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:14:49.855" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:14:49.855" status="PASS" starttime="20171030 15:14:49.855"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:14:50.366" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:14:50.366" status="PASS" starttime="20171030 15:14:49.856"></status>
</kw>
<msg timestamp="20171030 15:14:50.366" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:14:50.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:50.366" status="PASS" starttime="20171030 15:14:49.856"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:14:50.367" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:50.367" status="PASS" starttime="20171030 15:14:50.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:50.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:50.368" status="PASS" starttime="20171030 15:14:50.367"></status>
</kw>
<status endtime="20171030 15:14:50.368" status="PASS" starttime="20171030 15:14:49.850"></status>
</kw>
<status endtime="20171030 15:14:50.368" status="PASS" starttime="20171030 15:14:49.850"></status>
</kw>
<status endtime="20171030 15:14:50.368" status="PASS" starttime="20171030 15:14:49.849"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:14:50.369" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:14:50.369" status="PASS" starttime="20171030 15:14:50.368"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:50.371" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:50.371" status="PASS" starttime="20171030 15:14:50.370"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:50.372" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:14:50.372" status="PASS" starttime="20171030 15:14:50.372"></status>
</kw>
<status endtime="20171030 15:14:50.372" status="PASS" starttime="20171030 15:14:50.371"></status>
</kw>
<status endtime="20171030 15:14:50.372" status="PASS" starttime="20171030 15:14:50.370"></status>
</kw>
<status endtime="20171030 15:14:50.372" status="PASS" starttime="20171030 15:14:50.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:14:50.839" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:14:50.839" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:50.840" status="PASS" starttime="20171030 15:14:50.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:50.841" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:50.841" status="PASS" starttime="20171030 15:14:50.841"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:50.846" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:50.847" status="PASS" starttime="20171030 15:14:50.842"></status>
</kw>
<status endtime="20171030 15:14:50.847" status="PASS" starttime="20171030 15:14:50.842"></status>
</kw>
<status endtime="20171030 15:14:50.847" status="PASS" starttime="20171030 15:14:50.840"></status>
</kw>
<status endtime="20171030 15:14:50.847" status="PASS" starttime="20171030 15:14:50.840"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:14:50.847" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:14:50.847" status="PASS" starttime="20171030 15:14:50.847"></status>
</kw>
<msg timestamp="20171030 15:14:50.848" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:50.848" status="PASS" starttime="20171030 15:14:49.848"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:50.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:50.849" status="PASS" starttime="20171030 15:14:50.848"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:14:50.849" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:14:50.849" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:14:50.849" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:14:50.849" status="PASS" starttime="20171030 15:14:50.849"></status>
</kw>
<msg timestamp="20171030 15:14:50.850" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:14:50.850" status="PASS" starttime="20171030 15:14:49.848"></status>
</kw>
<msg timestamp="20171030 15:14:50.850" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:14:50.850" status="PASS" starttime="20171030 15:14:49.847"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:14:50.851" status="PASS" starttime="20171030 15:14:50.850"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:14:50.855" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:14:50.855" status="PASS" starttime="20171030 15:14:50.854"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:14:50.856" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:14:50.856" status="PASS" starttime="20171030 15:14:50.855"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:14:50.856" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:14:50.856" status="PASS" starttime="20171030 15:14:50.856"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:14:50.857" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:14:50.857" status="PASS" starttime="20171030 15:14:50.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:14:51.382" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:14:51.383" status="PASS" starttime="20171030 15:14:50.858"></status>
</kw>
<msg timestamp="20171030 15:14:51.383" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:14:51.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:51.383" status="PASS" starttime="20171030 15:14:50.857"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:14:51.384" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:51.384" status="PASS" starttime="20171030 15:14:51.383"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:51.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:51.385" status="PASS" starttime="20171030 15:14:51.384"></status>
</kw>
<status endtime="20171030 15:14:51.385" status="PASS" starttime="20171030 15:14:50.854"></status>
</kw>
<status endtime="20171030 15:14:51.385" status="PASS" starttime="20171030 15:14:50.853"></status>
</kw>
<status endtime="20171030 15:14:51.385" status="PASS" starttime="20171030 15:14:50.853"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:14:51.386" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:14:51.386" status="PASS" starttime="20171030 15:14:51.385"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:51.388" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:14:51.388" status="PASS" starttime="20171030 15:14:51.387"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:51.389" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:14:51.389" status="PASS" starttime="20171030 15:14:51.389"></status>
</kw>
<status endtime="20171030 15:14:51.389" status="PASS" starttime="20171030 15:14:51.388"></status>
</kw>
<status endtime="20171030 15:14:51.389" status="PASS" starttime="20171030 15:14:51.387"></status>
</kw>
<status endtime="20171030 15:14:51.389" status="PASS" starttime="20171030 15:14:51.386"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:14:51.859" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:14:51.859" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:51.859" status="PASS" starttime="20171030 15:14:51.390"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:14:51.861" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:51.861" status="PASS" starttime="20171030 15:14:51.861"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:14:51.862" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:14:51.862" status="PASS" starttime="20171030 15:14:51.862"></status>
</kw>
<status endtime="20171030 15:14:51.862" status="PASS" starttime="20171030 15:14:51.861"></status>
</kw>
<status endtime="20171030 15:14:51.862" status="PASS" starttime="20171030 15:14:51.860"></status>
</kw>
<status endtime="20171030 15:14:51.863" status="PASS" starttime="20171030 15:14:51.860"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:14:51.863" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:14:51.863" status="PASS" starttime="20171030 15:14:51.863"></status>
</kw>
<msg timestamp="20171030 15:14:51.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:14:51.863" status="PASS" starttime="20171030 15:14:50.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:14:51.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:14:51.864" status="PASS" starttime="20171030 15:14:51.864"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:14:51.865" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:14:51.865" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:14:51.865" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:14:51.865" status="PASS" starttime="20171030 15:14:51.864"></status>
</kw>
<msg timestamp="20171030 15:14:51.865" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:14:51.865" status="PASS" starttime="20171030 15:14:50.852"></status>
</kw>
<msg timestamp="20171030 15:14:51.865" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:14:51.865" status="PASS" starttime="20171030 15:14:50.851"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:14:51.866" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:14:51.866" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:14:51.866" status="FAIL" starttime="20171030 15:14:51.866"></status>
</kw>
<status endtime="20171030 15:14:51.866" status="FAIL" starttime="20171030 15:14:50.851"></status>
</kw>
<status endtime="20171030 15:14:51.866" status="FAIL" starttime="20171030 15:14:48.737"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:01.872" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:01.872" status="PASS" starttime="20171030 15:15:01.872"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:01.873" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:01.873" status="PASS" starttime="20171030 15:15:01.873"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:01.874" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:01.874" status="PASS" starttime="20171030 15:15:01.873"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:01.874" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:01.874" status="PASS" starttime="20171030 15:15:01.874"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:02.362" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:02.362" status="PASS" starttime="20171030 15:15:01.875"></status>
</kw>
<msg timestamp="20171030 15:15:02.362" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:02.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:02.362" status="PASS" starttime="20171030 15:15:01.875"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:02.363" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:02.363" status="PASS" starttime="20171030 15:15:02.362"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:02.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:02.363" status="PASS" starttime="20171030 15:15:02.363"></status>
</kw>
<status endtime="20171030 15:15:02.364" status="PASS" starttime="20171030 15:15:01.871"></status>
</kw>
<status endtime="20171030 15:15:02.364" status="PASS" starttime="20171030 15:15:01.870"></status>
</kw>
<status endtime="20171030 15:15:02.364" status="PASS" starttime="20171030 15:15:01.869"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:02.365" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:15:02.365" status="PASS" starttime="20171030 15:15:02.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:02.367" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:02.367" status="PASS" starttime="20171030 15:15:02.366"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:02.368" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:02.368" status="PASS" starttime="20171030 15:15:02.368"></status>
</kw>
<status endtime="20171030 15:15:02.368" status="PASS" starttime="20171030 15:15:02.367"></status>
</kw>
<status endtime="20171030 15:15:02.368" status="PASS" starttime="20171030 15:15:02.365"></status>
</kw>
<status endtime="20171030 15:15:02.368" status="PASS" starttime="20171030 15:15:02.365"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:02.438" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:15:02.438" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:02.438" status="PASS" starttime="20171030 15:15:02.368"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:02.440" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:02.440" status="PASS" starttime="20171030 15:15:02.440"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:02.442" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:02.442" status="PASS" starttime="20171030 15:15:02.441"></status>
</kw>
<status endtime="20171030 15:15:02.442" status="PASS" starttime="20171030 15:15:02.441"></status>
</kw>
<status endtime="20171030 15:15:02.442" status="PASS" starttime="20171030 15:15:02.439"></status>
</kw>
<status endtime="20171030 15:15:02.442" status="PASS" starttime="20171030 15:15:02.439"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:02.442" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:02.443" status="PASS" starttime="20171030 15:15:02.442"></status>
</kw>
<msg timestamp="20171030 15:15:02.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:02.443" status="PASS" starttime="20171030 15:15:01.869"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:02.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:02.443" status="PASS" starttime="20171030 15:15:02.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:02.444" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:02.444" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:02.444" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:15:02.444" status="PASS" starttime="20171030 15:15:02.444"></status>
</kw>
<msg timestamp="20171030 15:15:02.445" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:15:02.445" status="PASS" starttime="20171030 15:15:01.868"></status>
</kw>
<msg timestamp="20171030 15:15:02.445" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:15:02.445" status="PASS" starttime="20171030 15:15:01.868"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:15:02.445" status="PASS" starttime="20171030 15:15:02.445"></status>
</kw>
<status endtime="20171030 15:15:02.446" status="PASS" starttime="20171030 15:15:01.867"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:02.449" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:02.450" status="PASS" starttime="20171030 15:15:02.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:02.450" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:02.450" status="PASS" starttime="20171030 15:15:02.450"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:02.451" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:02.451" status="PASS" starttime="20171030 15:15:02.450"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:02.451" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:02.452" status="PASS" starttime="20171030 15:15:02.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:03.624" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:03.624" status="PASS" starttime="20171030 15:15:02.453"></status>
</kw>
<msg timestamp="20171030 15:15:03.624" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:03.625" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:03.625" status="PASS" starttime="20171030 15:15:02.452"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:03.625" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:03.625" status="PASS" starttime="20171030 15:15:03.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:03.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:03.626" status="PASS" starttime="20171030 15:15:03.626"></status>
</kw>
<status endtime="20171030 15:15:03.626" status="PASS" starttime="20171030 15:15:02.448"></status>
</kw>
<status endtime="20171030 15:15:03.626" status="PASS" starttime="20171030 15:15:02.448"></status>
</kw>
<status endtime="20171030 15:15:03.627" status="PASS" starttime="20171030 15:15:02.447"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:03.627" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:15:03.627" status="PASS" starttime="20171030 15:15:03.627"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:03.630" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:03.630" status="PASS" starttime="20171030 15:15:03.629"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:03.631" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:03.631" status="PASS" starttime="20171030 15:15:03.630"></status>
</kw>
<status endtime="20171030 15:15:03.631" status="PASS" starttime="20171030 15:15:03.630"></status>
</kw>
<status endtime="20171030 15:15:03.631" status="PASS" starttime="20171030 15:15:03.628"></status>
</kw>
<status endtime="20171030 15:15:03.631" status="PASS" starttime="20171030 15:15:03.628"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:03.719" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:15:03.719" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:03.720" status="PASS" starttime="20171030 15:15:03.631"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:03.721" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:03.721" status="PASS" starttime="20171030 15:15:03.721"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:03.722" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:03.722" status="PASS" starttime="20171030 15:15:03.722"></status>
</kw>
<status endtime="20171030 15:15:03.723" status="PASS" starttime="20171030 15:15:03.722"></status>
</kw>
<status endtime="20171030 15:15:03.723" status="PASS" starttime="20171030 15:15:03.720"></status>
</kw>
<status endtime="20171030 15:15:03.723" status="PASS" starttime="20171030 15:15:03.720"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:03.723" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:03.723" status="PASS" starttime="20171030 15:15:03.723"></status>
</kw>
<msg timestamp="20171030 15:15:03.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:03.723" status="PASS" starttime="20171030 15:15:02.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:03.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:03.724" status="PASS" starttime="20171030 15:15:03.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:03.725" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:03.725" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:03.725" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:15:03.725" status="PASS" starttime="20171030 15:15:03.724"></status>
</kw>
<msg timestamp="20171030 15:15:03.725" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:15:03.725" status="PASS" starttime="20171030 15:15:02.446"></status>
</kw>
<msg timestamp="20171030 15:15:03.726" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:15:03.726" status="PASS" starttime="20171030 15:15:02.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:15:03.726" status="PASS" starttime="20171030 15:15:03.726"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:03.730" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:03.731" status="PASS" starttime="20171030 15:15:03.730"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:03.731" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:03.731" status="PASS" starttime="20171030 15:15:03.731"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:03.732" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:03.732" status="PASS" starttime="20171030 15:15:03.731"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:03.732" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:03.732" status="PASS" starttime="20171030 15:15:03.732"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:04.181" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:04.181" status="PASS" starttime="20171030 15:15:03.733"></status>
</kw>
<msg timestamp="20171030 15:15:04.181" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:04.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:04.181" status="PASS" starttime="20171030 15:15:03.733"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:04.182" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:04.182" status="PASS" starttime="20171030 15:15:04.182"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:04.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:04.183" status="PASS" starttime="20171030 15:15:04.182"></status>
</kw>
<status endtime="20171030 15:15:04.183" status="PASS" starttime="20171030 15:15:03.729"></status>
</kw>
<status endtime="20171030 15:15:04.183" status="PASS" starttime="20171030 15:15:03.729"></status>
</kw>
<status endtime="20171030 15:15:04.183" status="PASS" starttime="20171030 15:15:03.728"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:04.184" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:15:04.184" status="PASS" starttime="20171030 15:15:04.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:04.187" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:15:04.187" status="PASS" starttime="20171030 15:15:04.186"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:04.188" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:15:04.189" status="PASS" starttime="20171030 15:15:04.188"></status>
</kw>
<status endtime="20171030 15:15:04.189" status="PASS" starttime="20171030 15:15:04.187"></status>
</kw>
<status endtime="20171030 15:15:04.189" status="PASS" starttime="20171030 15:15:04.185"></status>
</kw>
<status endtime="20171030 15:15:04.189" status="PASS" starttime="20171030 15:15:04.184"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:04.545" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:15:04.545" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:04.545" status="PASS" starttime="20171030 15:15:04.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:04.547" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:04.547" status="PASS" starttime="20171030 15:15:04.546"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:04.548" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:04.548" status="PASS" starttime="20171030 15:15:04.548"></status>
</kw>
<status endtime="20171030 15:15:04.548" status="PASS" starttime="20171030 15:15:04.547"></status>
</kw>
<status endtime="20171030 15:15:04.548" status="PASS" starttime="20171030 15:15:04.546"></status>
</kw>
<status endtime="20171030 15:15:04.548" status="PASS" starttime="20171030 15:15:04.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:04.549" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:04.549" status="PASS" starttime="20171030 15:15:04.549"></status>
</kw>
<msg timestamp="20171030 15:15:04.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:04.549" status="PASS" starttime="20171030 15:15:03.728"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:04.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:04.550" status="PASS" starttime="20171030 15:15:04.549"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:04.550" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:04.550" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:04.550" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:15:04.550" status="PASS" starttime="20171030 15:15:04.550"></status>
</kw>
<msg timestamp="20171030 15:15:04.551" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:04.551" status="PASS" starttime="20171030 15:15:03.727"></status>
</kw>
<msg timestamp="20171030 15:15:04.551" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:04.551" status="PASS" starttime="20171030 15:15:03.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:15:04.551" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:15:04.552" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:04.552" status="FAIL" starttime="20171030 15:15:04.551"></status>
</kw>
<status endtime="20171030 15:15:04.552" status="FAIL" starttime="20171030 15:15:03.726"></status>
</kw>
<status endtime="20171030 15:15:04.552" status="FAIL" starttime="20171030 15:15:01.867"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:14.558" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:14.558" status="PASS" starttime="20171030 15:15:14.557"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:14.559" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:14.559" status="PASS" starttime="20171030 15:15:14.558"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:14.559" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:14.559" status="PASS" starttime="20171030 15:15:14.559"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:14.560" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:14.560" status="PASS" starttime="20171030 15:15:14.560"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:14.918" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:14.918" status="PASS" starttime="20171030 15:15:14.561"></status>
</kw>
<msg timestamp="20171030 15:15:14.918" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:14.918" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:14.918" status="PASS" starttime="20171030 15:15:14.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:14.919" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:14.919" status="PASS" starttime="20171030 15:15:14.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:14.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:14.919" status="PASS" starttime="20171030 15:15:14.919"></status>
</kw>
<status endtime="20171030 15:15:14.920" status="PASS" starttime="20171030 15:15:14.557"></status>
</kw>
<status endtime="20171030 15:15:14.920" status="PASS" starttime="20171030 15:15:14.556"></status>
</kw>
<status endtime="20171030 15:15:14.920" status="PASS" starttime="20171030 15:15:14.555"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:14.920" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:15:14.920" status="PASS" starttime="20171030 15:15:14.920"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:14.923" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:14.923" status="PASS" starttime="20171030 15:15:14.922"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:14.923" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:14.924" status="PASS" starttime="20171030 15:15:14.923"></status>
</kw>
<status endtime="20171030 15:15:14.924" status="PASS" starttime="20171030 15:15:14.923"></status>
</kw>
<status endtime="20171030 15:15:14.924" status="PASS" starttime="20171030 15:15:14.921"></status>
</kw>
<status endtime="20171030 15:15:14.924" status="PASS" starttime="20171030 15:15:14.921"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:15.110" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:15:15.110" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:15.110" status="PASS" starttime="20171030 15:15:14.924"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:15.113" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:15.113" status="PASS" starttime="20171030 15:15:15.112"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:15.114" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:15.114" status="PASS" starttime="20171030 15:15:15.113"></status>
</kw>
<status endtime="20171030 15:15:15.114" status="PASS" starttime="20171030 15:15:15.113"></status>
</kw>
<status endtime="20171030 15:15:15.114" status="PASS" starttime="20171030 15:15:15.111"></status>
</kw>
<status endtime="20171030 15:15:15.114" status="PASS" starttime="20171030 15:15:15.111"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:15.114" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:15.115" status="PASS" starttime="20171030 15:15:15.114"></status>
</kw>
<msg timestamp="20171030 15:15:15.115" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:15.115" status="PASS" starttime="20171030 15:15:14.555"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:15.115" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:15.116" status="PASS" starttime="20171030 15:15:15.115"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:15.116" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:15.116" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:15.116" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:15:15.116" status="PASS" starttime="20171030 15:15:15.116"></status>
</kw>
<msg timestamp="20171030 15:15:15.117" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:15:15.117" status="PASS" starttime="20171030 15:15:14.554"></status>
</kw>
<msg timestamp="20171030 15:15:15.117" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:15:15.117" status="PASS" starttime="20171030 15:15:14.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:15:15.118" status="PASS" starttime="20171030 15:15:15.117"></status>
</kw>
<status endtime="20171030 15:15:15.118" status="PASS" starttime="20171030 15:15:14.553"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:15.121" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:15.122" status="PASS" starttime="20171030 15:15:15.121"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:15.122" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:15.122" status="PASS" starttime="20171030 15:15:15.122"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:15.123" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:15.123" status="PASS" starttime="20171030 15:15:15.123"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:15.124" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:15.124" status="PASS" starttime="20171030 15:15:15.123"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:15.468" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:15.468" status="PASS" starttime="20171030 15:15:15.124"></status>
</kw>
<msg timestamp="20171030 15:15:15.468" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:15.468" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:15.468" status="PASS" starttime="20171030 15:15:15.124"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:15.469" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:15.469" status="PASS" starttime="20171030 15:15:15.469"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:15.470" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:15.470" status="PASS" starttime="20171030 15:15:15.469"></status>
</kw>
<status endtime="20171030 15:15:15.470" status="PASS" starttime="20171030 15:15:15.121"></status>
</kw>
<status endtime="20171030 15:15:15.470" status="PASS" starttime="20171030 15:15:15.120"></status>
</kw>
<status endtime="20171030 15:15:15.470" status="PASS" starttime="20171030 15:15:15.119"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:15.471" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:15:15.471" status="PASS" starttime="20171030 15:15:15.470"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:15.473" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:15.473" status="PASS" starttime="20171030 15:15:15.472"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:15.474" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:15.474" status="PASS" starttime="20171030 15:15:15.474"></status>
</kw>
<status endtime="20171030 15:15:15.474" status="PASS" starttime="20171030 15:15:15.473"></status>
</kw>
<status endtime="20171030 15:15:15.474" status="PASS" starttime="20171030 15:15:15.471"></status>
</kw>
<status endtime="20171030 15:15:15.475" status="PASS" starttime="20171030 15:15:15.471"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:15.618" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:15:15.618" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:15.618" status="PASS" starttime="20171030 15:15:15.475"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:15.620" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:15.620" status="PASS" starttime="20171030 15:15:15.620"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:15.621" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:15.621" status="PASS" starttime="20171030 15:15:15.621"></status>
</kw>
<status endtime="20171030 15:15:15.621" status="PASS" starttime="20171030 15:15:15.620"></status>
</kw>
<status endtime="20171030 15:15:15.621" status="PASS" starttime="20171030 15:15:15.619"></status>
</kw>
<status endtime="20171030 15:15:15.621" status="PASS" starttime="20171030 15:15:15.619"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:15.622" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:15.622" status="PASS" starttime="20171030 15:15:15.622"></status>
</kw>
<msg timestamp="20171030 15:15:15.622" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:15.622" status="PASS" starttime="20171030 15:15:15.119"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:15.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:15.623" status="PASS" starttime="20171030 15:15:15.622"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:15.623" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:15.623" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:15.623" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:15:15.624" status="PASS" starttime="20171030 15:15:15.623"></status>
</kw>
<msg timestamp="20171030 15:15:15.624" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:15:15.624" status="PASS" starttime="20171030 15:15:15.118"></status>
</kw>
<msg timestamp="20171030 15:15:15.624" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:15:15.624" status="PASS" starttime="20171030 15:15:15.118"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:15:15.625" status="PASS" starttime="20171030 15:15:15.624"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:15.629" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:15.629" status="PASS" starttime="20171030 15:15:15.628"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:15.630" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:15.630" status="PASS" starttime="20171030 15:15:15.629"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:15.630" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:15.630" status="PASS" starttime="20171030 15:15:15.630"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:15.631" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:15.631" status="PASS" starttime="20171030 15:15:15.631"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:15.986" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:15.986" status="PASS" starttime="20171030 15:15:15.632"></status>
</kw>
<msg timestamp="20171030 15:15:15.986" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:15.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:15.986" status="PASS" starttime="20171030 15:15:15.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:15.987" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:15.987" status="PASS" starttime="20171030 15:15:15.987"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:15.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:15.988" status="PASS" starttime="20171030 15:15:15.987"></status>
</kw>
<status endtime="20171030 15:15:15.988" status="PASS" starttime="20171030 15:15:15.628"></status>
</kw>
<status endtime="20171030 15:15:15.988" status="PASS" starttime="20171030 15:15:15.627"></status>
</kw>
<status endtime="20171030 15:15:15.988" status="PASS" starttime="20171030 15:15:15.627"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:15.989" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:15:15.989" status="PASS" starttime="20171030 15:15:15.988"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:15.991" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:15:15.991" status="PASS" starttime="20171030 15:15:15.990"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:15.992" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:15:15.992" status="PASS" starttime="20171030 15:15:15.992"></status>
</kw>
<status endtime="20171030 15:15:15.992" status="PASS" starttime="20171030 15:15:15.991"></status>
</kw>
<status endtime="20171030 15:15:15.992" status="PASS" starttime="20171030 15:15:15.990"></status>
</kw>
<status endtime="20171030 15:15:15.992" status="PASS" starttime="20171030 15:15:15.989"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:16.153" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:15:16.153" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:16.153" status="PASS" starttime="20171030 15:15:15.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:16.155" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:16.155" status="PASS" starttime="20171030 15:15:16.154"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:16.156" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:16.156" status="PASS" starttime="20171030 15:15:16.156"></status>
</kw>
<status endtime="20171030 15:15:16.156" status="PASS" starttime="20171030 15:15:16.155"></status>
</kw>
<status endtime="20171030 15:15:16.156" status="PASS" starttime="20171030 15:15:16.154"></status>
</kw>
<status endtime="20171030 15:15:16.156" status="PASS" starttime="20171030 15:15:16.153"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:16.157" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:16.157" status="PASS" starttime="20171030 15:15:16.157"></status>
</kw>
<msg timestamp="20171030 15:15:16.157" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:16.157" status="PASS" starttime="20171030 15:15:15.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:16.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:16.158" status="PASS" starttime="20171030 15:15:16.157"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:16.158" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:16.159" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:16.159" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:15:16.159" status="PASS" starttime="20171030 15:15:16.158"></status>
</kw>
<msg timestamp="20171030 15:15:16.159" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:16.159" status="PASS" starttime="20171030 15:15:15.626"></status>
</kw>
<msg timestamp="20171030 15:15:16.159" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:16.159" status="PASS" starttime="20171030 15:15:15.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:15:16.160" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:15:16.160" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:16.160" status="FAIL" starttime="20171030 15:15:16.159"></status>
</kw>
<status endtime="20171030 15:15:16.160" status="FAIL" starttime="20171030 15:15:15.625"></status>
</kw>
<status endtime="20171030 15:15:16.160" status="FAIL" starttime="20171030 15:15:14.553"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:26.166" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:26.167" status="PASS" starttime="20171030 15:15:26.166"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:26.167" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:26.167" status="PASS" starttime="20171030 15:15:26.167"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:26.168" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:26.168" status="PASS" starttime="20171030 15:15:26.167"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:26.168" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:26.168" status="PASS" starttime="20171030 15:15:26.168"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:27.263" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:27.263" status="PASS" starttime="20171030 15:15:26.169"></status>
</kw>
<msg timestamp="20171030 15:15:27.263" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:27.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:27.263" status="PASS" starttime="20171030 15:15:26.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:27.264" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:27.264" status="PASS" starttime="20171030 15:15:27.264"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:27.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:27.265" status="PASS" starttime="20171030 15:15:27.265"></status>
</kw>
<status endtime="20171030 15:15:27.265" status="PASS" starttime="20171030 15:15:26.165"></status>
</kw>
<status endtime="20171030 15:15:27.265" status="PASS" starttime="20171030 15:15:26.165"></status>
</kw>
<status endtime="20171030 15:15:27.265" status="PASS" starttime="20171030 15:15:26.163"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:27.266" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:15:27.266" status="PASS" starttime="20171030 15:15:27.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:27.268" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:27.268" status="PASS" starttime="20171030 15:15:27.268"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:27.269" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:27.269" status="PASS" starttime="20171030 15:15:27.269"></status>
</kw>
<status endtime="20171030 15:15:27.270" status="PASS" starttime="20171030 15:15:27.269"></status>
</kw>
<status endtime="20171030 15:15:27.270" status="PASS" starttime="20171030 15:15:27.267"></status>
</kw>
<status endtime="20171030 15:15:27.270" status="PASS" starttime="20171030 15:15:27.267"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:27.333" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:15:27.334" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:27.334" status="PASS" starttime="20171030 15:15:27.270"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:27.336" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:27.336" status="PASS" starttime="20171030 15:15:27.335"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:27.337" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:27.337" status="PASS" starttime="20171030 15:15:27.337"></status>
</kw>
<status endtime="20171030 15:15:27.337" status="PASS" starttime="20171030 15:15:27.336"></status>
</kw>
<status endtime="20171030 15:15:27.337" status="PASS" starttime="20171030 15:15:27.334"></status>
</kw>
<status endtime="20171030 15:15:27.337" status="PASS" starttime="20171030 15:15:27.334"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:27.338" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:27.338" status="PASS" starttime="20171030 15:15:27.337"></status>
</kw>
<msg timestamp="20171030 15:15:27.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:27.338" status="PASS" starttime="20171030 15:15:26.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:27.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:27.339" status="PASS" starttime="20171030 15:15:27.338"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:27.339" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:27.339" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:27.339" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:15:27.339" status="PASS" starttime="20171030 15:15:27.339"></status>
</kw>
<msg timestamp="20171030 15:15:27.340" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:15:27.340" status="PASS" starttime="20171030 15:15:26.162"></status>
</kw>
<msg timestamp="20171030 15:15:27.340" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:15:27.340" status="PASS" starttime="20171030 15:15:26.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:15:27.341" status="PASS" starttime="20171030 15:15:27.340"></status>
</kw>
<status endtime="20171030 15:15:27.341" status="PASS" starttime="20171030 15:15:26.162"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:27.344" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:27.345" status="PASS" starttime="20171030 15:15:27.344"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:27.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:27.345" status="PASS" starttime="20171030 15:15:27.345"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:27.346" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:27.346" status="PASS" starttime="20171030 15:15:27.346"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:27.347" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:27.347" status="PASS" starttime="20171030 15:15:27.346"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:27.576" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:27.577" status="PASS" starttime="20171030 15:15:27.347"></status>
</kw>
<msg timestamp="20171030 15:15:27.577" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:27.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:27.577" status="PASS" starttime="20171030 15:15:27.347"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:27.577" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:27.578" status="PASS" starttime="20171030 15:15:27.577"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:27.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:27.578" status="PASS" starttime="20171030 15:15:27.578"></status>
</kw>
<status endtime="20171030 15:15:27.578" status="PASS" starttime="20171030 15:15:27.343"></status>
</kw>
<status endtime="20171030 15:15:27.578" status="PASS" starttime="20171030 15:15:27.343"></status>
</kw>
<status endtime="20171030 15:15:27.579" status="PASS" starttime="20171030 15:15:27.342"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:27.579" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:15:27.579" status="PASS" starttime="20171030 15:15:27.579"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:27.584" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:27.584" status="PASS" starttime="20171030 15:15:27.581"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:27.586" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:27.586" status="PASS" starttime="20171030 15:15:27.585"></status>
</kw>
<status endtime="20171030 15:15:27.586" status="PASS" starttime="20171030 15:15:27.585"></status>
</kw>
<status endtime="20171030 15:15:27.586" status="PASS" starttime="20171030 15:15:27.580"></status>
</kw>
<status endtime="20171030 15:15:27.586" status="PASS" starttime="20171030 15:15:27.580"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:27.692" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:15:27.692" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:27.692" status="PASS" starttime="20171030 15:15:27.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:27.694" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:27.694" status="PASS" starttime="20171030 15:15:27.694"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:27.695" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:27.695" status="PASS" starttime="20171030 15:15:27.695"></status>
</kw>
<status endtime="20171030 15:15:27.695" status="PASS" starttime="20171030 15:15:27.694"></status>
</kw>
<status endtime="20171030 15:15:27.696" status="PASS" starttime="20171030 15:15:27.693"></status>
</kw>
<status endtime="20171030 15:15:27.696" status="PASS" starttime="20171030 15:15:27.693"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:27.696" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:27.696" status="PASS" starttime="20171030 15:15:27.696"></status>
</kw>
<msg timestamp="20171030 15:15:27.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:27.696" status="PASS" starttime="20171030 15:15:27.342"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:27.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:27.697" status="PASS" starttime="20171030 15:15:27.697"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:27.698" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:27.698" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:27.698" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:15:27.698" status="PASS" starttime="20171030 15:15:27.697"></status>
</kw>
<msg timestamp="20171030 15:15:27.698" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:15:27.698" status="PASS" starttime="20171030 15:15:27.341"></status>
</kw>
<msg timestamp="20171030 15:15:27.698" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:15:27.698" status="PASS" starttime="20171030 15:15:27.341"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:15:27.699" status="PASS" starttime="20171030 15:15:27.699"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:27.703" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:27.703" status="PASS" starttime="20171030 15:15:27.703"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:27.704" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:27.704" status="PASS" starttime="20171030 15:15:27.704"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:27.705" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:27.705" status="PASS" starttime="20171030 15:15:27.704"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:27.705" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:27.705" status="PASS" starttime="20171030 15:15:27.705"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:28.462" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:28.462" status="PASS" starttime="20171030 15:15:27.706"></status>
</kw>
<msg timestamp="20171030 15:15:28.462" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:28.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:28.462" status="PASS" starttime="20171030 15:15:27.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:28.463" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:28.463" status="PASS" starttime="20171030 15:15:28.463"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:28.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:28.464" status="PASS" starttime="20171030 15:15:28.464"></status>
</kw>
<status endtime="20171030 15:15:28.464" status="PASS" starttime="20171030 15:15:27.702"></status>
</kw>
<status endtime="20171030 15:15:28.464" status="PASS" starttime="20171030 15:15:27.702"></status>
</kw>
<status endtime="20171030 15:15:28.464" status="PASS" starttime="20171030 15:15:27.701"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:28.465" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:15:28.465" status="PASS" starttime="20171030 15:15:28.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:28.467" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:15:28.467" status="PASS" starttime="20171030 15:15:28.467"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:28.468" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:15:28.468" status="PASS" starttime="20171030 15:15:28.468"></status>
</kw>
<status endtime="20171030 15:15:28.468" status="PASS" starttime="20171030 15:15:28.467"></status>
</kw>
<status endtime="20171030 15:15:28.469" status="PASS" starttime="20171030 15:15:28.466"></status>
</kw>
<status endtime="20171030 15:15:28.469" status="PASS" starttime="20171030 15:15:28.465"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:28.573" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:15:28.573" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:28.573" status="PASS" starttime="20171030 15:15:28.469"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:28.575" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:28.575" status="PASS" starttime="20171030 15:15:28.574"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:28.576" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:28.576" status="PASS" starttime="20171030 15:15:28.576"></status>
</kw>
<status endtime="20171030 15:15:28.576" status="PASS" starttime="20171030 15:15:28.575"></status>
</kw>
<status endtime="20171030 15:15:28.576" status="PASS" starttime="20171030 15:15:28.574"></status>
</kw>
<status endtime="20171030 15:15:28.576" status="PASS" starttime="20171030 15:15:28.573"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:28.577" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:28.577" status="PASS" starttime="20171030 15:15:28.577"></status>
</kw>
<msg timestamp="20171030 15:15:28.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:28.577" status="PASS" starttime="20171030 15:15:27.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:28.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:28.578" status="PASS" starttime="20171030 15:15:28.577"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:28.578" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:28.578" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:28.579" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:15:28.579" status="PASS" starttime="20171030 15:15:28.578"></status>
</kw>
<msg timestamp="20171030 15:15:28.579" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:28.579" status="PASS" starttime="20171030 15:15:27.700"></status>
</kw>
<msg timestamp="20171030 15:15:28.579" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:28.579" status="PASS" starttime="20171030 15:15:27.699"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:15:28.580" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:15:28.580" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:28.580" status="FAIL" starttime="20171030 15:15:28.579"></status>
</kw>
<status endtime="20171030 15:15:28.580" status="FAIL" starttime="20171030 15:15:27.699"></status>
</kw>
<status endtime="20171030 15:15:28.580" status="FAIL" starttime="20171030 15:15:26.161"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:38.586" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:38.586" status="PASS" starttime="20171030 15:15:38.586"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:38.587" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:38.587" status="PASS" starttime="20171030 15:15:38.587"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:38.588" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:38.588" status="PASS" starttime="20171030 15:15:38.587"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:38.588" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:38.588" status="PASS" starttime="20171030 15:15:38.588"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:38.780" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:38.780" status="PASS" starttime="20171030 15:15:38.589"></status>
</kw>
<msg timestamp="20171030 15:15:38.781" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:38.781" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:38.781" status="PASS" starttime="20171030 15:15:38.589"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:38.782" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:38.782" status="PASS" starttime="20171030 15:15:38.781"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:38.783" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:38.784" status="PASS" starttime="20171030 15:15:38.782"></status>
</kw>
<status endtime="20171030 15:15:38.784" status="PASS" starttime="20171030 15:15:38.585"></status>
</kw>
<status endtime="20171030 15:15:38.784" status="PASS" starttime="20171030 15:15:38.585"></status>
</kw>
<status endtime="20171030 15:15:38.784" status="PASS" starttime="20171030 15:15:38.583"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:38.784" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:15:38.784" status="PASS" starttime="20171030 15:15:38.784"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:38.787" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:38.787" status="PASS" starttime="20171030 15:15:38.786"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:38.788" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:38.788" status="PASS" starttime="20171030 15:15:38.787"></status>
</kw>
<status endtime="20171030 15:15:38.788" status="PASS" starttime="20171030 15:15:38.787"></status>
</kw>
<status endtime="20171030 15:15:38.788" status="PASS" starttime="20171030 15:15:38.785"></status>
</kw>
<status endtime="20171030 15:15:38.788" status="PASS" starttime="20171030 15:15:38.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:38.852" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:15:38.852" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:38.852" status="PASS" starttime="20171030 15:15:38.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:38.854" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:38.854" status="PASS" starttime="20171030 15:15:38.854"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:38.855" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:38.855" status="PASS" starttime="20171030 15:15:38.855"></status>
</kw>
<status endtime="20171030 15:15:38.856" status="PASS" starttime="20171030 15:15:38.855"></status>
</kw>
<status endtime="20171030 15:15:38.856" status="PASS" starttime="20171030 15:15:38.853"></status>
</kw>
<status endtime="20171030 15:15:38.856" status="PASS" starttime="20171030 15:15:38.853"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:38.856" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:38.856" status="PASS" starttime="20171030 15:15:38.856"></status>
</kw>
<msg timestamp="20171030 15:15:38.856" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:38.857" status="PASS" starttime="20171030 15:15:38.583"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:38.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:38.857" status="PASS" starttime="20171030 15:15:38.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:38.858" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:38.858" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:38.858" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:15:38.858" status="PASS" starttime="20171030 15:15:38.857"></status>
</kw>
<msg timestamp="20171030 15:15:38.858" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:15:38.858" status="PASS" starttime="20171030 15:15:38.582"></status>
</kw>
<msg timestamp="20171030 15:15:38.859" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:15:38.859" status="PASS" starttime="20171030 15:15:38.582"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:15:38.859" status="PASS" starttime="20171030 15:15:38.859"></status>
</kw>
<status endtime="20171030 15:15:38.859" status="PASS" starttime="20171030 15:15:38.581"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:38.863" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:38.863" status="PASS" starttime="20171030 15:15:38.862"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:38.864" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:38.864" status="PASS" starttime="20171030 15:15:38.863"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:38.864" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:38.864" status="PASS" starttime="20171030 15:15:38.864"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:38.865" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:38.865" status="PASS" starttime="20171030 15:15:38.865"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:39.078" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:39.078" status="PASS" starttime="20171030 15:15:38.866"></status>
</kw>
<msg timestamp="20171030 15:15:39.078" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:39.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:39.078" status="PASS" starttime="20171030 15:15:38.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:39.079" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:39.079" status="PASS" starttime="20171030 15:15:39.079"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:39.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:39.080" status="PASS" starttime="20171030 15:15:39.079"></status>
</kw>
<status endtime="20171030 15:15:39.080" status="PASS" starttime="20171030 15:15:38.862"></status>
</kw>
<status endtime="20171030 15:15:39.080" status="PASS" starttime="20171030 15:15:38.862"></status>
</kw>
<status endtime="20171030 15:15:39.080" status="PASS" starttime="20171030 15:15:38.861"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:39.081" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:15:39.081" status="PASS" starttime="20171030 15:15:39.080"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:39.085" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:39.085" status="PASS" starttime="20171030 15:15:39.084"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:39.086" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:39.086" status="PASS" starttime="20171030 15:15:39.085"></status>
</kw>
<status endtime="20171030 15:15:39.086" status="PASS" starttime="20171030 15:15:39.085"></status>
</kw>
<status endtime="20171030 15:15:39.086" status="PASS" starttime="20171030 15:15:39.081"></status>
</kw>
<status endtime="20171030 15:15:39.086" status="PASS" starttime="20171030 15:15:39.081"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:39.282" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:15:39.283" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:39.283" status="PASS" starttime="20171030 15:15:39.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:39.285" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:39.285" status="PASS" starttime="20171030 15:15:39.284"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:39.286" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:39.286" status="PASS" starttime="20171030 15:15:39.286"></status>
</kw>
<status endtime="20171030 15:15:39.286" status="PASS" starttime="20171030 15:15:39.285"></status>
</kw>
<status endtime="20171030 15:15:39.286" status="PASS" starttime="20171030 15:15:39.284"></status>
</kw>
<status endtime="20171030 15:15:39.286" status="PASS" starttime="20171030 15:15:39.283"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:39.287" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:39.287" status="PASS" starttime="20171030 15:15:39.287"></status>
</kw>
<msg timestamp="20171030 15:15:39.287" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:39.287" status="PASS" starttime="20171030 15:15:38.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:39.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:39.288" status="PASS" starttime="20171030 15:15:39.287"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:39.288" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:39.288" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:39.289" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:15:39.289" status="PASS" starttime="20171030 15:15:39.288"></status>
</kw>
<msg timestamp="20171030 15:15:39.289" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:15:39.289" status="PASS" starttime="20171030 15:15:38.860"></status>
</kw>
<msg timestamp="20171030 15:15:39.289" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:15:39.289" status="PASS" starttime="20171030 15:15:38.859"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:15:39.290" status="PASS" starttime="20171030 15:15:39.290"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:39.294" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:39.294" status="PASS" starttime="20171030 15:15:39.294"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:39.295" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:39.295" status="PASS" starttime="20171030 15:15:39.295"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:39.296" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:39.296" status="PASS" starttime="20171030 15:15:39.295"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:39.296" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:39.296" status="PASS" starttime="20171030 15:15:39.296"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:39.486" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:39.486" status="PASS" starttime="20171030 15:15:39.297"></status>
</kw>
<msg timestamp="20171030 15:15:39.486" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:39.487" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:39.487" status="PASS" starttime="20171030 15:15:39.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:39.487" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:39.487" status="PASS" starttime="20171030 15:15:39.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:39.488" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:39.488" status="PASS" starttime="20171030 15:15:39.488"></status>
</kw>
<status endtime="20171030 15:15:39.488" status="PASS" starttime="20171030 15:15:39.293"></status>
</kw>
<status endtime="20171030 15:15:39.488" status="PASS" starttime="20171030 15:15:39.293"></status>
</kw>
<status endtime="20171030 15:15:39.488" status="PASS" starttime="20171030 15:15:39.292"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:39.489" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:15:39.489" status="PASS" starttime="20171030 15:15:39.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:39.491" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:15:39.491" status="PASS" starttime="20171030 15:15:39.491"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:39.492" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:15:39.492" status="PASS" starttime="20171030 15:15:39.492"></status>
</kw>
<status endtime="20171030 15:15:39.493" status="PASS" starttime="20171030 15:15:39.491"></status>
</kw>
<status endtime="20171030 15:15:39.493" status="PASS" starttime="20171030 15:15:39.490"></status>
</kw>
<status endtime="20171030 15:15:39.493" status="PASS" starttime="20171030 15:15:39.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:39.651" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:15:39.651" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:39.651" status="PASS" starttime="20171030 15:15:39.493"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:39.653" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:39.653" status="PASS" starttime="20171030 15:15:39.653"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:39.654" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:39.654" status="PASS" starttime="20171030 15:15:39.654"></status>
</kw>
<status endtime="20171030 15:15:39.654" status="PASS" starttime="20171030 15:15:39.653"></status>
</kw>
<status endtime="20171030 15:15:39.655" status="PASS" starttime="20171030 15:15:39.652"></status>
</kw>
<status endtime="20171030 15:15:39.655" status="PASS" starttime="20171030 15:15:39.652"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:39.655" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:39.655" status="PASS" starttime="20171030 15:15:39.655"></status>
</kw>
<msg timestamp="20171030 15:15:39.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:39.655" status="PASS" starttime="20171030 15:15:39.291"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:39.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:39.656" status="PASS" starttime="20171030 15:15:39.656"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:39.657" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:39.657" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:39.657" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:15:39.657" status="PASS" starttime="20171030 15:15:39.656"></status>
</kw>
<msg timestamp="20171030 15:15:39.657" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:39.657" status="PASS" starttime="20171030 15:15:39.291"></status>
</kw>
<msg timestamp="20171030 15:15:39.657" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:39.657" status="PASS" starttime="20171030 15:15:39.290"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:15:39.658" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:15:39.658" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:39.658" status="FAIL" starttime="20171030 15:15:39.658"></status>
</kw>
<status endtime="20171030 15:15:39.658" status="FAIL" starttime="20171030 15:15:39.290"></status>
</kw>
<status endtime="20171030 15:15:39.659" status="FAIL" starttime="20171030 15:15:38.581"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:49.664" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:49.664" status="PASS" starttime="20171030 15:15:49.664"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:49.665" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:49.665" status="PASS" starttime="20171030 15:15:49.665"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:49.666" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:49.666" status="PASS" starttime="20171030 15:15:49.665"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:49.667" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:49.667" status="PASS" starttime="20171030 15:15:49.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:49.954" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:49.954" status="PASS" starttime="20171030 15:15:49.667"></status>
</kw>
<msg timestamp="20171030 15:15:49.954" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:49.954" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:49.954" status="PASS" starttime="20171030 15:15:49.667"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:49.955" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:49.955" status="PASS" starttime="20171030 15:15:49.954"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:49.955" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:49.955" status="PASS" starttime="20171030 15:15:49.955"></status>
</kw>
<status endtime="20171030 15:15:49.956" status="PASS" starttime="20171030 15:15:49.663"></status>
</kw>
<status endtime="20171030 15:15:49.956" status="PASS" starttime="20171030 15:15:49.662"></status>
</kw>
<status endtime="20171030 15:15:49.956" status="PASS" starttime="20171030 15:15:49.662"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:49.956" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:15:49.957" status="PASS" starttime="20171030 15:15:49.956"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:49.959" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:49.959" status="PASS" starttime="20171030 15:15:49.958"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:49.959" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:49.960" status="PASS" starttime="20171030 15:15:49.959"></status>
</kw>
<status endtime="20171030 15:15:49.960" status="PASS" starttime="20171030 15:15:49.959"></status>
</kw>
<status endtime="20171030 15:15:49.960" status="PASS" starttime="20171030 15:15:49.957"></status>
</kw>
<status endtime="20171030 15:15:49.960" status="PASS" starttime="20171030 15:15:49.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:50.024" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:15:50.024" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:50.024" status="PASS" starttime="20171030 15:15:49.960"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:50.027" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:50.027" status="PASS" starttime="20171030 15:15:50.026"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:50.027" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:50.028" status="PASS" starttime="20171030 15:15:50.027"></status>
</kw>
<status endtime="20171030 15:15:50.028" status="PASS" starttime="20171030 15:15:50.027"></status>
</kw>
<status endtime="20171030 15:15:50.028" status="PASS" starttime="20171030 15:15:50.025"></status>
</kw>
<status endtime="20171030 15:15:50.028" status="PASS" starttime="20171030 15:15:50.025"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:50.028" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:50.028" status="PASS" starttime="20171030 15:15:50.028"></status>
</kw>
<msg timestamp="20171030 15:15:50.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:50.029" status="PASS" starttime="20171030 15:15:49.661"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:50.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:50.029" status="PASS" starttime="20171030 15:15:50.029"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:50.030" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:50.030" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:50.030" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:15:50.030" status="PASS" starttime="20171030 15:15:50.030"></status>
</kw>
<msg timestamp="20171030 15:15:50.030" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:15:50.030" status="PASS" starttime="20171030 15:15:49.660"></status>
</kw>
<msg timestamp="20171030 15:15:50.031" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:15:50.031" status="PASS" starttime="20171030 15:15:49.660"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:15:50.031" status="PASS" starttime="20171030 15:15:50.031"></status>
</kw>
<status endtime="20171030 15:15:50.031" status="PASS" starttime="20171030 15:15:49.660"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:50.035" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:50.035" status="PASS" starttime="20171030 15:15:50.035"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:50.036" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:50.036" status="PASS" starttime="20171030 15:15:50.036"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:50.037" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:50.037" status="PASS" starttime="20171030 15:15:50.036"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:50.037" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:50.037" status="PASS" starttime="20171030 15:15:50.037"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:50.285" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:50.285" status="PASS" starttime="20171030 15:15:50.038"></status>
</kw>
<msg timestamp="20171030 15:15:50.285" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:50.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:50.286" status="PASS" starttime="20171030 15:15:50.038"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:50.286" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:50.286" status="PASS" starttime="20171030 15:15:50.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:50.287" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:50.287" status="PASS" starttime="20171030 15:15:50.287"></status>
</kw>
<status endtime="20171030 15:15:50.287" status="PASS" starttime="20171030 15:15:50.034"></status>
</kw>
<status endtime="20171030 15:15:50.287" status="PASS" starttime="20171030 15:15:50.034"></status>
</kw>
<status endtime="20171030 15:15:50.287" status="PASS" starttime="20171030 15:15:50.033"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:50.288" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:15:50.288" status="PASS" starttime="20171030 15:15:50.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:50.291" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:50.291" status="PASS" starttime="20171030 15:15:50.290"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:50.292" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:15:50.292" status="PASS" starttime="20171030 15:15:50.292"></status>
</kw>
<status endtime="20171030 15:15:50.292" status="PASS" starttime="20171030 15:15:50.291"></status>
</kw>
<status endtime="20171030 15:15:50.292" status="PASS" starttime="20171030 15:15:50.289"></status>
</kw>
<status endtime="20171030 15:15:50.292" status="PASS" starttime="20171030 15:15:50.289"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:50.403" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:15:50.403" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:50.403" status="PASS" starttime="20171030 15:15:50.292"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:50.405" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:50.405" status="PASS" starttime="20171030 15:15:50.404"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:50.406" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:50.406" status="PASS" starttime="20171030 15:15:50.405"></status>
</kw>
<status endtime="20171030 15:15:50.406" status="PASS" starttime="20171030 15:15:50.405"></status>
</kw>
<status endtime="20171030 15:15:50.406" status="PASS" starttime="20171030 15:15:50.404"></status>
</kw>
<status endtime="20171030 15:15:50.406" status="PASS" starttime="20171030 15:15:50.403"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:50.406" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:50.407" status="PASS" starttime="20171030 15:15:50.406"></status>
</kw>
<msg timestamp="20171030 15:15:50.407" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:50.407" status="PASS" starttime="20171030 15:15:50.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:50.407" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:50.407" status="PASS" starttime="20171030 15:15:50.407"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:50.408" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:50.408" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:50.408" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:15:50.408" status="PASS" starttime="20171030 15:15:50.408"></status>
</kw>
<msg timestamp="20171030 15:15:50.408" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:15:50.408" status="PASS" starttime="20171030 15:15:50.032"></status>
</kw>
<msg timestamp="20171030 15:15:50.409" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:15:50.409" status="PASS" starttime="20171030 15:15:50.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:15:50.409" status="PASS" starttime="20171030 15:15:50.409"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:15:50.413" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:15:50.414" status="PASS" starttime="20171030 15:15:50.413"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:15:50.414" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:15:50.414" status="PASS" starttime="20171030 15:15:50.414"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:15:50.415" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:15:50.415" status="PASS" starttime="20171030 15:15:50.415"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:15:50.416" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:15:50.416" status="PASS" starttime="20171030 15:15:50.415"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:15:50.633" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:15:50.633" status="PASS" starttime="20171030 15:15:50.416"></status>
</kw>
<msg timestamp="20171030 15:15:50.633" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:15:50.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:50.633" status="PASS" starttime="20171030 15:15:50.416"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:15:50.634" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:50.634" status="PASS" starttime="20171030 15:15:50.634"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:50.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:50.635" status="PASS" starttime="20171030 15:15:50.634"></status>
</kw>
<status endtime="20171030 15:15:50.635" status="PASS" starttime="20171030 15:15:50.412"></status>
</kw>
<status endtime="20171030 15:15:50.635" status="PASS" starttime="20171030 15:15:50.412"></status>
</kw>
<status endtime="20171030 15:15:50.635" status="PASS" starttime="20171030 15:15:50.411"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:15:50.636" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:15:50.636" status="PASS" starttime="20171030 15:15:50.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:50.638" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:15:50.638" status="PASS" starttime="20171030 15:15:50.637"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:50.639" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:15:50.639" status="PASS" starttime="20171030 15:15:50.639"></status>
</kw>
<status endtime="20171030 15:15:50.639" status="PASS" starttime="20171030 15:15:50.638"></status>
</kw>
<status endtime="20171030 15:15:50.639" status="PASS" starttime="20171030 15:15:50.637"></status>
</kw>
<status endtime="20171030 15:15:50.639" status="PASS" starttime="20171030 15:15:50.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:15:50.755" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:15:50.755" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:50.755" status="PASS" starttime="20171030 15:15:50.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:15:50.757" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:50.758" status="PASS" starttime="20171030 15:15:50.757"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:15:50.758" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:15:50.759" status="PASS" starttime="20171030 15:15:50.758"></status>
</kw>
<status endtime="20171030 15:15:50.759" status="PASS" starttime="20171030 15:15:50.758"></status>
</kw>
<status endtime="20171030 15:15:50.759" status="PASS" starttime="20171030 15:15:50.756"></status>
</kw>
<status endtime="20171030 15:15:50.759" status="PASS" starttime="20171030 15:15:50.756"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:15:50.759" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:15:50.759" status="PASS" starttime="20171030 15:15:50.759"></status>
</kw>
<msg timestamp="20171030 15:15:50.760" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:15:50.760" status="PASS" starttime="20171030 15:15:50.411"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:15:50.760" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:15:50.760" status="PASS" starttime="20171030 15:15:50.760"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:15:50.761" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:15:50.761" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:15:50.761" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:15:50.761" status="PASS" starttime="20171030 15:15:50.761"></status>
</kw>
<msg timestamp="20171030 15:15:50.761" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:50.761" status="PASS" starttime="20171030 15:15:50.410"></status>
</kw>
<msg timestamp="20171030 15:15:50.762" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:50.762" status="PASS" starttime="20171030 15:15:50.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:15:50.762" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:15:50.762" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:15:50.762" status="FAIL" starttime="20171030 15:15:50.762"></status>
</kw>
<status endtime="20171030 15:15:50.763" status="FAIL" starttime="20171030 15:15:50.409"></status>
</kw>
<status endtime="20171030 15:15:50.763" status="FAIL" starttime="20171030 15:15:49.659"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:00.769" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:00.770" status="PASS" starttime="20171030 15:16:00.769"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:00.771" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:00.771" status="PASS" starttime="20171030 15:16:00.770"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:00.772" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:00.772" status="PASS" starttime="20171030 15:16:00.771"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:00.773" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:00.773" status="PASS" starttime="20171030 15:16:00.772"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.074" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:01.075" status="PASS" starttime="20171030 15:16:00.774"></status>
</kw>
<msg timestamp="20171030 15:16:01.075" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:01.075" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:01.075" status="PASS" starttime="20171030 15:16:00.773"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.076" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:01.076" status="PASS" starttime="20171030 15:16:01.075"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:01.077" status="PASS" starttime="20171030 15:16:01.076"></status>
</kw>
<status endtime="20171030 15:16:01.077" status="PASS" starttime="20171030 15:16:00.768"></status>
</kw>
<status endtime="20171030 15:16:01.077" status="PASS" starttime="20171030 15:16:00.767"></status>
</kw>
<status endtime="20171030 15:16:01.077" status="PASS" starttime="20171030 15:16:00.766"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:01.078" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:16:01.078" status="PASS" starttime="20171030 15:16:01.077"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:01.080" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:01.080" status="PASS" starttime="20171030 15:16:01.079"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:01.081" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:01.081" status="PASS" starttime="20171030 15:16:01.081"></status>
</kw>
<status endtime="20171030 15:16:01.081" status="PASS" starttime="20171030 15:16:01.080"></status>
</kw>
<status endtime="20171030 15:16:01.081" status="PASS" starttime="20171030 15:16:01.078"></status>
</kw>
<status endtime="20171030 15:16:01.081" status="PASS" starttime="20171030 15:16:01.078"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:01.170" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:16:01.170" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:01.170" status="PASS" starttime="20171030 15:16:01.081"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:01.173" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:01.173" status="PASS" starttime="20171030 15:16:01.172"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:01.173" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:01.174" status="PASS" starttime="20171030 15:16:01.173"></status>
</kw>
<status endtime="20171030 15:16:01.174" status="PASS" starttime="20171030 15:16:01.173"></status>
</kw>
<status endtime="20171030 15:16:01.174" status="PASS" starttime="20171030 15:16:01.171"></status>
</kw>
<status endtime="20171030 15:16:01.174" status="PASS" starttime="20171030 15:16:01.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:01.174" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:01.174" status="PASS" starttime="20171030 15:16:01.174"></status>
</kw>
<msg timestamp="20171030 15:16:01.175" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:01.175" status="PASS" starttime="20171030 15:16:00.765"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.175" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:01.175" status="PASS" starttime="20171030 15:16:01.175"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:01.176" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:01.176" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:01.176" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:16:01.177" status="PASS" starttime="20171030 15:16:01.176"></status>
</kw>
<msg timestamp="20171030 15:16:01.177" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:16:01.177" status="PASS" starttime="20171030 15:16:00.765"></status>
</kw>
<msg timestamp="20171030 15:16:01.177" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:16:01.177" status="PASS" starttime="20171030 15:16:00.764"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:16:01.178" status="PASS" starttime="20171030 15:16:01.178"></status>
</kw>
<status endtime="20171030 15:16:01.178" status="PASS" starttime="20171030 15:16:00.764"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:01.182" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:01.183" status="PASS" starttime="20171030 15:16:01.182"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:01.183" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:01.183" status="PASS" starttime="20171030 15:16:01.183"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:01.184" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:01.184" status="PASS" starttime="20171030 15:16:01.183"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:01.184" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:01.184" status="PASS" starttime="20171030 15:16:01.184"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.364" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:01.365" status="PASS" starttime="20171030 15:16:01.185"></status>
</kw>
<msg timestamp="20171030 15:16:01.365" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:01.365" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:01.365" status="PASS" starttime="20171030 15:16:01.185"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.366" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:01.366" status="PASS" starttime="20171030 15:16:01.365"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:01.366" status="PASS" starttime="20171030 15:16:01.366"></status>
</kw>
<status endtime="20171030 15:16:01.367" status="PASS" starttime="20171030 15:16:01.181"></status>
</kw>
<status endtime="20171030 15:16:01.367" status="PASS" starttime="20171030 15:16:01.181"></status>
</kw>
<status endtime="20171030 15:16:01.367" status="PASS" starttime="20171030 15:16:01.180"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:01.368" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:16:01.368" status="PASS" starttime="20171030 15:16:01.367"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:01.375" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:01.375" status="PASS" starttime="20171030 15:16:01.370"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:01.377" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:01.377" status="PASS" starttime="20171030 15:16:01.377"></status>
</kw>
<status endtime="20171030 15:16:01.377" status="PASS" starttime="20171030 15:16:01.376"></status>
</kw>
<status endtime="20171030 15:16:01.377" status="PASS" starttime="20171030 15:16:01.369"></status>
</kw>
<status endtime="20171030 15:16:01.377" status="PASS" starttime="20171030 15:16:01.368"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:01.484" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:16:01.484" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:01.484" status="PASS" starttime="20171030 15:16:01.378"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:01.486" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:01.486" status="PASS" starttime="20171030 15:16:01.486"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:01.487" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:01.487" status="PASS" starttime="20171030 15:16:01.487"></status>
</kw>
<status endtime="20171030 15:16:01.487" status="PASS" starttime="20171030 15:16:01.486"></status>
</kw>
<status endtime="20171030 15:16:01.488" status="PASS" starttime="20171030 15:16:01.485"></status>
</kw>
<status endtime="20171030 15:16:01.488" status="PASS" starttime="20171030 15:16:01.485"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:01.488" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:01.488" status="PASS" starttime="20171030 15:16:01.488"></status>
</kw>
<msg timestamp="20171030 15:16:01.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:01.488" status="PASS" starttime="20171030 15:16:01.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:01.489" status="PASS" starttime="20171030 15:16:01.489"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:01.490" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:01.490" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:01.490" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:16:01.490" status="PASS" starttime="20171030 15:16:01.489"></status>
</kw>
<msg timestamp="20171030 15:16:01.490" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:16:01.490" status="PASS" starttime="20171030 15:16:01.179"></status>
</kw>
<msg timestamp="20171030 15:16:01.490" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:16:01.490" status="PASS" starttime="20171030 15:16:01.178"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:16:01.491" status="PASS" starttime="20171030 15:16:01.491"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:01.495" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:01.495" status="PASS" starttime="20171030 15:16:01.495"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:01.496" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:01.496" status="PASS" starttime="20171030 15:16:01.496"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:01.497" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:01.497" status="PASS" starttime="20171030 15:16:01.496"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:01.497" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:01.497" status="PASS" starttime="20171030 15:16:01.497"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.701" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:01.702" status="PASS" starttime="20171030 15:16:01.498"></status>
</kw>
<msg timestamp="20171030 15:16:01.702" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:01.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:01.702" status="PASS" starttime="20171030 15:16:01.498"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.702" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:01.703" status="PASS" starttime="20171030 15:16:01.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:01.703" status="PASS" starttime="20171030 15:16:01.703"></status>
</kw>
<status endtime="20171030 15:16:01.703" status="PASS" starttime="20171030 15:16:01.494"></status>
</kw>
<status endtime="20171030 15:16:01.703" status="PASS" starttime="20171030 15:16:01.494"></status>
</kw>
<status endtime="20171030 15:16:01.704" status="PASS" starttime="20171030 15:16:01.493"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:01.704" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:16:01.704" status="PASS" starttime="20171030 15:16:01.704"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:01.706" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:16:01.706" status="PASS" starttime="20171030 15:16:01.706"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:01.707" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:16:01.707" status="PASS" starttime="20171030 15:16:01.707"></status>
</kw>
<status endtime="20171030 15:16:01.708" status="PASS" starttime="20171030 15:16:01.707"></status>
</kw>
<status endtime="20171030 15:16:01.708" status="PASS" starttime="20171030 15:16:01.705"></status>
</kw>
<status endtime="20171030 15:16:01.708" status="PASS" starttime="20171030 15:16:01.705"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:01.830" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:16:01.830" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:01.830" status="PASS" starttime="20171030 15:16:01.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:01.832" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:01.832" status="PASS" starttime="20171030 15:16:01.832"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:01.833" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:01.833" status="PASS" starttime="20171030 15:16:01.833"></status>
</kw>
<status endtime="20171030 15:16:01.833" status="PASS" starttime="20171030 15:16:01.832"></status>
</kw>
<status endtime="20171030 15:16:01.833" status="PASS" starttime="20171030 15:16:01.831"></status>
</kw>
<status endtime="20171030 15:16:01.833" status="PASS" starttime="20171030 15:16:01.831"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:01.834" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:01.834" status="PASS" starttime="20171030 15:16:01.834"></status>
</kw>
<msg timestamp="20171030 15:16:01.834" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:01.834" status="PASS" starttime="20171030 15:16:01.492"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:01.835" status="PASS" starttime="20171030 15:16:01.834"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:01.835" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:01.835" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:01.836" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20171030 15:16:01.836" status="PASS" starttime="20171030 15:16:01.835"></status>
</kw>
<msg timestamp="20171030 15:16:01.836" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:16:01.836" status="PASS" starttime="20171030 15:16:01.492"></status>
</kw>
<msg timestamp="20171030 15:16:01.836" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:16:01.836" status="PASS" starttime="20171030 15:16:01.491"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:16:01.837" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:01.837" status="PASS" starttime="20171030 15:16:01.837"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:01.841" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:01.841" status="PASS" starttime="20171030 15:16:01.841"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:01.842" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:01.842" status="PASS" starttime="20171030 15:16:01.842"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:01.843" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:01.843" status="PASS" starttime="20171030 15:16:01.842"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:01.843" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:01.843" status="PASS" starttime="20171030 15:16:01.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:02.089" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:02.089" status="PASS" starttime="20171030 15:16:01.844"></status>
</kw>
<msg timestamp="20171030 15:16:02.090" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:02.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:02.090" status="PASS" starttime="20171030 15:16:01.844"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:02.090" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:02.090" status="PASS" starttime="20171030 15:16:02.090"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:02.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:02.091" status="PASS" starttime="20171030 15:16:02.091"></status>
</kw>
<status endtime="20171030 15:16:02.091" status="PASS" starttime="20171030 15:16:01.840"></status>
</kw>
<status endtime="20171030 15:16:02.091" status="PASS" starttime="20171030 15:16:01.839"></status>
</kw>
<status endtime="20171030 15:16:02.092" status="PASS" starttime="20171030 15:16:01.839"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:02.092" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20171030 15:16:02.092" status="PASS" starttime="20171030 15:16:02.092"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:02.094" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:02.095" status="PASS" starttime="20171030 15:16:02.094"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:02.095" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:02.096" status="PASS" starttime="20171030 15:16:02.095"></status>
</kw>
<status endtime="20171030 15:16:02.096" status="PASS" starttime="20171030 15:16:02.095"></status>
</kw>
<status endtime="20171030 15:16:02.096" status="PASS" starttime="20171030 15:16:02.093"></status>
</kw>
<status endtime="20171030 15:16:02.096" status="PASS" starttime="20171030 15:16:02.092"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:02.225" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171030 15:16:02.226" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:02.226" status="PASS" starttime="20171030 15:16:02.096"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:02.227" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:02.228" status="PASS" starttime="20171030 15:16:02.227"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:02.229" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:02.229" status="PASS" starttime="20171030 15:16:02.228"></status>
</kw>
<status endtime="20171030 15:16:02.229" status="PASS" starttime="20171030 15:16:02.228"></status>
</kw>
<status endtime="20171030 15:16:02.229" status="PASS" starttime="20171030 15:16:02.226"></status>
</kw>
<status endtime="20171030 15:16:02.229" status="PASS" starttime="20171030 15:16:02.226"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:02.230" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:02.230" status="PASS" starttime="20171030 15:16:02.229"></status>
</kw>
<msg timestamp="20171030 15:16:02.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:02.230" status="PASS" starttime="20171030 15:16:01.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:02.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:02.231" status="PASS" starttime="20171030 15:16:02.230"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:02.231" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:02.231" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:02.231" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20171030 15:16:02.231" status="PASS" starttime="20171030 15:16:02.231"></status>
</kw>
<msg timestamp="20171030 15:16:02.232" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:16:02.232" status="PASS" starttime="20171030 15:16:01.838"></status>
</kw>
<msg timestamp="20171030 15:16:02.232" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:16:02.232" status="PASS" starttime="20171030 15:16:01.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171030 15:16:02.232" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:16:02.233" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:16:02.233" status="FAIL" starttime="20171030 15:16:02.232"></status>
</kw>
<status endtime="20171030 15:16:02.233" status="FAIL" starttime="20171030 15:16:01.491"></status>
</kw>
<status endtime="20171030 15:16:02.233" status="FAIL" starttime="20171030 15:16:00.763"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:12.238" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:12.239" status="PASS" starttime="20171030 15:16:12.238"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:12.239" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:12.239" status="PASS" starttime="20171030 15:16:12.239"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:12.240" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:12.240" status="PASS" starttime="20171030 15:16:12.240"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:12.241" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:12.241" status="PASS" starttime="20171030 15:16:12.240"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:13.103" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:13.103" status="PASS" starttime="20171030 15:16:12.241"></status>
</kw>
<msg timestamp="20171030 15:16:13.103" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:13.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:13.104" status="PASS" starttime="20171030 15:16:12.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:13.104" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:13.104" status="PASS" starttime="20171030 15:16:13.104"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:13.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:13.105" status="PASS" starttime="20171030 15:16:13.105"></status>
</kw>
<status endtime="20171030 15:16:13.105" status="PASS" starttime="20171030 15:16:12.237"></status>
</kw>
<status endtime="20171030 15:16:13.105" status="PASS" starttime="20171030 15:16:12.237"></status>
</kw>
<status endtime="20171030 15:16:13.105" status="PASS" starttime="20171030 15:16:12.236"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:13.106" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:16:13.106" status="PASS" starttime="20171030 15:16:13.106"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:13.108" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:13.108" status="PASS" starttime="20171030 15:16:13.107"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:13.109" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:13.109" status="PASS" starttime="20171030 15:16:13.109"></status>
</kw>
<status endtime="20171030 15:16:13.109" status="PASS" starttime="20171030 15:16:13.108"></status>
</kw>
<status endtime="20171030 15:16:13.109" status="PASS" starttime="20171030 15:16:13.107"></status>
</kw>
<status endtime="20171030 15:16:13.109" status="PASS" starttime="20171030 15:16:13.106"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:18.881" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:16:18.881" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:18.881" status="PASS" starttime="20171030 15:16:13.110"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:18.883" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:18.883" status="PASS" starttime="20171030 15:16:18.883"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:18.884" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:18.884" status="PASS" starttime="20171030 15:16:18.884"></status>
</kw>
<status endtime="20171030 15:16:18.884" status="PASS" starttime="20171030 15:16:18.883"></status>
</kw>
<status endtime="20171030 15:16:18.885" status="PASS" starttime="20171030 15:16:18.882"></status>
</kw>
<status endtime="20171030 15:16:18.885" status="PASS" starttime="20171030 15:16:18.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:18.885" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:18.885" status="PASS" starttime="20171030 15:16:18.885"></status>
</kw>
<msg timestamp="20171030 15:16:18.885" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:18.885" status="PASS" starttime="20171030 15:16:12.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:18.886" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:18.886" status="PASS" starttime="20171030 15:16:18.886"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:18.887" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:18.887" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:18.887" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:16:18.887" status="PASS" starttime="20171030 15:16:18.886"></status>
</kw>
<msg timestamp="20171030 15:16:18.887" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:16:18.887" status="PASS" starttime="20171030 15:16:12.235"></status>
</kw>
<msg timestamp="20171030 15:16:18.888" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:16:18.888" status="PASS" starttime="20171030 15:16:12.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:16:18.888" status="PASS" starttime="20171030 15:16:18.888"></status>
</kw>
<status endtime="20171030 15:16:18.888" status="PASS" starttime="20171030 15:16:12.234"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:18.893" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:18.894" status="PASS" starttime="20171030 15:16:18.892"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:18.894" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:18.894" status="PASS" starttime="20171030 15:16:18.894"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:18.895" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:18.895" status="PASS" starttime="20171030 15:16:18.894"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:18.896" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:18.896" status="PASS" starttime="20171030 15:16:18.895"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:19.374" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:19.374" status="PASS" starttime="20171030 15:16:18.896"></status>
</kw>
<msg timestamp="20171030 15:16:19.374" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:19.374" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:19.375" status="PASS" starttime="20171030 15:16:18.896"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:19.375" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:19.375" status="PASS" starttime="20171030 15:16:19.375"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:19.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:19.376" status="PASS" starttime="20171030 15:16:19.376"></status>
</kw>
<status endtime="20171030 15:16:19.376" status="PASS" starttime="20171030 15:16:18.892"></status>
</kw>
<status endtime="20171030 15:16:19.376" status="PASS" starttime="20171030 15:16:18.891"></status>
</kw>
<status endtime="20171030 15:16:19.376" status="PASS" starttime="20171030 15:16:18.891"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:19.377" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:16:19.377" status="PASS" starttime="20171030 15:16:19.377"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:19.380" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:19.380" status="PASS" starttime="20171030 15:16:19.379"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:19.380" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:19.381" status="PASS" starttime="20171030 15:16:19.380"></status>
</kw>
<status endtime="20171030 15:16:19.381" status="PASS" starttime="20171030 15:16:19.380"></status>
</kw>
<status endtime="20171030 15:16:19.381" status="PASS" starttime="20171030 15:16:19.378"></status>
</kw>
<status endtime="20171030 15:16:19.381" status="PASS" starttime="20171030 15:16:19.378"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:21.327" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:16:21.327" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:21.327" status="PASS" starttime="20171030 15:16:19.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:21.329" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:21.329" status="PASS" starttime="20171030 15:16:21.328"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:21.330" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:21.330" status="PASS" starttime="20171030 15:16:21.330"></status>
</kw>
<status endtime="20171030 15:16:21.330" status="PASS" starttime="20171030 15:16:21.329"></status>
</kw>
<status endtime="20171030 15:16:21.330" status="PASS" starttime="20171030 15:16:21.328"></status>
</kw>
<status endtime="20171030 15:16:21.331" status="PASS" starttime="20171030 15:16:21.327"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:21.331" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:21.331" status="PASS" starttime="20171030 15:16:21.331"></status>
</kw>
<msg timestamp="20171030 15:16:21.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:21.331" status="PASS" starttime="20171030 15:16:18.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:21.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:21.332" status="PASS" starttime="20171030 15:16:21.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:21.333" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:21.333" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:21.333" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:16:21.333" status="PASS" starttime="20171030 15:16:21.332"></status>
</kw>
<msg timestamp="20171030 15:16:21.333" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:16:21.333" status="PASS" starttime="20171030 15:16:18.889"></status>
</kw>
<msg timestamp="20171030 15:16:21.333" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:16:21.333" status="PASS" starttime="20171030 15:16:18.888"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:16:21.334" status="PASS" starttime="20171030 15:16:21.334"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:21.339" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:21.340" status="PASS" starttime="20171030 15:16:21.339"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:21.340" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:21.340" status="PASS" starttime="20171030 15:16:21.340"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:21.341" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:21.341" status="PASS" starttime="20171030 15:16:21.341"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:21.342" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:21.342" status="PASS" starttime="20171030 15:16:21.341"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:22.094" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:22.094" status="PASS" starttime="20171030 15:16:21.342"></status>
</kw>
<msg timestamp="20171030 15:16:22.094" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:22.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:22.094" status="PASS" starttime="20171030 15:16:21.342"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:22.095" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:22.095" status="PASS" starttime="20171030 15:16:22.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:22.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:22.096" status="PASS" starttime="20171030 15:16:22.095"></status>
</kw>
<status endtime="20171030 15:16:22.096" status="PASS" starttime="20171030 15:16:21.337"></status>
</kw>
<status endtime="20171030 15:16:22.096" status="PASS" starttime="20171030 15:16:21.337"></status>
</kw>
<status endtime="20171030 15:16:22.096" status="PASS" starttime="20171030 15:16:21.336"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:22.097" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:16:22.097" status="PASS" starttime="20171030 15:16:22.096"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:22.100" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:16:22.100" status="PASS" starttime="20171030 15:16:22.100"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:22.101" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:16:22.101" status="PASS" starttime="20171030 15:16:22.101"></status>
</kw>
<status endtime="20171030 15:16:22.102" status="PASS" starttime="20171030 15:16:22.101"></status>
</kw>
<status endtime="20171030 15:16:22.102" status="PASS" starttime="20171030 15:16:22.099"></status>
</kw>
<status endtime="20171030 15:16:22.102" status="PASS" starttime="20171030 15:16:22.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:22.689" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:16:22.689" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:22.689" status="PASS" starttime="20171030 15:16:22.102"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:22.691" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:22.691" status="PASS" starttime="20171030 15:16:22.691"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:22.692" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:22.692" status="PASS" starttime="20171030 15:16:22.692"></status>
</kw>
<status endtime="20171030 15:16:22.693" status="PASS" starttime="20171030 15:16:22.692"></status>
</kw>
<status endtime="20171030 15:16:22.693" status="PASS" starttime="20171030 15:16:22.690"></status>
</kw>
<status endtime="20171030 15:16:22.693" status="PASS" starttime="20171030 15:16:22.690"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:22.693" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:22.693" status="PASS" starttime="20171030 15:16:22.693"></status>
</kw>
<msg timestamp="20171030 15:16:22.694" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:22.694" status="PASS" starttime="20171030 15:16:21.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:22.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:22.694" status="PASS" starttime="20171030 15:16:22.694"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:22.695" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:22.695" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:22.695" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20171030 15:16:22.695" status="PASS" starttime="20171030 15:16:22.695"></status>
</kw>
<msg timestamp="20171030 15:16:22.695" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:16:22.695" status="PASS" starttime="20171030 15:16:21.335"></status>
</kw>
<msg timestamp="20171030 15:16:22.696" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:16:22.696" status="PASS" starttime="20171030 15:16:21.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:16:22.696" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:22.696" status="PASS" starttime="20171030 15:16:22.696"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:22.700" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:22.700" status="PASS" starttime="20171030 15:16:22.700"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:22.701" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:22.701" status="PASS" starttime="20171030 15:16:22.701"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:22.702" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:22.702" status="PASS" starttime="20171030 15:16:22.701"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:22.702" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:22.702" status="PASS" starttime="20171030 15:16:22.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:23.181" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:23.181" status="PASS" starttime="20171030 15:16:22.703"></status>
</kw>
<msg timestamp="20171030 15:16:23.181" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:23.182" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:23.182" status="PASS" starttime="20171030 15:16:22.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:23.182" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:23.182" status="PASS" starttime="20171030 15:16:23.182"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:23.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:23.183" status="PASS" starttime="20171030 15:16:23.183"></status>
</kw>
<status endtime="20171030 15:16:23.183" status="PASS" starttime="20171030 15:16:22.699"></status>
</kw>
<status endtime="20171030 15:16:23.183" status="PASS" starttime="20171030 15:16:22.699"></status>
</kw>
<status endtime="20171030 15:16:23.183" status="PASS" starttime="20171030 15:16:22.698"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:23.184" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20171030 15:16:23.184" status="PASS" starttime="20171030 15:16:23.184"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:23.186" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:23.186" status="PASS" starttime="20171030 15:16:23.185"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:23.187" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:23.187" status="PASS" starttime="20171030 15:16:23.187"></status>
</kw>
<status endtime="20171030 15:16:23.187" status="PASS" starttime="20171030 15:16:23.186"></status>
</kw>
<status endtime="20171030 15:16:23.187" status="PASS" starttime="20171030 15:16:23.185"></status>
</kw>
<status endtime="20171030 15:16:23.188" status="PASS" starttime="20171030 15:16:23.184"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:23.627" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171030 15:16:23.627" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:23.627" status="PASS" starttime="20171030 15:16:23.188"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:23.631" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:23.631" status="PASS" starttime="20171030 15:16:23.630"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:23.632" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:23.632" status="PASS" starttime="20171030 15:16:23.631"></status>
</kw>
<status endtime="20171030 15:16:23.632" status="PASS" starttime="20171030 15:16:23.631"></status>
</kw>
<status endtime="20171030 15:16:23.632" status="PASS" starttime="20171030 15:16:23.630"></status>
</kw>
<status endtime="20171030 15:16:23.632" status="PASS" starttime="20171030 15:16:23.629"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:23.633" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:23.633" status="PASS" starttime="20171030 15:16:23.633"></status>
</kw>
<msg timestamp="20171030 15:16:23.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:23.633" status="PASS" starttime="20171030 15:16:22.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:23.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:23.634" status="PASS" starttime="20171030 15:16:23.633"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:23.634" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:23.634" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:23.634" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20171030 15:16:23.634" status="PASS" starttime="20171030 15:16:23.634"></status>
</kw>
<msg timestamp="20171030 15:16:23.635" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:16:23.635" status="PASS" starttime="20171030 15:16:22.697"></status>
</kw>
<msg timestamp="20171030 15:16:23.635" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:16:23.635" status="PASS" starttime="20171030 15:16:22.696"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171030 15:16:23.635" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:16:23.636" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:16:23.636" status="FAIL" starttime="20171030 15:16:23.635"></status>
</kw>
<status endtime="20171030 15:16:23.636" status="FAIL" starttime="20171030 15:16:21.334"></status>
</kw>
<status endtime="20171030 15:16:23.636" status="FAIL" starttime="20171030 15:16:12.233"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:33.642" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:33.642" status="PASS" starttime="20171030 15:16:33.641"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:33.643" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:33.643" status="PASS" starttime="20171030 15:16:33.642"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:33.643" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:33.643" status="PASS" starttime="20171030 15:16:33.643"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:33.644" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:33.644" status="PASS" starttime="20171030 15:16:33.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:33.881" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:33.881" status="PASS" starttime="20171030 15:16:33.645"></status>
</kw>
<msg timestamp="20171030 15:16:33.881" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:33.881" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:33.881" status="PASS" starttime="20171030 15:16:33.644"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:33.882" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:33.882" status="PASS" starttime="20171030 15:16:33.881"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:33.882" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:33.883" status="PASS" starttime="20171030 15:16:33.882"></status>
</kw>
<status endtime="20171030 15:16:33.883" status="PASS" starttime="20171030 15:16:33.640"></status>
</kw>
<status endtime="20171030 15:16:33.883" status="PASS" starttime="20171030 15:16:33.640"></status>
</kw>
<status endtime="20171030 15:16:33.883" status="PASS" starttime="20171030 15:16:33.639"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:33.883" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:16:33.883" status="PASS" starttime="20171030 15:16:33.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:33.886" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:33.886" status="PASS" starttime="20171030 15:16:33.885"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:33.887" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:33.887" status="PASS" starttime="20171030 15:16:33.887"></status>
</kw>
<status endtime="20171030 15:16:33.887" status="PASS" starttime="20171030 15:16:33.886"></status>
</kw>
<status endtime="20171030 15:16:33.887" status="PASS" starttime="20171030 15:16:33.884"></status>
</kw>
<status endtime="20171030 15:16:33.887" status="PASS" starttime="20171030 15:16:33.884"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:33.951" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:16:33.951" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:33.952" status="PASS" starttime="20171030 15:16:33.888"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:33.953" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:33.953" status="PASS" starttime="20171030 15:16:33.953"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:33.955" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:33.955" status="PASS" starttime="20171030 15:16:33.954"></status>
</kw>
<status endtime="20171030 15:16:33.955" status="PASS" starttime="20171030 15:16:33.954"></status>
</kw>
<status endtime="20171030 15:16:33.955" status="PASS" starttime="20171030 15:16:33.952"></status>
</kw>
<status endtime="20171030 15:16:33.955" status="PASS" starttime="20171030 15:16:33.952"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:33.955" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:33.956" status="PASS" starttime="20171030 15:16:33.955"></status>
</kw>
<msg timestamp="20171030 15:16:33.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:33.956" status="PASS" starttime="20171030 15:16:33.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:33.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:33.956" status="PASS" starttime="20171030 15:16:33.956"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:33.957" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:33.957" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:33.957" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:16:33.957" status="PASS" starttime="20171030 15:16:33.957"></status>
</kw>
<msg timestamp="20171030 15:16:33.958" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:16:33.958" status="PASS" starttime="20171030 15:16:33.638"></status>
</kw>
<msg timestamp="20171030 15:16:33.958" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:16:33.958" status="PASS" starttime="20171030 15:16:33.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:16:33.958" status="PASS" starttime="20171030 15:16:33.958"></status>
</kw>
<status endtime="20171030 15:16:33.959" status="PASS" starttime="20171030 15:16:33.637"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:33.962" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:33.963" status="PASS" starttime="20171030 15:16:33.962"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:33.963" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:33.963" status="PASS" starttime="20171030 15:16:33.963"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:33.964" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:33.964" status="PASS" starttime="20171030 15:16:33.964"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:33.965" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:33.965" status="PASS" starttime="20171030 15:16:33.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:34.379" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:34.379" status="PASS" starttime="20171030 15:16:33.966"></status>
</kw>
<msg timestamp="20171030 15:16:34.379" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:34.379" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:34.380" status="PASS" starttime="20171030 15:16:33.965"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:34.380" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:34.380" status="PASS" starttime="20171030 15:16:34.380"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:34.381" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:34.381" status="PASS" starttime="20171030 15:16:34.381"></status>
</kw>
<status endtime="20171030 15:16:34.381" status="PASS" starttime="20171030 15:16:33.962"></status>
</kw>
<status endtime="20171030 15:16:34.381" status="PASS" starttime="20171030 15:16:33.961"></status>
</kw>
<status endtime="20171030 15:16:34.381" status="PASS" starttime="20171030 15:16:33.960"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:34.382" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:16:34.382" status="PASS" starttime="20171030 15:16:34.382"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:34.384" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:34.384" status="PASS" starttime="20171030 15:16:34.383"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:34.385" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:34.385" status="PASS" starttime="20171030 15:16:34.385"></status>
</kw>
<status endtime="20171030 15:16:34.386" status="PASS" starttime="20171030 15:16:34.385"></status>
</kw>
<status endtime="20171030 15:16:34.386" status="PASS" starttime="20171030 15:16:34.383"></status>
</kw>
<status endtime="20171030 15:16:34.386" status="PASS" starttime="20171030 15:16:34.382"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:34.558" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:16:34.558" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:34.558" status="PASS" starttime="20171030 15:16:34.386"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:34.560" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:34.560" status="PASS" starttime="20171030 15:16:34.559"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:34.561" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:34.561" status="PASS" starttime="20171030 15:16:34.560"></status>
</kw>
<status endtime="20171030 15:16:34.561" status="PASS" starttime="20171030 15:16:34.560"></status>
</kw>
<status endtime="20171030 15:16:34.561" status="PASS" starttime="20171030 15:16:34.559"></status>
</kw>
<status endtime="20171030 15:16:34.561" status="PASS" starttime="20171030 15:16:34.558"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:34.561" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:34.562" status="PASS" starttime="20171030 15:16:34.561"></status>
</kw>
<msg timestamp="20171030 15:16:34.562" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:34.562" status="PASS" starttime="20171030 15:16:33.960"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:34.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:34.562" status="PASS" starttime="20171030 15:16:34.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:34.563" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:34.563" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:34.563" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:16:34.563" status="PASS" starttime="20171030 15:16:34.563"></status>
</kw>
<msg timestamp="20171030 15:16:34.564" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:16:34.564" status="PASS" starttime="20171030 15:16:33.959"></status>
</kw>
<msg timestamp="20171030 15:16:34.564" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:16:34.564" status="PASS" starttime="20171030 15:16:33.959"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:16:34.564" status="PASS" starttime="20171030 15:16:34.564"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:34.569" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:34.569" status="PASS" starttime="20171030 15:16:34.569"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:34.570" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:34.570" status="PASS" starttime="20171030 15:16:34.569"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:34.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:34.570" status="PASS" starttime="20171030 15:16:34.570"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:34.571" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:34.571" status="PASS" starttime="20171030 15:16:34.571"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:34.936" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:34.936" status="PASS" starttime="20171030 15:16:34.576"></status>
</kw>
<msg timestamp="20171030 15:16:34.936" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:34.936" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:34.936" status="PASS" starttime="20171030 15:16:34.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:34.937" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:34.937" status="PASS" starttime="20171030 15:16:34.936"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:34.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:34.938" status="PASS" starttime="20171030 15:16:34.937"></status>
</kw>
<status endtime="20171030 15:16:34.938" status="PASS" starttime="20171030 15:16:34.568"></status>
</kw>
<status endtime="20171030 15:16:34.938" status="PASS" starttime="20171030 15:16:34.568"></status>
</kw>
<status endtime="20171030 15:16:34.938" status="PASS" starttime="20171030 15:16:34.567"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:34.939" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:16:34.939" status="PASS" starttime="20171030 15:16:34.938"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:34.941" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:16:34.941" status="PASS" starttime="20171030 15:16:34.940"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:34.942" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:16:34.942" status="PASS" starttime="20171030 15:16:34.942"></status>
</kw>
<status endtime="20171030 15:16:34.943" status="PASS" starttime="20171030 15:16:34.941"></status>
</kw>
<status endtime="20171030 15:16:34.943" status="PASS" starttime="20171030 15:16:34.940"></status>
</kw>
<status endtime="20171030 15:16:34.943" status="PASS" starttime="20171030 15:16:34.939"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:35.034" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:16:35.034" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:35.034" status="PASS" starttime="20171030 15:16:34.943"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:35.036" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:35.036" status="PASS" starttime="20171030 15:16:35.035"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:35.037" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:35.037" status="PASS" starttime="20171030 15:16:35.037"></status>
</kw>
<status endtime="20171030 15:16:35.037" status="PASS" starttime="20171030 15:16:35.036"></status>
</kw>
<status endtime="20171030 15:16:35.037" status="PASS" starttime="20171030 15:16:35.035"></status>
</kw>
<status endtime="20171030 15:16:35.037" status="PASS" starttime="20171030 15:16:35.034"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:35.038" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:35.038" status="PASS" starttime="20171030 15:16:35.038"></status>
</kw>
<msg timestamp="20171030 15:16:35.038" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:35.038" status="PASS" starttime="20171030 15:16:34.566"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:35.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:35.039" status="PASS" starttime="20171030 15:16:35.038"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:35.039" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:35.039" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:35.040" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit'}</msg>
<status endtime="20171030 15:16:35.040" status="PASS" starttime="20171030 15:16:35.039"></status>
</kw>
<msg timestamp="20171030 15:16:35.040" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status endtime="20171030 15:16:35.040" status="PASS" starttime="20171030 15:16:34.565"></status>
</kw>
<msg timestamp="20171030 15:16:35.040" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status endtime="20171030 15:16:35.040" status="PASS" starttime="20171030 15:16:34.565"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:16:35.041" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:16:35.041" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status endtime="20171030 15:16:35.041" status="FAIL" starttime="20171030 15:16:35.040"></status>
</kw>
<status endtime="20171030 15:16:35.041" status="FAIL" starttime="20171030 15:16:34.565"></status>
</kw>
<status endtime="20171030 15:16:35.041" status="FAIL" starttime="20171030 15:16:33.637"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:45.047" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:45.047" status="PASS" starttime="20171030 15:16:45.046"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:45.048" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:45.048" status="PASS" starttime="20171030 15:16:45.048"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:45.049" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:45.049" status="PASS" starttime="20171030 15:16:45.048"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:45.049" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:45.049" status="PASS" starttime="20171030 15:16:45.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:45.806" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:45.806" status="PASS" starttime="20171030 15:16:45.050"></status>
</kw>
<msg timestamp="20171030 15:16:45.806" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:45.806" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:45.806" status="PASS" starttime="20171030 15:16:45.050"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:45.807" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:45.807" status="PASS" starttime="20171030 15:16:45.807"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:45.808" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:45.808" status="PASS" starttime="20171030 15:16:45.807"></status>
</kw>
<status endtime="20171030 15:16:45.808" status="PASS" starttime="20171030 15:16:45.046"></status>
</kw>
<status endtime="20171030 15:16:45.808" status="PASS" starttime="20171030 15:16:45.045"></status>
</kw>
<status endtime="20171030 15:16:45.808" status="PASS" starttime="20171030 15:16:45.044"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:45.809" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:16:45.809" status="PASS" starttime="20171030 15:16:45.809"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:45.811" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:45.811" status="PASS" starttime="20171030 15:16:45.810"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:45.812" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:45.812" status="PASS" starttime="20171030 15:16:45.812"></status>
</kw>
<status endtime="20171030 15:16:45.812" status="PASS" starttime="20171030 15:16:45.811"></status>
</kw>
<status endtime="20171030 15:16:45.812" status="PASS" starttime="20171030 15:16:45.810"></status>
</kw>
<status endtime="20171030 15:16:45.812" status="PASS" starttime="20171030 15:16:45.809"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:46.103" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:16:46.104" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:46.104" status="PASS" starttime="20171030 15:16:45.813"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:46.106" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:46.106" status="PASS" starttime="20171030 15:16:46.105"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:46.107" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:46.107" status="PASS" starttime="20171030 15:16:46.107"></status>
</kw>
<status endtime="20171030 15:16:46.108" status="PASS" starttime="20171030 15:16:46.106"></status>
</kw>
<status endtime="20171030 15:16:46.108" status="PASS" starttime="20171030 15:16:46.105"></status>
</kw>
<status endtime="20171030 15:16:46.108" status="PASS" starttime="20171030 15:16:46.104"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:46.108" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:46.108" status="PASS" starttime="20171030 15:16:46.108"></status>
</kw>
<msg timestamp="20171030 15:16:46.108" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:46.109" status="PASS" starttime="20171030 15:16:45.044"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:46.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:46.109" status="PASS" starttime="20171030 15:16:46.109"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:46.110" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:46.110" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:46.110" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:16:46.110" status="PASS" starttime="20171030 15:16:46.109"></status>
</kw>
<msg timestamp="20171030 15:16:46.110" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:16:46.110" status="PASS" starttime="20171030 15:16:45.043"></status>
</kw>
<msg timestamp="20171030 15:16:46.111" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:16:46.111" status="PASS" starttime="20171030 15:16:45.043"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:16:46.111" status="PASS" starttime="20171030 15:16:46.111"></status>
</kw>
<status endtime="20171030 15:16:46.111" status="PASS" starttime="20171030 15:16:45.042"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:46.115" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:46.115" status="PASS" starttime="20171030 15:16:46.114"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:46.116" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:46.116" status="PASS" starttime="20171030 15:16:46.115"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:46.116" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:46.116" status="PASS" starttime="20171030 15:16:46.116"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:46.117" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:46.117" status="PASS" starttime="20171030 15:16:46.117"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:47.796" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:47.796" status="PASS" starttime="20171030 15:16:46.118"></status>
</kw>
<msg timestamp="20171030 15:16:47.796" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:47.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:47.796" status="PASS" starttime="20171030 15:16:46.117"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:47.797" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:47.797" status="PASS" starttime="20171030 15:16:47.797"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:47.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:47.798" status="PASS" starttime="20171030 15:16:47.798"></status>
</kw>
<status endtime="20171030 15:16:47.798" status="PASS" starttime="20171030 15:16:46.114"></status>
</kw>
<status endtime="20171030 15:16:47.798" status="PASS" starttime="20171030 15:16:46.114"></status>
</kw>
<status endtime="20171030 15:16:47.798" status="PASS" starttime="20171030 15:16:46.113"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:47.799" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:16:47.799" status="PASS" starttime="20171030 15:16:47.799"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:47.802" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:47.802" status="PASS" starttime="20171030 15:16:47.801"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:47.803" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:47.803" status="PASS" starttime="20171030 15:16:47.802"></status>
</kw>
<status endtime="20171030 15:16:47.803" status="PASS" starttime="20171030 15:16:47.802"></status>
</kw>
<status endtime="20171030 15:16:47.803" status="PASS" starttime="20171030 15:16:47.800"></status>
</kw>
<status endtime="20171030 15:16:47.803" status="PASS" starttime="20171030 15:16:47.799"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:49.652" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:16:49.652" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:49.652" status="PASS" starttime="20171030 15:16:47.803"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:49.654" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:49.654" status="PASS" starttime="20171030 15:16:49.653"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:49.655" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:49.655" status="PASS" starttime="20171030 15:16:49.655"></status>
</kw>
<status endtime="20171030 15:16:49.655" status="PASS" starttime="20171030 15:16:49.654"></status>
</kw>
<status endtime="20171030 15:16:49.655" status="PASS" starttime="20171030 15:16:49.653"></status>
</kw>
<status endtime="20171030 15:16:49.655" status="PASS" starttime="20171030 15:16:49.652"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:49.656" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:49.656" status="PASS" starttime="20171030 15:16:49.656"></status>
</kw>
<msg timestamp="20171030 15:16:49.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:49.656" status="PASS" starttime="20171030 15:16:46.112"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:49.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:49.657" status="PASS" starttime="20171030 15:16:49.656"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:49.657" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:49.657" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:49.658" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:16:49.658" status="PASS" starttime="20171030 15:16:49.657"></status>
</kw>
<msg timestamp="20171030 15:16:49.658" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:16:49.658" status="PASS" starttime="20171030 15:16:46.112"></status>
</kw>
<msg timestamp="20171030 15:16:49.658" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:16:49.658" status="PASS" starttime="20171030 15:16:46.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:16:49.660" status="PASS" starttime="20171030 15:16:49.659"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:49.665" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:49.665" status="PASS" starttime="20171030 15:16:49.664"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:49.666" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:49.666" status="PASS" starttime="20171030 15:16:49.665"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:49.666" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:49.666" status="PASS" starttime="20171030 15:16:49.666"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:49.667" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:49.667" status="PASS" starttime="20171030 15:16:49.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:50.589" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:50.589" status="PASS" starttime="20171030 15:16:49.668"></status>
</kw>
<msg timestamp="20171030 15:16:50.589" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:50.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:50.590" status="PASS" starttime="20171030 15:16:49.667"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:50.590" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:50.590" status="PASS" starttime="20171030 15:16:50.590"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:50.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:50.591" status="PASS" starttime="20171030 15:16:50.591"></status>
</kw>
<status endtime="20171030 15:16:50.591" status="PASS" starttime="20171030 15:16:49.664"></status>
</kw>
<status endtime="20171030 15:16:50.591" status="PASS" starttime="20171030 15:16:49.663"></status>
</kw>
<status endtime="20171030 15:16:50.591" status="PASS" starttime="20171030 15:16:49.663"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:50.592" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:16:50.592" status="PASS" starttime="20171030 15:16:50.592"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:50.594" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:16:50.594" status="PASS" starttime="20171030 15:16:50.593"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:50.595" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:16:50.595" status="PASS" starttime="20171030 15:16:50.595"></status>
</kw>
<status endtime="20171030 15:16:50.595" status="PASS" starttime="20171030 15:16:50.594"></status>
</kw>
<status endtime="20171030 15:16:50.595" status="PASS" starttime="20171030 15:16:50.593"></status>
</kw>
<status endtime="20171030 15:16:50.595" status="PASS" starttime="20171030 15:16:50.592"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:51.045" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:16:51.046" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:51.046" status="PASS" starttime="20171030 15:16:50.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:51.048" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:51.049" status="PASS" starttime="20171030 15:16:51.048"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:51.049" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:51.050" status="PASS" starttime="20171030 15:16:51.049"></status>
</kw>
<status endtime="20171030 15:16:51.050" status="PASS" starttime="20171030 15:16:51.049"></status>
</kw>
<status endtime="20171030 15:16:51.050" status="PASS" starttime="20171030 15:16:51.047"></status>
</kw>
<status endtime="20171030 15:16:51.050" status="PASS" starttime="20171030 15:16:51.046"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:51.050" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:51.050" status="PASS" starttime="20171030 15:16:51.050"></status>
</kw>
<msg timestamp="20171030 15:16:51.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:51.051" status="PASS" starttime="20171030 15:16:49.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:51.051" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:51.051" status="PASS" starttime="20171030 15:16:51.051"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:51.052" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:51.052" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:51.052" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20171030 15:16:51.052" status="PASS" starttime="20171030 15:16:51.052"></status>
</kw>
<msg timestamp="20171030 15:16:51.053" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:16:51.053" status="PASS" starttime="20171030 15:16:49.662"></status>
</kw>
<msg timestamp="20171030 15:16:51.053" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:16:51.053" status="PASS" starttime="20171030 15:16:49.661"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:16:51.053" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:51.054" status="PASS" starttime="20171030 15:16:51.053"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:16:51.058" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:16:51.058" status="PASS" starttime="20171030 15:16:51.057"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:16:51.059" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:16:51.059" status="PASS" starttime="20171030 15:16:51.058"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:16:51.059" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:16:51.059" status="PASS" starttime="20171030 15:16:51.059"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:16:51.060" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:16:51.060" status="PASS" starttime="20171030 15:16:51.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:16:52.279" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:16:52.279" status="PASS" starttime="20171030 15:16:51.061"></status>
</kw>
<msg timestamp="20171030 15:16:52.279" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:16:52.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:52.279" status="PASS" starttime="20171030 15:16:51.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:16:52.280" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:52.280" status="PASS" starttime="20171030 15:16:52.279"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:52.281" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:52.281" status="PASS" starttime="20171030 15:16:52.280"></status>
</kw>
<status endtime="20171030 15:16:52.281" status="PASS" starttime="20171030 15:16:51.056"></status>
</kw>
<status endtime="20171030 15:16:52.281" status="PASS" starttime="20171030 15:16:51.056"></status>
</kw>
<status endtime="20171030 15:16:52.281" status="PASS" starttime="20171030 15:16:51.055"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:16:52.282" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20171030 15:16:52.282" status="PASS" starttime="20171030 15:16:52.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:52.284" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:52.284" status="PASS" starttime="20171030 15:16:52.283"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:52.285" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:16:52.285" status="PASS" starttime="20171030 15:16:52.285"></status>
</kw>
<status endtime="20171030 15:16:52.285" status="PASS" starttime="20171030 15:16:52.284"></status>
</kw>
<status endtime="20171030 15:16:52.285" status="PASS" starttime="20171030 15:16:52.283"></status>
</kw>
<status endtime="20171030 15:16:52.285" status="PASS" starttime="20171030 15:16:52.282"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:16:52.969" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171030 15:16:52.970" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:52.970" status="PASS" starttime="20171030 15:16:52.286"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:16:52.972" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:52.972" status="PASS" starttime="20171030 15:16:52.971"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:16:52.973" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:16:52.973" status="PASS" starttime="20171030 15:16:52.972"></status>
</kw>
<status endtime="20171030 15:16:52.973" status="PASS" starttime="20171030 15:16:52.972"></status>
</kw>
<status endtime="20171030 15:16:52.973" status="PASS" starttime="20171030 15:16:52.971"></status>
</kw>
<status endtime="20171030 15:16:52.973" status="PASS" starttime="20171030 15:16:52.970"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:16:52.975" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:16:52.975" status="PASS" starttime="20171030 15:16:52.975"></status>
</kw>
<msg timestamp="20171030 15:16:52.975" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:16:52.975" status="PASS" starttime="20171030 15:16:51.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:16:52.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:16:52.976" status="PASS" starttime="20171030 15:16:52.976"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:16:52.977" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:16:52.977" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:16:52.977" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20171030 15:16:52.977" status="PASS" starttime="20171030 15:16:52.976"></status>
</kw>
<msg timestamp="20171030 15:16:52.977" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:16:52.977" status="PASS" starttime="20171030 15:16:51.054"></status>
</kw>
<msg timestamp="20171030 15:16:52.977" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:16:52.977" status="PASS" starttime="20171030 15:16:51.054"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171030 15:16:52.978" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:16:52.978" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:16:52.978" status="FAIL" starttime="20171030 15:16:52.978"></status>
</kw>
<status endtime="20171030 15:16:52.979" status="FAIL" starttime="20171030 15:16:49.661"></status>
</kw>
<status endtime="20171030 15:16:52.979" status="FAIL" starttime="20171030 15:16:45.042"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:17:02.984" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:17:02.984" status="PASS" starttime="20171030 15:17:02.983"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:17:02.985" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:17:02.985" status="PASS" starttime="20171030 15:17:02.984"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:17:02.985" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:17:02.985" status="PASS" starttime="20171030 15:17:02.985"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:17:02.986" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:17:02.986" status="PASS" starttime="20171030 15:17:02.986"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:17:03.836" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:17:03.836" status="PASS" starttime="20171030 15:17:02.987"></status>
</kw>
<msg timestamp="20171030 15:17:03.836" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:17:03.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:03.836" status="PASS" starttime="20171030 15:17:02.986"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:17:03.837" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:03.837" status="PASS" starttime="20171030 15:17:03.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:03.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:03.838" status="PASS" starttime="20171030 15:17:03.837"></status>
</kw>
<status endtime="20171030 15:17:03.838" status="PASS" starttime="20171030 15:17:02.983"></status>
</kw>
<status endtime="20171030 15:17:03.838" status="PASS" starttime="20171030 15:17:02.982"></status>
</kw>
<status endtime="20171030 15:17:03.838" status="PASS" starttime="20171030 15:17:02.982"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:17:03.839" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:17:03.839" status="PASS" starttime="20171030 15:17:03.838"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:03.841" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:03.841" status="PASS" starttime="20171030 15:17:03.840"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:03.842" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:03.842" status="PASS" starttime="20171030 15:17:03.842"></status>
</kw>
<status endtime="20171030 15:17:03.842" status="PASS" starttime="20171030 15:17:03.841"></status>
</kw>
<status endtime="20171030 15:17:03.842" status="PASS" starttime="20171030 15:17:03.840"></status>
</kw>
<status endtime="20171030 15:17:03.842" status="PASS" starttime="20171030 15:17:03.839"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:17:07.695" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:17:07.695" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:07.695" status="PASS" starttime="20171030 15:17:03.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:07.697" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:07.697" status="PASS" starttime="20171030 15:17:07.697"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:07.698" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:07.698" status="PASS" starttime="20171030 15:17:07.698"></status>
</kw>
<status endtime="20171030 15:17:07.698" status="PASS" starttime="20171030 15:17:07.697"></status>
</kw>
<status endtime="20171030 15:17:07.698" status="PASS" starttime="20171030 15:17:07.696"></status>
</kw>
<status endtime="20171030 15:17:07.698" status="PASS" starttime="20171030 15:17:07.695"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:17:07.699" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:17:07.699" status="PASS" starttime="20171030 15:17:07.699"></status>
</kw>
<msg timestamp="20171030 15:17:07.699" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:07.699" status="PASS" starttime="20171030 15:17:02.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:07.700" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:07.700" status="PASS" starttime="20171030 15:17:07.699"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:17:07.700" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:17:07.701" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:17:07.701" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:17:07.701" status="PASS" starttime="20171030 15:17:07.700"></status>
</kw>
<msg timestamp="20171030 15:17:07.701" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:17:07.701" status="PASS" starttime="20171030 15:17:02.981"></status>
</kw>
<msg timestamp="20171030 15:17:07.701" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:17:07.701" status="PASS" starttime="20171030 15:17:02.980"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:17:07.702" status="PASS" starttime="20171030 15:17:07.702"></status>
</kw>
<status endtime="20171030 15:17:07.702" status="PASS" starttime="20171030 15:17:02.980"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:17:07.706" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:17:07.706" status="PASS" starttime="20171030 15:17:07.705"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:17:07.707" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:17:07.707" status="PASS" starttime="20171030 15:17:07.707"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:17:07.708" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:17:07.708" status="PASS" starttime="20171030 15:17:07.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:17:07.709" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:17:07.709" status="PASS" starttime="20171030 15:17:07.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:17:09.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:17:09.063" status="PASS" starttime="20171030 15:17:07.710"></status>
</kw>
<msg timestamp="20171030 15:17:09.063" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:17:09.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:09.063" status="PASS" starttime="20171030 15:17:07.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:17:09.064" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:09.064" status="PASS" starttime="20171030 15:17:09.064"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:09.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:09.065" status="PASS" starttime="20171030 15:17:09.064"></status>
</kw>
<status endtime="20171030 15:17:09.065" status="PASS" starttime="20171030 15:17:07.705"></status>
</kw>
<status endtime="20171030 15:17:09.065" status="PASS" starttime="20171030 15:17:07.704"></status>
</kw>
<status endtime="20171030 15:17:09.065" status="PASS" starttime="20171030 15:17:07.704"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:17:09.066" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:17:09.066" status="PASS" starttime="20171030 15:17:09.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:09.068" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:09.068" status="PASS" starttime="20171030 15:17:09.067"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:09.069" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:09.069" status="PASS" starttime="20171030 15:17:09.069"></status>
</kw>
<status endtime="20171030 15:17:09.069" status="PASS" starttime="20171030 15:17:09.068"></status>
</kw>
<status endtime="20171030 15:17:09.069" status="PASS" starttime="20171030 15:17:09.066"></status>
</kw>
<status endtime="20171030 15:17:09.069" status="PASS" starttime="20171030 15:17:09.066"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:17:12.717" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:17:12.717" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:12.717" status="PASS" starttime="20171030 15:17:09.070"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:12.719" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:12.719" status="PASS" starttime="20171030 15:17:12.718"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:12.720" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:12.720" status="PASS" starttime="20171030 15:17:12.720"></status>
</kw>
<status endtime="20171030 15:17:12.720" status="PASS" starttime="20171030 15:17:12.719"></status>
</kw>
<status endtime="20171030 15:17:12.720" status="PASS" starttime="20171030 15:17:12.718"></status>
</kw>
<status endtime="20171030 15:17:12.720" status="PASS" starttime="20171030 15:17:12.717"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:17:12.721" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:17:12.721" status="PASS" starttime="20171030 15:17:12.721"></status>
</kw>
<msg timestamp="20171030 15:17:12.721" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:12.721" status="PASS" starttime="20171030 15:17:07.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:12.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:12.722" status="PASS" starttime="20171030 15:17:12.721"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:17:12.722" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:17:12.722" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:17:12.723" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:17:12.723" status="PASS" starttime="20171030 15:17:12.722"></status>
</kw>
<msg timestamp="20171030 15:17:12.723" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:17:12.723" status="PASS" starttime="20171030 15:17:07.702"></status>
</kw>
<msg timestamp="20171030 15:17:12.723" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:17:12.723" status="PASS" starttime="20171030 15:17:07.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:17:12.724" status="PASS" starttime="20171030 15:17:12.724"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:17:12.729" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:17:12.729" status="PASS" starttime="20171030 15:17:12.729"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:17:12.731" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:17:12.731" status="PASS" starttime="20171030 15:17:12.730"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:17:12.731" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:17:12.731" status="PASS" starttime="20171030 15:17:12.731"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:17:12.732" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:17:12.732" status="PASS" starttime="20171030 15:17:12.732"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:17:13.819" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:17:13.819" status="PASS" starttime="20171030 15:17:12.733"></status>
</kw>
<msg timestamp="20171030 15:17:13.819" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:17:13.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:13.819" status="PASS" starttime="20171030 15:17:12.732"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:17:13.820" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:13.820" status="PASS" starttime="20171030 15:17:13.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:13.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:13.821" status="PASS" starttime="20171030 15:17:13.820"></status>
</kw>
<status endtime="20171030 15:17:13.821" status="PASS" starttime="20171030 15:17:12.728"></status>
</kw>
<status endtime="20171030 15:17:13.821" status="PASS" starttime="20171030 15:17:12.727"></status>
</kw>
<status endtime="20171030 15:17:13.821" status="PASS" starttime="20171030 15:17:12.727"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:17:13.822" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:17:13.822" status="PASS" starttime="20171030 15:17:13.821"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:13.824" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:17:13.824" status="PASS" starttime="20171030 15:17:13.823"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:13.825" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:17:13.825" status="PASS" starttime="20171030 15:17:13.825"></status>
</kw>
<status endtime="20171030 15:17:13.825" status="PASS" starttime="20171030 15:17:13.824"></status>
</kw>
<status endtime="20171030 15:17:13.825" status="PASS" starttime="20171030 15:17:13.822"></status>
</kw>
<status endtime="20171030 15:17:13.825" status="PASS" starttime="20171030 15:17:13.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:17:14.138" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:17:14.138" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:14.138" status="PASS" starttime="20171030 15:17:13.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:14.140" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:14.140" status="PASS" starttime="20171030 15:17:14.140"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:14.141" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:14.141" status="PASS" starttime="20171030 15:17:14.141"></status>
</kw>
<status endtime="20171030 15:17:14.141" status="PASS" starttime="20171030 15:17:14.140"></status>
</kw>
<status endtime="20171030 15:17:14.141" status="PASS" starttime="20171030 15:17:14.139"></status>
</kw>
<status endtime="20171030 15:17:14.142" status="PASS" starttime="20171030 15:17:14.139"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:17:14.142" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:17:14.142" status="PASS" starttime="20171030 15:17:14.142"></status>
</kw>
<msg timestamp="20171030 15:17:14.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:14.142" status="PASS" starttime="20171030 15:17:12.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:14.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:14.143" status="PASS" starttime="20171030 15:17:14.143"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:17:14.143" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:17:14.144" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:17:14.144" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20171030 15:17:14.144" status="PASS" starttime="20171030 15:17:14.143"></status>
</kw>
<msg timestamp="20171030 15:17:14.144" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:17:14.144" status="PASS" starttime="20171030 15:17:12.725"></status>
</kw>
<msg timestamp="20171030 15:17:14.144" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:17:14.144" status="PASS" starttime="20171030 15:17:12.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:17:14.145" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:14.145" status="PASS" starttime="20171030 15:17:14.144"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:17:14.149" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:17:14.149" status="PASS" starttime="20171030 15:17:14.148"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:17:14.149" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:17:14.150" status="PASS" starttime="20171030 15:17:14.149"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:17:14.150" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:17:14.150" status="PASS" starttime="20171030 15:17:14.150"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:17:14.151" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:17:14.151" status="PASS" starttime="20171030 15:17:14.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:17:14.899" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:17:14.899" status="PASS" starttime="20171030 15:17:14.152"></status>
</kw>
<msg timestamp="20171030 15:17:14.900" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:17:14.900" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:14.900" status="PASS" starttime="20171030 15:17:14.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:17:14.900" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:14.900" status="PASS" starttime="20171030 15:17:14.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:14.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:14.901" status="PASS" starttime="20171030 15:17:14.901"></status>
</kw>
<status endtime="20171030 15:17:14.901" status="PASS" starttime="20171030 15:17:14.148"></status>
</kw>
<status endtime="20171030 15:17:14.901" status="PASS" starttime="20171030 15:17:14.147"></status>
</kw>
<status endtime="20171030 15:17:14.901" status="PASS" starttime="20171030 15:17:14.147"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:17:14.902" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20171030 15:17:14.902" status="PASS" starttime="20171030 15:17:14.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:14.904" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:14.904" status="PASS" starttime="20171030 15:17:14.903"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:14.905" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:14.905" status="PASS" starttime="20171030 15:17:14.905"></status>
</kw>
<status endtime="20171030 15:17:14.905" status="PASS" starttime="20171030 15:17:14.904"></status>
</kw>
<status endtime="20171030 15:17:14.905" status="PASS" starttime="20171030 15:17:14.903"></status>
</kw>
<status endtime="20171030 15:17:14.906" status="PASS" starttime="20171030 15:17:14.902"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:17:16.439" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171030 15:17:16.440" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:16.440" status="PASS" starttime="20171030 15:17:14.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:16.442" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:16.442" status="PASS" starttime="20171030 15:17:16.442"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:16.443" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:16.443" status="PASS" starttime="20171030 15:17:16.443"></status>
</kw>
<status endtime="20171030 15:17:16.443" status="PASS" starttime="20171030 15:17:16.442"></status>
</kw>
<status endtime="20171030 15:17:16.443" status="PASS" starttime="20171030 15:17:16.441"></status>
</kw>
<status endtime="20171030 15:17:16.443" status="PASS" starttime="20171030 15:17:16.441"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:17:16.444" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:17:16.444" status="PASS" starttime="20171030 15:17:16.444"></status>
</kw>
<msg timestamp="20171030 15:17:16.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:16.444" status="PASS" starttime="20171030 15:17:14.146"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:16.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:16.445" status="PASS" starttime="20171030 15:17:16.445"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:17:16.446" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:17:16.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:17:16.446" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20171030 15:17:16.446" status="PASS" starttime="20171030 15:17:16.446"></status>
</kw>
<msg timestamp="20171030 15:17:16.446" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:17:16.446" status="PASS" starttime="20171030 15:17:14.145"></status>
</kw>
<msg timestamp="20171030 15:17:16.447" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:17:16.447" status="PASS" starttime="20171030 15:17:14.145"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171030 15:17:16.447" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:17:16.447" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:17:16.447" status="FAIL" starttime="20171030 15:17:16.447"></status>
</kw>
<status endtime="20171030 15:17:16.448" status="FAIL" starttime="20171030 15:17:12.724"></status>
</kw>
<status endtime="20171030 15:17:16.448" status="FAIL" starttime="20171030 15:17:02.979"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:17:26.457" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:17:26.458" status="PASS" starttime="20171030 15:17:26.457"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:17:26.458" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:17:26.458" status="PASS" starttime="20171030 15:17:26.458"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:17:26.459" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:17:26.459" status="PASS" starttime="20171030 15:17:26.459"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:17:26.460" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:17:26.460" status="PASS" starttime="20171030 15:17:26.459"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:17:27.476" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:17:27.476" status="PASS" starttime="20171030 15:17:26.461"></status>
</kw>
<msg timestamp="20171030 15:17:27.476" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:17:27.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:27.476" status="PASS" starttime="20171030 15:17:26.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:17:27.477" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:27.477" status="PASS" starttime="20171030 15:17:27.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:27.478" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:27.478" status="PASS" starttime="20171030 15:17:27.477"></status>
</kw>
<status endtime="20171030 15:17:27.478" status="PASS" starttime="20171030 15:17:26.452"></status>
</kw>
<status endtime="20171030 15:17:27.478" status="PASS" starttime="20171030 15:17:26.451"></status>
</kw>
<status endtime="20171030 15:17:27.478" status="PASS" starttime="20171030 15:17:26.451"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:17:27.479" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:17:27.479" status="PASS" starttime="20171030 15:17:27.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:27.481" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:27.481" status="PASS" starttime="20171030 15:17:27.481"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:27.482" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:27.482" status="PASS" starttime="20171030 15:17:27.482"></status>
</kw>
<status endtime="20171030 15:17:27.482" status="PASS" starttime="20171030 15:17:27.481"></status>
</kw>
<status endtime="20171030 15:17:27.482" status="PASS" starttime="20171030 15:17:27.480"></status>
</kw>
<status endtime="20171030 15:17:27.483" status="PASS" starttime="20171030 15:17:27.479"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:17:30.423" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:17:30.424" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:30.424" status="PASS" starttime="20171030 15:17:27.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:30.426" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:30.426" status="PASS" starttime="20171030 15:17:30.425"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:30.427" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:30.427" status="PASS" starttime="20171030 15:17:30.426"></status>
</kw>
<status endtime="20171030 15:17:30.427" status="PASS" starttime="20171030 15:17:30.426"></status>
</kw>
<status endtime="20171030 15:17:30.427" status="PASS" starttime="20171030 15:17:30.425"></status>
</kw>
<status endtime="20171030 15:17:30.427" status="PASS" starttime="20171030 15:17:30.424"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:17:30.428" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:17:30.428" status="PASS" starttime="20171030 15:17:30.428"></status>
</kw>
<msg timestamp="20171030 15:17:30.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:30.428" status="PASS" starttime="20171030 15:17:26.450"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:30.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:30.429" status="PASS" starttime="20171030 15:17:30.428"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:17:30.429" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:17:30.429" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:17:30.430" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:17:30.430" status="PASS" starttime="20171030 15:17:30.429"></status>
</kw>
<msg timestamp="20171030 15:17:30.430" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:17:30.430" status="PASS" starttime="20171030 15:17:26.450"></status>
</kw>
<msg timestamp="20171030 15:17:30.430" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:17:30.430" status="PASS" starttime="20171030 15:17:26.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:17:30.431" status="PASS" starttime="20171030 15:17:30.430"></status>
</kw>
<status endtime="20171030 15:17:30.431" status="PASS" starttime="20171030 15:17:26.449"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:17:30.435" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:17:30.435" status="PASS" starttime="20171030 15:17:30.434"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:17:30.435" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:17:30.436" status="PASS" starttime="20171030 15:17:30.435"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:17:30.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:17:30.436" status="PASS" starttime="20171030 15:17:30.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:17:30.437" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:17:30.437" status="PASS" starttime="20171030 15:17:30.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:17:31.825" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:17:31.825" status="PASS" starttime="20171030 15:17:30.438"></status>
</kw>
<msg timestamp="20171030 15:17:31.825" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:17:31.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:31.825" status="PASS" starttime="20171030 15:17:30.437"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:17:31.826" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:31.826" status="PASS" starttime="20171030 15:17:31.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:31.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:31.827" status="PASS" starttime="20171030 15:17:31.826"></status>
</kw>
<status endtime="20171030 15:17:31.827" status="PASS" starttime="20171030 15:17:30.434"></status>
</kw>
<status endtime="20171030 15:17:31.827" status="PASS" starttime="20171030 15:17:30.433"></status>
</kw>
<status endtime="20171030 15:17:31.827" status="PASS" starttime="20171030 15:17:30.433"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:17:31.828" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:17:31.828" status="PASS" starttime="20171030 15:17:31.827"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:31.830" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:31.830" status="PASS" starttime="20171030 15:17:31.829"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:31.831" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:31.831" status="PASS" starttime="20171030 15:17:31.831"></status>
</kw>
<status endtime="20171030 15:17:31.831" status="PASS" starttime="20171030 15:17:31.830"></status>
</kw>
<status endtime="20171030 15:17:31.832" status="PASS" starttime="20171030 15:17:31.829"></status>
</kw>
<status endtime="20171030 15:17:31.832" status="PASS" starttime="20171030 15:17:31.828"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:17:32.343" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:17:32.343" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:32.343" status="PASS" starttime="20171030 15:17:31.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:32.345" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:32.345" status="PASS" starttime="20171030 15:17:32.345"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:32.346" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:32.346" status="PASS" starttime="20171030 15:17:32.346"></status>
</kw>
<status endtime="20171030 15:17:32.347" status="PASS" starttime="20171030 15:17:32.346"></status>
</kw>
<status endtime="20171030 15:17:32.347" status="PASS" starttime="20171030 15:17:32.344"></status>
</kw>
<status endtime="20171030 15:17:32.347" status="PASS" starttime="20171030 15:17:32.344"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:17:32.347" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:17:32.347" status="PASS" starttime="20171030 15:17:32.347"></status>
</kw>
<msg timestamp="20171030 15:17:32.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:32.347" status="PASS" starttime="20171030 15:17:30.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:32.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:32.348" status="PASS" starttime="20171030 15:17:32.348"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:17:32.349" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:17:32.349" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:17:32.349" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:17:32.349" status="PASS" starttime="20171030 15:17:32.348"></status>
</kw>
<msg timestamp="20171030 15:17:32.349" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:17:32.349" status="PASS" starttime="20171030 15:17:30.431"></status>
</kw>
<msg timestamp="20171030 15:17:32.350" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:17:32.350" status="PASS" starttime="20171030 15:17:30.431"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:17:32.350" status="PASS" starttime="20171030 15:17:32.350"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:17:32.354" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:17:32.354" status="PASS" starttime="20171030 15:17:32.354"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:17:32.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:17:32.355" status="PASS" starttime="20171030 15:17:32.355"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:17:32.356" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:17:32.356" status="PASS" starttime="20171030 15:17:32.355"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:17:32.356" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:17:32.356" status="PASS" starttime="20171030 15:17:32.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:17:32.723" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:17:32.724" status="PASS" starttime="20171030 15:17:32.357"></status>
</kw>
<msg timestamp="20171030 15:17:32.724" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:17:32.724" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:32.724" status="PASS" starttime="20171030 15:17:32.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:17:32.725" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:32.725" status="PASS" starttime="20171030 15:17:32.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:32.725" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:32.725" status="PASS" starttime="20171030 15:17:32.725"></status>
</kw>
<status endtime="20171030 15:17:32.726" status="PASS" starttime="20171030 15:17:32.353"></status>
</kw>
<status endtime="20171030 15:17:32.726" status="PASS" starttime="20171030 15:17:32.353"></status>
</kw>
<status endtime="20171030 15:17:32.726" status="PASS" starttime="20171030 15:17:32.352"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:17:32.726" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:17:32.726" status="PASS" starttime="20171030 15:17:32.726"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:32.729" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:17:32.729" status="PASS" starttime="20171030 15:17:32.728"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:32.729" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:17:32.730" status="PASS" starttime="20171030 15:17:32.729"></status>
</kw>
<status endtime="20171030 15:17:32.730" status="PASS" starttime="20171030 15:17:32.729"></status>
</kw>
<status endtime="20171030 15:17:32.730" status="PASS" starttime="20171030 15:17:32.727"></status>
</kw>
<status endtime="20171030 15:17:32.730" status="PASS" starttime="20171030 15:17:32.727"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:17:33.146" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:17:33.147" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:33.147" status="PASS" starttime="20171030 15:17:32.730"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:33.149" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:33.149" status="PASS" starttime="20171030 15:17:33.148"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:33.150" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:33.150" status="PASS" starttime="20171030 15:17:33.150"></status>
</kw>
<status endtime="20171030 15:17:33.150" status="PASS" starttime="20171030 15:17:33.149"></status>
</kw>
<status endtime="20171030 15:17:33.150" status="PASS" starttime="20171030 15:17:33.148"></status>
</kw>
<status endtime="20171030 15:17:33.150" status="PASS" starttime="20171030 15:17:33.147"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:17:33.151" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:17:33.151" status="PASS" starttime="20171030 15:17:33.151"></status>
</kw>
<msg timestamp="20171030 15:17:33.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:33.151" status="PASS" starttime="20171030 15:17:32.352"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:33.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:33.152" status="PASS" starttime="20171030 15:17:33.151"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:17:33.152" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:17:33.152" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:17:33.152" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20171030 15:17:33.152" status="PASS" starttime="20171030 15:17:33.152"></status>
</kw>
<msg timestamp="20171030 15:17:33.153" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:17:33.153" status="PASS" starttime="20171030 15:17:32.351"></status>
</kw>
<msg timestamp="20171030 15:17:33.153" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:17:33.153" status="PASS" starttime="20171030 15:17:32.351"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:17:33.154" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:33.154" status="PASS" starttime="20171030 15:17:33.153"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:17:33.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:17:33.158" status="PASS" starttime="20171030 15:17:33.157"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:17:33.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:17:33.159" status="PASS" starttime="20171030 15:17:33.158"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:17:33.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:17:33.160" status="PASS" starttime="20171030 15:17:33.159"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:17:33.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:17:33.160" status="PASS" starttime="20171030 15:17:33.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:17:33.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:17:33.990" status="PASS" starttime="20171030 15:17:33.161"></status>
</kw>
<msg timestamp="20171030 15:17:33.990" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:17:33.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:33.990" status="PASS" starttime="20171030 15:17:33.161"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:17:33.990" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:33.991" status="PASS" starttime="20171030 15:17:33.990"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:33.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:33.991" status="PASS" starttime="20171030 15:17:33.991"></status>
</kw>
<status endtime="20171030 15:17:33.991" status="PASS" starttime="20171030 15:17:33.156"></status>
</kw>
<status endtime="20171030 15:17:33.992" status="PASS" starttime="20171030 15:17:33.156"></status>
</kw>
<status endtime="20171030 15:17:33.992" status="PASS" starttime="20171030 15:17:33.155"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:17:33.992" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20171030 15:17:33.992" status="PASS" starttime="20171030 15:17:33.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:33.995" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:33.995" status="PASS" starttime="20171030 15:17:33.994"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:33.996" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:33.996" status="PASS" starttime="20171030 15:17:33.995"></status>
</kw>
<status endtime="20171030 15:17:33.996" status="PASS" starttime="20171030 15:17:33.995"></status>
</kw>
<status endtime="20171030 15:17:33.996" status="PASS" starttime="20171030 15:17:33.993"></status>
</kw>
<status endtime="20171030 15:17:33.996" status="PASS" starttime="20171030 15:17:33.993"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:17:34.640" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171030 15:17:34.641" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:34.641" status="PASS" starttime="20171030 15:17:33.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:34.643" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:34.643" status="PASS" starttime="20171030 15:17:34.642"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:34.644" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:34.644" status="PASS" starttime="20171030 15:17:34.644"></status>
</kw>
<status endtime="20171030 15:17:34.644" status="PASS" starttime="20171030 15:17:34.643"></status>
</kw>
<status endtime="20171030 15:17:34.645" status="PASS" starttime="20171030 15:17:34.642"></status>
</kw>
<status endtime="20171030 15:17:34.645" status="PASS" starttime="20171030 15:17:34.641"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:17:34.645" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:17:34.645" status="PASS" starttime="20171030 15:17:34.645"></status>
</kw>
<msg timestamp="20171030 15:17:34.645" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:34.645" status="PASS" starttime="20171030 15:17:33.155"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:34.646" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:34.646" status="PASS" starttime="20171030 15:17:34.646"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:17:34.647" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:17:34.647" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:17:34.647" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20171030 15:17:34.647" status="PASS" starttime="20171030 15:17:34.646"></status>
</kw>
<msg timestamp="20171030 15:17:34.647" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:17:34.647" status="PASS" starttime="20171030 15:17:33.154"></status>
</kw>
<msg timestamp="20171030 15:17:34.647" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:17:34.647" status="PASS" starttime="20171030 15:17:33.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171030 15:17:34.648" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:17:34.648" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:17:34.648" status="FAIL" starttime="20171030 15:17:34.648"></status>
</kw>
<status endtime="20171030 15:17:34.649" status="FAIL" starttime="20171030 15:17:32.350"></status>
</kw>
<status endtime="20171030 15:17:34.649" status="FAIL" starttime="20171030 15:17:26.448"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:17:44.654" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:17:44.654" status="PASS" starttime="20171030 15:17:44.654"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:17:44.655" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:17:44.655" status="PASS" starttime="20171030 15:17:44.655"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:17:44.655" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:17:44.656" status="PASS" starttime="20171030 15:17:44.655"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:17:44.656" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:17:44.656" status="PASS" starttime="20171030 15:17:44.656"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:17:45.245" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:17:45.245" status="PASS" starttime="20171030 15:17:44.657"></status>
</kw>
<msg timestamp="20171030 15:17:45.246" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:17:45.246" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:45.246" status="PASS" starttime="20171030 15:17:44.657"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:17:45.246" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:45.246" status="PASS" starttime="20171030 15:17:45.246"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:45.247" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:45.247" status="PASS" starttime="20171030 15:17:45.247"></status>
</kw>
<status endtime="20171030 15:17:45.247" status="PASS" starttime="20171030 15:17:44.653"></status>
</kw>
<status endtime="20171030 15:17:45.247" status="PASS" starttime="20171030 15:17:44.653"></status>
</kw>
<status endtime="20171030 15:17:45.247" status="PASS" starttime="20171030 15:17:44.652"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:17:45.248" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:17:45.248" status="PASS" starttime="20171030 15:17:45.248"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:45.250" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:45.250" status="PASS" starttime="20171030 15:17:45.250"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:45.251" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:45.251" status="PASS" starttime="20171030 15:17:45.251"></status>
</kw>
<status endtime="20171030 15:17:45.252" status="PASS" starttime="20171030 15:17:45.250"></status>
</kw>
<status endtime="20171030 15:17:45.252" status="PASS" starttime="20171030 15:17:45.249"></status>
</kw>
<status endtime="20171030 15:17:45.252" status="PASS" starttime="20171030 15:17:45.248"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:17:46.018" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:17:46.018" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:46.019" status="PASS" starttime="20171030 15:17:45.252"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:46.021" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:46.021" status="PASS" starttime="20171030 15:17:46.020"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:46.022" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:46.022" status="PASS" starttime="20171030 15:17:46.022"></status>
</kw>
<status endtime="20171030 15:17:46.022" status="PASS" starttime="20171030 15:17:46.021"></status>
</kw>
<status endtime="20171030 15:17:46.023" status="PASS" starttime="20171030 15:17:46.019"></status>
</kw>
<status endtime="20171030 15:17:46.023" status="PASS" starttime="20171030 15:17:46.019"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:17:46.023" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:17:46.023" status="PASS" starttime="20171030 15:17:46.023"></status>
</kw>
<msg timestamp="20171030 15:17:46.023" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:46.023" status="PASS" starttime="20171030 15:17:44.651"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:46.024" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:46.024" status="PASS" starttime="20171030 15:17:46.024"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:17:46.025" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:17:46.025" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:17:46.025" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:17:46.025" status="PASS" starttime="20171030 15:17:46.024"></status>
</kw>
<msg timestamp="20171030 15:17:46.025" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:17:46.025" status="PASS" starttime="20171030 15:17:44.651"></status>
</kw>
<msg timestamp="20171030 15:17:46.025" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:17:46.025" status="PASS" starttime="20171030 15:17:44.650"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:17:46.026" status="PASS" starttime="20171030 15:17:46.026"></status>
</kw>
<status endtime="20171030 15:17:46.026" status="PASS" starttime="20171030 15:17:44.650"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:17:46.030" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:17:46.031" status="PASS" starttime="20171030 15:17:46.029"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:17:46.031" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:17:46.031" status="PASS" starttime="20171030 15:17:46.031"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:17:46.032" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:17:46.032" status="PASS" starttime="20171030 15:17:46.031"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:17:46.032" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:17:46.032" status="PASS" starttime="20171030 15:17:46.032"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:17:46.711" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:17:46.711" status="PASS" starttime="20171030 15:17:46.033"></status>
</kw>
<msg timestamp="20171030 15:17:46.711" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:17:46.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:46.711" status="PASS" starttime="20171030 15:17:46.033"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:17:46.712" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:46.712" status="PASS" starttime="20171030 15:17:46.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:46.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:46.712" status="PASS" starttime="20171030 15:17:46.712"></status>
</kw>
<status endtime="20171030 15:17:46.713" status="PASS" starttime="20171030 15:17:46.029"></status>
</kw>
<status endtime="20171030 15:17:46.713" status="PASS" starttime="20171030 15:17:46.028"></status>
</kw>
<status endtime="20171030 15:17:46.713" status="PASS" starttime="20171030 15:17:46.028"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:17:46.713" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:17:46.713" status="PASS" starttime="20171030 15:17:46.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:46.716" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:46.716" status="PASS" starttime="20171030 15:17:46.715"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:46.717" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:46.717" status="PASS" starttime="20171030 15:17:46.716"></status>
</kw>
<status endtime="20171030 15:17:46.717" status="PASS" starttime="20171030 15:17:46.716"></status>
</kw>
<status endtime="20171030 15:17:46.717" status="PASS" starttime="20171030 15:17:46.714"></status>
</kw>
<status endtime="20171030 15:17:46.717" status="PASS" starttime="20171030 15:17:46.714"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:17:47.366" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:17:47.366" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:47.366" status="PASS" starttime="20171030 15:17:46.717"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:47.368" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:47.368" status="PASS" starttime="20171030 15:17:47.368"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:47.369" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:47.369" status="PASS" starttime="20171030 15:17:47.369"></status>
</kw>
<status endtime="20171030 15:17:47.369" status="PASS" starttime="20171030 15:17:47.368"></status>
</kw>
<status endtime="20171030 15:17:47.370" status="PASS" starttime="20171030 15:17:47.367"></status>
</kw>
<status endtime="20171030 15:17:47.370" status="PASS" starttime="20171030 15:17:47.367"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:17:47.370" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:17:47.370" status="PASS" starttime="20171030 15:17:47.370"></status>
</kw>
<msg timestamp="20171030 15:17:47.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:47.370" status="PASS" starttime="20171030 15:17:46.027"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:47.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:47.371" status="PASS" starttime="20171030 15:17:47.371"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:17:47.372" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:17:47.372" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:17:47.372" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:17:47.372" status="PASS" starttime="20171030 15:17:47.371"></status>
</kw>
<msg timestamp="20171030 15:17:47.372" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:17:47.372" status="PASS" starttime="20171030 15:17:46.027"></status>
</kw>
<msg timestamp="20171030 15:17:47.372" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:17:47.372" status="PASS" starttime="20171030 15:17:46.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:17:47.373" status="PASS" starttime="20171030 15:17:47.373"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:17:47.377" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:17:47.378" status="PASS" starttime="20171030 15:17:47.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:17:47.378" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:17:47.379" status="PASS" starttime="20171030 15:17:47.378"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:17:47.379" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:17:47.379" status="PASS" starttime="20171030 15:17:47.379"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:17:47.380" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:17:47.380" status="PASS" starttime="20171030 15:17:47.380"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:17:48.034" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:17:48.034" status="PASS" starttime="20171030 15:17:47.381"></status>
</kw>
<msg timestamp="20171030 15:17:48.035" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:17:48.035" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:48.035" status="PASS" starttime="20171030 15:17:47.380"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:17:48.035" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:48.035" status="PASS" starttime="20171030 15:17:48.035"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:48.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:48.036" status="PASS" starttime="20171030 15:17:48.036"></status>
</kw>
<status endtime="20171030 15:17:48.036" status="PASS" starttime="20171030 15:17:47.377"></status>
</kw>
<status endtime="20171030 15:17:48.036" status="PASS" starttime="20171030 15:17:47.376"></status>
</kw>
<status endtime="20171030 15:17:48.037" status="PASS" starttime="20171030 15:17:47.376"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:17:48.037" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:17:48.037" status="PASS" starttime="20171030 15:17:48.037"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:48.039" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:17:48.039" status="PASS" starttime="20171030 15:17:48.039"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:48.040" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:17:48.040" status="PASS" starttime="20171030 15:17:48.040"></status>
</kw>
<status endtime="20171030 15:17:48.040" status="PASS" starttime="20171030 15:17:48.039"></status>
</kw>
<status endtime="20171030 15:17:48.041" status="PASS" starttime="20171030 15:17:48.038"></status>
</kw>
<status endtime="20171030 15:17:48.041" status="PASS" starttime="20171030 15:17:48.037"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:17:51.279" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:17:51.280" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:51.280" status="PASS" starttime="20171030 15:17:48.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:51.281" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:51.282" status="PASS" starttime="20171030 15:17:51.281"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:51.282" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:51.283" status="PASS" starttime="20171030 15:17:51.282"></status>
</kw>
<status endtime="20171030 15:17:51.283" status="PASS" starttime="20171030 15:17:51.282"></status>
</kw>
<status endtime="20171030 15:17:51.283" status="PASS" starttime="20171030 15:17:51.280"></status>
</kw>
<status endtime="20171030 15:17:51.283" status="PASS" starttime="20171030 15:17:51.280"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:17:51.283" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:17:51.283" status="PASS" starttime="20171030 15:17:51.283"></status>
</kw>
<msg timestamp="20171030 15:17:51.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:51.284" status="PASS" starttime="20171030 15:17:47.375"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:51.284" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:51.284" status="PASS" starttime="20171030 15:17:51.284"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:17:51.285" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:17:51.285" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:17:51.285" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20171030 15:17:51.285" status="PASS" starttime="20171030 15:17:51.285"></status>
</kw>
<msg timestamp="20171030 15:17:51.285" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:17:51.285" status="PASS" starttime="20171030 15:17:47.374"></status>
</kw>
<msg timestamp="20171030 15:17:51.286" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:17:51.286" status="PASS" starttime="20171030 15:17:47.373"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:17:51.286" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:51.286" status="PASS" starttime="20171030 15:17:51.286"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:17:51.290" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:17:51.290" status="PASS" starttime="20171030 15:17:51.290"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:17:51.291" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:17:51.291" status="PASS" starttime="20171030 15:17:51.291"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:17:51.292" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:17:51.292" status="PASS" starttime="20171030 15:17:51.291"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:17:51.292" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:17:51.292" status="PASS" starttime="20171030 15:17:51.292"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:17:52.785" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:17:52.785" status="PASS" starttime="20171030 15:17:51.293"></status>
</kw>
<msg timestamp="20171030 15:17:52.785" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:17:52.786" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:52.786" status="PASS" starttime="20171030 15:17:51.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:17:52.786" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:52.786" status="PASS" starttime="20171030 15:17:52.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:52.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:52.787" status="PASS" starttime="20171030 15:17:52.787"></status>
</kw>
<status endtime="20171030 15:17:52.787" status="PASS" starttime="20171030 15:17:51.289"></status>
</kw>
<status endtime="20171030 15:17:52.787" status="PASS" starttime="20171030 15:17:51.289"></status>
</kw>
<status endtime="20171030 15:17:52.787" status="PASS" starttime="20171030 15:17:51.288"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:17:52.788" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20171030 15:17:52.788" status="PASS" starttime="20171030 15:17:52.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:52.790" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:52.790" status="PASS" starttime="20171030 15:17:52.790"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:52.791" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:17:52.791" status="PASS" starttime="20171030 15:17:52.791"></status>
</kw>
<status endtime="20171030 15:17:52.791" status="PASS" starttime="20171030 15:17:52.790"></status>
</kw>
<status endtime="20171030 15:17:52.792" status="PASS" starttime="20171030 15:17:52.789"></status>
</kw>
<status endtime="20171030 15:17:52.792" status="PASS" starttime="20171030 15:17:52.788"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:17:58.174" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171030 15:17:58.174" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:58.174" status="PASS" starttime="20171030 15:17:52.792"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:17:58.176" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:58.176" status="PASS" starttime="20171030 15:17:58.176"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:17:58.177" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:17:58.177" status="PASS" starttime="20171030 15:17:58.177"></status>
</kw>
<status endtime="20171030 15:17:58.178" status="PASS" starttime="20171030 15:17:58.177"></status>
</kw>
<status endtime="20171030 15:17:58.178" status="PASS" starttime="20171030 15:17:58.175"></status>
</kw>
<status endtime="20171030 15:17:58.178" status="PASS" starttime="20171030 15:17:58.175"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:17:58.178" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:17:58.178" status="PASS" starttime="20171030 15:17:58.178"></status>
</kw>
<msg timestamp="20171030 15:17:58.178" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:17:58.178" status="PASS" starttime="20171030 15:17:51.287"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:17:58.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:58.179" status="PASS" starttime="20171030 15:17:58.179"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:17:58.180" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:17:58.180" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:17:58.180" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete'}</msg>
<status endtime="20171030 15:17:58.180" status="PASS" starttime="20171030 15:17:58.179"></status>
</kw>
<msg timestamp="20171030 15:17:58.180" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status endtime="20171030 15:17:58.180" status="PASS" starttime="20171030 15:17:51.287"></status>
</kw>
<msg timestamp="20171030 15:17:58.180" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status endtime="20171030 15:17:58.180" status="PASS" starttime="20171030 15:17:51.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171030 15:17:58.181" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:17:58.181" status="PASS" starttime="20171030 15:17:58.181"></status>
</kw>
<status endtime="20171030 15:17:58.181" status="PASS" starttime="20171030 15:17:47.373"></status>
</kw>
<status endtime="20171030 15:17:58.181" status="PASS" starttime="20171030 15:17:44.649"></status>
</kw>
<status endtime="20171030 15:17:58.181" status="PASS" starttime="20171030 15:13:22.591"></status>
</kw>
<status endtime="20171030 15:17:58.182" status="PASS" starttime="20171030 15:13:21.872"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
</arguments>
<msg timestamp="20171030 15:18:28.182" level="INFO">Slept 30 seconds</msg>
<status endtime="20171030 15:18:28.183" status="PASS" starttime="20171030 15:17:58.182"></status>
</kw>
<status endtime="20171030 15:18:28.183" status="PASS" starttime="20171030 15:13:19.536"></status>
</kw>
<msg timestamp="20171030 15:18:28.183" level="INFO">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171030 15:18:28.185" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20171030 15:18:28.185" status="PASS" starttime="20171030 15:18:28.184"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:18:28.186" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20171030 15:18:28.186" status="PASS" starttime="20171030 15:18:28.186"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:18:28.189" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:18:28.190" status="PASS" starttime="20171030 15:18:28.189"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:18:28.191" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:18:28.191" status="PASS" starttime="20171030 15:18:28.190"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:18:28.191" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:18:28.191" status="PASS" starttime="20171030 15:18:28.191"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:18:28.192" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:18:28.192" status="PASS" starttime="20171030 15:18:28.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:18:28.835" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:18:28.835" status="PASS" starttime="20171030 15:18:28.193"></status>
</kw>
<msg timestamp="20171030 15:18:28.835" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:18:28.835" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:18:28.835" status="PASS" starttime="20171030 15:18:28.192"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:18:28.836" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:18:28.836" status="PASS" starttime="20171030 15:18:28.836"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:18:28.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:18:28.837" status="PASS" starttime="20171030 15:18:28.836"></status>
</kw>
<status endtime="20171030 15:18:28.837" status="PASS" starttime="20171030 15:18:28.188"></status>
</kw>
<status endtime="20171030 15:18:28.837" status="PASS" starttime="20171030 15:18:28.188"></status>
</kw>
<status endtime="20171030 15:18:28.837" status="PASS" starttime="20171030 15:18:28.187"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:18:28.838" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20171030 15:18:28.838" status="PASS" starttime="20171030 15:18:28.837"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:18:28.838" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:18:28.838" status="PASS" starttime="20171030 15:18:28.838"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20171030 15:18:28.839" status="PASS" starttime="20171030 15:18:28.839"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:18:28.841" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20171030 15:18:28.841" status="PASS" starttime="20171030 15:18:28.840"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:18:28.842" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20171030 15:18:28.842" status="PASS" starttime="20171030 15:18:28.841"></status>
</kw>
<status endtime="20171030 15:18:28.842" status="PASS" starttime="20171030 15:18:28.841"></status>
</kw>
<status endtime="20171030 15:18:28.842" status="PASS" starttime="20171030 15:18:28.839"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:18:34.255" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171030 15:18:34.255" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:18:34.255" status="PASS" starttime="20171030 15:18:28.842"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:18:34.257" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:18:34.257" status="PASS" starttime="20171030 15:18:34.256"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:18:34.258" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:18:34.258" status="PASS" starttime="20171030 15:18:34.258"></status>
</kw>
<status endtime="20171030 15:18:34.258" status="PASS" starttime="20171030 15:18:34.257"></status>
</kw>
<status endtime="20171030 15:18:34.259" status="PASS" starttime="20171030 15:18:34.256"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:18:34.259" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:18:34.259" status="PASS" starttime="20171030 15:18:34.259"></status>
</kw>
<msg timestamp="20171030 15:18:34.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:18:34.259" status="PASS" starttime="20171030 15:18:28.186"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:18:34.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:18:34.260" status="PASS" starttime="20171030 15:18:34.260"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171030 15:18:34.261" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20171030 15:18:34.261" status="PASS" starttime="20171030 15:18:34.260"></status>
</kw>
<status endtime="20171030 15:18:34.261" status="PASS" starttime="20171030 15:18:28.185"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20171030 15:18:34.262" status="PASS" starttime="20171030 15:18:34.261"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:18:34.270" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:18:34.271" status="PASS" starttime="20171030 15:18:34.270"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:18:34.272" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:18:34.272" status="PASS" starttime="20171030 15:18:34.271"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:18:34.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:18:34.272" status="PASS" starttime="20171030 15:18:34.272"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:18:34.273" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:18:34.273" status="PASS" starttime="20171030 15:18:34.273"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:18:37.156" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:18:37.156" status="PASS" starttime="20171030 15:18:34.274"></status>
</kw>
<msg timestamp="20171030 15:18:37.156" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:18:37.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:18:37.156" status="PASS" starttime="20171030 15:18:34.273"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:18:37.157" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:18:37.157" status="PASS" starttime="20171030 15:18:37.156"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:18:37.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:18:37.157" status="PASS" starttime="20171030 15:18:37.157"></status>
</kw>
<status endtime="20171030 15:18:37.158" status="PASS" starttime="20171030 15:18:34.270"></status>
</kw>
<status endtime="20171030 15:18:37.158" status="PASS" starttime="20171030 15:18:34.269"></status>
</kw>
<status endtime="20171030 15:18:37.158" status="PASS" starttime="20171030 15:18:34.268"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:18:37.158" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:18:37.158" status="PASS" starttime="20171030 15:18:37.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:18:37.160" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:18:37.161" status="PASS" starttime="20171030 15:18:37.160"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:18:37.161" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:18:37.162" status="PASS" starttime="20171030 15:18:37.161"></status>
</kw>
<status endtime="20171030 15:18:37.162" status="PASS" starttime="20171030 15:18:37.161"></status>
</kw>
<status endtime="20171030 15:18:37.162" status="PASS" starttime="20171030 15:18:37.159"></status>
</kw>
<status endtime="20171030 15:18:37.162" status="PASS" starttime="20171030 15:18:37.159"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:18:41.770" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:18:41.770" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:18:41.770" status="PASS" starttime="20171030 15:18:37.162"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:18:41.772" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:18:41.772" status="PASS" starttime="20171030 15:18:41.772"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:18:41.773" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:18:41.773" status="PASS" starttime="20171030 15:18:41.773"></status>
</kw>
<status endtime="20171030 15:18:41.773" status="PASS" starttime="20171030 15:18:41.772"></status>
</kw>
<status endtime="20171030 15:18:41.773" status="PASS" starttime="20171030 15:18:41.771"></status>
</kw>
<status endtime="20171030 15:18:41.773" status="PASS" starttime="20171030 15:18:41.770"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:18:41.774" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:18:41.774" status="PASS" starttime="20171030 15:18:41.774"></status>
</kw>
<msg timestamp="20171030 15:18:41.774" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:18:41.774" status="PASS" starttime="20171030 15:18:34.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:18:41.775" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:18:41.775" status="PASS" starttime="20171030 15:18:41.774"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:18:41.776" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:18:41.776" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:18:41.776" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:18:41.776" status="PASS" starttime="20171030 15:18:41.775"></status>
</kw>
<msg timestamp="20171030 15:18:41.776" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:18:41.776" status="PASS" starttime="20171030 15:18:34.267"></status>
</kw>
<msg timestamp="20171030 15:18:41.776" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:18:41.776" status="PASS" starttime="20171030 15:18:34.267"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:18:41.777" level="FAIL">Off != On</msg>
<status endtime="20171030 15:18:41.777" status="FAIL" starttime="20171030 15:18:41.777"></status>
</kw>
<status endtime="20171030 15:18:41.777" status="FAIL" starttime="20171030 15:18:34.266"></status>
</kw>
<status endtime="20171030 15:18:41.777" status="FAIL" starttime="20171030 15:18:34.266"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:18:51.783" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:18:51.784" status="PASS" starttime="20171030 15:18:51.783"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:18:51.784" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:18:51.784" status="PASS" starttime="20171030 15:18:51.784"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:18:51.785" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:18:51.785" status="PASS" starttime="20171030 15:18:51.785"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:18:51.786" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:18:51.786" status="PASS" starttime="20171030 15:18:51.785"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:18:52.265" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:18:52.265" status="PASS" starttime="20171030 15:18:51.786"></status>
</kw>
<msg timestamp="20171030 15:18:52.265" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:18:52.265" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:18:52.265" status="PASS" starttime="20171030 15:18:51.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:18:52.266" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:18:52.266" status="PASS" starttime="20171030 15:18:52.265"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:18:52.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:18:52.266" status="PASS" starttime="20171030 15:18:52.266"></status>
</kw>
<status endtime="20171030 15:18:52.267" status="PASS" starttime="20171030 15:18:51.782"></status>
</kw>
<status endtime="20171030 15:18:52.267" status="PASS" starttime="20171030 15:18:51.781"></status>
</kw>
<status endtime="20171030 15:18:52.267" status="PASS" starttime="20171030 15:18:51.781"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:18:52.267" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:18:52.267" status="PASS" starttime="20171030 15:18:52.267"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:18:52.270" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:18:52.270" status="PASS" starttime="20171030 15:18:52.269"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:18:52.271" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:18:52.271" status="PASS" starttime="20171030 15:18:52.270"></status>
</kw>
<status endtime="20171030 15:18:52.271" status="PASS" starttime="20171030 15:18:52.270"></status>
</kw>
<status endtime="20171030 15:18:52.271" status="PASS" starttime="20171030 15:18:52.268"></status>
</kw>
<status endtime="20171030 15:18:52.271" status="PASS" starttime="20171030 15:18:52.268"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:18:52.548" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:18:52.548" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:18:52.548" status="PASS" starttime="20171030 15:18:52.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:18:52.550" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:18:52.551" status="PASS" starttime="20171030 15:18:52.550"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:18:52.552" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:18:52.552" status="PASS" starttime="20171030 15:18:52.552"></status>
</kw>
<status endtime="20171030 15:18:52.552" status="PASS" starttime="20171030 15:18:52.551"></status>
</kw>
<status endtime="20171030 15:18:52.552" status="PASS" starttime="20171030 15:18:52.549"></status>
</kw>
<status endtime="20171030 15:18:52.552" status="PASS" starttime="20171030 15:18:52.549"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:18:52.553" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:18:52.553" status="PASS" starttime="20171030 15:18:52.553"></status>
</kw>
<msg timestamp="20171030 15:18:52.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:18:52.553" status="PASS" starttime="20171030 15:18:51.780"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:18:52.554" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:18:52.554" status="PASS" starttime="20171030 15:18:52.553"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:18:52.554" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:18:52.554" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:18:52.554" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:18:52.554" status="PASS" starttime="20171030 15:18:52.554"></status>
</kw>
<msg timestamp="20171030 15:18:52.555" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:18:52.555" status="PASS" starttime="20171030 15:18:51.779"></status>
</kw>
<msg timestamp="20171030 15:18:52.555" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:18:52.555" status="PASS" starttime="20171030 15:18:51.779"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:18:52.556" level="FAIL">Off != On</msg>
<status endtime="20171030 15:18:52.556" status="FAIL" starttime="20171030 15:18:52.555"></status>
</kw>
<status endtime="20171030 15:18:52.556" status="FAIL" starttime="20171030 15:18:51.779"></status>
</kw>
<status endtime="20171030 15:18:52.556" status="FAIL" starttime="20171030 15:18:51.778"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:19:02.562" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:19:02.562" status="PASS" starttime="20171030 15:19:02.562"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:19:02.563" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:19:02.563" status="PASS" starttime="20171030 15:19:02.563"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:19:02.564" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:19:02.564" status="PASS" starttime="20171030 15:19:02.563"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:19:02.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:19:02.565" status="PASS" starttime="20171030 15:19:02.564"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:19:02.754" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:19:02.754" status="PASS" starttime="20171030 15:19:02.565"></status>
</kw>
<msg timestamp="20171030 15:19:02.754" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:19:02.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:02.754" status="PASS" starttime="20171030 15:19:02.565"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:19:02.755" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:02.755" status="PASS" starttime="20171030 15:19:02.755"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:19:02.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:02.756" status="PASS" starttime="20171030 15:19:02.755"></status>
</kw>
<status endtime="20171030 15:19:02.756" status="PASS" starttime="20171030 15:19:02.561"></status>
</kw>
<status endtime="20171030 15:19:02.756" status="PASS" starttime="20171030 15:19:02.561"></status>
</kw>
<status endtime="20171030 15:19:02.756" status="PASS" starttime="20171030 15:19:02.560"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:19:02.757" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:19:02.757" status="PASS" starttime="20171030 15:19:02.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:19:02.759" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:19:02.759" status="PASS" starttime="20171030 15:19:02.758"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:19:02.760" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:19:02.760" status="PASS" starttime="20171030 15:19:02.760"></status>
</kw>
<status endtime="20171030 15:19:02.760" status="PASS" starttime="20171030 15:19:02.759"></status>
</kw>
<status endtime="20171030 15:19:02.760" status="PASS" starttime="20171030 15:19:02.757"></status>
</kw>
<status endtime="20171030 15:19:02.760" status="PASS" starttime="20171030 15:19:02.757"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:19:02.858" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:19:02.858" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:02.858" status="PASS" starttime="20171030 15:19:02.760"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:19:02.860" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:19:02.860" status="PASS" starttime="20171030 15:19:02.860"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:19:02.861" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:19:02.861" status="PASS" starttime="20171030 15:19:02.861"></status>
</kw>
<status endtime="20171030 15:19:02.861" status="PASS" starttime="20171030 15:19:02.860"></status>
</kw>
<status endtime="20171030 15:19:02.862" status="PASS" starttime="20171030 15:19:02.859"></status>
</kw>
<status endtime="20171030 15:19:02.862" status="PASS" starttime="20171030 15:19:02.859"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:19:02.862" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:19:02.862" status="PASS" starttime="20171030 15:19:02.862"></status>
</kw>
<msg timestamp="20171030 15:19:02.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:02.862" status="PASS" starttime="20171030 15:19:02.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:19:02.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:02.863" status="PASS" starttime="20171030 15:19:02.863"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:19:02.864" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:19:02.864" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:19:02.864" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:19:02.864" status="PASS" starttime="20171030 15:19:02.863"></status>
</kw>
<msg timestamp="20171030 15:19:02.864" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:19:02.864" status="PASS" starttime="20171030 15:19:02.558"></status>
</kw>
<msg timestamp="20171030 15:19:02.864" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:19:02.864" status="PASS" starttime="20171030 15:19:02.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:19:02.865" level="FAIL">Off != On</msg>
<status endtime="20171030 15:19:02.865" status="FAIL" starttime="20171030 15:19:02.865"></status>
</kw>
<status endtime="20171030 15:19:02.865" status="FAIL" starttime="20171030 15:19:02.558"></status>
</kw>
<status endtime="20171030 15:19:02.865" status="FAIL" starttime="20171030 15:19:02.557"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:19:12.872" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:19:12.873" status="PASS" starttime="20171030 15:19:12.871"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:19:12.873" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:19:12.873" status="PASS" starttime="20171030 15:19:12.873"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:19:12.874" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:19:12.874" status="PASS" starttime="20171030 15:19:12.874"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:19:12.875" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:19:12.875" status="PASS" starttime="20171030 15:19:12.874"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:19:13.073" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:19:13.073" status="PASS" starttime="20171030 15:19:12.875"></status>
</kw>
<msg timestamp="20171030 15:19:13.073" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:19:13.073" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:13.073" status="PASS" starttime="20171030 15:19:12.875"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:19:13.074" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:13.074" status="PASS" starttime="20171030 15:19:13.073"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:19:13.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:13.075" status="PASS" starttime="20171030 15:19:13.074"></status>
</kw>
<status endtime="20171030 15:19:13.075" status="PASS" starttime="20171030 15:19:12.870"></status>
</kw>
<status endtime="20171030 15:19:13.075" status="PASS" starttime="20171030 15:19:12.870"></status>
</kw>
<status endtime="20171030 15:19:13.075" status="PASS" starttime="20171030 15:19:12.869"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:19:13.076" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:19:13.076" status="PASS" starttime="20171030 15:19:13.075"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:19:13.078" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:19:13.078" status="PASS" starttime="20171030 15:19:13.077"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:19:13.079" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:19:13.079" status="PASS" starttime="20171030 15:19:13.078"></status>
</kw>
<status endtime="20171030 15:19:13.079" status="PASS" starttime="20171030 15:19:13.078"></status>
</kw>
<status endtime="20171030 15:19:13.079" status="PASS" starttime="20171030 15:19:13.076"></status>
</kw>
<status endtime="20171030 15:19:13.079" status="PASS" starttime="20171030 15:19:13.076"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:19:13.147" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:19:13.147" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:13.147" status="PASS" starttime="20171030 15:19:13.079"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:19:13.149" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:19:13.149" status="PASS" starttime="20171030 15:19:13.148"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:19:13.150" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:19:13.150" status="PASS" starttime="20171030 15:19:13.150"></status>
</kw>
<status endtime="20171030 15:19:13.151" status="PASS" starttime="20171030 15:19:13.149"></status>
</kw>
<status endtime="20171030 15:19:13.151" status="PASS" starttime="20171030 15:19:13.148"></status>
</kw>
<status endtime="20171030 15:19:13.151" status="PASS" starttime="20171030 15:19:13.147"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:19:13.151" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:19:13.151" status="PASS" starttime="20171030 15:19:13.151"></status>
</kw>
<msg timestamp="20171030 15:19:13.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:13.152" status="PASS" starttime="20171030 15:19:12.868"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:19:13.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:13.152" status="PASS" starttime="20171030 15:19:13.152"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:19:13.153" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:19:13.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:19:13.153" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:19:13.153" status="PASS" starttime="20171030 15:19:13.152"></status>
</kw>
<msg timestamp="20171030 15:19:13.153" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:19:13.153" status="PASS" starttime="20171030 15:19:12.868"></status>
</kw>
<msg timestamp="20171030 15:19:13.154" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:19:13.154" status="PASS" starttime="20171030 15:19:12.867"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:19:13.154" level="FAIL">Off != On</msg>
<status endtime="20171030 15:19:13.154" status="FAIL" starttime="20171030 15:19:13.154"></status>
</kw>
<status endtime="20171030 15:19:13.154" status="FAIL" starttime="20171030 15:19:12.867"></status>
</kw>
<status endtime="20171030 15:19:13.155" status="FAIL" starttime="20171030 15:19:12.866"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:19:23.160" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:19:23.161" status="PASS" starttime="20171030 15:19:23.160"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:19:23.161" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:19:23.161" status="PASS" starttime="20171030 15:19:23.161"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:19:23.162" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:19:23.162" status="PASS" starttime="20171030 15:19:23.162"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:19:23.163" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:19:23.163" status="PASS" starttime="20171030 15:19:23.163"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:19:23.355" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:19:23.355" status="PASS" starttime="20171030 15:19:23.164"></status>
</kw>
<msg timestamp="20171030 15:19:23.355" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:19:23.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:23.355" status="PASS" starttime="20171030 15:19:23.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:19:23.356" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:23.356" status="PASS" starttime="20171030 15:19:23.355"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:19:23.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:23.357" status="PASS" starttime="20171030 15:19:23.356"></status>
</kw>
<status endtime="20171030 15:19:23.357" status="PASS" starttime="20171030 15:19:23.159"></status>
</kw>
<status endtime="20171030 15:19:23.357" status="PASS" starttime="20171030 15:19:23.159"></status>
</kw>
<status endtime="20171030 15:19:23.357" status="PASS" starttime="20171030 15:19:23.158"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:19:23.358" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:19:23.358" status="PASS" starttime="20171030 15:19:23.357"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:19:23.360" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:19:23.360" status="PASS" starttime="20171030 15:19:23.359"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:19:23.361" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:19:23.361" status="PASS" starttime="20171030 15:19:23.360"></status>
</kw>
<status endtime="20171030 15:19:23.361" status="PASS" starttime="20171030 15:19:23.360"></status>
</kw>
<status endtime="20171030 15:19:23.361" status="PASS" starttime="20171030 15:19:23.358"></status>
</kw>
<status endtime="20171030 15:19:23.361" status="PASS" starttime="20171030 15:19:23.358"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:19:23.457" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:19:23.457" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:23.457" status="PASS" starttime="20171030 15:19:23.361"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:19:23.459" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:19:23.459" status="PASS" starttime="20171030 15:19:23.459"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:19:23.460" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:19:23.460" status="PASS" starttime="20171030 15:19:23.460"></status>
</kw>
<status endtime="20171030 15:19:23.461" status="PASS" starttime="20171030 15:19:23.460"></status>
</kw>
<status endtime="20171030 15:19:23.461" status="PASS" starttime="20171030 15:19:23.458"></status>
</kw>
<status endtime="20171030 15:19:23.461" status="PASS" starttime="20171030 15:19:23.458"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:19:23.461" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:19:23.461" status="PASS" starttime="20171030 15:19:23.461"></status>
</kw>
<msg timestamp="20171030 15:19:23.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:23.461" status="PASS" starttime="20171030 15:19:23.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:19:23.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:23.462" status="PASS" starttime="20171030 15:19:23.462"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:19:23.463" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:19:23.463" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:19:23.463" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:19:23.463" status="PASS" starttime="20171030 15:19:23.462"></status>
</kw>
<msg timestamp="20171030 15:19:23.463" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:19:23.463" status="PASS" starttime="20171030 15:19:23.157"></status>
</kw>
<msg timestamp="20171030 15:19:23.463" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:19:23.464" status="PASS" starttime="20171030 15:19:23.156"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:19:23.465" level="FAIL">Off != On</msg>
<status endtime="20171030 15:19:23.465" status="FAIL" starttime="20171030 15:19:23.464"></status>
</kw>
<status endtime="20171030 15:19:23.465" status="FAIL" starttime="20171030 15:19:23.156"></status>
</kw>
<status endtime="20171030 15:19:23.465" status="FAIL" starttime="20171030 15:19:23.155"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:19:33.473" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:19:33.473" status="PASS" starttime="20171030 15:19:33.472"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:19:33.474" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:19:33.474" status="PASS" starttime="20171030 15:19:33.474"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:19:33.475" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:19:33.475" status="PASS" starttime="20171030 15:19:33.475"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:19:33.476" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:19:33.476" status="PASS" starttime="20171030 15:19:33.476"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:19:33.665" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:19:33.665" status="PASS" starttime="20171030 15:19:33.477"></status>
</kw>
<msg timestamp="20171030 15:19:33.665" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:19:33.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:33.665" status="PASS" starttime="20171030 15:19:33.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:19:33.666" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:33.666" status="PASS" starttime="20171030 15:19:33.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:19:33.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:33.667" status="PASS" starttime="20171030 15:19:33.667"></status>
</kw>
<status endtime="20171030 15:19:33.667" status="PASS" starttime="20171030 15:19:33.471"></status>
</kw>
<status endtime="20171030 15:19:33.667" status="PASS" starttime="20171030 15:19:33.470"></status>
</kw>
<status endtime="20171030 15:19:33.668" status="PASS" starttime="20171030 15:19:33.469"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:19:33.668" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:19:33.668" status="PASS" starttime="20171030 15:19:33.668"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:19:33.671" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:19:33.671" status="PASS" starttime="20171030 15:19:33.670"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:19:33.672" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:19:33.672" status="PASS" starttime="20171030 15:19:33.671"></status>
</kw>
<status endtime="20171030 15:19:33.672" status="PASS" starttime="20171030 15:19:33.671"></status>
</kw>
<status endtime="20171030 15:19:33.672" status="PASS" starttime="20171030 15:19:33.669"></status>
</kw>
<status endtime="20171030 15:19:33.672" status="PASS" starttime="20171030 15:19:33.669"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:19:33.739" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:19:33.739" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:33.739" status="PASS" starttime="20171030 15:19:33.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:19:33.741" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:19:33.741" status="PASS" starttime="20171030 15:19:33.741"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:19:33.742" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:19:33.743" status="PASS" starttime="20171030 15:19:33.742"></status>
</kw>
<status endtime="20171030 15:19:33.743" status="PASS" starttime="20171030 15:19:33.741"></status>
</kw>
<status endtime="20171030 15:19:33.743" status="PASS" starttime="20171030 15:19:33.740"></status>
</kw>
<status endtime="20171030 15:19:33.743" status="PASS" starttime="20171030 15:19:33.740"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:19:33.743" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:19:33.743" status="PASS" starttime="20171030 15:19:33.743"></status>
</kw>
<msg timestamp="20171030 15:19:33.744" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:33.744" status="PASS" starttime="20171030 15:19:33.468"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:19:33.744" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:33.744" status="PASS" starttime="20171030 15:19:33.744"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:19:33.745" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:19:33.745" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:19:33.745" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:19:33.745" status="PASS" starttime="20171030 15:19:33.745"></status>
</kw>
<msg timestamp="20171030 15:19:33.745" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:19:33.745" status="PASS" starttime="20171030 15:19:33.467"></status>
</kw>
<msg timestamp="20171030 15:19:33.746" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:19:33.746" status="PASS" starttime="20171030 15:19:33.467"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:19:33.746" level="FAIL">Off != On</msg>
<status endtime="20171030 15:19:33.746" status="FAIL" starttime="20171030 15:19:33.746"></status>
</kw>
<status endtime="20171030 15:19:33.747" status="FAIL" starttime="20171030 15:19:33.466"></status>
</kw>
<status endtime="20171030 15:19:33.747" status="FAIL" starttime="20171030 15:19:33.465"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:19:43.753" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:19:43.754" status="PASS" starttime="20171030 15:19:43.752"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:19:43.754" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:19:43.754" status="PASS" starttime="20171030 15:19:43.754"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:19:43.755" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:19:43.755" status="PASS" starttime="20171030 15:19:43.755"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:19:43.756" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:19:43.756" status="PASS" starttime="20171030 15:19:43.755"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:19:43.938" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:19:43.938" status="PASS" starttime="20171030 15:19:43.756"></status>
</kw>
<msg timestamp="20171030 15:19:43.938" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:19:43.938" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:43.938" status="PASS" starttime="20171030 15:19:43.756"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:19:43.939" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:43.939" status="PASS" starttime="20171030 15:19:43.939"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:19:43.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:43.940" status="PASS" starttime="20171030 15:19:43.939"></status>
</kw>
<status endtime="20171030 15:19:43.940" status="PASS" starttime="20171030 15:19:43.752"></status>
</kw>
<status endtime="20171030 15:19:43.940" status="PASS" starttime="20171030 15:19:43.751"></status>
</kw>
<status endtime="20171030 15:19:43.940" status="PASS" starttime="20171030 15:19:43.751"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:19:43.941" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:19:43.941" status="PASS" starttime="20171030 15:19:43.940"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:19:43.943" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:19:43.943" status="PASS" starttime="20171030 15:19:43.942"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:19:43.944" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:19:43.944" status="PASS" starttime="20171030 15:19:43.944"></status>
</kw>
<status endtime="20171030 15:19:43.944" status="PASS" starttime="20171030 15:19:43.943"></status>
</kw>
<status endtime="20171030 15:19:43.944" status="PASS" starttime="20171030 15:19:43.941"></status>
</kw>
<status endtime="20171030 15:19:43.944" status="PASS" starttime="20171030 15:19:43.941"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:19:44.012" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:19:44.012" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:44.012" status="PASS" starttime="20171030 15:19:43.945"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:19:44.014" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:19:44.014" status="PASS" starttime="20171030 15:19:44.013"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:19:44.015" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:19:44.015" status="PASS" starttime="20171030 15:19:44.015"></status>
</kw>
<status endtime="20171030 15:19:44.015" status="PASS" starttime="20171030 15:19:44.014"></status>
</kw>
<status endtime="20171030 15:19:44.015" status="PASS" starttime="20171030 15:19:44.013"></status>
</kw>
<status endtime="20171030 15:19:44.015" status="PASS" starttime="20171030 15:19:44.012"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:19:44.016" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:19:44.016" status="PASS" starttime="20171030 15:19:44.015"></status>
</kw>
<msg timestamp="20171030 15:19:44.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:44.016" status="PASS" starttime="20171030 15:19:43.750"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:19:44.016" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:44.017" status="PASS" starttime="20171030 15:19:44.016"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:19:44.017" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:19:44.017" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:19:44.017" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:19:44.017" status="PASS" starttime="20171030 15:19:44.017"></status>
</kw>
<msg timestamp="20171030 15:19:44.018" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:19:44.018" status="PASS" starttime="20171030 15:19:43.749"></status>
</kw>
<msg timestamp="20171030 15:19:44.018" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:19:44.018" status="PASS" starttime="20171030 15:19:43.749"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:19:44.019" level="FAIL">Off != On</msg>
<status endtime="20171030 15:19:44.019" status="FAIL" starttime="20171030 15:19:44.018"></status>
</kw>
<status endtime="20171030 15:19:44.019" status="FAIL" starttime="20171030 15:19:43.749"></status>
</kw>
<status endtime="20171030 15:19:44.019" status="FAIL" starttime="20171030 15:19:43.747"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:19:54.025" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:19:54.025" status="PASS" starttime="20171030 15:19:54.024"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:19:54.026" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:19:54.026" status="PASS" starttime="20171030 15:19:54.025"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:19:54.026" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:19:54.026" status="PASS" starttime="20171030 15:19:54.026"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:19:54.027" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:19:54.027" status="PASS" starttime="20171030 15:19:54.027"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:19:54.216" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:19:54.216" status="PASS" starttime="20171030 15:19:54.028"></status>
</kw>
<msg timestamp="20171030 15:19:54.216" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:19:54.216" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:54.216" status="PASS" starttime="20171030 15:19:54.027"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:19:54.217" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:54.217" status="PASS" starttime="20171030 15:19:54.216"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:19:54.218" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:54.218" status="PASS" starttime="20171030 15:19:54.217"></status>
</kw>
<status endtime="20171030 15:19:54.218" status="PASS" starttime="20171030 15:19:54.023"></status>
</kw>
<status endtime="20171030 15:19:54.218" status="PASS" starttime="20171030 15:19:54.023"></status>
</kw>
<status endtime="20171030 15:19:54.218" status="PASS" starttime="20171030 15:19:54.022"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:19:54.219" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:19:54.219" status="PASS" starttime="20171030 15:19:54.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:19:54.221" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:19:54.221" status="PASS" starttime="20171030 15:19:54.220"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:19:54.222" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:19:54.222" status="PASS" starttime="20171030 15:19:54.221"></status>
</kw>
<status endtime="20171030 15:19:54.222" status="PASS" starttime="20171030 15:19:54.221"></status>
</kw>
<status endtime="20171030 15:19:54.222" status="PASS" starttime="20171030 15:19:54.219"></status>
</kw>
<status endtime="20171030 15:19:54.222" status="PASS" starttime="20171030 15:19:54.219"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:19:54.297" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:19:54.297" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:54.297" status="PASS" starttime="20171030 15:19:54.222"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:19:54.299" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:19:54.299" status="PASS" starttime="20171030 15:19:54.298"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:19:54.306" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:19:54.306" status="PASS" starttime="20171030 15:19:54.305"></status>
</kw>
<status endtime="20171030 15:19:54.306" status="PASS" starttime="20171030 15:19:54.299"></status>
</kw>
<status endtime="20171030 15:19:54.306" status="PASS" starttime="20171030 15:19:54.298"></status>
</kw>
<status endtime="20171030 15:19:54.306" status="PASS" starttime="20171030 15:19:54.297"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:19:54.307" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:19:54.307" status="PASS" starttime="20171030 15:19:54.307"></status>
</kw>
<msg timestamp="20171030 15:19:54.307" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:19:54.307" status="PASS" starttime="20171030 15:19:54.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:19:54.309" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:19:54.309" status="PASS" starttime="20171030 15:19:54.307"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:19:54.309" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:19:54.310" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:19:54.310" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:19:54.310" status="PASS" starttime="20171030 15:19:54.309"></status>
</kw>
<msg timestamp="20171030 15:19:54.310" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:19:54.310" status="PASS" starttime="20171030 15:19:54.021"></status>
</kw>
<msg timestamp="20171030 15:19:54.310" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:19:54.310" status="PASS" starttime="20171030 15:19:54.021"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:19:54.312" level="FAIL">Off != On</msg>
<status endtime="20171030 15:19:54.312" status="FAIL" starttime="20171030 15:19:54.311"></status>
</kw>
<status endtime="20171030 15:19:54.312" status="FAIL" starttime="20171030 15:19:54.020"></status>
</kw>
<status endtime="20171030 15:19:54.312" status="FAIL" starttime="20171030 15:19:54.019"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:20:04.318" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:20:04.318" status="PASS" starttime="20171030 15:20:04.317"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:20:04.319" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:20:04.319" status="PASS" starttime="20171030 15:20:04.318"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:20:04.320" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:20:04.320" status="PASS" starttime="20171030 15:20:04.319"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:20:04.321" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:20:04.321" status="PASS" starttime="20171030 15:20:04.320"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:20:04.534" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:20:04.534" status="PASS" starttime="20171030 15:20:04.322"></status>
</kw>
<msg timestamp="20171030 15:20:04.535" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:20:04.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:04.535" status="PASS" starttime="20171030 15:20:04.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:20:04.535" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:04.535" status="PASS" starttime="20171030 15:20:04.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:20:04.536" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:04.536" status="PASS" starttime="20171030 15:20:04.536"></status>
</kw>
<status endtime="20171030 15:20:04.536" status="PASS" starttime="20171030 15:20:04.317"></status>
</kw>
<status endtime="20171030 15:20:04.537" status="PASS" starttime="20171030 15:20:04.316"></status>
</kw>
<status endtime="20171030 15:20:04.537" status="PASS" starttime="20171030 15:20:04.315"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:20:04.537" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:20:04.537" status="PASS" starttime="20171030 15:20:04.537"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:20:04.539" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:20:04.539" status="PASS" starttime="20171030 15:20:04.539"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:20:04.540" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:20:04.541" status="PASS" starttime="20171030 15:20:04.540"></status>
</kw>
<status endtime="20171030 15:20:04.541" status="PASS" starttime="20171030 15:20:04.540"></status>
</kw>
<status endtime="20171030 15:20:04.541" status="PASS" starttime="20171030 15:20:04.538"></status>
</kw>
<status endtime="20171030 15:20:04.541" status="PASS" starttime="20171030 15:20:04.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:20:04.614" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:20:04.614" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:04.614" status="PASS" starttime="20171030 15:20:04.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:20:04.616" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:20:04.616" status="PASS" starttime="20171030 15:20:04.615"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:20:04.617" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:20:04.617" status="PASS" starttime="20171030 15:20:04.616"></status>
</kw>
<status endtime="20171030 15:20:04.617" status="PASS" starttime="20171030 15:20:04.616"></status>
</kw>
<status endtime="20171030 15:20:04.617" status="PASS" starttime="20171030 15:20:04.615"></status>
</kw>
<status endtime="20171030 15:20:04.617" status="PASS" starttime="20171030 15:20:04.614"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:20:04.617" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:20:04.618" status="PASS" starttime="20171030 15:20:04.617"></status>
</kw>
<msg timestamp="20171030 15:20:04.618" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:04.618" status="PASS" starttime="20171030 15:20:04.315"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:20:04.618" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:04.619" status="PASS" starttime="20171030 15:20:04.618"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:20:04.619" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:20:04.619" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:20:04.619" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:20:04.619" status="PASS" starttime="20171030 15:20:04.619"></status>
</kw>
<msg timestamp="20171030 15:20:04.620" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:20:04.620" status="PASS" starttime="20171030 15:20:04.314"></status>
</kw>
<msg timestamp="20171030 15:20:04.620" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:20:04.620" status="PASS" starttime="20171030 15:20:04.314"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:20:04.621" level="FAIL">Off != On</msg>
<status endtime="20171030 15:20:04.621" status="FAIL" starttime="20171030 15:20:04.620"></status>
</kw>
<status endtime="20171030 15:20:04.621" status="FAIL" starttime="20171030 15:20:04.313"></status>
</kw>
<status endtime="20171030 15:20:04.621" status="FAIL" starttime="20171030 15:20:04.313"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:20:14.628" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:20:14.628" status="PASS" starttime="20171030 15:20:14.628"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:20:14.629" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:20:14.629" status="PASS" starttime="20171030 15:20:14.629"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:20:14.630" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:20:14.630" status="PASS" starttime="20171030 15:20:14.629"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:20:14.630" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:20:14.630" status="PASS" starttime="20171030 15:20:14.630"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:20:14.841" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:20:14.841" status="PASS" starttime="20171030 15:20:14.631"></status>
</kw>
<msg timestamp="20171030 15:20:14.841" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:20:14.841" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:14.841" status="PASS" starttime="20171030 15:20:14.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:20:14.842" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:14.842" status="PASS" starttime="20171030 15:20:14.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:20:14.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:14.842" status="PASS" starttime="20171030 15:20:14.842"></status>
</kw>
<status endtime="20171030 15:20:14.843" status="PASS" starttime="20171030 15:20:14.627"></status>
</kw>
<status endtime="20171030 15:20:14.843" status="PASS" starttime="20171030 15:20:14.626"></status>
</kw>
<status endtime="20171030 15:20:14.843" status="PASS" starttime="20171030 15:20:14.626"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:20:14.843" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:20:14.843" status="PASS" starttime="20171030 15:20:14.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:20:14.845" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:20:14.846" status="PASS" starttime="20171030 15:20:14.845"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:20:14.846" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:20:14.847" status="PASS" starttime="20171030 15:20:14.846"></status>
</kw>
<status endtime="20171030 15:20:14.847" status="PASS" starttime="20171030 15:20:14.846"></status>
</kw>
<status endtime="20171030 15:20:14.847" status="PASS" starttime="20171030 15:20:14.844"></status>
</kw>
<status endtime="20171030 15:20:14.847" status="PASS" starttime="20171030 15:20:14.844"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:20:14.914" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:20:14.914" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:14.914" status="PASS" starttime="20171030 15:20:14.847"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:20:14.916" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:20:14.916" status="PASS" starttime="20171030 15:20:14.916"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:20:14.918" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:20:14.918" status="PASS" starttime="20171030 15:20:14.917"></status>
</kw>
<status endtime="20171030 15:20:14.918" status="PASS" starttime="20171030 15:20:14.917"></status>
</kw>
<status endtime="20171030 15:20:14.918" status="PASS" starttime="20171030 15:20:14.915"></status>
</kw>
<status endtime="20171030 15:20:14.918" status="PASS" starttime="20171030 15:20:14.915"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:20:14.919" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:20:14.919" status="PASS" starttime="20171030 15:20:14.918"></status>
</kw>
<msg timestamp="20171030 15:20:14.919" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:14.919" status="PASS" starttime="20171030 15:20:14.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:20:14.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:14.920" status="PASS" starttime="20171030 15:20:14.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:20:14.920" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:20:14.920" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:20:14.920" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:20:14.920" status="PASS" starttime="20171030 15:20:14.920"></status>
</kw>
<msg timestamp="20171030 15:20:14.921" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:20:14.921" status="PASS" starttime="20171030 15:20:14.623"></status>
</kw>
<msg timestamp="20171030 15:20:14.921" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:20:14.921" status="PASS" starttime="20171030 15:20:14.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:20:14.922" level="FAIL">Off != On</msg>
<status endtime="20171030 15:20:14.922" status="FAIL" starttime="20171030 15:20:14.921"></status>
</kw>
<status endtime="20171030 15:20:14.922" status="FAIL" starttime="20171030 15:20:14.623"></status>
</kw>
<status endtime="20171030 15:20:14.922" status="FAIL" starttime="20171030 15:20:14.622"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:20:24.927" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:20:24.928" status="PASS" starttime="20171030 15:20:24.927"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:20:24.928" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:20:24.928" status="PASS" starttime="20171030 15:20:24.928"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:20:24.929" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:20:24.929" status="PASS" starttime="20171030 15:20:24.929"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:20:24.930" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:20:24.930" status="PASS" starttime="20171030 15:20:24.929"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:20:25.195" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:20:25.196" status="PASS" starttime="20171030 15:20:24.930"></status>
</kw>
<msg timestamp="20171030 15:20:25.196" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:20:25.196" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:25.196" status="PASS" starttime="20171030 15:20:24.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:20:25.197" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:25.197" status="PASS" starttime="20171030 15:20:25.196"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:20:25.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:25.197" status="PASS" starttime="20171030 15:20:25.197"></status>
</kw>
<status endtime="20171030 15:20:25.198" status="PASS" starttime="20171030 15:20:24.927"></status>
</kw>
<status endtime="20171030 15:20:25.198" status="PASS" starttime="20171030 15:20:24.926"></status>
</kw>
<status endtime="20171030 15:20:25.198" status="PASS" starttime="20171030 15:20:24.925"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:20:25.198" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:20:25.198" status="PASS" starttime="20171030 15:20:25.198"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:20:25.200" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:20:25.200" status="PASS" starttime="20171030 15:20:25.200"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:20:25.201" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:20:25.202" status="PASS" starttime="20171030 15:20:25.201"></status>
</kw>
<status endtime="20171030 15:20:25.202" status="PASS" starttime="20171030 15:20:25.201"></status>
</kw>
<status endtime="20171030 15:20:25.202" status="PASS" starttime="20171030 15:20:25.199"></status>
</kw>
<status endtime="20171030 15:20:25.202" status="PASS" starttime="20171030 15:20:25.199"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:20:25.317" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:20:25.317" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:25.317" status="PASS" starttime="20171030 15:20:25.202"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:20:25.319" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:20:25.319" status="PASS" starttime="20171030 15:20:25.319"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:20:25.320" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:20:25.321" status="PASS" starttime="20171030 15:20:25.320"></status>
</kw>
<status endtime="20171030 15:20:25.321" status="PASS" starttime="20171030 15:20:25.320"></status>
</kw>
<status endtime="20171030 15:20:25.321" status="PASS" starttime="20171030 15:20:25.318"></status>
</kw>
<status endtime="20171030 15:20:25.321" status="PASS" starttime="20171030 15:20:25.318"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:20:25.322" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:20:25.322" status="PASS" starttime="20171030 15:20:25.321"></status>
</kw>
<msg timestamp="20171030 15:20:25.322" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:25.322" status="PASS" starttime="20171030 15:20:24.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:20:25.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:25.323" status="PASS" starttime="20171030 15:20:25.322"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:20:25.323" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:20:25.323" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:20:25.323" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:20:25.323" status="PASS" starttime="20171030 15:20:25.323"></status>
</kw>
<msg timestamp="20171030 15:20:25.324" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:20:25.324" status="PASS" starttime="20171030 15:20:24.924"></status>
</kw>
<msg timestamp="20171030 15:20:25.324" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:20:25.324" status="PASS" starttime="20171030 15:20:24.924"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:20:25.325" level="FAIL">Off != On</msg>
<status endtime="20171030 15:20:25.325" status="FAIL" starttime="20171030 15:20:25.324"></status>
</kw>
<status endtime="20171030 15:20:25.325" status="FAIL" starttime="20171030 15:20:24.923"></status>
</kw>
<status endtime="20171030 15:20:25.325" status="FAIL" starttime="20171030 15:20:24.923"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:20:35.331" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:20:35.332" status="PASS" starttime="20171030 15:20:35.331"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:20:35.332" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:20:35.332" status="PASS" starttime="20171030 15:20:35.332"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:20:35.333" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:20:35.333" status="PASS" starttime="20171030 15:20:35.333"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:20:35.334" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:20:35.334" status="PASS" starttime="20171030 15:20:35.333"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:20:35.537" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:20:35.537" status="PASS" starttime="20171030 15:20:35.334"></status>
</kw>
<msg timestamp="20171030 15:20:35.537" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:20:35.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:35.537" status="PASS" starttime="20171030 15:20:35.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:20:35.538" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:35.538" status="PASS" starttime="20171030 15:20:35.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:20:35.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:35.538" status="PASS" starttime="20171030 15:20:35.538"></status>
</kw>
<status endtime="20171030 15:20:35.539" status="PASS" starttime="20171030 15:20:35.330"></status>
</kw>
<status endtime="20171030 15:20:35.539" status="PASS" starttime="20171030 15:20:35.329"></status>
</kw>
<status endtime="20171030 15:20:35.539" status="PASS" starttime="20171030 15:20:35.328"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:20:35.539" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:20:35.539" status="PASS" starttime="20171030 15:20:35.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:20:35.542" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:20:35.542" status="PASS" starttime="20171030 15:20:35.541"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:20:35.543" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:20:35.543" status="PASS" starttime="20171030 15:20:35.542"></status>
</kw>
<status endtime="20171030 15:20:35.543" status="PASS" starttime="20171030 15:20:35.542"></status>
</kw>
<status endtime="20171030 15:20:35.543" status="PASS" starttime="20171030 15:20:35.540"></status>
</kw>
<status endtime="20171030 15:20:35.543" status="PASS" starttime="20171030 15:20:35.540"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:20:35.615" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:20:35.616" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:35.616" status="PASS" starttime="20171030 15:20:35.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:20:35.617" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:20:35.618" status="PASS" starttime="20171030 15:20:35.617"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:20:35.619" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:20:35.619" status="PASS" starttime="20171030 15:20:35.618"></status>
</kw>
<status endtime="20171030 15:20:35.619" status="PASS" starttime="20171030 15:20:35.618"></status>
</kw>
<status endtime="20171030 15:20:35.619" status="PASS" starttime="20171030 15:20:35.616"></status>
</kw>
<status endtime="20171030 15:20:35.619" status="PASS" starttime="20171030 15:20:35.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:20:35.620" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:20:35.620" status="PASS" starttime="20171030 15:20:35.619"></status>
</kw>
<msg timestamp="20171030 15:20:35.620" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:35.620" status="PASS" starttime="20171030 15:20:35.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:20:35.620" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:35.621" status="PASS" starttime="20171030 15:20:35.620"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:20:35.621" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:20:35.621" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:20:35.621" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:20:35.621" status="PASS" starttime="20171030 15:20:35.621"></status>
</kw>
<msg timestamp="20171030 15:20:35.622" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:20:35.622" status="PASS" starttime="20171030 15:20:35.327"></status>
</kw>
<msg timestamp="20171030 15:20:35.622" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:20:35.622" status="PASS" starttime="20171030 15:20:35.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:20:35.623" level="FAIL">Off != On</msg>
<status endtime="20171030 15:20:35.623" status="FAIL" starttime="20171030 15:20:35.622"></status>
</kw>
<status endtime="20171030 15:20:35.623" status="FAIL" starttime="20171030 15:20:35.326"></status>
</kw>
<status endtime="20171030 15:20:35.623" status="FAIL" starttime="20171030 15:20:35.326"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:20:45.628" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:20:45.629" status="PASS" starttime="20171030 15:20:45.628"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:20:45.629" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:20:45.629" status="PASS" starttime="20171030 15:20:45.629"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:20:45.630" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:20:45.630" status="PASS" starttime="20171030 15:20:45.629"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:20:45.631" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:20:45.631" status="PASS" starttime="20171030 15:20:45.630"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:20:45.879" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:20:45.880" status="PASS" starttime="20171030 15:20:45.631"></status>
</kw>
<msg timestamp="20171030 15:20:45.880" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:20:45.880" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:45.880" status="PASS" starttime="20171030 15:20:45.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:20:45.881" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:45.881" status="PASS" starttime="20171030 15:20:45.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:20:45.881" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:45.881" status="PASS" starttime="20171030 15:20:45.881"></status>
</kw>
<status endtime="20171030 15:20:45.882" status="PASS" starttime="20171030 15:20:45.627"></status>
</kw>
<status endtime="20171030 15:20:45.882" status="PASS" starttime="20171030 15:20:45.627"></status>
</kw>
<status endtime="20171030 15:20:45.882" status="PASS" starttime="20171030 15:20:45.626"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:20:45.882" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:20:45.882" status="PASS" starttime="20171030 15:20:45.882"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:20:45.884" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:20:45.884" status="PASS" starttime="20171030 15:20:45.884"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:20:45.885" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:20:45.885" status="PASS" starttime="20171030 15:20:45.885"></status>
</kw>
<status endtime="20171030 15:20:45.886" status="PASS" starttime="20171030 15:20:45.885"></status>
</kw>
<status endtime="20171030 15:20:45.886" status="PASS" starttime="20171030 15:20:45.883"></status>
</kw>
<status endtime="20171030 15:20:45.886" status="PASS" starttime="20171030 15:20:45.883"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:20:45.952" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:20:45.952" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:45.953" status="PASS" starttime="20171030 15:20:45.886"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:20:45.954" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:20:45.954" status="PASS" starttime="20171030 15:20:45.954"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:20:45.955" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:20:45.955" status="PASS" starttime="20171030 15:20:45.955"></status>
</kw>
<status endtime="20171030 15:20:45.956" status="PASS" starttime="20171030 15:20:45.955"></status>
</kw>
<status endtime="20171030 15:20:45.956" status="PASS" starttime="20171030 15:20:45.953"></status>
</kw>
<status endtime="20171030 15:20:45.956" status="PASS" starttime="20171030 15:20:45.953"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:20:45.956" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:20:45.956" status="PASS" starttime="20171030 15:20:45.956"></status>
</kw>
<msg timestamp="20171030 15:20:45.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:45.957" status="PASS" starttime="20171030 15:20:45.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:20:45.957" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:45.957" status="PASS" starttime="20171030 15:20:45.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:20:45.958" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:20:45.958" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:20:45.958" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:20:45.958" status="PASS" starttime="20171030 15:20:45.957"></status>
</kw>
<msg timestamp="20171030 15:20:45.958" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:20:45.958" status="PASS" starttime="20171030 15:20:45.625"></status>
</kw>
<msg timestamp="20171030 15:20:45.959" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:20:45.959" status="PASS" starttime="20171030 15:20:45.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:20:45.959" level="FAIL">Off != On</msg>
<status endtime="20171030 15:20:45.959" status="FAIL" starttime="20171030 15:20:45.959"></status>
</kw>
<status endtime="20171030 15:20:45.959" status="FAIL" starttime="20171030 15:20:45.624"></status>
</kw>
<status endtime="20171030 15:20:45.960" status="FAIL" starttime="20171030 15:20:45.623"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:20:55.965" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:20:55.966" status="PASS" starttime="20171030 15:20:55.965"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:20:55.966" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:20:55.966" status="PASS" starttime="20171030 15:20:55.966"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:20:55.967" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:20:55.967" status="PASS" starttime="20171030 15:20:55.967"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:20:55.968" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:20:55.968" status="PASS" starttime="20171030 15:20:55.967"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:20:56.165" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:20:56.165" status="PASS" starttime="20171030 15:20:55.969"></status>
</kw>
<msg timestamp="20171030 15:20:56.165" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:20:56.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:56.165" status="PASS" starttime="20171030 15:20:55.968"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:20:56.166" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:56.166" status="PASS" starttime="20171030 15:20:56.166"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:20:56.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:56.167" status="PASS" starttime="20171030 15:20:56.166"></status>
</kw>
<status endtime="20171030 15:20:56.167" status="PASS" starttime="20171030 15:20:55.964"></status>
</kw>
<status endtime="20171030 15:20:56.167" status="PASS" starttime="20171030 15:20:55.964"></status>
</kw>
<status endtime="20171030 15:20:56.167" status="PASS" starttime="20171030 15:20:55.963"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:20:56.168" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:20:56.168" status="PASS" starttime="20171030 15:20:56.167"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:20:56.170" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:20:56.170" status="PASS" starttime="20171030 15:20:56.169"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:20:56.171" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:20:56.171" status="PASS" starttime="20171030 15:20:56.171"></status>
</kw>
<status endtime="20171030 15:20:56.171" status="PASS" starttime="20171030 15:20:56.170"></status>
</kw>
<status endtime="20171030 15:20:56.171" status="PASS" starttime="20171030 15:20:56.169"></status>
</kw>
<status endtime="20171030 15:20:56.171" status="PASS" starttime="20171030 15:20:56.168"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:20:56.248" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:20:56.248" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:56.248" status="PASS" starttime="20171030 15:20:56.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:20:56.250" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:20:56.250" status="PASS" starttime="20171030 15:20:56.249"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:20:56.251" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:20:56.251" status="PASS" starttime="20171030 15:20:56.250"></status>
</kw>
<status endtime="20171030 15:20:56.251" status="PASS" starttime="20171030 15:20:56.250"></status>
</kw>
<status endtime="20171030 15:20:56.251" status="PASS" starttime="20171030 15:20:56.249"></status>
</kw>
<status endtime="20171030 15:20:56.252" status="PASS" starttime="20171030 15:20:56.248"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:20:56.252" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:20:56.252" status="PASS" starttime="20171030 15:20:56.252"></status>
</kw>
<msg timestamp="20171030 15:20:56.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:20:56.252" status="PASS" starttime="20171030 15:20:55.962"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:20:56.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:20:56.253" status="PASS" starttime="20171030 15:20:56.253"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:20:56.253" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:20:56.254" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:20:56.254" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:20:56.254" status="PASS" starttime="20171030 15:20:56.253"></status>
</kw>
<msg timestamp="20171030 15:20:56.254" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:20:56.254" status="PASS" starttime="20171030 15:20:55.962"></status>
</kw>
<msg timestamp="20171030 15:20:56.254" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:20:56.254" status="PASS" starttime="20171030 15:20:55.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:20:56.255" level="FAIL">Off != On</msg>
<status endtime="20171030 15:20:56.255" status="FAIL" starttime="20171030 15:20:56.255"></status>
</kw>
<status endtime="20171030 15:20:56.255" status="FAIL" starttime="20171030 15:20:55.961"></status>
</kw>
<status endtime="20171030 15:20:56.255" status="FAIL" starttime="20171030 15:20:55.960"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:21:06.261" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:21:06.261" status="PASS" starttime="20171030 15:21:06.260"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:21:06.262" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:21:06.262" status="PASS" starttime="20171030 15:21:06.261"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:21:06.262" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:21:06.262" status="PASS" starttime="20171030 15:21:06.262"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:21:06.263" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:21:06.263" status="PASS" starttime="20171030 15:21:06.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:21:06.465" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:21:06.465" status="PASS" starttime="20171030 15:21:06.264"></status>
</kw>
<msg timestamp="20171030 15:21:06.465" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:21:06.466" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:06.466" status="PASS" starttime="20171030 15:21:06.263"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:21:06.466" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:06.466" status="PASS" starttime="20171030 15:21:06.466"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:21:06.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:06.467" status="PASS" starttime="20171030 15:21:06.467"></status>
</kw>
<status endtime="20171030 15:21:06.467" status="PASS" starttime="20171030 15:21:06.260"></status>
</kw>
<status endtime="20171030 15:21:06.467" status="PASS" starttime="20171030 15:21:06.259"></status>
</kw>
<status endtime="20171030 15:21:06.467" status="PASS" starttime="20171030 15:21:06.258"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:21:06.468" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:21:06.468" status="PASS" starttime="20171030 15:21:06.468"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:21:06.470" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:21:06.470" status="PASS" starttime="20171030 15:21:06.469"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:21:06.471" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:21:06.471" status="PASS" starttime="20171030 15:21:06.471"></status>
</kw>
<status endtime="20171030 15:21:06.471" status="PASS" starttime="20171030 15:21:06.470"></status>
</kw>
<status endtime="20171030 15:21:06.471" status="PASS" starttime="20171030 15:21:06.469"></status>
</kw>
<status endtime="20171030 15:21:06.472" status="PASS" starttime="20171030 15:21:06.468"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:21:06.539" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:21:06.539" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:06.539" status="PASS" starttime="20171030 15:21:06.472"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:21:06.541" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:21:06.541" status="PASS" starttime="20171030 15:21:06.540"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:21:06.542" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:21:06.542" status="PASS" starttime="20171030 15:21:06.542"></status>
</kw>
<status endtime="20171030 15:21:06.542" status="PASS" starttime="20171030 15:21:06.541"></status>
</kw>
<status endtime="20171030 15:21:06.542" status="PASS" starttime="20171030 15:21:06.540"></status>
</kw>
<status endtime="20171030 15:21:06.542" status="PASS" starttime="20171030 15:21:06.539"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:21:06.543" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:21:06.543" status="PASS" starttime="20171030 15:21:06.543"></status>
</kw>
<msg timestamp="20171030 15:21:06.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:06.543" status="PASS" starttime="20171030 15:21:06.258"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:21:06.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:06.544" status="PASS" starttime="20171030 15:21:06.543"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:21:06.544" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:21:06.544" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:21:06.545" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:21:06.545" status="PASS" starttime="20171030 15:21:06.544"></status>
</kw>
<msg timestamp="20171030 15:21:06.545" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:21:06.545" status="PASS" starttime="20171030 15:21:06.257"></status>
</kw>
<msg timestamp="20171030 15:21:06.545" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:21:06.545" status="PASS" starttime="20171030 15:21:06.257"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:21:06.546" level="FAIL">Off != On</msg>
<status endtime="20171030 15:21:06.546" status="FAIL" starttime="20171030 15:21:06.545"></status>
</kw>
<status endtime="20171030 15:21:06.546" status="FAIL" starttime="20171030 15:21:06.256"></status>
</kw>
<status endtime="20171030 15:21:06.546" status="FAIL" starttime="20171030 15:21:06.256"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:21:16.552" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:21:16.552" status="PASS" starttime="20171030 15:21:16.551"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:21:16.553" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:21:16.553" status="PASS" starttime="20171030 15:21:16.552"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:21:16.553" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:21:16.553" status="PASS" starttime="20171030 15:21:16.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:21:16.554" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:21:16.554" status="PASS" starttime="20171030 15:21:16.554"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:21:16.737" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:21:16.737" status="PASS" starttime="20171030 15:21:16.555"></status>
</kw>
<msg timestamp="20171030 15:21:16.737" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:21:16.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:16.737" status="PASS" starttime="20171030 15:21:16.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:21:16.738" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:16.738" status="PASS" starttime="20171030 15:21:16.738"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:21:16.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:16.739" status="PASS" starttime="20171030 15:21:16.738"></status>
</kw>
<status endtime="20171030 15:21:16.739" status="PASS" starttime="20171030 15:21:16.550"></status>
</kw>
<status endtime="20171030 15:21:16.739" status="PASS" starttime="20171030 15:21:16.550"></status>
</kw>
<status endtime="20171030 15:21:16.739" status="PASS" starttime="20171030 15:21:16.549"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:21:16.740" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:21:16.740" status="PASS" starttime="20171030 15:21:16.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:21:16.742" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:21:16.742" status="PASS" starttime="20171030 15:21:16.741"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:21:16.743" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:21:16.743" status="PASS" starttime="20171030 15:21:16.743"></status>
</kw>
<status endtime="20171030 15:21:16.743" status="PASS" starttime="20171030 15:21:16.742"></status>
</kw>
<status endtime="20171030 15:21:16.743" status="PASS" starttime="20171030 15:21:16.740"></status>
</kw>
<status endtime="20171030 15:21:16.743" status="PASS" starttime="20171030 15:21:16.740"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:21:16.821" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:21:16.821" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:16.821" status="PASS" starttime="20171030 15:21:16.743"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:21:16.823" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:21:16.823" status="PASS" starttime="20171030 15:21:16.823"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:21:16.828" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:21:16.828" status="PASS" starttime="20171030 15:21:16.827"></status>
</kw>
<status endtime="20171030 15:21:16.828" status="PASS" starttime="20171030 15:21:16.824"></status>
</kw>
<status endtime="20171030 15:21:16.828" status="PASS" starttime="20171030 15:21:16.822"></status>
</kw>
<status endtime="20171030 15:21:16.828" status="PASS" starttime="20171030 15:21:16.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:21:16.828" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:21:16.829" status="PASS" starttime="20171030 15:21:16.828"></status>
</kw>
<msg timestamp="20171030 15:21:16.829" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:16.829" status="PASS" starttime="20171030 15:21:16.549"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:21:16.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:16.830" status="PASS" starttime="20171030 15:21:16.829"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:21:16.830" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:21:16.830" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:21:16.831" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:21:16.831" status="PASS" starttime="20171030 15:21:16.830"></status>
</kw>
<msg timestamp="20171030 15:21:16.831" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:21:16.831" status="PASS" starttime="20171030 15:21:16.548"></status>
</kw>
<msg timestamp="20171030 15:21:16.832" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:21:16.832" status="PASS" starttime="20171030 15:21:16.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:21:16.832" level="FAIL">Off != On</msg>
<status endtime="20171030 15:21:16.832" status="FAIL" starttime="20171030 15:21:16.832"></status>
</kw>
<status endtime="20171030 15:21:16.833" status="FAIL" starttime="20171030 15:21:16.547"></status>
</kw>
<status endtime="20171030 15:21:16.833" status="FAIL" starttime="20171030 15:21:16.547"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:21:26.838" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:21:26.838" status="PASS" starttime="20171030 15:21:26.838"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:21:26.839" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:21:26.839" status="PASS" starttime="20171030 15:21:26.839"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:21:26.840" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:21:26.840" status="PASS" starttime="20171030 15:21:26.839"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:21:26.840" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:21:26.840" status="PASS" starttime="20171030 15:21:26.840"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:21:27.035" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:21:27.035" status="PASS" starttime="20171030 15:21:26.841"></status>
</kw>
<msg timestamp="20171030 15:21:27.035" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:21:27.035" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:27.035" status="PASS" starttime="20171030 15:21:26.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:21:27.036" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:27.036" status="PASS" starttime="20171030 15:21:27.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:21:27.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:27.037" status="PASS" starttime="20171030 15:21:27.036"></status>
</kw>
<status endtime="20171030 15:21:27.037" status="PASS" starttime="20171030 15:21:26.837"></status>
</kw>
<status endtime="20171030 15:21:27.037" status="PASS" starttime="20171030 15:21:26.837"></status>
</kw>
<status endtime="20171030 15:21:27.037" status="PASS" starttime="20171030 15:21:26.836"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:21:27.038" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:21:27.038" status="PASS" starttime="20171030 15:21:27.037"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:21:27.040" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:21:27.040" status="PASS" starttime="20171030 15:21:27.039"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:21:27.041" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:21:27.041" status="PASS" starttime="20171030 15:21:27.041"></status>
</kw>
<status endtime="20171030 15:21:27.041" status="PASS" starttime="20171030 15:21:27.040"></status>
</kw>
<status endtime="20171030 15:21:27.041" status="PASS" starttime="20171030 15:21:27.039"></status>
</kw>
<status endtime="20171030 15:21:27.041" status="PASS" starttime="20171030 15:21:27.038"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:21:27.124" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:21:27.124" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:27.124" status="PASS" starttime="20171030 15:21:27.042"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:21:27.126" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:21:27.126" status="PASS" starttime="20171030 15:21:27.125"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:21:27.127" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:21:27.127" status="PASS" starttime="20171030 15:21:27.127"></status>
</kw>
<status endtime="20171030 15:21:27.127" status="PASS" starttime="20171030 15:21:27.126"></status>
</kw>
<status endtime="20171030 15:21:27.127" status="PASS" starttime="20171030 15:21:27.125"></status>
</kw>
<status endtime="20171030 15:21:27.127" status="PASS" starttime="20171030 15:21:27.124"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:21:27.128" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:21:27.128" status="PASS" starttime="20171030 15:21:27.127"></status>
</kw>
<msg timestamp="20171030 15:21:27.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:27.128" status="PASS" starttime="20171030 15:21:26.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:21:27.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:27.129" status="PASS" starttime="20171030 15:21:27.128"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:21:27.129" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:21:27.129" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:21:27.129" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:21:27.129" status="PASS" starttime="20171030 15:21:27.129"></status>
</kw>
<msg timestamp="20171030 15:21:27.130" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:21:27.130" status="PASS" starttime="20171030 15:21:26.835"></status>
</kw>
<msg timestamp="20171030 15:21:27.130" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:21:27.130" status="PASS" starttime="20171030 15:21:26.834"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:21:27.131" level="FAIL">Off != On</msg>
<status endtime="20171030 15:21:27.131" status="FAIL" starttime="20171030 15:21:27.130"></status>
</kw>
<status endtime="20171030 15:21:27.132" status="FAIL" starttime="20171030 15:21:26.834"></status>
</kw>
<status endtime="20171030 15:21:27.132" status="FAIL" starttime="20171030 15:21:26.833"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:21:37.137" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:21:37.138" status="PASS" starttime="20171030 15:21:37.137"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:21:37.138" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:21:37.138" status="PASS" starttime="20171030 15:21:37.138"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:21:37.139" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:21:37.139" status="PASS" starttime="20171030 15:21:37.139"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:21:37.140" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:21:37.140" status="PASS" starttime="20171030 15:21:37.139"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:21:37.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:21:37.342" status="PASS" starttime="20171030 15:21:37.140"></status>
</kw>
<msg timestamp="20171030 15:21:37.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:21:37.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:37.342" status="PASS" starttime="20171030 15:21:37.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:21:37.343" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:37.344" status="PASS" starttime="20171030 15:21:37.343"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:21:37.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:37.345" status="PASS" starttime="20171030 15:21:37.344"></status>
</kw>
<status endtime="20171030 15:21:37.345" status="PASS" starttime="20171030 15:21:37.136"></status>
</kw>
<status endtime="20171030 15:21:37.345" status="PASS" starttime="20171030 15:21:37.135"></status>
</kw>
<status endtime="20171030 15:21:37.345" status="PASS" starttime="20171030 15:21:37.135"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:21:37.346" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:21:37.346" status="PASS" starttime="20171030 15:21:37.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:21:37.349" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:21:37.349" status="PASS" starttime="20171030 15:21:37.348"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:21:37.350" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:21:37.351" status="PASS" starttime="20171030 15:21:37.350"></status>
</kw>
<status endtime="20171030 15:21:37.351" status="PASS" starttime="20171030 15:21:37.349"></status>
</kw>
<status endtime="20171030 15:21:37.351" status="PASS" starttime="20171030 15:21:37.347"></status>
</kw>
<status endtime="20171030 15:21:37.351" status="PASS" starttime="20171030 15:21:37.346"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:21:37.438" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:21:37.438" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:37.438" status="PASS" starttime="20171030 15:21:37.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:21:37.440" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:21:37.440" status="PASS" starttime="20171030 15:21:37.439"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:21:37.441" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:21:37.441" status="PASS" starttime="20171030 15:21:37.440"></status>
</kw>
<status endtime="20171030 15:21:37.441" status="PASS" starttime="20171030 15:21:37.440"></status>
</kw>
<status endtime="20171030 15:21:37.441" status="PASS" starttime="20171030 15:21:37.439"></status>
</kw>
<status endtime="20171030 15:21:37.441" status="PASS" starttime="20171030 15:21:37.438"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:21:37.442" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:21:37.442" status="PASS" starttime="20171030 15:21:37.442"></status>
</kw>
<msg timestamp="20171030 15:21:37.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:37.442" status="PASS" starttime="20171030 15:21:37.134"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:21:37.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:37.443" status="PASS" starttime="20171030 15:21:37.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:21:37.444" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:21:37.444" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:21:37.444" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:21:37.444" status="PASS" starttime="20171030 15:21:37.443"></status>
</kw>
<msg timestamp="20171030 15:21:37.444" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:21:37.444" status="PASS" starttime="20171030 15:21:37.134"></status>
</kw>
<msg timestamp="20171030 15:21:37.445" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:21:37.445" status="PASS" starttime="20171030 15:21:37.133"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:21:37.445" level="FAIL">Off != On</msg>
<status endtime="20171030 15:21:37.445" status="FAIL" starttime="20171030 15:21:37.445"></status>
</kw>
<status endtime="20171030 15:21:37.445" status="FAIL" starttime="20171030 15:21:37.133"></status>
</kw>
<status endtime="20171030 15:21:37.446" status="FAIL" starttime="20171030 15:21:37.132"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:21:47.451" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:21:47.451" status="PASS" starttime="20171030 15:21:47.450"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:21:47.452" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:21:47.452" status="PASS" starttime="20171030 15:21:47.451"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:21:47.452" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:21:47.452" status="PASS" starttime="20171030 15:21:47.452"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:21:47.453" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:21:47.453" status="PASS" starttime="20171030 15:21:47.453"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:21:47.646" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:21:47.646" status="PASS" starttime="20171030 15:21:47.454"></status>
</kw>
<msg timestamp="20171030 15:21:47.646" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:21:47.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:47.646" status="PASS" starttime="20171030 15:21:47.453"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:21:47.647" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:47.647" status="PASS" starttime="20171030 15:21:47.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:21:47.648" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:47.648" status="PASS" starttime="20171030 15:21:47.647"></status>
</kw>
<status endtime="20171030 15:21:47.648" status="PASS" starttime="20171030 15:21:47.450"></status>
</kw>
<status endtime="20171030 15:21:47.648" status="PASS" starttime="20171030 15:21:47.449"></status>
</kw>
<status endtime="20171030 15:21:47.648" status="PASS" starttime="20171030 15:21:47.449"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:21:47.649" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:21:47.649" status="PASS" starttime="20171030 15:21:47.648"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:21:47.651" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:21:47.651" status="PASS" starttime="20171030 15:21:47.650"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:21:47.652" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:21:47.652" status="PASS" starttime="20171030 15:21:47.652"></status>
</kw>
<status endtime="20171030 15:21:47.652" status="PASS" starttime="20171030 15:21:47.651"></status>
</kw>
<status endtime="20171030 15:21:47.652" status="PASS" starttime="20171030 15:21:47.649"></status>
</kw>
<status endtime="20171030 15:21:47.652" status="PASS" starttime="20171030 15:21:47.649"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:21:47.719" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:21:47.720" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:47.720" status="PASS" starttime="20171030 15:21:47.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:21:47.721" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:21:47.722" status="PASS" starttime="20171030 15:21:47.721"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:21:47.722" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:21:47.723" status="PASS" starttime="20171030 15:21:47.722"></status>
</kw>
<status endtime="20171030 15:21:47.723" status="PASS" starttime="20171030 15:21:47.722"></status>
</kw>
<status endtime="20171030 15:21:47.723" status="PASS" starttime="20171030 15:21:47.720"></status>
</kw>
<status endtime="20171030 15:21:47.723" status="PASS" starttime="20171030 15:21:47.720"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:21:47.723" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:21:47.723" status="PASS" starttime="20171030 15:21:47.723"></status>
</kw>
<msg timestamp="20171030 15:21:47.724" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:47.724" status="PASS" starttime="20171030 15:21:47.448"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:21:47.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:47.724" status="PASS" starttime="20171030 15:21:47.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:21:47.725" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:21:47.725" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:21:47.725" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:21:47.725" status="PASS" starttime="20171030 15:21:47.725"></status>
</kw>
<msg timestamp="20171030 15:21:47.725" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:21:47.725" status="PASS" starttime="20171030 15:21:47.447"></status>
</kw>
<msg timestamp="20171030 15:21:47.726" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:21:47.726" status="PASS" starttime="20171030 15:21:47.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:21:47.726" level="FAIL">Off != On</msg>
<status endtime="20171030 15:21:47.726" status="FAIL" starttime="20171030 15:21:47.726"></status>
</kw>
<status endtime="20171030 15:21:47.727" status="FAIL" starttime="20171030 15:21:47.447"></status>
</kw>
<status endtime="20171030 15:21:47.727" status="FAIL" starttime="20171030 15:21:47.446"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:21:57.732" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:21:57.733" status="PASS" starttime="20171030 15:21:57.732"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:21:57.733" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:21:57.733" status="PASS" starttime="20171030 15:21:57.733"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:21:57.734" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:21:57.734" status="PASS" starttime="20171030 15:21:57.734"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:21:57.735" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:21:57.735" status="PASS" starttime="20171030 15:21:57.734"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:21:57.953" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:21:57.953" status="PASS" starttime="20171030 15:21:57.735"></status>
</kw>
<msg timestamp="20171030 15:21:57.954" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:21:57.954" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:57.954" status="PASS" starttime="20171030 15:21:57.735"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:21:57.955" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:57.955" status="PASS" starttime="20171030 15:21:57.954"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:21:57.955" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:57.955" status="PASS" starttime="20171030 15:21:57.955"></status>
</kw>
<status endtime="20171030 15:21:57.956" status="PASS" starttime="20171030 15:21:57.731"></status>
</kw>
<status endtime="20171030 15:21:57.956" status="PASS" starttime="20171030 15:21:57.730"></status>
</kw>
<status endtime="20171030 15:21:57.956" status="PASS" starttime="20171030 15:21:57.730"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:21:57.956" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:21:57.957" status="PASS" starttime="20171030 15:21:57.956"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:21:57.959" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:21:57.959" status="PASS" starttime="20171030 15:21:57.958"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:21:57.960" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:21:57.960" status="PASS" starttime="20171030 15:21:57.959"></status>
</kw>
<status endtime="20171030 15:21:57.960" status="PASS" starttime="20171030 15:21:57.959"></status>
</kw>
<status endtime="20171030 15:21:57.960" status="PASS" starttime="20171030 15:21:57.957"></status>
</kw>
<status endtime="20171030 15:21:57.960" status="PASS" starttime="20171030 15:21:57.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:21:58.049" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:21:58.049" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:58.049" status="PASS" starttime="20171030 15:21:57.960"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:21:58.051" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:21:58.051" status="PASS" starttime="20171030 15:21:58.050"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:21:58.052" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:21:58.053" status="PASS" starttime="20171030 15:21:58.052"></status>
</kw>
<status endtime="20171030 15:21:58.053" status="PASS" starttime="20171030 15:21:58.051"></status>
</kw>
<status endtime="20171030 15:21:58.053" status="PASS" starttime="20171030 15:21:58.050"></status>
</kw>
<status endtime="20171030 15:21:58.053" status="PASS" starttime="20171030 15:21:58.049"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:21:58.053" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:21:58.053" status="PASS" starttime="20171030 15:21:58.053"></status>
</kw>
<msg timestamp="20171030 15:21:58.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:21:58.054" status="PASS" starttime="20171030 15:21:57.729"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:21:58.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:21:58.054" status="PASS" starttime="20171030 15:21:58.054"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:21:58.055" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:21:58.055" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:21:58.055" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:21:58.055" status="PASS" starttime="20171030 15:21:58.055"></status>
</kw>
<msg timestamp="20171030 15:21:58.055" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:21:58.055" status="PASS" starttime="20171030 15:21:57.729"></status>
</kw>
<msg timestamp="20171030 15:21:58.057" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:21:58.057" status="PASS" starttime="20171030 15:21:57.728"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:21:58.058" level="FAIL">Off != On</msg>
<status endtime="20171030 15:21:58.058" status="FAIL" starttime="20171030 15:21:58.058"></status>
</kw>
<status endtime="20171030 15:21:58.059" status="FAIL" starttime="20171030 15:21:57.728"></status>
</kw>
<status endtime="20171030 15:21:58.059" status="FAIL" starttime="20171030 15:21:57.727"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:22:08.064" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:22:08.065" status="PASS" starttime="20171030 15:22:08.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:22:08.065" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:22:08.065" status="PASS" starttime="20171030 15:22:08.065"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:22:08.066" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:22:08.066" status="PASS" starttime="20171030 15:22:08.065"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:22:08.066" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:22:08.067" status="PASS" starttime="20171030 15:22:08.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:22:08.254" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:22:08.254" status="PASS" starttime="20171030 15:22:08.067"></status>
</kw>
<msg timestamp="20171030 15:22:08.254" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:22:08.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:08.254" status="PASS" starttime="20171030 15:22:08.067"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:22:08.255" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:08.255" status="PASS" starttime="20171030 15:22:08.254"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:22:08.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:08.255" status="PASS" starttime="20171030 15:22:08.255"></status>
</kw>
<status endtime="20171030 15:22:08.256" status="PASS" starttime="20171030 15:22:08.063"></status>
</kw>
<status endtime="20171030 15:22:08.256" status="PASS" starttime="20171030 15:22:08.063"></status>
</kw>
<status endtime="20171030 15:22:08.256" status="PASS" starttime="20171030 15:22:08.062"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:22:08.256" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:22:08.257" status="PASS" starttime="20171030 15:22:08.256"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:22:08.259" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:22:08.259" status="PASS" starttime="20171030 15:22:08.258"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:22:08.259" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:22:08.260" status="PASS" starttime="20171030 15:22:08.259"></status>
</kw>
<status endtime="20171030 15:22:08.260" status="PASS" starttime="20171030 15:22:08.259"></status>
</kw>
<status endtime="20171030 15:22:08.260" status="PASS" starttime="20171030 15:22:08.257"></status>
</kw>
<status endtime="20171030 15:22:08.260" status="PASS" starttime="20171030 15:22:08.257"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:22:08.327" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:22:08.327" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:08.327" status="PASS" starttime="20171030 15:22:08.260"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:22:08.329" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:22:08.329" status="PASS" starttime="20171030 15:22:08.329"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:22:08.330" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:22:08.330" status="PASS" starttime="20171030 15:22:08.330"></status>
</kw>
<status endtime="20171030 15:22:08.330" status="PASS" starttime="20171030 15:22:08.329"></status>
</kw>
<status endtime="20171030 15:22:08.330" status="PASS" starttime="20171030 15:22:08.328"></status>
</kw>
<status endtime="20171030 15:22:08.330" status="PASS" starttime="20171030 15:22:08.328"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:22:08.331" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:22:08.331" status="PASS" starttime="20171030 15:22:08.331"></status>
</kw>
<msg timestamp="20171030 15:22:08.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:08.331" status="PASS" starttime="20171030 15:22:08.061"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:22:08.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:08.332" status="PASS" starttime="20171030 15:22:08.331"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:22:08.332" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:22:08.333" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:22:08.333" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:22:08.333" status="PASS" starttime="20171030 15:22:08.332"></status>
</kw>
<msg timestamp="20171030 15:22:08.333" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:22:08.333" status="PASS" starttime="20171030 15:22:08.061"></status>
</kw>
<msg timestamp="20171030 15:22:08.333" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:22:08.333" status="PASS" starttime="20171030 15:22:08.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:22:08.334" level="FAIL">Off != On</msg>
<status endtime="20171030 15:22:08.334" status="FAIL" starttime="20171030 15:22:08.334"></status>
</kw>
<status endtime="20171030 15:22:08.334" status="FAIL" starttime="20171030 15:22:08.060"></status>
</kw>
<status endtime="20171030 15:22:08.334" status="FAIL" starttime="20171030 15:22:08.059"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:22:18.340" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:22:18.340" status="PASS" starttime="20171030 15:22:18.340"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:22:18.341" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:22:18.341" status="PASS" starttime="20171030 15:22:18.341"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:22:18.342" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:22:18.342" status="PASS" starttime="20171030 15:22:18.341"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:22:18.342" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:22:18.342" status="PASS" starttime="20171030 15:22:18.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:22:18.614" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:22:18.614" status="PASS" starttime="20171030 15:22:18.343"></status>
</kw>
<msg timestamp="20171030 15:22:18.614" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:22:18.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:18.614" status="PASS" starttime="20171030 15:22:18.343"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:22:18.615" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:18.615" status="PASS" starttime="20171030 15:22:18.614"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:22:18.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:18.615" status="PASS" starttime="20171030 15:22:18.615"></status>
</kw>
<status endtime="20171030 15:22:18.616" status="PASS" starttime="20171030 15:22:18.339"></status>
</kw>
<status endtime="20171030 15:22:18.616" status="PASS" starttime="20171030 15:22:18.338"></status>
</kw>
<status endtime="20171030 15:22:18.616" status="PASS" starttime="20171030 15:22:18.337"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:22:18.616" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:22:18.616" status="PASS" starttime="20171030 15:22:18.616"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:22:18.619" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:22:18.619" status="PASS" starttime="20171030 15:22:18.618"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:22:18.619" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:22:18.620" status="PASS" starttime="20171030 15:22:18.619"></status>
</kw>
<status endtime="20171030 15:22:18.620" status="PASS" starttime="20171030 15:22:18.619"></status>
</kw>
<status endtime="20171030 15:22:18.620" status="PASS" starttime="20171030 15:22:18.617"></status>
</kw>
<status endtime="20171030 15:22:18.620" status="PASS" starttime="20171030 15:22:18.617"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:22:18.694" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:22:18.694" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:18.694" status="PASS" starttime="20171030 15:22:18.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:22:18.696" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:22:18.696" status="PASS" starttime="20171030 15:22:18.696"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:22:18.698" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:22:18.698" status="PASS" starttime="20171030 15:22:18.697"></status>
</kw>
<status endtime="20171030 15:22:18.698" status="PASS" starttime="20171030 15:22:18.697"></status>
</kw>
<status endtime="20171030 15:22:18.698" status="PASS" starttime="20171030 15:22:18.695"></status>
</kw>
<status endtime="20171030 15:22:18.698" status="PASS" starttime="20171030 15:22:18.695"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:22:18.698" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:22:18.699" status="PASS" starttime="20171030 15:22:18.698"></status>
</kw>
<msg timestamp="20171030 15:22:18.699" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:18.699" status="PASS" starttime="20171030 15:22:18.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:22:18.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:18.700" status="PASS" starttime="20171030 15:22:18.699"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:22:18.700" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:22:18.700" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:22:18.700" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:22:18.700" status="PASS" starttime="20171030 15:22:18.700"></status>
</kw>
<msg timestamp="20171030 15:22:18.701" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:22:18.701" status="PASS" starttime="20171030 15:22:18.336"></status>
</kw>
<msg timestamp="20171030 15:22:18.701" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:22:18.701" status="PASS" starttime="20171030 15:22:18.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:22:18.702" level="FAIL">Off != On</msg>
<status endtime="20171030 15:22:18.702" status="FAIL" starttime="20171030 15:22:18.701"></status>
</kw>
<status endtime="20171030 15:22:18.702" status="FAIL" starttime="20171030 15:22:18.335"></status>
</kw>
<status endtime="20171030 15:22:18.702" status="FAIL" starttime="20171030 15:22:18.335"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:22:28.707" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:22:28.707" status="PASS" starttime="20171030 15:22:28.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:22:28.708" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:22:28.708" status="PASS" starttime="20171030 15:22:28.708"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:22:28.709" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:22:28.709" status="PASS" starttime="20171030 15:22:28.708"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:22:28.709" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:22:28.709" status="PASS" starttime="20171030 15:22:28.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:22:28.909" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:22:28.909" status="PASS" starttime="20171030 15:22:28.710"></status>
</kw>
<msg timestamp="20171030 15:22:28.909" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:22:28.909" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:28.909" status="PASS" starttime="20171030 15:22:28.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:22:28.910" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:28.910" status="PASS" starttime="20171030 15:22:28.910"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:22:28.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:28.911" status="PASS" starttime="20171030 15:22:28.910"></status>
</kw>
<status endtime="20171030 15:22:28.911" status="PASS" starttime="20171030 15:22:28.706"></status>
</kw>
<status endtime="20171030 15:22:28.911" status="PASS" starttime="20171030 15:22:28.706"></status>
</kw>
<status endtime="20171030 15:22:28.911" status="PASS" starttime="20171030 15:22:28.705"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:22:28.912" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:22:28.912" status="PASS" starttime="20171030 15:22:28.911"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:22:28.914" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:22:28.914" status="PASS" starttime="20171030 15:22:28.913"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:22:28.915" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:22:28.915" status="PASS" starttime="20171030 15:22:28.915"></status>
</kw>
<status endtime="20171030 15:22:28.915" status="PASS" starttime="20171030 15:22:28.914"></status>
</kw>
<status endtime="20171030 15:22:28.915" status="PASS" starttime="20171030 15:22:28.913"></status>
</kw>
<status endtime="20171030 15:22:28.915" status="PASS" starttime="20171030 15:22:28.912"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:22:28.996" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:22:28.997" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:28.997" status="PASS" starttime="20171030 15:22:28.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:22:28.999" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:22:28.999" status="PASS" starttime="20171030 15:22:28.998"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:22:29.000" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:22:29.000" status="PASS" starttime="20171030 15:22:28.999"></status>
</kw>
<status endtime="20171030 15:22:29.000" status="PASS" starttime="20171030 15:22:28.999"></status>
</kw>
<status endtime="20171030 15:22:29.000" status="PASS" starttime="20171030 15:22:28.998"></status>
</kw>
<status endtime="20171030 15:22:29.000" status="PASS" starttime="20171030 15:22:28.997"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:22:29.001" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:22:29.001" status="PASS" starttime="20171030 15:22:29.000"></status>
</kw>
<msg timestamp="20171030 15:22:29.001" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:29.001" status="PASS" starttime="20171030 15:22:28.704"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:22:29.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:29.002" status="PASS" starttime="20171030 15:22:29.001"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:22:29.002" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:22:29.002" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:22:29.002" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:22:29.003" status="PASS" starttime="20171030 15:22:29.002"></status>
</kw>
<msg timestamp="20171030 15:22:29.003" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:22:29.003" status="PASS" starttime="20171030 15:22:28.704"></status>
</kw>
<msg timestamp="20171030 15:22:29.003" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:22:29.003" status="PASS" starttime="20171030 15:22:28.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:22:29.004" level="FAIL">Off != On</msg>
<status endtime="20171030 15:22:29.004" status="FAIL" starttime="20171030 15:22:29.004"></status>
</kw>
<status endtime="20171030 15:22:29.004" status="FAIL" starttime="20171030 15:22:28.703"></status>
</kw>
<status endtime="20171030 15:22:29.004" status="FAIL" starttime="20171030 15:22:28.702"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:22:39.010" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:22:39.011" status="PASS" starttime="20171030 15:22:39.010"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:22:39.011" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:22:39.011" status="PASS" starttime="20171030 15:22:39.011"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:22:39.012" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:22:39.012" status="PASS" starttime="20171030 15:22:39.011"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:22:39.012" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:22:39.012" status="PASS" starttime="20171030 15:22:39.012"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:22:39.222" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:22:39.222" status="PASS" starttime="20171030 15:22:39.013"></status>
</kw>
<msg timestamp="20171030 15:22:39.222" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:22:39.222" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:39.222" status="PASS" starttime="20171030 15:22:39.013"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:22:39.223" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:39.223" status="PASS" starttime="20171030 15:22:39.222"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:22:39.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:39.224" status="PASS" starttime="20171030 15:22:39.223"></status>
</kw>
<status endtime="20171030 15:22:39.224" status="PASS" starttime="20171030 15:22:39.009"></status>
</kw>
<status endtime="20171030 15:22:39.224" status="PASS" starttime="20171030 15:22:39.008"></status>
</kw>
<status endtime="20171030 15:22:39.224" status="PASS" starttime="20171030 15:22:39.008"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:22:39.225" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:22:39.225" status="PASS" starttime="20171030 15:22:39.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:22:39.227" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:22:39.227" status="PASS" starttime="20171030 15:22:39.226"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:22:39.228" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:22:39.228" status="PASS" starttime="20171030 15:22:39.228"></status>
</kw>
<status endtime="20171030 15:22:39.228" status="PASS" starttime="20171030 15:22:39.227"></status>
</kw>
<status endtime="20171030 15:22:39.228" status="PASS" starttime="20171030 15:22:39.225"></status>
</kw>
<status endtime="20171030 15:22:39.228" status="PASS" starttime="20171030 15:22:39.225"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:22:39.301" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:22:39.302" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:39.302" status="PASS" starttime="20171030 15:22:39.229"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:22:39.304" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:22:39.304" status="PASS" starttime="20171030 15:22:39.303"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:22:39.308" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:22:39.308" status="PASS" starttime="20171030 15:22:39.304"></status>
</kw>
<status endtime="20171030 15:22:39.308" status="PASS" starttime="20171030 15:22:39.304"></status>
</kw>
<status endtime="20171030 15:22:39.308" status="PASS" starttime="20171030 15:22:39.302"></status>
</kw>
<status endtime="20171030 15:22:39.308" status="PASS" starttime="20171030 15:22:39.302"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:22:39.309" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:22:39.309" status="PASS" starttime="20171030 15:22:39.309"></status>
</kw>
<msg timestamp="20171030 15:22:39.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:39.309" status="PASS" starttime="20171030 15:22:39.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:22:39.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:39.310" status="PASS" starttime="20171030 15:22:39.310"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:22:39.311" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:22:39.311" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:22:39.311" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:22:39.311" status="PASS" starttime="20171030 15:22:39.310"></status>
</kw>
<msg timestamp="20171030 15:22:39.311" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:22:39.311" status="PASS" starttime="20171030 15:22:39.006"></status>
</kw>
<msg timestamp="20171030 15:22:39.311" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:22:39.311" status="PASS" starttime="20171030 15:22:39.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:22:39.312" level="FAIL">Off != On</msg>
<status endtime="20171030 15:22:39.312" status="FAIL" starttime="20171030 15:22:39.312"></status>
</kw>
<status endtime="20171030 15:22:39.312" status="FAIL" starttime="20171030 15:22:39.006"></status>
</kw>
<status endtime="20171030 15:22:39.313" status="FAIL" starttime="20171030 15:22:39.005"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:22:49.318" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:22:49.318" status="PASS" starttime="20171030 15:22:49.317"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:22:49.319" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:22:49.319" status="PASS" starttime="20171030 15:22:49.318"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:22:49.319" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:22:49.319" status="PASS" starttime="20171030 15:22:49.319"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:22:49.320" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:22:49.320" status="PASS" starttime="20171030 15:22:49.320"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:22:49.530" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:22:49.530" status="PASS" starttime="20171030 15:22:49.321"></status>
</kw>
<msg timestamp="20171030 15:22:49.530" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:22:49.530" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:49.530" status="PASS" starttime="20171030 15:22:49.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:22:49.531" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:49.531" status="PASS" starttime="20171030 15:22:49.530"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:22:49.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:49.531" status="PASS" starttime="20171030 15:22:49.531"></status>
</kw>
<status endtime="20171030 15:22:49.532" status="PASS" starttime="20171030 15:22:49.317"></status>
</kw>
<status endtime="20171030 15:22:49.532" status="PASS" starttime="20171030 15:22:49.316"></status>
</kw>
<status endtime="20171030 15:22:49.532" status="PASS" starttime="20171030 15:22:49.316"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:22:49.532" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:22:49.532" status="PASS" starttime="20171030 15:22:49.532"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:22:49.535" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:22:49.535" status="PASS" starttime="20171030 15:22:49.534"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:22:49.535" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:22:49.536" status="PASS" starttime="20171030 15:22:49.535"></status>
</kw>
<status endtime="20171030 15:22:49.536" status="PASS" starttime="20171030 15:22:49.535"></status>
</kw>
<status endtime="20171030 15:22:49.536" status="PASS" starttime="20171030 15:22:49.533"></status>
</kw>
<status endtime="20171030 15:22:49.536" status="PASS" starttime="20171030 15:22:49.533"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:22:49.603" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:22:49.603" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:49.603" status="PASS" starttime="20171030 15:22:49.536"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:22:49.605" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:22:49.605" status="PASS" starttime="20171030 15:22:49.605"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:22:49.606" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:22:49.606" status="PASS" starttime="20171030 15:22:49.606"></status>
</kw>
<status endtime="20171030 15:22:49.606" status="PASS" starttime="20171030 15:22:49.605"></status>
</kw>
<status endtime="20171030 15:22:49.606" status="PASS" starttime="20171030 15:22:49.604"></status>
</kw>
<status endtime="20171030 15:22:49.606" status="PASS" starttime="20171030 15:22:49.604"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:22:49.607" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:22:49.607" status="PASS" starttime="20171030 15:22:49.607"></status>
</kw>
<msg timestamp="20171030 15:22:49.607" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:49.607" status="PASS" starttime="20171030 15:22:49.315"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:22:49.608" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:49.608" status="PASS" starttime="20171030 15:22:49.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:22:49.608" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:22:49.608" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:22:49.609" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:22:49.609" status="PASS" starttime="20171030 15:22:49.608"></status>
</kw>
<msg timestamp="20171030 15:22:49.609" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:22:49.609" status="PASS" starttime="20171030 15:22:49.314"></status>
</kw>
<msg timestamp="20171030 15:22:49.609" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:22:49.609" status="PASS" starttime="20171030 15:22:49.314"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:22:49.610" level="FAIL">Off != On</msg>
<status endtime="20171030 15:22:49.610" status="FAIL" starttime="20171030 15:22:49.610"></status>
</kw>
<status endtime="20171030 15:22:49.610" status="FAIL" starttime="20171030 15:22:49.314"></status>
</kw>
<status endtime="20171030 15:22:49.610" status="FAIL" starttime="20171030 15:22:49.313"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:22:59.616" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:22:59.616" status="PASS" starttime="20171030 15:22:59.616"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:22:59.617" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:22:59.617" status="PASS" starttime="20171030 15:22:59.617"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:22:59.618" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:22:59.618" status="PASS" starttime="20171030 15:22:59.617"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:22:59.618" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:22:59.618" status="PASS" starttime="20171030 15:22:59.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:22:59.808" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:22:59.808" status="PASS" starttime="20171030 15:22:59.619"></status>
</kw>
<msg timestamp="20171030 15:22:59.808" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:22:59.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:59.808" status="PASS" starttime="20171030 15:22:59.619"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:22:59.809" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:59.809" status="PASS" starttime="20171030 15:22:59.809"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:22:59.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:59.810" status="PASS" starttime="20171030 15:22:59.809"></status>
</kw>
<status endtime="20171030 15:22:59.810" status="PASS" starttime="20171030 15:22:59.615"></status>
</kw>
<status endtime="20171030 15:22:59.810" status="PASS" starttime="20171030 15:22:59.614"></status>
</kw>
<status endtime="20171030 15:22:59.810" status="PASS" starttime="20171030 15:22:59.613"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:22:59.811" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:22:59.811" status="PASS" starttime="20171030 15:22:59.810"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:22:59.813" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:22:59.813" status="PASS" starttime="20171030 15:22:59.812"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:22:59.814" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:22:59.814" status="PASS" starttime="20171030 15:22:59.814"></status>
</kw>
<status endtime="20171030 15:22:59.814" status="PASS" starttime="20171030 15:22:59.813"></status>
</kw>
<status endtime="20171030 15:22:59.814" status="PASS" starttime="20171030 15:22:59.812"></status>
</kw>
<status endtime="20171030 15:22:59.814" status="PASS" starttime="20171030 15:22:59.811"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:22:59.891" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:22:59.891" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:59.891" status="PASS" starttime="20171030 15:22:59.815"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:22:59.893" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:22:59.893" status="PASS" starttime="20171030 15:22:59.893"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:22:59.895" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:22:59.895" status="PASS" starttime="20171030 15:22:59.894"></status>
</kw>
<status endtime="20171030 15:22:59.895" status="PASS" starttime="20171030 15:22:59.894"></status>
</kw>
<status endtime="20171030 15:22:59.895" status="PASS" starttime="20171030 15:22:59.892"></status>
</kw>
<status endtime="20171030 15:22:59.895" status="PASS" starttime="20171030 15:22:59.892"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:22:59.896" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:22:59.896" status="PASS" starttime="20171030 15:22:59.895"></status>
</kw>
<msg timestamp="20171030 15:22:59.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:22:59.896" status="PASS" starttime="20171030 15:22:59.613"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:22:59.896" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:22:59.897" status="PASS" starttime="20171030 15:22:59.896"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:22:59.897" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:22:59.897" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:22:59.897" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:22:59.897" status="PASS" starttime="20171030 15:22:59.897"></status>
</kw>
<msg timestamp="20171030 15:22:59.898" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:22:59.898" status="PASS" starttime="20171030 15:22:59.612"></status>
</kw>
<msg timestamp="20171030 15:22:59.898" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:22:59.898" status="PASS" starttime="20171030 15:22:59.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:22:59.899" level="FAIL">Off != On</msg>
<status endtime="20171030 15:22:59.899" status="FAIL" starttime="20171030 15:22:59.898"></status>
</kw>
<status endtime="20171030 15:22:59.899" status="FAIL" starttime="20171030 15:22:59.611"></status>
</kw>
<status endtime="20171030 15:22:59.899" status="FAIL" starttime="20171030 15:22:59.611"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:23:09.904" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:23:09.905" status="PASS" starttime="20171030 15:23:09.904"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:23:09.905" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:23:09.905" status="PASS" starttime="20171030 15:23:09.905"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:23:09.906" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:23:09.906" status="PASS" starttime="20171030 15:23:09.906"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:23:09.907" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:23:09.907" status="PASS" starttime="20171030 15:23:09.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:23:10.094" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:23:10.094" status="PASS" starttime="20171030 15:23:09.907"></status>
</kw>
<msg timestamp="20171030 15:23:10.095" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:23:10.095" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:10.095" status="PASS" starttime="20171030 15:23:09.907"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:23:10.095" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:10.095" status="PASS" starttime="20171030 15:23:10.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:23:10.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:10.096" status="PASS" starttime="20171030 15:23:10.096"></status>
</kw>
<status endtime="20171030 15:23:10.096" status="PASS" starttime="20171030 15:23:09.903"></status>
</kw>
<status endtime="20171030 15:23:10.096" status="PASS" starttime="20171030 15:23:09.903"></status>
</kw>
<status endtime="20171030 15:23:10.096" status="PASS" starttime="20171030 15:23:09.902"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:23:10.097" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:23:10.097" status="PASS" starttime="20171030 15:23:10.097"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:23:10.099" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:23:10.099" status="PASS" starttime="20171030 15:23:10.099"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:23:10.100" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:23:10.100" status="PASS" starttime="20171030 15:23:10.100"></status>
</kw>
<status endtime="20171030 15:23:10.100" status="PASS" starttime="20171030 15:23:10.099"></status>
</kw>
<status endtime="20171030 15:23:10.100" status="PASS" starttime="20171030 15:23:10.098"></status>
</kw>
<status endtime="20171030 15:23:10.101" status="PASS" starttime="20171030 15:23:10.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:23:10.177" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:23:10.177" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:10.177" status="PASS" starttime="20171030 15:23:10.101"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:23:10.179" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:23:10.179" status="PASS" starttime="20171030 15:23:10.179"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:23:10.180" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:23:10.180" status="PASS" starttime="20171030 15:23:10.180"></status>
</kw>
<status endtime="20171030 15:23:10.180" status="PASS" starttime="20171030 15:23:10.179"></status>
</kw>
<status endtime="20171030 15:23:10.181" status="PASS" starttime="20171030 15:23:10.178"></status>
</kw>
<status endtime="20171030 15:23:10.181" status="PASS" starttime="20171030 15:23:10.178"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:23:10.181" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:23:10.181" status="PASS" starttime="20171030 15:23:10.181"></status>
</kw>
<msg timestamp="20171030 15:23:10.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:10.181" status="PASS" starttime="20171030 15:23:09.901"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:23:10.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:10.182" status="PASS" starttime="20171030 15:23:10.182"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:23:10.183" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:23:10.183" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:23:10.183" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:23:10.183" status="PASS" starttime="20171030 15:23:10.182"></status>
</kw>
<msg timestamp="20171030 15:23:10.183" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:23:10.183" status="PASS" starttime="20171030 15:23:09.901"></status>
</kw>
<msg timestamp="20171030 15:23:10.183" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:23:10.183" status="PASS" starttime="20171030 15:23:09.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:23:10.184" level="FAIL">Off != On</msg>
<status endtime="20171030 15:23:10.184" status="FAIL" starttime="20171030 15:23:10.184"></status>
</kw>
<status endtime="20171030 15:23:10.184" status="FAIL" starttime="20171030 15:23:09.900"></status>
</kw>
<status endtime="20171030 15:23:10.185" status="FAIL" starttime="20171030 15:23:09.899"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:23:20.190" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:23:20.191" status="PASS" starttime="20171030 15:23:20.190"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:23:20.191" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:23:20.191" status="PASS" starttime="20171030 15:23:20.191"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:23:20.192" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:23:20.192" status="PASS" starttime="20171030 15:23:20.192"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:23:20.193" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:23:20.193" status="PASS" starttime="20171030 15:23:20.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:23:20.400" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:23:20.401" status="PASS" starttime="20171030 15:23:20.193"></status>
</kw>
<msg timestamp="20171030 15:23:20.401" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:23:20.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:20.401" status="PASS" starttime="20171030 15:23:20.193"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:23:20.402" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:20.402" status="PASS" starttime="20171030 15:23:20.401"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:23:20.402" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:20.402" status="PASS" starttime="20171030 15:23:20.402"></status>
</kw>
<status endtime="20171030 15:23:20.403" status="PASS" starttime="20171030 15:23:20.189"></status>
</kw>
<status endtime="20171030 15:23:20.403" status="PASS" starttime="20171030 15:23:20.189"></status>
</kw>
<status endtime="20171030 15:23:20.403" status="PASS" starttime="20171030 15:23:20.188"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:23:20.403" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:23:20.403" status="PASS" starttime="20171030 15:23:20.403"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:23:20.406" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:23:20.406" status="PASS" starttime="20171030 15:23:20.405"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:23:20.406" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:23:20.407" status="PASS" starttime="20171030 15:23:20.406"></status>
</kw>
<status endtime="20171030 15:23:20.407" status="PASS" starttime="20171030 15:23:20.406"></status>
</kw>
<status endtime="20171030 15:23:20.407" status="PASS" starttime="20171030 15:23:20.404"></status>
</kw>
<status endtime="20171030 15:23:20.407" status="PASS" starttime="20171030 15:23:20.404"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:23:20.473" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:23:20.473" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:20.473" status="PASS" starttime="20171030 15:23:20.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:23:20.475" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:23:20.475" status="PASS" starttime="20171030 15:23:20.475"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:23:20.477" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:23:20.477" status="PASS" starttime="20171030 15:23:20.476"></status>
</kw>
<status endtime="20171030 15:23:20.477" status="PASS" starttime="20171030 15:23:20.476"></status>
</kw>
<status endtime="20171030 15:23:20.477" status="PASS" starttime="20171030 15:23:20.474"></status>
</kw>
<status endtime="20171030 15:23:20.477" status="PASS" starttime="20171030 15:23:20.474"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:23:20.478" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:23:20.478" status="PASS" starttime="20171030 15:23:20.478"></status>
</kw>
<msg timestamp="20171030 15:23:20.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:20.478" status="PASS" starttime="20171030 15:23:20.187"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:23:20.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:20.479" status="PASS" starttime="20171030 15:23:20.478"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:23:20.479" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:23:20.479" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:23:20.479" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:23:20.479" status="PASS" starttime="20171030 15:23:20.479"></status>
</kw>
<msg timestamp="20171030 15:23:20.480" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:23:20.480" status="PASS" starttime="20171030 15:23:20.187"></status>
</kw>
<msg timestamp="20171030 15:23:20.480" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:23:20.480" status="PASS" starttime="20171030 15:23:20.186"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:23:20.481" level="FAIL">Off != On</msg>
<status endtime="20171030 15:23:20.481" status="FAIL" starttime="20171030 15:23:20.480"></status>
</kw>
<status endtime="20171030 15:23:20.481" status="FAIL" starttime="20171030 15:23:20.186"></status>
</kw>
<status endtime="20171030 15:23:20.481" status="FAIL" starttime="20171030 15:23:20.185"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:23:30.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:23:30.488" status="PASS" starttime="20171030 15:23:30.487"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:23:30.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:23:30.488" status="PASS" starttime="20171030 15:23:30.488"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:23:30.489" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:23:30.489" status="PASS" starttime="20171030 15:23:30.488"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:23:30.489" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:23:30.489" status="PASS" starttime="20171030 15:23:30.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:23:30.698" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:23:30.698" status="PASS" starttime="20171030 15:23:30.490"></status>
</kw>
<msg timestamp="20171030 15:23:30.698" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:23:30.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:30.698" status="PASS" starttime="20171030 15:23:30.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:23:30.699" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:30.699" status="PASS" starttime="20171030 15:23:30.699"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:23:30.700" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:30.700" status="PASS" starttime="20171030 15:23:30.700"></status>
</kw>
<status endtime="20171030 15:23:30.701" status="PASS" starttime="20171030 15:23:30.486"></status>
</kw>
<status endtime="20171030 15:23:30.701" status="PASS" starttime="20171030 15:23:30.486"></status>
</kw>
<status endtime="20171030 15:23:30.701" status="PASS" starttime="20171030 15:23:30.485"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:23:30.702" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:23:30.702" status="PASS" starttime="20171030 15:23:30.701"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:23:30.705" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:23:30.705" status="PASS" starttime="20171030 15:23:30.704"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:23:30.706" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:23:30.706" status="PASS" starttime="20171030 15:23:30.706"></status>
</kw>
<status endtime="20171030 15:23:30.706" status="PASS" starttime="20171030 15:23:30.705"></status>
</kw>
<status endtime="20171030 15:23:30.706" status="PASS" starttime="20171030 15:23:30.703"></status>
</kw>
<status endtime="20171030 15:23:30.706" status="PASS" starttime="20171030 15:23:30.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:23:30.792" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:23:30.792" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:30.792" status="PASS" starttime="20171030 15:23:30.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:23:30.794" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:23:30.794" status="PASS" starttime="20171030 15:23:30.794"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:23:30.795" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:23:30.795" status="PASS" starttime="20171030 15:23:30.795"></status>
</kw>
<status endtime="20171030 15:23:30.795" status="PASS" starttime="20171030 15:23:30.794"></status>
</kw>
<status endtime="20171030 15:23:30.795" status="PASS" starttime="20171030 15:23:30.793"></status>
</kw>
<status endtime="20171030 15:23:30.796" status="PASS" starttime="20171030 15:23:30.793"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:23:30.796" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:23:30.796" status="PASS" starttime="20171030 15:23:30.796"></status>
</kw>
<msg timestamp="20171030 15:23:30.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:30.796" status="PASS" starttime="20171030 15:23:30.485"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:23:30.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:30.797" status="PASS" starttime="20171030 15:23:30.797"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:23:30.797" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:23:30.798" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:23:30.798" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:23:30.798" status="PASS" starttime="20171030 15:23:30.797"></status>
</kw>
<msg timestamp="20171030 15:23:30.798" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:23:30.798" status="PASS" starttime="20171030 15:23:30.484"></status>
</kw>
<msg timestamp="20171030 15:23:30.799" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:23:30.799" status="PASS" starttime="20171030 15:23:30.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:23:30.800" level="FAIL">Off != On</msg>
<status endtime="20171030 15:23:30.800" status="FAIL" starttime="20171030 15:23:30.799"></status>
</kw>
<status endtime="20171030 15:23:30.800" status="FAIL" starttime="20171030 15:23:30.483"></status>
</kw>
<status endtime="20171030 15:23:30.800" status="FAIL" starttime="20171030 15:23:30.482"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:23:40.805" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:23:40.806" status="PASS" starttime="20171030 15:23:40.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:23:40.806" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:23:40.806" status="PASS" starttime="20171030 15:23:40.806"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:23:40.807" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:23:40.807" status="PASS" starttime="20171030 15:23:40.807"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:23:40.808" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:23:40.808" status="PASS" starttime="20171030 15:23:40.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:23:41.015" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:23:41.016" status="PASS" starttime="20171030 15:23:40.809"></status>
</kw>
<msg timestamp="20171030 15:23:41.016" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:23:41.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:41.016" status="PASS" starttime="20171030 15:23:40.808"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:23:41.016" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:41.017" status="PASS" starttime="20171030 15:23:41.016"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:23:41.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:41.017" status="PASS" starttime="20171030 15:23:41.017"></status>
</kw>
<status endtime="20171030 15:23:41.018" status="PASS" starttime="20171030 15:23:40.804"></status>
</kw>
<status endtime="20171030 15:23:41.018" status="PASS" starttime="20171030 15:23:40.804"></status>
</kw>
<status endtime="20171030 15:23:41.018" status="PASS" starttime="20171030 15:23:40.803"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:23:41.019" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:23:41.019" status="PASS" starttime="20171030 15:23:41.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:23:41.022" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:23:41.022" status="PASS" starttime="20171030 15:23:41.021"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:23:41.023" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:23:41.023" status="PASS" starttime="20171030 15:23:41.023"></status>
</kw>
<status endtime="20171030 15:23:41.024" status="PASS" starttime="20171030 15:23:41.022"></status>
</kw>
<status endtime="20171030 15:23:41.024" status="PASS" starttime="20171030 15:23:41.020"></status>
</kw>
<status endtime="20171030 15:23:41.024" status="PASS" starttime="20171030 15:23:41.019"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:23:41.092" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:23:41.092" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:41.092" status="PASS" starttime="20171030 15:23:41.024"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:23:41.094" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:23:41.094" status="PASS" starttime="20171030 15:23:41.093"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:23:41.095" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:23:41.095" status="PASS" starttime="20171030 15:23:41.095"></status>
</kw>
<status endtime="20171030 15:23:41.096" status="PASS" starttime="20171030 15:23:41.094"></status>
</kw>
<status endtime="20171030 15:23:41.096" status="PASS" starttime="20171030 15:23:41.093"></status>
</kw>
<status endtime="20171030 15:23:41.096" status="PASS" starttime="20171030 15:23:41.092"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:23:41.096" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:23:41.096" status="PASS" starttime="20171030 15:23:41.096"></status>
</kw>
<msg timestamp="20171030 15:23:41.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:41.097" status="PASS" starttime="20171030 15:23:40.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:23:41.097" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:41.098" status="PASS" starttime="20171030 15:23:41.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:23:41.098" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:23:41.098" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:23:41.098" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:23:41.098" status="PASS" starttime="20171030 15:23:41.098"></status>
</kw>
<msg timestamp="20171030 15:23:41.099" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:23:41.099" status="PASS" starttime="20171030 15:23:40.802"></status>
</kw>
<msg timestamp="20171030 15:23:41.099" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:23:41.099" status="PASS" starttime="20171030 15:23:40.801"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:23:41.100" level="FAIL">Off != On</msg>
<status endtime="20171030 15:23:41.100" status="FAIL" starttime="20171030 15:23:41.099"></status>
</kw>
<status endtime="20171030 15:23:41.100" status="FAIL" starttime="20171030 15:23:40.801"></status>
</kw>
<status endtime="20171030 15:23:41.100" status="FAIL" starttime="20171030 15:23:40.800"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:23:51.105" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:23:51.106" status="PASS" starttime="20171030 15:23:51.105"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:23:51.106" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:23:51.107" status="PASS" starttime="20171030 15:23:51.106"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:23:51.107" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:23:51.107" status="PASS" starttime="20171030 15:23:51.107"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:23:51.108" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:23:51.108" status="PASS" starttime="20171030 15:23:51.107"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:23:51.354" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:23:51.355" status="PASS" starttime="20171030 15:23:51.109"></status>
</kw>
<msg timestamp="20171030 15:23:51.355" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:23:51.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:51.355" status="PASS" starttime="20171030 15:23:51.108"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:23:51.355" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:51.356" status="PASS" starttime="20171030 15:23:51.355"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:23:51.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:51.356" status="PASS" starttime="20171030 15:23:51.356"></status>
</kw>
<status endtime="20171030 15:23:51.356" status="PASS" starttime="20171030 15:23:51.105"></status>
</kw>
<status endtime="20171030 15:23:51.356" status="PASS" starttime="20171030 15:23:51.104"></status>
</kw>
<status endtime="20171030 15:23:51.357" status="PASS" starttime="20171030 15:23:51.103"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:23:51.357" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:23:51.357" status="PASS" starttime="20171030 15:23:51.357"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:23:51.359" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:23:51.359" status="PASS" starttime="20171030 15:23:51.359"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:23:51.360" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:23:51.360" status="PASS" starttime="20171030 15:23:51.360"></status>
</kw>
<status endtime="20171030 15:23:51.361" status="PASS" starttime="20171030 15:23:51.360"></status>
</kw>
<status endtime="20171030 15:23:51.361" status="PASS" starttime="20171030 15:23:51.358"></status>
</kw>
<status endtime="20171030 15:23:51.361" status="PASS" starttime="20171030 15:23:51.357"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:23:51.492" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:23:51.493" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:51.493" status="PASS" starttime="20171030 15:23:51.361"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:23:51.495" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:23:51.495" status="PASS" starttime="20171030 15:23:51.494"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:23:51.496" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:23:51.496" status="PASS" starttime="20171030 15:23:51.496"></status>
</kw>
<status endtime="20171030 15:23:51.496" status="PASS" starttime="20171030 15:23:51.495"></status>
</kw>
<status endtime="20171030 15:23:51.496" status="PASS" starttime="20171030 15:23:51.494"></status>
</kw>
<status endtime="20171030 15:23:51.496" status="PASS" starttime="20171030 15:23:51.493"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:23:51.497" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:23:51.497" status="PASS" starttime="20171030 15:23:51.497"></status>
</kw>
<msg timestamp="20171030 15:23:51.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:23:51.497" status="PASS" starttime="20171030 15:23:51.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:23:51.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:23:51.498" status="PASS" starttime="20171030 15:23:51.497"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:23:51.498" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:23:51.498" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:23:51.499" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:23:51.499" status="PASS" starttime="20171030 15:23:51.498"></status>
</kw>
<msg timestamp="20171030 15:23:51.499" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:23:51.499" status="PASS" starttime="20171030 15:23:51.102"></status>
</kw>
<msg timestamp="20171030 15:23:51.499" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:23:51.499" status="PASS" starttime="20171030 15:23:51.102"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:23:51.500" level="FAIL">Off != On</msg>
<status endtime="20171030 15:23:51.500" status="FAIL" starttime="20171030 15:23:51.500"></status>
</kw>
<status endtime="20171030 15:23:51.500" status="FAIL" starttime="20171030 15:23:51.101"></status>
</kw>
<status endtime="20171030 15:23:51.500" status="FAIL" starttime="20171030 15:23:51.101"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:24:01.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:24:01.507" status="PASS" starttime="20171030 15:24:01.506"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:01.508" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:01.508" status="PASS" starttime="20171030 15:24:01.507"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:24:01.508" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:24:01.508" status="PASS" starttime="20171030 15:24:01.508"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:24:01.509" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:24:01.509" status="PASS" starttime="20171030 15:24:01.509"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:24:01.699" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:24:01.699" status="PASS" starttime="20171030 15:24:01.510"></status>
</kw>
<msg timestamp="20171030 15:24:01.699" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:24:01.699" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:01.699" status="PASS" starttime="20171030 15:24:01.509"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:24:01.700" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:01.700" status="PASS" starttime="20171030 15:24:01.699"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:01.700" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:01.701" status="PASS" starttime="20171030 15:24:01.700"></status>
</kw>
<status endtime="20171030 15:24:01.701" status="PASS" starttime="20171030 15:24:01.505"></status>
</kw>
<status endtime="20171030 15:24:01.701" status="PASS" starttime="20171030 15:24:01.504"></status>
</kw>
<status endtime="20171030 15:24:01.701" status="PASS" starttime="20171030 15:24:01.503"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:01.701" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:24:01.701" status="PASS" starttime="20171030 15:24:01.701"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:01.704" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:01.704" status="PASS" starttime="20171030 15:24:01.703"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:01.705" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:01.705" status="PASS" starttime="20171030 15:24:01.704"></status>
</kw>
<status endtime="20171030 15:24:01.705" status="PASS" starttime="20171030 15:24:01.704"></status>
</kw>
<status endtime="20171030 15:24:01.705" status="PASS" starttime="20171030 15:24:01.702"></status>
</kw>
<status endtime="20171030 15:24:01.705" status="PASS" starttime="20171030 15:24:01.702"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:24:01.778" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:24:01.778" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:01.778" status="PASS" starttime="20171030 15:24:01.705"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:01.780" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:01.780" status="PASS" starttime="20171030 15:24:01.779"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:01.784" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:01.784" status="PASS" starttime="20171030 15:24:01.781"></status>
</kw>
<status endtime="20171030 15:24:01.784" status="PASS" starttime="20171030 15:24:01.780"></status>
</kw>
<status endtime="20171030 15:24:01.784" status="PASS" starttime="20171030 15:24:01.779"></status>
</kw>
<status endtime="20171030 15:24:01.785" status="PASS" starttime="20171030 15:24:01.778"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:24:01.785" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:24:01.785" status="PASS" starttime="20171030 15:24:01.785"></status>
</kw>
<msg timestamp="20171030 15:24:01.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:01.785" status="PASS" starttime="20171030 15:24:01.503"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:01.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:01.786" status="PASS" starttime="20171030 15:24:01.786"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:24:01.787" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:24:01.787" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:24:01.787" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:24:01.787" status="PASS" starttime="20171030 15:24:01.786"></status>
</kw>
<msg timestamp="20171030 15:24:01.787" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:24:01.787" status="PASS" starttime="20171030 15:24:01.502"></status>
</kw>
<msg timestamp="20171030 15:24:01.788" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:24:01.788" status="PASS" starttime="20171030 15:24:01.502"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:24:01.788" level="FAIL">Off != On</msg>
<status endtime="20171030 15:24:01.788" status="FAIL" starttime="20171030 15:24:01.788"></status>
</kw>
<status endtime="20171030 15:24:01.789" status="FAIL" starttime="20171030 15:24:01.501"></status>
</kw>
<status endtime="20171030 15:24:01.789" status="FAIL" starttime="20171030 15:24:01.501"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:24:11.794" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:24:11.794" status="PASS" starttime="20171030 15:24:11.794"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:11.795" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:11.795" status="PASS" starttime="20171030 15:24:11.795"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:24:11.796" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:24:11.796" status="PASS" starttime="20171030 15:24:11.795"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:24:11.796" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:24:11.796" status="PASS" starttime="20171030 15:24:11.796"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:24:12.061" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:24:12.061" status="PASS" starttime="20171030 15:24:11.797"></status>
</kw>
<msg timestamp="20171030 15:24:12.061" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:24:12.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:12.062" status="PASS" starttime="20171030 15:24:11.797"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:24:12.062" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:12.062" status="PASS" starttime="20171030 15:24:12.062"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:12.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:12.063" status="PASS" starttime="20171030 15:24:12.063"></status>
</kw>
<status endtime="20171030 15:24:12.064" status="PASS" starttime="20171030 15:24:11.793"></status>
</kw>
<status endtime="20171030 15:24:12.064" status="PASS" starttime="20171030 15:24:11.793"></status>
</kw>
<status endtime="20171030 15:24:12.064" status="PASS" starttime="20171030 15:24:11.792"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:12.064" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:24:12.064" status="PASS" starttime="20171030 15:24:12.064"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:12.067" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:12.067" status="PASS" starttime="20171030 15:24:12.066"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:12.067" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:12.068" status="PASS" starttime="20171030 15:24:12.067"></status>
</kw>
<status endtime="20171030 15:24:12.068" status="PASS" starttime="20171030 15:24:12.067"></status>
</kw>
<status endtime="20171030 15:24:12.068" status="PASS" starttime="20171030 15:24:12.065"></status>
</kw>
<status endtime="20171030 15:24:12.068" status="PASS" starttime="20171030 15:24:12.065"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:24:12.143" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:24:12.143" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:12.143" status="PASS" starttime="20171030 15:24:12.068"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:12.145" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:12.145" status="PASS" starttime="20171030 15:24:12.144"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:12.146" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:12.146" status="PASS" starttime="20171030 15:24:12.145"></status>
</kw>
<status endtime="20171030 15:24:12.146" status="PASS" starttime="20171030 15:24:12.145"></status>
</kw>
<status endtime="20171030 15:24:12.146" status="PASS" starttime="20171030 15:24:12.144"></status>
</kw>
<status endtime="20171030 15:24:12.146" status="PASS" starttime="20171030 15:24:12.143"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:24:12.146" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:24:12.147" status="PASS" starttime="20171030 15:24:12.146"></status>
</kw>
<msg timestamp="20171030 15:24:12.147" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:12.147" status="PASS" starttime="20171030 15:24:11.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:12.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:12.148" status="PASS" starttime="20171030 15:24:12.147"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:24:12.148" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:24:12.148" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:24:12.148" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:24:12.148" status="PASS" starttime="20171030 15:24:12.148"></status>
</kw>
<msg timestamp="20171030 15:24:12.149" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:24:12.149" status="PASS" starttime="20171030 15:24:11.791"></status>
</kw>
<msg timestamp="20171030 15:24:12.149" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:24:12.149" status="PASS" starttime="20171030 15:24:11.790"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:24:12.150" level="FAIL">Off != On</msg>
<status endtime="20171030 15:24:12.150" status="FAIL" starttime="20171030 15:24:12.149"></status>
</kw>
<status endtime="20171030 15:24:12.150" status="FAIL" starttime="20171030 15:24:11.790"></status>
</kw>
<status endtime="20171030 15:24:12.150" status="FAIL" starttime="20171030 15:24:11.789"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:24:22.156" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:24:22.156" status="PASS" starttime="20171030 15:24:22.155"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:22.157" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:22.157" status="PASS" starttime="20171030 15:24:22.156"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:24:22.157" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:24:22.157" status="PASS" starttime="20171030 15:24:22.157"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:24:22.158" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:24:22.158" status="PASS" starttime="20171030 15:24:22.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:24:22.355" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:24:22.355" status="PASS" starttime="20171030 15:24:22.159"></status>
</kw>
<msg timestamp="20171030 15:24:22.355" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:24:22.356" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:22.356" status="PASS" starttime="20171030 15:24:22.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:24:22.356" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:22.356" status="PASS" starttime="20171030 15:24:22.356"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:22.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:22.357" status="PASS" starttime="20171030 15:24:22.357"></status>
</kw>
<status endtime="20171030 15:24:22.357" status="PASS" starttime="20171030 15:24:22.154"></status>
</kw>
<status endtime="20171030 15:24:22.357" status="PASS" starttime="20171030 15:24:22.154"></status>
</kw>
<status endtime="20171030 15:24:22.357" status="PASS" starttime="20171030 15:24:22.153"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:22.358" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:24:22.358" status="PASS" starttime="20171030 15:24:22.358"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:22.360" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:22.360" status="PASS" starttime="20171030 15:24:22.359"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:22.361" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:22.361" status="PASS" starttime="20171030 15:24:22.361"></status>
</kw>
<status endtime="20171030 15:24:22.361" status="PASS" starttime="20171030 15:24:22.360"></status>
</kw>
<status endtime="20171030 15:24:22.361" status="PASS" starttime="20171030 15:24:22.359"></status>
</kw>
<status endtime="20171030 15:24:22.361" status="PASS" starttime="20171030 15:24:22.358"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:24:22.428" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:24:22.428" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:22.428" status="PASS" starttime="20171030 15:24:22.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:22.430" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:22.430" status="PASS" starttime="20171030 15:24:22.430"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:22.432" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:22.432" status="PASS" starttime="20171030 15:24:22.431"></status>
</kw>
<status endtime="20171030 15:24:22.432" status="PASS" starttime="20171030 15:24:22.431"></status>
</kw>
<status endtime="20171030 15:24:22.432" status="PASS" starttime="20171030 15:24:22.429"></status>
</kw>
<status endtime="20171030 15:24:22.432" status="PASS" starttime="20171030 15:24:22.429"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:24:22.432" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:24:22.433" status="PASS" starttime="20171030 15:24:22.432"></status>
</kw>
<msg timestamp="20171030 15:24:22.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:22.433" status="PASS" starttime="20171030 15:24:22.152"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:22.433" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:22.433" status="PASS" starttime="20171030 15:24:22.433"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:24:22.434" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:24:22.434" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:24:22.434" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:24:22.434" status="PASS" starttime="20171030 15:24:22.434"></status>
</kw>
<msg timestamp="20171030 15:24:22.434" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:24:22.435" status="PASS" starttime="20171030 15:24:22.152"></status>
</kw>
<msg timestamp="20171030 15:24:22.435" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:24:22.435" status="PASS" starttime="20171030 15:24:22.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:24:22.436" level="FAIL">Off != On</msg>
<status endtime="20171030 15:24:22.436" status="FAIL" starttime="20171030 15:24:22.435"></status>
</kw>
<status endtime="20171030 15:24:22.436" status="FAIL" starttime="20171030 15:24:22.151"></status>
</kw>
<status endtime="20171030 15:24:22.436" status="FAIL" starttime="20171030 15:24:22.151"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:24:32.441" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:24:32.442" status="PASS" starttime="20171030 15:24:32.441"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:32.442" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:32.442" status="PASS" starttime="20171030 15:24:32.442"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:24:32.443" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:24:32.443" status="PASS" starttime="20171030 15:24:32.442"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:24:32.443" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:24:32.443" status="PASS" starttime="20171030 15:24:32.443"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:24:32.633" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:24:32.633" status="PASS" starttime="20171030 15:24:32.444"></status>
</kw>
<msg timestamp="20171030 15:24:32.633" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:24:32.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:32.633" status="PASS" starttime="20171030 15:24:32.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:24:32.634" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:32.634" status="PASS" starttime="20171030 15:24:32.634"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:32.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:32.635" status="PASS" starttime="20171030 15:24:32.634"></status>
</kw>
<status endtime="20171030 15:24:32.635" status="PASS" starttime="20171030 15:24:32.440"></status>
</kw>
<status endtime="20171030 15:24:32.635" status="PASS" starttime="20171030 15:24:32.440"></status>
</kw>
<status endtime="20171030 15:24:32.635" status="PASS" starttime="20171030 15:24:32.439"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:32.636" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:24:32.636" status="PASS" starttime="20171030 15:24:32.636"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:32.638" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:32.638" status="PASS" starttime="20171030 15:24:32.637"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:32.639" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:32.639" status="PASS" starttime="20171030 15:24:32.639"></status>
</kw>
<status endtime="20171030 15:24:32.639" status="PASS" starttime="20171030 15:24:32.638"></status>
</kw>
<status endtime="20171030 15:24:32.639" status="PASS" starttime="20171030 15:24:32.637"></status>
</kw>
<status endtime="20171030 15:24:32.639" status="PASS" starttime="20171030 15:24:32.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:24:32.706" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:24:32.706" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:32.707" status="PASS" starttime="20171030 15:24:32.640"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:32.708" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:32.709" status="PASS" starttime="20171030 15:24:32.708"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:32.709" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:32.710" status="PASS" starttime="20171030 15:24:32.709"></status>
</kw>
<status endtime="20171030 15:24:32.710" status="PASS" starttime="20171030 15:24:32.709"></status>
</kw>
<status endtime="20171030 15:24:32.710" status="PASS" starttime="20171030 15:24:32.707"></status>
</kw>
<status endtime="20171030 15:24:32.710" status="PASS" starttime="20171030 15:24:32.707"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:24:32.710" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:24:32.710" status="PASS" starttime="20171030 15:24:32.710"></status>
</kw>
<msg timestamp="20171030 15:24:32.710" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:32.711" status="PASS" starttime="20171030 15:24:32.438"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:32.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:32.711" status="PASS" starttime="20171030 15:24:32.711"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:24:32.712" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:24:32.712" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:24:32.712" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:24:32.712" status="PASS" starttime="20171030 15:24:32.711"></status>
</kw>
<msg timestamp="20171030 15:24:32.712" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:24:32.712" status="PASS" starttime="20171030 15:24:32.438"></status>
</kw>
<msg timestamp="20171030 15:24:32.713" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:24:32.713" status="PASS" starttime="20171030 15:24:32.437"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:24:32.713" level="FAIL">Off != On</msg>
<status endtime="20171030 15:24:32.713" status="FAIL" starttime="20171030 15:24:32.713"></status>
</kw>
<status endtime="20171030 15:24:32.714" status="FAIL" starttime="20171030 15:24:32.437"></status>
</kw>
<status endtime="20171030 15:24:32.714" status="FAIL" starttime="20171030 15:24:32.437"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:24:42.720" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:24:42.720" status="PASS" starttime="20171030 15:24:42.719"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:42.721" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:42.721" status="PASS" starttime="20171030 15:24:42.720"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:24:42.721" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:24:42.721" status="PASS" starttime="20171030 15:24:42.721"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:24:42.722" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:24:42.722" status="PASS" starttime="20171030 15:24:42.722"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:24:42.905" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:24:42.905" status="PASS" starttime="20171030 15:24:42.723"></status>
</kw>
<msg timestamp="20171030 15:24:42.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:24:42.905" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:42.905" status="PASS" starttime="20171030 15:24:42.722"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:24:42.906" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:42.906" status="PASS" starttime="20171030 15:24:42.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:42.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:42.907" status="PASS" starttime="20171030 15:24:42.906"></status>
</kw>
<status endtime="20171030 15:24:42.907" status="PASS" starttime="20171030 15:24:42.718"></status>
</kw>
<status endtime="20171030 15:24:42.907" status="PASS" starttime="20171030 15:24:42.718"></status>
</kw>
<status endtime="20171030 15:24:42.907" status="PASS" starttime="20171030 15:24:42.717"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:42.908" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:24:42.908" status="PASS" starttime="20171030 15:24:42.908"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:42.910" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:42.910" status="PASS" starttime="20171030 15:24:42.910"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:42.911" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:42.911" status="PASS" starttime="20171030 15:24:42.911"></status>
</kw>
<status endtime="20171030 15:24:42.912" status="PASS" starttime="20171030 15:24:42.911"></status>
</kw>
<status endtime="20171030 15:24:42.912" status="PASS" starttime="20171030 15:24:42.909"></status>
</kw>
<status endtime="20171030 15:24:42.912" status="PASS" starttime="20171030 15:24:42.908"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:24:42.978" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:24:42.978" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:42.978" status="PASS" starttime="20171030 15:24:42.912"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:42.980" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:42.980" status="PASS" starttime="20171030 15:24:42.980"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:42.981" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:42.982" status="PASS" starttime="20171030 15:24:42.981"></status>
</kw>
<status endtime="20171030 15:24:42.982" status="PASS" starttime="20171030 15:24:42.980"></status>
</kw>
<status endtime="20171030 15:24:42.982" status="PASS" starttime="20171030 15:24:42.979"></status>
</kw>
<status endtime="20171030 15:24:42.982" status="PASS" starttime="20171030 15:24:42.979"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:24:42.982" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:24:42.982" status="PASS" starttime="20171030 15:24:42.982"></status>
</kw>
<msg timestamp="20171030 15:24:42.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:42.983" status="PASS" starttime="20171030 15:24:42.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:42.983" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:42.983" status="PASS" starttime="20171030 15:24:42.983"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:24:42.984" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:24:42.984" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:24:42.984" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:24:42.984" status="PASS" starttime="20171030 15:24:42.983"></status>
</kw>
<msg timestamp="20171030 15:24:42.984" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:24:42.984" status="PASS" starttime="20171030 15:24:42.716"></status>
</kw>
<msg timestamp="20171030 15:24:42.985" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:24:42.985" status="PASS" starttime="20171030 15:24:42.715"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:24:42.985" level="FAIL">Off != On</msg>
<status endtime="20171030 15:24:42.985" status="FAIL" starttime="20171030 15:24:42.985"></status>
</kw>
<status endtime="20171030 15:24:42.986" status="FAIL" starttime="20171030 15:24:42.715"></status>
</kw>
<status endtime="20171030 15:24:42.986" status="FAIL" starttime="20171030 15:24:42.714"></status>
</kw>
<msg timestamp="20171030 15:24:42.986" level="FAIL">Keyword 'Is Host Off' failed after retrying for 6 minutes. The last error was: Off != On</msg>
<status endtime="20171030 15:24:42.986" status="FAIL" starttime="20171030 15:18:34.263"></status>
</kw>
<status endtime="20171030 15:24:42.986" status="FAIL" starttime="20171030 15:18:34.262"></status>
</kw>
<msg timestamp="20171030 15:24:42.986" level="INFO">${status} = False</msg>
<status endtime="20171030 15:24:42.986" status="PASS" starttime="20171030 15:18:34.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<kw library="state_manager" name="Hard Power Off">
<doc>Do a hard power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${CHASSIS_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171030 15:24:42.988" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Chassis.Transition.Off'}</msg>
<status endtime="20171030 15:24:42.988" status="PASS" starttime="20171030 15:24:42.987"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>RequestedPowerTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:42.989" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0/</msg>
<status endtime="20171030 15:24:42.989" status="PASS" starttime="20171030 15:24:42.989"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:24:42.992" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:24:42.992" status="PASS" starttime="20171030 15:24:42.992"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:42.993" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:42.993" status="PASS" starttime="20171030 15:24:42.993"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:24:42.994" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:24:42.994" status="PASS" starttime="20171030 15:24:42.993"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:24:42.995" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:24:42.995" status="PASS" starttime="20171030 15:24:42.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:24:43.216" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:24:43.216" status="PASS" starttime="20171030 15:24:42.996"></status>
</kw>
<msg timestamp="20171030 15:24:43.216" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:24:43.216" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:43.216" status="PASS" starttime="20171030 15:24:42.995"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:24:43.217" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:43.217" status="PASS" starttime="20171030 15:24:43.217"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:43.218" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:43.218" status="PASS" starttime="20171030 15:24:43.217"></status>
</kw>
<status endtime="20171030 15:24:43.218" status="PASS" starttime="20171030 15:24:42.991"></status>
</kw>
<status endtime="20171030 15:24:43.218" status="PASS" starttime="20171030 15:24:42.991"></status>
</kw>
<status endtime="20171030 15:24:43.218" status="PASS" starttime="20171030 15:24:42.990"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:43.219" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/RequestedPowerTransition</msg>
<status endtime="20171030 15:24:43.219" status="PASS" starttime="20171030 15:24:43.218"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:43.219" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:43.219" status="PASS" starttime="20171030 15:24:43.219"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20171030 15:24:43.220" status="PASS" starttime="20171030 15:24:43.220"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:43.221" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/RequestedPowerTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Chassis.Transition.Off'}, u'headers': {u'C...</msg>
<status endtime="20171030 15:24:43.221" status="PASS" starttime="20171030 15:24:43.221"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:43.222" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/RequestedPowerTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Chassis.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20171030 15:24:43.222" status="PASS" starttime="20171030 15:24:43.222"></status>
</kw>
<status endtime="20171030 15:24:43.223" status="PASS" starttime="20171030 15:24:43.222"></status>
</kw>
<status endtime="20171030 15:24:43.223" status="PASS" starttime="20171030 15:24:43.220"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:24:43.875" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/RequestedPowerTransition, data={"data": "xyz.openbmc_project.State.Chassis.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171030 15:24:43.875" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:43.875" status="PASS" starttime="20171030 15:24:43.223"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:43.876" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:43.876" status="PASS" starttime="20171030 15:24:43.876"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:43.877" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:43.878" status="PASS" starttime="20171030 15:24:43.877"></status>
</kw>
<status endtime="20171030 15:24:43.878" status="PASS" starttime="20171030 15:24:43.876"></status>
</kw>
<status endtime="20171030 15:24:43.878" status="PASS" starttime="20171030 15:24:43.875"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:24:43.878" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:24:43.878" status="PASS" starttime="20171030 15:24:43.878"></status>
</kw>
<msg timestamp="20171030 15:24:43.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:43.879" status="PASS" starttime="20171030 15:24:42.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:43.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:43.879" status="PASS" starttime="20171030 15:24:43.879"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171030 15:24:43.880" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20171030 15:24:43.880" status="PASS" starttime="20171030 15:24:43.879"></status>
</kw>
<status endtime="20171030 15:24:43.880" status="PASS" starttime="20171030 15:24:42.988"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20171030 15:24:43.881" status="PASS" starttime="20171030 15:24:43.880"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Run Keywords</arg>
<arg>Is Chassis Off</arg>
<arg>AND</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Is Chassis Off</arg>
<arg>AND</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:24:43.886" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:24:43.886" status="PASS" starttime="20171030 15:24:43.886"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:43.887" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:43.887" status="PASS" starttime="20171030 15:24:43.887"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:24:43.888" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:24:43.888" status="PASS" starttime="20171030 15:24:43.887"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:24:43.888" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:24:43.888" status="PASS" starttime="20171030 15:24:43.888"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:24:44.876" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:24:44.876" status="PASS" starttime="20171030 15:24:43.889"></status>
</kw>
<msg timestamp="20171030 15:24:44.876" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:24:44.876" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:44.877" status="PASS" starttime="20171030 15:24:43.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:24:44.877" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:44.877" status="PASS" starttime="20171030 15:24:44.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:44.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:44.878" status="PASS" starttime="20171030 15:24:44.878"></status>
</kw>
<status endtime="20171030 15:24:44.878" status="PASS" starttime="20171030 15:24:43.885"></status>
</kw>
<status endtime="20171030 15:24:44.878" status="PASS" starttime="20171030 15:24:43.884"></status>
</kw>
<status endtime="20171030 15:24:44.878" status="PASS" starttime="20171030 15:24:43.884"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:44.879" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:24:44.879" status="PASS" starttime="20171030 15:24:44.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:44.882" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:44.882" status="PASS" starttime="20171030 15:24:44.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:44.883" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:44.884" status="PASS" starttime="20171030 15:24:44.883"></status>
</kw>
<status endtime="20171030 15:24:44.884" status="PASS" starttime="20171030 15:24:44.882"></status>
</kw>
<status endtime="20171030 15:24:44.884" status="PASS" starttime="20171030 15:24:44.880"></status>
</kw>
<status endtime="20171030 15:24:44.884" status="PASS" starttime="20171030 15:24:44.879"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:24:46.368" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:24:46.369" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:46.369" status="PASS" starttime="20171030 15:24:44.884"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:46.371" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:46.371" status="PASS" starttime="20171030 15:24:46.370"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:46.372" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:46.372" status="PASS" starttime="20171030 15:24:46.372"></status>
</kw>
<status endtime="20171030 15:24:46.372" status="PASS" starttime="20171030 15:24:46.371"></status>
</kw>
<status endtime="20171030 15:24:46.372" status="PASS" starttime="20171030 15:24:46.369"></status>
</kw>
<status endtime="20171030 15:24:46.372" status="PASS" starttime="20171030 15:24:46.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:24:46.373" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:24:46.373" status="PASS" starttime="20171030 15:24:46.373"></status>
</kw>
<msg timestamp="20171030 15:24:46.373" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:46.373" status="PASS" starttime="20171030 15:24:43.883"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:46.374" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:46.374" status="PASS" starttime="20171030 15:24:46.373"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:24:46.374" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:24:46.374" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:24:46.374" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:24:46.374" status="PASS" starttime="20171030 15:24:46.374"></status>
</kw>
<msg timestamp="20171030 15:24:46.375" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:24:46.375" status="PASS" starttime="20171030 15:24:43.882"></status>
</kw>
<msg timestamp="20171030 15:24:46.375" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:24:46.375" status="PASS" starttime="20171030 15:24:43.882"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:24:46.376" level="FAIL">Off != On</msg>
<status endtime="20171030 15:24:46.376" status="FAIL" starttime="20171030 15:24:46.375"></status>
</kw>
<status endtime="20171030 15:24:46.376" status="FAIL" starttime="20171030 15:24:43.882"></status>
</kw>
<status endtime="20171030 15:24:46.376" status="FAIL" starttime="20171030 15:24:43.881"></status>
</kw>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Is Chassis Off</arg>
<arg>AND</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:24:56.381" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:24:56.382" status="PASS" starttime="20171030 15:24:56.381"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:56.382" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:56.382" status="PASS" starttime="20171030 15:24:56.382"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:24:56.383" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:24:56.383" status="PASS" starttime="20171030 15:24:56.383"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:24:56.384" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:24:56.384" status="PASS" starttime="20171030 15:24:56.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:24:56.602" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:24:56.602" status="PASS" starttime="20171030 15:24:56.384"></status>
</kw>
<msg timestamp="20171030 15:24:56.602" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:24:56.602" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:56.602" status="PASS" starttime="20171030 15:24:56.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:24:56.603" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:56.603" status="PASS" starttime="20171030 15:24:56.603"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:56.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:56.604" status="PASS" starttime="20171030 15:24:56.603"></status>
</kw>
<status endtime="20171030 15:24:56.604" status="PASS" starttime="20171030 15:24:56.380"></status>
</kw>
<status endtime="20171030 15:24:56.604" status="PASS" starttime="20171030 15:24:56.380"></status>
</kw>
<status endtime="20171030 15:24:56.604" status="PASS" starttime="20171030 15:24:56.379"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:56.605" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:24:56.605" status="PASS" starttime="20171030 15:24:56.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:56.607" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:56.607" status="PASS" starttime="20171030 15:24:56.606"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:56.608" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:56.608" status="PASS" starttime="20171030 15:24:56.608"></status>
</kw>
<status endtime="20171030 15:24:56.608" status="PASS" starttime="20171030 15:24:56.607"></status>
</kw>
<status endtime="20171030 15:24:56.608" status="PASS" starttime="20171030 15:24:56.606"></status>
</kw>
<status endtime="20171030 15:24:56.608" status="PASS" starttime="20171030 15:24:56.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:24:56.688" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:24:56.688" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:56.688" status="PASS" starttime="20171030 15:24:56.609"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:56.690" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:56.690" status="PASS" starttime="20171030 15:24:56.690"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:56.691" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:56.691" status="PASS" starttime="20171030 15:24:56.691"></status>
</kw>
<status endtime="20171030 15:24:56.691" status="PASS" starttime="20171030 15:24:56.690"></status>
</kw>
<status endtime="20171030 15:24:56.692" status="PASS" starttime="20171030 15:24:56.689"></status>
</kw>
<status endtime="20171030 15:24:56.692" status="PASS" starttime="20171030 15:24:56.689"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:24:56.692" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:24:56.692" status="PASS" starttime="20171030 15:24:56.692"></status>
</kw>
<msg timestamp="20171030 15:24:56.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:56.692" status="PASS" starttime="20171030 15:24:56.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:56.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:56.693" status="PASS" starttime="20171030 15:24:56.693"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:24:56.694" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:24:56.694" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:24:56.694" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20171030 15:24:56.694" status="PASS" starttime="20171030 15:24:56.693"></status>
</kw>
<msg timestamp="20171030 15:24:56.694" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20171030 15:24:56.694" status="PASS" starttime="20171030 15:24:56.378"></status>
</kw>
<msg timestamp="20171030 15:24:56.696" level="INFO">${power_state} = Off</msg>
<status endtime="20171030 15:24:56.696" status="PASS" starttime="20171030 15:24:56.378"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:24:56.696" status="PASS" starttime="20171030 15:24:56.696"></status>
</kw>
<status endtime="20171030 15:24:56.696" status="PASS" starttime="20171030 15:24:56.377"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:24:56.704" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:24:56.704" status="PASS" starttime="20171030 15:24:56.703"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:56.705" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:56.705" status="PASS" starttime="20171030 15:24:56.705"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:24:56.706" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:24:56.706" status="PASS" starttime="20171030 15:24:56.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:24:56.707" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:24:56.707" status="PASS" starttime="20171030 15:24:56.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:24:56.916" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:24:56.916" status="PASS" starttime="20171030 15:24:56.708"></status>
</kw>
<msg timestamp="20171030 15:24:56.916" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:24:56.916" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:56.916" status="PASS" starttime="20171030 15:24:56.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:24:56.917" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:56.917" status="PASS" starttime="20171030 15:24:56.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:56.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:56.918" status="PASS" starttime="20171030 15:24:56.917"></status>
</kw>
<status endtime="20171030 15:24:56.918" status="PASS" starttime="20171030 15:24:56.702"></status>
</kw>
<status endtime="20171030 15:24:56.918" status="PASS" starttime="20171030 15:24:56.702"></status>
</kw>
<status endtime="20171030 15:24:56.918" status="PASS" starttime="20171030 15:24:56.701"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:56.919" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:24:56.919" status="PASS" starttime="20171030 15:24:56.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:56.922" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:56.922" status="PASS" starttime="20171030 15:24:56.921"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:56.923" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:56.923" status="PASS" starttime="20171030 15:24:56.923"></status>
</kw>
<status endtime="20171030 15:24:56.923" status="PASS" starttime="20171030 15:24:56.922"></status>
</kw>
<status endtime="20171030 15:24:56.923" status="PASS" starttime="20171030 15:24:56.920"></status>
</kw>
<status endtime="20171030 15:24:56.924" status="PASS" starttime="20171030 15:24:56.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:24:56.988" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:24:56.988" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:56.988" status="PASS" starttime="20171030 15:24:56.924"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:56.990" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:56.990" status="PASS" starttime="20171030 15:24:56.989"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:56.995" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:56.996" status="PASS" starttime="20171030 15:24:56.995"></status>
</kw>
<status endtime="20171030 15:24:56.996" status="PASS" starttime="20171030 15:24:56.990"></status>
</kw>
<status endtime="20171030 15:24:56.996" status="PASS" starttime="20171030 15:24:56.989"></status>
</kw>
<status endtime="20171030 15:24:56.996" status="PASS" starttime="20171030 15:24:56.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:24:56.996" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:24:56.996" status="PASS" starttime="20171030 15:24:56.996"></status>
</kw>
<msg timestamp="20171030 15:24:56.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:56.997" status="PASS" starttime="20171030 15:24:56.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:56.997" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:56.998" status="PASS" starttime="20171030 15:24:56.997"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:24:56.999" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:24:56.999" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:24:56.999" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20171030 15:24:57.000" status="PASS" starttime="20171030 15:24:56.998"></status>
</kw>
<msg timestamp="20171030 15:24:57.000" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20171030 15:24:57.000" status="PASS" starttime="20171030 15:24:56.698"></status>
</kw>
<msg timestamp="20171030 15:24:57.000" level="INFO">${power_state} = Off</msg>
<status endtime="20171030 15:24:57.000" status="PASS" starttime="20171030 15:24:56.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:24:57.001" status="PASS" starttime="20171030 15:24:57.001"></status>
</kw>
<status endtime="20171030 15:24:57.001" status="PASS" starttime="20171030 15:24:56.697"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:24:57.006" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:24:57.007" status="PASS" starttime="20171030 15:24:57.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:57.008" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:57.008" status="PASS" starttime="20171030 15:24:57.007"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:24:57.010" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:24:57.010" status="PASS" starttime="20171030 15:24:57.008"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:24:57.011" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:24:57.011" status="PASS" starttime="20171030 15:24:57.011"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:24:57.246" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:24:57.246" status="PASS" starttime="20171030 15:24:57.012"></status>
</kw>
<msg timestamp="20171030 15:24:57.246" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:24:57.246" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:57.246" status="PASS" starttime="20171030 15:24:57.012"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:24:57.247" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:57.247" status="PASS" starttime="20171030 15:24:57.247"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:57.248" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:57.248" status="PASS" starttime="20171030 15:24:57.247"></status>
</kw>
<status endtime="20171030 15:24:57.248" status="PASS" starttime="20171030 15:24:57.006"></status>
</kw>
<status endtime="20171030 15:24:57.248" status="PASS" starttime="20171030 15:24:57.005"></status>
</kw>
<status endtime="20171030 15:24:57.248" status="PASS" starttime="20171030 15:24:57.003"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:57.249" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:24:57.249" status="PASS" starttime="20171030 15:24:57.248"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:57.251" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:57.251" status="PASS" starttime="20171030 15:24:57.250"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:57.252" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:57.252" status="PASS" starttime="20171030 15:24:57.252"></status>
</kw>
<status endtime="20171030 15:24:57.252" status="PASS" starttime="20171030 15:24:57.251"></status>
</kw>
<status endtime="20171030 15:24:57.253" status="PASS" starttime="20171030 15:24:57.249"></status>
</kw>
<status endtime="20171030 15:24:57.253" status="PASS" starttime="20171030 15:24:57.249"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:24:57.342" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:24:57.342" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:57.342" status="PASS" starttime="20171030 15:24:57.253"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:57.344" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:57.344" status="PASS" starttime="20171030 15:24:57.343"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:57.345" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:57.345" status="PASS" starttime="20171030 15:24:57.345"></status>
</kw>
<status endtime="20171030 15:24:57.345" status="PASS" starttime="20171030 15:24:57.344"></status>
</kw>
<status endtime="20171030 15:24:57.345" status="PASS" starttime="20171030 15:24:57.343"></status>
</kw>
<status endtime="20171030 15:24:57.345" status="PASS" starttime="20171030 15:24:57.342"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:24:57.346" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:24:57.346" status="PASS" starttime="20171030 15:24:57.346"></status>
</kw>
<msg timestamp="20171030 15:24:57.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:57.346" status="PASS" starttime="20171030 15:24:57.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:57.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:57.347" status="PASS" starttime="20171030 15:24:57.346"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:24:57.347" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:24:57.347" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:24:57.347" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20171030 15:24:57.347" status="PASS" starttime="20171030 15:24:57.347"></status>
</kw>
<msg timestamp="20171030 15:24:57.348" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20171030 15:24:57.348" status="PASS" starttime="20171030 15:24:57.002"></status>
</kw>
<msg timestamp="20171030 15:24:57.348" level="INFO">${host_state} = Off</msg>
<status endtime="20171030 15:24:57.348" status="PASS" starttime="20171030 15:24:57.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:24:57.349" status="PASS" starttime="20171030 15:24:57.348"></status>
</kw>
<status endtime="20171030 15:24:57.349" status="PASS" starttime="20171030 15:24:56.697"></status>
</kw>
<status endtime="20171030 15:24:57.349" status="PASS" starttime="20171030 15:24:56.377"></status>
</kw>
<status endtime="20171030 15:24:57.349" status="PASS" starttime="20171030 15:24:43.881"></status>
</kw>
<status endtime="20171030 15:24:57.349" status="PASS" starttime="20171030 15:24:42.987"></status>
</kw>
<status endtime="20171030 15:24:57.349" status="PASS" starttime="20171030 15:24:42.986"></status>
</kw>
<status endtime="20171030 15:24:57.349" status="PASS" starttime="20171030 15:18:28.184"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171030 15:24:57.350" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20171030 15:24:57.350" status="PASS" starttime="20171030 15:24:57.350"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:57.352" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20171030 15:24:57.352" status="PASS" starttime="20171030 15:24:57.351"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:24:57.355" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:24:57.355" status="PASS" starttime="20171030 15:24:57.354"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:57.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:57.356" status="PASS" starttime="20171030 15:24:57.355"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:24:57.356" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:24:57.356" status="PASS" starttime="20171030 15:24:57.356"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:24:57.357" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:24:57.357" status="PASS" starttime="20171030 15:24:57.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:24:57.567" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:24:57.567" status="PASS" starttime="20171030 15:24:57.358"></status>
</kw>
<msg timestamp="20171030 15:24:57.567" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:24:57.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:57.567" status="PASS" starttime="20171030 15:24:57.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:24:57.568" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:57.568" status="PASS" starttime="20171030 15:24:57.567"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:57.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:57.568" status="PASS" starttime="20171030 15:24:57.568"></status>
</kw>
<status endtime="20171030 15:24:57.569" status="PASS" starttime="20171030 15:24:57.354"></status>
</kw>
<status endtime="20171030 15:24:57.569" status="PASS" starttime="20171030 15:24:57.353"></status>
</kw>
<status endtime="20171030 15:24:57.569" status="PASS" starttime="20171030 15:24:57.353"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:57.569" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20171030 15:24:57.569" status="PASS" starttime="20171030 15:24:57.569"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:57.570" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:57.570" status="PASS" starttime="20171030 15:24:57.570"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20171030 15:24:57.571" status="PASS" starttime="20171030 15:24:57.570"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:57.573" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20171030 15:24:57.573" status="PASS" starttime="20171030 15:24:57.572"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:57.574" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20171030 15:24:57.574" status="PASS" starttime="20171030 15:24:57.574"></status>
</kw>
<status endtime="20171030 15:24:57.574" status="PASS" starttime="20171030 15:24:57.573"></status>
</kw>
<status endtime="20171030 15:24:57.574" status="PASS" starttime="20171030 15:24:57.571"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:24:57.892" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171030 15:24:57.892" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:57.892" status="PASS" starttime="20171030 15:24:57.574"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:57.893" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:57.893" status="PASS" starttime="20171030 15:24:57.893"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:57.894" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:24:57.894" status="PASS" starttime="20171030 15:24:57.894"></status>
</kw>
<status endtime="20171030 15:24:57.894" status="PASS" starttime="20171030 15:24:57.893"></status>
</kw>
<status endtime="20171030 15:24:57.895" status="PASS" starttime="20171030 15:24:57.892"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:24:57.895" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:24:57.895" status="PASS" starttime="20171030 15:24:57.895"></status>
</kw>
<msg timestamp="20171030 15:24:57.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:57.896" status="PASS" starttime="20171030 15:24:57.352"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:57.896" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:57.896" status="PASS" starttime="20171030 15:24:57.896"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171030 15:24:57.897" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20171030 15:24:57.897" status="PASS" starttime="20171030 15:24:57.897"></status>
</kw>
<status endtime="20171030 15:24:57.897" status="PASS" starttime="20171030 15:24:57.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20171030 15:24:57.898" status="PASS" starttime="20171030 15:24:57.897"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:24:57.902" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:24:57.903" status="PASS" starttime="20171030 15:24:57.902"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:24:57.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:24:57.904" status="PASS" starttime="20171030 15:24:57.903"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:24:57.904" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:24:57.904" status="PASS" starttime="20171030 15:24:57.904"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:24:57.905" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:24:57.905" status="PASS" starttime="20171030 15:24:57.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:24:58.940" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:24:58.940" status="PASS" starttime="20171030 15:24:57.906"></status>
</kw>
<msg timestamp="20171030 15:24:58.941" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:24:58.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:24:58.941" status="PASS" starttime="20171030 15:24:57.905"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:24:58.941" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:58.941" status="PASS" starttime="20171030 15:24:58.941"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:24:58.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:24:58.942" status="PASS" starttime="20171030 15:24:58.942"></status>
</kw>
<status endtime="20171030 15:24:58.942" status="PASS" starttime="20171030 15:24:57.902"></status>
</kw>
<status endtime="20171030 15:24:58.942" status="PASS" starttime="20171030 15:24:57.901"></status>
</kw>
<status endtime="20171030 15:24:58.943" status="PASS" starttime="20171030 15:24:57.901"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:24:58.943" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:24:58.943" status="PASS" starttime="20171030 15:24:58.943"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:24:58.946" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:58.946" status="PASS" starttime="20171030 15:24:58.945"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:24:58.947" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:24:58.947" status="PASS" starttime="20171030 15:24:58.947"></status>
</kw>
<status endtime="20171030 15:24:58.947" status="PASS" starttime="20171030 15:24:58.946"></status>
</kw>
<status endtime="20171030 15:24:58.947" status="PASS" starttime="20171030 15:24:58.944"></status>
</kw>
<status endtime="20171030 15:24:58.947" status="PASS" starttime="20171030 15:24:58.943"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:25:01.254" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:25:01.254" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:01.255" status="PASS" starttime="20171030 15:24:58.947"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:01.257" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:01.257" status="PASS" starttime="20171030 15:25:01.256"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:01.257" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:01.258" status="PASS" starttime="20171030 15:25:01.257"></status>
</kw>
<status endtime="20171030 15:25:01.258" status="PASS" starttime="20171030 15:25:01.257"></status>
</kw>
<status endtime="20171030 15:25:01.258" status="PASS" starttime="20171030 15:25:01.255"></status>
</kw>
<status endtime="20171030 15:25:01.258" status="PASS" starttime="20171030 15:25:01.255"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:25:01.258" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:25:01.258" status="PASS" starttime="20171030 15:25:01.258"></status>
</kw>
<msg timestamp="20171030 15:25:01.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:01.259" status="PASS" starttime="20171030 15:24:57.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:01.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:01.259" status="PASS" starttime="20171030 15:25:01.259"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:25:01.260" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:25:01.260" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:25:01.260" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20171030 15:25:01.260" status="PASS" starttime="20171030 15:25:01.260"></status>
</kw>
<msg timestamp="20171030 15:25:01.260" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20171030 15:25:01.260" status="PASS" starttime="20171030 15:24:57.899"></status>
</kw>
<msg timestamp="20171030 15:25:01.261" level="INFO">${power_state} = Off</msg>
<status endtime="20171030 15:25:01.261" status="PASS" starttime="20171030 15:24:57.899"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:25:01.261" level="FAIL">On != Off</msg>
<status endtime="20171030 15:25:01.261" status="FAIL" starttime="20171030 15:25:01.261"></status>
</kw>
<status endtime="20171030 15:25:01.262" status="FAIL" starttime="20171030 15:24:57.899"></status>
</kw>
<status endtime="20171030 15:25:01.262" status="FAIL" starttime="20171030 15:24:57.898"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:25:11.267" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:25:11.268" status="PASS" starttime="20171030 15:25:11.267"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:25:11.268" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:25:11.268" status="PASS" starttime="20171030 15:25:11.268"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:25:11.269" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:25:11.269" status="PASS" starttime="20171030 15:25:11.269"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:25:11.270" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:25:11.270" status="PASS" starttime="20171030 15:25:11.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:25:12.514" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:25:12.514" status="PASS" starttime="20171030 15:25:11.270"></status>
</kw>
<msg timestamp="20171030 15:25:12.514" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:25:12.514" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:12.514" status="PASS" starttime="20171030 15:25:11.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:25:12.515" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:12.515" status="PASS" starttime="20171030 15:25:12.514"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:12.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:12.516" status="PASS" starttime="20171030 15:25:12.515"></status>
</kw>
<status endtime="20171030 15:25:12.516" status="PASS" starttime="20171030 15:25:11.267"></status>
</kw>
<status endtime="20171030 15:25:12.516" status="PASS" starttime="20171030 15:25:11.266"></status>
</kw>
<status endtime="20171030 15:25:12.516" status="PASS" starttime="20171030 15:25:11.265"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:25:12.516" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:25:12.517" status="PASS" starttime="20171030 15:25:12.516"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:12.519" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:12.519" status="PASS" starttime="20171030 15:25:12.518"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:12.520" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:12.520" status="PASS" starttime="20171030 15:25:12.519"></status>
</kw>
<status endtime="20171030 15:25:12.520" status="PASS" starttime="20171030 15:25:12.519"></status>
</kw>
<status endtime="20171030 15:25:12.520" status="PASS" starttime="20171030 15:25:12.517"></status>
</kw>
<status endtime="20171030 15:25:12.520" status="PASS" starttime="20171030 15:25:12.517"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:25:14.152" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:25:14.152" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:14.152" status="PASS" starttime="20171030 15:25:12.520"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:14.154" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:14.154" status="PASS" starttime="20171030 15:25:14.154"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:14.155" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:14.155" status="PASS" starttime="20171030 15:25:14.155"></status>
</kw>
<status endtime="20171030 15:25:14.155" status="PASS" starttime="20171030 15:25:14.154"></status>
</kw>
<status endtime="20171030 15:25:14.156" status="PASS" starttime="20171030 15:25:14.153"></status>
</kw>
<status endtime="20171030 15:25:14.156" status="PASS" starttime="20171030 15:25:14.153"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:25:14.156" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:25:14.156" status="PASS" starttime="20171030 15:25:14.156"></status>
</kw>
<msg timestamp="20171030 15:25:14.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:14.156" status="PASS" starttime="20171030 15:25:11.265"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:14.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:14.157" status="PASS" starttime="20171030 15:25:14.157"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:25:14.158" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:25:14.158" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:25:14.158" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20171030 15:25:14.158" status="PASS" starttime="20171030 15:25:14.157"></status>
</kw>
<msg timestamp="20171030 15:25:14.158" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20171030 15:25:14.158" status="PASS" starttime="20171030 15:25:11.264"></status>
</kw>
<msg timestamp="20171030 15:25:14.158" level="INFO">${power_state} = Off</msg>
<status endtime="20171030 15:25:14.159" status="PASS" starttime="20171030 15:25:11.263"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20171030 15:25:14.159" level="FAIL">On != Off</msg>
<status endtime="20171030 15:25:14.159" status="FAIL" starttime="20171030 15:25:14.159"></status>
</kw>
<status endtime="20171030 15:25:14.159" status="FAIL" starttime="20171030 15:25:11.263"></status>
</kw>
<status endtime="20171030 15:25:14.160" status="FAIL" starttime="20171030 15:25:11.262"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:25:24.165" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:25:24.165" status="PASS" starttime="20171030 15:25:24.164"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:25:24.166" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:25:24.166" status="PASS" starttime="20171030 15:25:24.165"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:25:24.166" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:25:24.166" status="PASS" starttime="20171030 15:25:24.166"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:25:24.167" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:25:24.167" status="PASS" starttime="20171030 15:25:24.167"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:25:24.424" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:25:24.424" status="PASS" starttime="20171030 15:25:24.168"></status>
</kw>
<msg timestamp="20171030 15:25:24.425" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:25:24.425" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:24.425" status="PASS" starttime="20171030 15:25:24.167"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:25:24.425" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:24.425" status="PASS" starttime="20171030 15:25:24.425"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:24.426" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:24.426" status="PASS" starttime="20171030 15:25:24.426"></status>
</kw>
<status endtime="20171030 15:25:24.426" status="PASS" starttime="20171030 15:25:24.164"></status>
</kw>
<status endtime="20171030 15:25:24.426" status="PASS" starttime="20171030 15:25:24.163"></status>
</kw>
<status endtime="20171030 15:25:24.427" status="PASS" starttime="20171030 15:25:24.163"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:25:24.427" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:25:24.427" status="PASS" starttime="20171030 15:25:24.427"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:24.429" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:24.429" status="PASS" starttime="20171030 15:25:24.429"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:24.430" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:24.430" status="PASS" starttime="20171030 15:25:24.430"></status>
</kw>
<status endtime="20171030 15:25:24.430" status="PASS" starttime="20171030 15:25:24.430"></status>
</kw>
<status endtime="20171030 15:25:24.431" status="PASS" starttime="20171030 15:25:24.428"></status>
</kw>
<status endtime="20171030 15:25:24.431" status="PASS" starttime="20171030 15:25:24.428"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:25:24.495" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:25:24.495" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:24.495" status="PASS" starttime="20171030 15:25:24.431"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:24.497" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:24.497" status="PASS" starttime="20171030 15:25:24.497"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:24.498" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:24.498" status="PASS" starttime="20171030 15:25:24.498"></status>
</kw>
<status endtime="20171030 15:25:24.499" status="PASS" starttime="20171030 15:25:24.498"></status>
</kw>
<status endtime="20171030 15:25:24.499" status="PASS" starttime="20171030 15:25:24.496"></status>
</kw>
<status endtime="20171030 15:25:24.499" status="PASS" starttime="20171030 15:25:24.496"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:25:24.499" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:25:24.499" status="PASS" starttime="20171030 15:25:24.499"></status>
</kw>
<msg timestamp="20171030 15:25:24.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:24.499" status="PASS" starttime="20171030 15:25:24.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:24.500" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:24.500" status="PASS" starttime="20171030 15:25:24.500"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:25:24.501" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:25:24.501" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:25:24.501" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:25:24.501" status="PASS" starttime="20171030 15:25:24.500"></status>
</kw>
<msg timestamp="20171030 15:25:24.501" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:25:24.501" status="PASS" starttime="20171030 15:25:24.161"></status>
</kw>
<msg timestamp="20171030 15:25:24.502" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:25:24.502" status="PASS" starttime="20171030 15:25:24.161"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:25:24.502" status="PASS" starttime="20171030 15:25:24.502"></status>
</kw>
<status endtime="20171030 15:25:24.502" status="PASS" starttime="20171030 15:25:24.161"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:25:24.506" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:25:24.507" status="PASS" starttime="20171030 15:25:24.505"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:25:24.507" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:25:24.507" status="PASS" starttime="20171030 15:25:24.507"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:25:24.508" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:25:24.508" status="PASS" starttime="20171030 15:25:24.508"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:25:24.509" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:25:24.509" status="PASS" starttime="20171030 15:25:24.508"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:25:24.708" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:25:24.708" status="PASS" starttime="20171030 15:25:24.509"></status>
</kw>
<msg timestamp="20171030 15:25:24.708" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:25:24.708" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:24.708" status="PASS" starttime="20171030 15:25:24.509"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:25:24.709" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:24.709" status="PASS" starttime="20171030 15:25:24.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:24.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:24.710" status="PASS" starttime="20171030 15:25:24.709"></status>
</kw>
<status endtime="20171030 15:25:24.710" status="PASS" starttime="20171030 15:25:24.505"></status>
</kw>
<status endtime="20171030 15:25:24.710" status="PASS" starttime="20171030 15:25:24.505"></status>
</kw>
<status endtime="20171030 15:25:24.710" status="PASS" starttime="20171030 15:25:24.504"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:25:24.711" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:25:24.711" status="PASS" starttime="20171030 15:25:24.710"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:24.713" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:24.713" status="PASS" starttime="20171030 15:25:24.712"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:24.714" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:24.714" status="PASS" starttime="20171030 15:25:24.713"></status>
</kw>
<status endtime="20171030 15:25:24.714" status="PASS" starttime="20171030 15:25:24.713"></status>
</kw>
<status endtime="20171030 15:25:24.714" status="PASS" starttime="20171030 15:25:24.711"></status>
</kw>
<status endtime="20171030 15:25:24.714" status="PASS" starttime="20171030 15:25:24.711"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:25:24.819" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:25:24.819" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:24.819" status="PASS" starttime="20171030 15:25:24.714"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:24.821" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:24.821" status="PASS" starttime="20171030 15:25:24.820"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:24.822" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:24.822" status="PASS" starttime="20171030 15:25:24.822"></status>
</kw>
<status endtime="20171030 15:25:24.822" status="PASS" starttime="20171030 15:25:24.821"></status>
</kw>
<status endtime="20171030 15:25:24.822" status="PASS" starttime="20171030 15:25:24.820"></status>
</kw>
<status endtime="20171030 15:25:24.822" status="PASS" starttime="20171030 15:25:24.819"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:25:24.823" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:25:24.823" status="PASS" starttime="20171030 15:25:24.823"></status>
</kw>
<msg timestamp="20171030 15:25:24.823" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:24.823" status="PASS" starttime="20171030 15:25:24.503"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:24.824" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:24.824" status="PASS" starttime="20171030 15:25:24.823"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:25:24.824" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:25:24.824" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:25:24.824" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:25:24.824" status="PASS" starttime="20171030 15:25:24.824"></status>
</kw>
<msg timestamp="20171030 15:25:24.825" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:25:24.825" status="PASS" starttime="20171030 15:25:24.503"></status>
</kw>
<msg timestamp="20171030 15:25:24.825" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:25:24.825" status="PASS" starttime="20171030 15:25:24.502"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:25:24.826" status="PASS" starttime="20171030 15:25:24.825"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:25:24.830" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:25:24.830" status="PASS" starttime="20171030 15:25:24.830"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:25:24.831" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:25:24.831" status="PASS" starttime="20171030 15:25:24.831"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:25:24.832" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:25:24.832" status="PASS" starttime="20171030 15:25:24.831"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:25:24.832" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:25:24.832" status="PASS" starttime="20171030 15:25:24.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:25:25.028" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:25:25.029" status="PASS" starttime="20171030 15:25:24.833"></status>
</kw>
<msg timestamp="20171030 15:25:25.029" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:25:25.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:25.029" status="PASS" starttime="20171030 15:25:24.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:25:25.029" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:25.030" status="PASS" starttime="20171030 15:25:25.029"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:25.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:25.030" status="PASS" starttime="20171030 15:25:25.030"></status>
</kw>
<status endtime="20171030 15:25:25.030" status="PASS" starttime="20171030 15:25:24.829"></status>
</kw>
<status endtime="20171030 15:25:25.030" status="PASS" starttime="20171030 15:25:24.829"></status>
</kw>
<status endtime="20171030 15:25:25.031" status="PASS" starttime="20171030 15:25:24.828"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:25:25.031" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:25:25.031" status="PASS" starttime="20171030 15:25:25.031"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:25.033" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:25:25.033" status="PASS" starttime="20171030 15:25:25.033"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:25.034" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:25:25.034" status="PASS" starttime="20171030 15:25:25.034"></status>
</kw>
<status endtime="20171030 15:25:25.034" status="PASS" starttime="20171030 15:25:25.033"></status>
</kw>
<status endtime="20171030 15:25:25.035" status="PASS" starttime="20171030 15:25:25.032"></status>
</kw>
<status endtime="20171030 15:25:25.035" status="PASS" starttime="20171030 15:25:25.031"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:25:25.169" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:25:25.169" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:25.169" status="PASS" starttime="20171030 15:25:25.035"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:25.171" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:25.171" status="PASS" starttime="20171030 15:25:25.171"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:25.172" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:25.172" status="PASS" starttime="20171030 15:25:25.172"></status>
</kw>
<status endtime="20171030 15:25:25.173" status="PASS" starttime="20171030 15:25:25.172"></status>
</kw>
<status endtime="20171030 15:25:25.173" status="PASS" starttime="20171030 15:25:25.170"></status>
</kw>
<status endtime="20171030 15:25:25.173" status="PASS" starttime="20171030 15:25:25.170"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:25:25.173" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:25:25.173" status="PASS" starttime="20171030 15:25:25.173"></status>
</kw>
<msg timestamp="20171030 15:25:25.173" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:25.174" status="PASS" starttime="20171030 15:25:24.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:25.174" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:25.174" status="PASS" starttime="20171030 15:25:25.174"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:25:25.175" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:25:25.175" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:25:25.175" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20171030 15:25:25.175" status="PASS" starttime="20171030 15:25:25.174"></status>
</kw>
<msg timestamp="20171030 15:25:25.175" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20171030 15:25:25.175" status="PASS" starttime="20171030 15:25:24.827"></status>
</kw>
<msg timestamp="20171030 15:25:25.175" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20171030 15:25:25.175" status="PASS" starttime="20171030 15:25:24.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:25:25.176" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:25:25.176" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20171030 15:25:25.176" status="FAIL" starttime="20171030 15:25:25.176"></status>
</kw>
<status endtime="20171030 15:25:25.177" status="FAIL" starttime="20171030 15:25:24.826"></status>
</kw>
<status endtime="20171030 15:25:25.177" status="FAIL" starttime="20171030 15:25:24.160"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:25:35.185" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:25:35.186" status="PASS" starttime="20171030 15:25:35.184"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:25:35.186" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:25:35.187" status="PASS" starttime="20171030 15:25:35.186"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:25:35.187" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:25:35.187" status="PASS" starttime="20171030 15:25:35.187"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:25:35.188" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:25:35.188" status="PASS" starttime="20171030 15:25:35.187"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:25:35.945" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:25:35.945" status="PASS" starttime="20171030 15:25:35.189"></status>
</kw>
<msg timestamp="20171030 15:25:35.945" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:25:35.945" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:35.946" status="PASS" starttime="20171030 15:25:35.189"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:25:35.946" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:35.946" status="PASS" starttime="20171030 15:25:35.946"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:35.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:35.947" status="PASS" starttime="20171030 15:25:35.947"></status>
</kw>
<status endtime="20171030 15:25:35.947" status="PASS" starttime="20171030 15:25:35.184"></status>
</kw>
<status endtime="20171030 15:25:35.947" status="PASS" starttime="20171030 15:25:35.183"></status>
</kw>
<status endtime="20171030 15:25:35.947" status="PASS" starttime="20171030 15:25:35.183"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:25:35.948" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:25:35.948" status="PASS" starttime="20171030 15:25:35.948"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:35.950" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:35.950" status="PASS" starttime="20171030 15:25:35.950"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:35.951" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:35.951" status="PASS" starttime="20171030 15:25:35.951"></status>
</kw>
<status endtime="20171030 15:25:35.951" status="PASS" starttime="20171030 15:25:35.950"></status>
</kw>
<status endtime="20171030 15:25:35.952" status="PASS" starttime="20171030 15:25:35.949"></status>
</kw>
<status endtime="20171030 15:25:35.952" status="PASS" starttime="20171030 15:25:35.948"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:25:36.075" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:25:36.075" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:36.075" status="PASS" starttime="20171030 15:25:35.952"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:36.077" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:36.077" status="PASS" starttime="20171030 15:25:36.076"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:36.078" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:36.078" status="PASS" starttime="20171030 15:25:36.078"></status>
</kw>
<status endtime="20171030 15:25:36.078" status="PASS" starttime="20171030 15:25:36.077"></status>
</kw>
<status endtime="20171030 15:25:36.078" status="PASS" starttime="20171030 15:25:36.076"></status>
</kw>
<status endtime="20171030 15:25:36.078" status="PASS" starttime="20171030 15:25:36.075"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:25:36.079" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:25:36.079" status="PASS" starttime="20171030 15:25:36.079"></status>
</kw>
<msg timestamp="20171030 15:25:36.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:36.079" status="PASS" starttime="20171030 15:25:35.182"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:36.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:36.080" status="PASS" starttime="20171030 15:25:36.079"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:25:36.080" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:25:36.080" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:25:36.080" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:25:36.080" status="PASS" starttime="20171030 15:25:36.080"></status>
</kw>
<msg timestamp="20171030 15:25:36.081" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:25:36.081" status="PASS" starttime="20171030 15:25:35.180"></status>
</kw>
<msg timestamp="20171030 15:25:36.081" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:25:36.081" status="PASS" starttime="20171030 15:25:35.180"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:25:36.082" status="PASS" starttime="20171030 15:25:36.081"></status>
</kw>
<status endtime="20171030 15:25:36.082" status="PASS" starttime="20171030 15:25:35.179"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:25:36.085" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:25:36.086" status="PASS" starttime="20171030 15:25:36.085"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:25:36.087" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:25:36.087" status="PASS" starttime="20171030 15:25:36.086"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:25:36.087" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:25:36.087" status="PASS" starttime="20171030 15:25:36.087"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:25:36.088" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:25:36.088" status="PASS" starttime="20171030 15:25:36.088"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:25:36.492" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:25:36.492" status="PASS" starttime="20171030 15:25:36.089"></status>
</kw>
<msg timestamp="20171030 15:25:36.492" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:25:36.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:36.492" status="PASS" starttime="20171030 15:25:36.088"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:25:36.493" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:36.493" status="PASS" starttime="20171030 15:25:36.492"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:36.493" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:36.493" status="PASS" starttime="20171030 15:25:36.493"></status>
</kw>
<status endtime="20171030 15:25:36.494" status="PASS" starttime="20171030 15:25:36.084"></status>
</kw>
<status endtime="20171030 15:25:36.494" status="PASS" starttime="20171030 15:25:36.084"></status>
</kw>
<status endtime="20171030 15:25:36.494" status="PASS" starttime="20171030 15:25:36.083"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:25:36.494" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:25:36.494" status="PASS" starttime="20171030 15:25:36.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:36.497" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:36.497" status="PASS" starttime="20171030 15:25:36.496"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:36.498" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:36.498" status="PASS" starttime="20171030 15:25:36.497"></status>
</kw>
<status endtime="20171030 15:25:36.498" status="PASS" starttime="20171030 15:25:36.497"></status>
</kw>
<status endtime="20171030 15:25:36.498" status="PASS" starttime="20171030 15:25:36.495"></status>
</kw>
<status endtime="20171030 15:25:36.498" status="PASS" starttime="20171030 15:25:36.495"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:25:36.935" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:25:36.935" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:36.935" status="PASS" starttime="20171030 15:25:36.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:36.937" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:36.937" status="PASS" starttime="20171030 15:25:36.937"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:36.938" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:36.938" status="PASS" starttime="20171030 15:25:36.938"></status>
</kw>
<status endtime="20171030 15:25:36.938" status="PASS" starttime="20171030 15:25:36.937"></status>
</kw>
<status endtime="20171030 15:25:36.939" status="PASS" starttime="20171030 15:25:36.936"></status>
</kw>
<status endtime="20171030 15:25:36.939" status="PASS" starttime="20171030 15:25:36.936"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:25:36.939" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:25:36.939" status="PASS" starttime="20171030 15:25:36.939"></status>
</kw>
<msg timestamp="20171030 15:25:36.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:36.939" status="PASS" starttime="20171030 15:25:36.083"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:36.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:36.940" status="PASS" starttime="20171030 15:25:36.940"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:25:36.941" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:25:36.941" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:25:36.941" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:25:36.942" status="PASS" starttime="20171030 15:25:36.941"></status>
</kw>
<msg timestamp="20171030 15:25:36.943" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:25:36.943" status="PASS" starttime="20171030 15:25:36.082"></status>
</kw>
<msg timestamp="20171030 15:25:36.943" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:25:36.943" status="PASS" starttime="20171030 15:25:36.082"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:25:36.944" status="PASS" starttime="20171030 15:25:36.943"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:25:36.954" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:25:36.955" status="PASS" starttime="20171030 15:25:36.954"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:25:36.955" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:25:36.955" status="PASS" starttime="20171030 15:25:36.955"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:25:36.956" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:25:36.956" status="PASS" starttime="20171030 15:25:36.955"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:25:36.957" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:25:36.957" status="PASS" starttime="20171030 15:25:36.957"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:25:37.240" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:25:37.240" status="PASS" starttime="20171030 15:25:36.958"></status>
</kw>
<msg timestamp="20171030 15:25:37.240" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:25:37.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:37.240" status="PASS" starttime="20171030 15:25:36.957"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:25:37.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:37.243" status="PASS" starttime="20171030 15:25:37.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:37.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:37.244" status="PASS" starttime="20171030 15:25:37.244"></status>
</kw>
<status endtime="20171030 15:25:37.244" status="PASS" starttime="20171030 15:25:36.953"></status>
</kw>
<status endtime="20171030 15:25:37.244" status="PASS" starttime="20171030 15:25:36.953"></status>
</kw>
<status endtime="20171030 15:25:37.244" status="PASS" starttime="20171030 15:25:36.952"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:25:37.245" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:25:37.245" status="PASS" starttime="20171030 15:25:37.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:37.247" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:25:37.247" status="PASS" starttime="20171030 15:25:37.247"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:37.248" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:25:37.248" status="PASS" starttime="20171030 15:25:37.248"></status>
</kw>
<status endtime="20171030 15:25:37.248" status="PASS" starttime="20171030 15:25:37.247"></status>
</kw>
<status endtime="20171030 15:25:37.249" status="PASS" starttime="20171030 15:25:37.246"></status>
</kw>
<status endtime="20171030 15:25:37.249" status="PASS" starttime="20171030 15:25:37.245"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:25:37.639" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:25:37.639" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:37.639" status="PASS" starttime="20171030 15:25:37.249"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:37.641" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:37.641" status="PASS" starttime="20171030 15:25:37.640"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:37.642" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:37.642" status="PASS" starttime="20171030 15:25:37.642"></status>
</kw>
<status endtime="20171030 15:25:37.642" status="PASS" starttime="20171030 15:25:37.641"></status>
</kw>
<status endtime="20171030 15:25:37.642" status="PASS" starttime="20171030 15:25:37.640"></status>
</kw>
<status endtime="20171030 15:25:37.642" status="PASS" starttime="20171030 15:25:37.639"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:25:37.643" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:25:37.643" status="PASS" starttime="20171030 15:25:37.642"></status>
</kw>
<msg timestamp="20171030 15:25:37.643" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:37.643" status="PASS" starttime="20171030 15:25:36.950"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:37.644" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:37.644" status="PASS" starttime="20171030 15:25:37.643"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:25:37.644" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:25:37.644" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:25:37.644" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:25:37.644" status="PASS" starttime="20171030 15:25:37.644"></status>
</kw>
<msg timestamp="20171030 15:25:37.645" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:25:37.645" status="PASS" starttime="20171030 15:25:36.945"></status>
</kw>
<msg timestamp="20171030 15:25:37.645" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:25:37.645" status="PASS" starttime="20171030 15:25:36.944"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:25:37.646" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:25:37.646" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:25:37.646" status="FAIL" starttime="20171030 15:25:37.646"></status>
</kw>
<status endtime="20171030 15:25:37.646" status="FAIL" starttime="20171030 15:25:36.944"></status>
</kw>
<status endtime="20171030 15:25:37.647" status="FAIL" starttime="20171030 15:25:35.179"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:25:47.652" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:25:47.652" status="PASS" starttime="20171030 15:25:47.651"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:25:47.653" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:25:47.653" status="PASS" starttime="20171030 15:25:47.652"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:25:47.653" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:25:47.653" status="PASS" starttime="20171030 15:25:47.653"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:25:47.654" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:25:47.654" status="PASS" starttime="20171030 15:25:47.654"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:25:48.050" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:25:48.051" status="PASS" starttime="20171030 15:25:47.655"></status>
</kw>
<msg timestamp="20171030 15:25:48.051" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:25:48.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:48.051" status="PASS" starttime="20171030 15:25:47.654"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:25:48.052" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:48.052" status="PASS" starttime="20171030 15:25:48.051"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:48.052" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:48.052" status="PASS" starttime="20171030 15:25:48.052"></status>
</kw>
<status endtime="20171030 15:25:48.053" status="PASS" starttime="20171030 15:25:47.651"></status>
</kw>
<status endtime="20171030 15:25:48.053" status="PASS" starttime="20171030 15:25:47.650"></status>
</kw>
<status endtime="20171030 15:25:48.053" status="PASS" starttime="20171030 15:25:47.650"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:25:48.053" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:25:48.053" status="PASS" starttime="20171030 15:25:48.053"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:48.055" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:48.055" status="PASS" starttime="20171030 15:25:48.055"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:48.056" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:48.057" status="PASS" starttime="20171030 15:25:48.056"></status>
</kw>
<status endtime="20171030 15:25:48.057" status="PASS" starttime="20171030 15:25:48.056"></status>
</kw>
<status endtime="20171030 15:25:48.057" status="PASS" starttime="20171030 15:25:48.054"></status>
</kw>
<status endtime="20171030 15:25:48.057" status="PASS" starttime="20171030 15:25:48.054"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:25:48.448" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:25:48.448" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:48.448" status="PASS" starttime="20171030 15:25:48.057"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:48.450" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:48.450" status="PASS" starttime="20171030 15:25:48.449"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:48.451" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:48.451" status="PASS" starttime="20171030 15:25:48.451"></status>
</kw>
<status endtime="20171030 15:25:48.451" status="PASS" starttime="20171030 15:25:48.450"></status>
</kw>
<status endtime="20171030 15:25:48.451" status="PASS" starttime="20171030 15:25:48.449"></status>
</kw>
<status endtime="20171030 15:25:48.451" status="PASS" starttime="20171030 15:25:48.448"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:25:48.452" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:25:48.452" status="PASS" starttime="20171030 15:25:48.452"></status>
</kw>
<msg timestamp="20171030 15:25:48.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:48.452" status="PASS" starttime="20171030 15:25:47.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:48.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:48.453" status="PASS" starttime="20171030 15:25:48.452"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:25:48.453" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:25:48.453" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:25:48.454" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:25:48.454" status="PASS" starttime="20171030 15:25:48.453"></status>
</kw>
<msg timestamp="20171030 15:25:48.454" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:25:48.454" status="PASS" starttime="20171030 15:25:47.648"></status>
</kw>
<msg timestamp="20171030 15:25:48.454" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:25:48.454" status="PASS" starttime="20171030 15:25:47.648"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:25:48.455" status="PASS" starttime="20171030 15:25:48.454"></status>
</kw>
<status endtime="20171030 15:25:48.455" status="PASS" starttime="20171030 15:25:47.648"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:25:48.459" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:25:48.459" status="PASS" starttime="20171030 15:25:48.458"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:25:48.460" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:25:48.460" status="PASS" starttime="20171030 15:25:48.460"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:25:48.461" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:25:48.461" status="PASS" starttime="20171030 15:25:48.460"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:25:48.461" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:25:48.461" status="PASS" starttime="20171030 15:25:48.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:25:49.027" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:25:49.027" status="PASS" starttime="20171030 15:25:48.462"></status>
</kw>
<msg timestamp="20171030 15:25:49.027" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:25:49.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:49.027" status="PASS" starttime="20171030 15:25:48.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:25:49.028" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:49.028" status="PASS" starttime="20171030 15:25:49.028"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:49.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:49.029" status="PASS" starttime="20171030 15:25:49.028"></status>
</kw>
<status endtime="20171030 15:25:49.029" status="PASS" starttime="20171030 15:25:48.458"></status>
</kw>
<status endtime="20171030 15:25:49.029" status="PASS" starttime="20171030 15:25:48.457"></status>
</kw>
<status endtime="20171030 15:25:49.029" status="PASS" starttime="20171030 15:25:48.457"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:25:49.030" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:25:49.030" status="PASS" starttime="20171030 15:25:49.029"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:49.032" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:49.032" status="PASS" starttime="20171030 15:25:49.031"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:49.033" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:25:49.033" status="PASS" starttime="20171030 15:25:49.033"></status>
</kw>
<status endtime="20171030 15:25:49.033" status="PASS" starttime="20171030 15:25:49.032"></status>
</kw>
<status endtime="20171030 15:25:49.033" status="PASS" starttime="20171030 15:25:49.030"></status>
</kw>
<status endtime="20171030 15:25:49.033" status="PASS" starttime="20171030 15:25:49.030"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:25:51.766" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:25:51.766" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:51.766" status="PASS" starttime="20171030 15:25:49.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:51.768" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:51.768" status="PASS" starttime="20171030 15:25:51.768"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:51.769" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:51.769" status="PASS" starttime="20171030 15:25:51.769"></status>
</kw>
<status endtime="20171030 15:25:51.769" status="PASS" starttime="20171030 15:25:51.768"></status>
</kw>
<status endtime="20171030 15:25:51.769" status="PASS" starttime="20171030 15:25:51.767"></status>
</kw>
<status endtime="20171030 15:25:51.770" status="PASS" starttime="20171030 15:25:51.767"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:25:51.770" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:25:51.770" status="PASS" starttime="20171030 15:25:51.770"></status>
</kw>
<msg timestamp="20171030 15:25:51.770" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:51.770" status="PASS" starttime="20171030 15:25:48.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:51.771" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:51.771" status="PASS" starttime="20171030 15:25:51.770"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:25:51.771" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:25:51.772" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:25:51.772" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:25:51.772" status="PASS" starttime="20171030 15:25:51.771"></status>
</kw>
<msg timestamp="20171030 15:25:51.772" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:25:51.772" status="PASS" starttime="20171030 15:25:48.455"></status>
</kw>
<msg timestamp="20171030 15:25:51.772" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:25:51.772" status="PASS" starttime="20171030 15:25:48.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:25:51.773" status="PASS" starttime="20171030 15:25:51.773"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:25:51.777" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:25:51.778" status="PASS" starttime="20171030 15:25:51.777"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:25:51.778" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:25:51.778" status="PASS" starttime="20171030 15:25:51.778"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:25:51.779" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:25:51.779" status="PASS" starttime="20171030 15:25:51.779"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:25:51.780" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:25:51.780" status="PASS" starttime="20171030 15:25:51.779"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:25:52.076" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:25:52.076" status="PASS" starttime="20171030 15:25:51.780"></status>
</kw>
<msg timestamp="20171030 15:25:52.076" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:25:52.076" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:52.076" status="PASS" starttime="20171030 15:25:51.780"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:25:52.077" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:52.077" status="PASS" starttime="20171030 15:25:52.077"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:52.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:52.078" status="PASS" starttime="20171030 15:25:52.077"></status>
</kw>
<status endtime="20171030 15:25:52.078" status="PASS" starttime="20171030 15:25:51.777"></status>
</kw>
<status endtime="20171030 15:25:52.078" status="PASS" starttime="20171030 15:25:51.776"></status>
</kw>
<status endtime="20171030 15:25:52.078" status="PASS" starttime="20171030 15:25:51.775"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:25:52.079" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:25:52.079" status="PASS" starttime="20171030 15:25:52.078"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:52.081" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:25:52.081" status="PASS" starttime="20171030 15:25:52.080"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:52.082" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:25:52.082" status="PASS" starttime="20171030 15:25:52.082"></status>
</kw>
<status endtime="20171030 15:25:52.082" status="PASS" starttime="20171030 15:25:52.081"></status>
</kw>
<status endtime="20171030 15:25:52.082" status="PASS" starttime="20171030 15:25:52.079"></status>
</kw>
<status endtime="20171030 15:25:52.082" status="PASS" starttime="20171030 15:25:52.079"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:25:52.202" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:25:52.202" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:52.202" status="PASS" starttime="20171030 15:25:52.083"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:25:52.204" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:52.204" status="PASS" starttime="20171030 15:25:52.204"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:25:52.205" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:25:52.206" status="PASS" starttime="20171030 15:25:52.205"></status>
</kw>
<status endtime="20171030 15:25:52.206" status="PASS" starttime="20171030 15:25:52.205"></status>
</kw>
<status endtime="20171030 15:25:52.206" status="PASS" starttime="20171030 15:25:52.203"></status>
</kw>
<status endtime="20171030 15:25:52.206" status="PASS" starttime="20171030 15:25:52.203"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:25:52.206" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:25:52.206" status="PASS" starttime="20171030 15:25:52.206"></status>
</kw>
<msg timestamp="20171030 15:25:52.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:25:52.207" status="PASS" starttime="20171030 15:25:51.774"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:25:52.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:25:52.207" status="PASS" starttime="20171030 15:25:52.207"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:25:52.208" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:25:52.208" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:25:52.208" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:25:52.208" status="PASS" starttime="20171030 15:25:52.208"></status>
</kw>
<msg timestamp="20171030 15:25:52.208" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:25:52.208" status="PASS" starttime="20171030 15:25:51.774"></status>
</kw>
<msg timestamp="20171030 15:25:52.209" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:25:52.209" status="PASS" starttime="20171030 15:25:51.773"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:25:52.209" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:25:52.209" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:25:52.209" status="FAIL" starttime="20171030 15:25:52.209"></status>
</kw>
<status endtime="20171030 15:25:52.210" status="FAIL" starttime="20171030 15:25:51.773"></status>
</kw>
<status endtime="20171030 15:25:52.210" status="FAIL" starttime="20171030 15:25:47.647"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:02.215" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:02.215" status="PASS" starttime="20171030 15:26:02.215"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:02.216" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:02.216" status="PASS" starttime="20171030 15:26:02.216"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:02.217" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:02.217" status="PASS" starttime="20171030 15:26:02.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:02.217" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:02.217" status="PASS" starttime="20171030 15:26:02.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:02.416" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:02.416" status="PASS" starttime="20171030 15:26:02.218"></status>
</kw>
<msg timestamp="20171030 15:26:02.416" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:02.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:02.416" status="PASS" starttime="20171030 15:26:02.218"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:02.417" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:02.417" status="PASS" starttime="20171030 15:26:02.417"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:02.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:02.418" status="PASS" starttime="20171030 15:26:02.417"></status>
</kw>
<status endtime="20171030 15:26:02.418" status="PASS" starttime="20171030 15:26:02.214"></status>
</kw>
<status endtime="20171030 15:26:02.418" status="PASS" starttime="20171030 15:26:02.214"></status>
</kw>
<status endtime="20171030 15:26:02.418" status="PASS" starttime="20171030 15:26:02.213"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:02.419" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:26:02.419" status="PASS" starttime="20171030 15:26:02.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:02.421" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:02.421" status="PASS" starttime="20171030 15:26:02.420"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:02.422" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:02.422" status="PASS" starttime="20171030 15:26:02.421"></status>
</kw>
<status endtime="20171030 15:26:02.422" status="PASS" starttime="20171030 15:26:02.421"></status>
</kw>
<status endtime="20171030 15:26:02.422" status="PASS" starttime="20171030 15:26:02.419"></status>
</kw>
<status endtime="20171030 15:26:02.422" status="PASS" starttime="20171030 15:26:02.419"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:02.487" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:26:02.487" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:02.487" status="PASS" starttime="20171030 15:26:02.422"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:02.489" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:02.489" status="PASS" starttime="20171030 15:26:02.488"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:02.490" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:02.490" status="PASS" starttime="20171030 15:26:02.489"></status>
</kw>
<status endtime="20171030 15:26:02.490" status="PASS" starttime="20171030 15:26:02.489"></status>
</kw>
<status endtime="20171030 15:26:02.490" status="PASS" starttime="20171030 15:26:02.488"></status>
</kw>
<status endtime="20171030 15:26:02.490" status="PASS" starttime="20171030 15:26:02.487"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:02.491" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:02.491" status="PASS" starttime="20171030 15:26:02.490"></status>
</kw>
<msg timestamp="20171030 15:26:02.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:02.491" status="PASS" starttime="20171030 15:26:02.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:02.492" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:02.492" status="PASS" starttime="20171030 15:26:02.491"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:02.492" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:02.492" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:02.492" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:26:02.492" status="PASS" starttime="20171030 15:26:02.492"></status>
</kw>
<msg timestamp="20171030 15:26:02.493" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:26:02.493" status="PASS" starttime="20171030 15:26:02.212"></status>
</kw>
<msg timestamp="20171030 15:26:02.493" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:26:02.493" status="PASS" starttime="20171030 15:26:02.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:26:02.494" status="PASS" starttime="20171030 15:26:02.493"></status>
</kw>
<status endtime="20171030 15:26:02.494" status="PASS" starttime="20171030 15:26:02.211"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:02.497" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:02.498" status="PASS" starttime="20171030 15:26:02.497"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:02.499" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:02.499" status="PASS" starttime="20171030 15:26:02.499"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:02.499" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:02.500" status="PASS" starttime="20171030 15:26:02.499"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:02.500" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:02.500" status="PASS" starttime="20171030 15:26:02.500"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:02.724" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:02.724" status="PASS" starttime="20171030 15:26:02.501"></status>
</kw>
<msg timestamp="20171030 15:26:02.724" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:02.724" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:02.724" status="PASS" starttime="20171030 15:26:02.501"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:02.725" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:02.725" status="PASS" starttime="20171030 15:26:02.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:02.725" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:02.725" status="PASS" starttime="20171030 15:26:02.725"></status>
</kw>
<status endtime="20171030 15:26:02.725" status="PASS" starttime="20171030 15:26:02.497"></status>
</kw>
<status endtime="20171030 15:26:02.726" status="PASS" starttime="20171030 15:26:02.496"></status>
</kw>
<status endtime="20171030 15:26:02.726" status="PASS" starttime="20171030 15:26:02.495"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:02.726" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:26:02.726" status="PASS" starttime="20171030 15:26:02.726"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:02.729" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:02.729" status="PASS" starttime="20171030 15:26:02.728"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:02.729" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:02.730" status="PASS" starttime="20171030 15:26:02.729"></status>
</kw>
<status endtime="20171030 15:26:02.730" status="PASS" starttime="20171030 15:26:02.729"></status>
</kw>
<status endtime="20171030 15:26:02.730" status="PASS" starttime="20171030 15:26:02.727"></status>
</kw>
<status endtime="20171030 15:26:02.730" status="PASS" starttime="20171030 15:26:02.727"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:03.004" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:26:03.005" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:03.005" status="PASS" starttime="20171030 15:26:02.730"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:03.007" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:03.007" status="PASS" starttime="20171030 15:26:03.006"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:03.008" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:03.008" status="PASS" starttime="20171030 15:26:03.007"></status>
</kw>
<status endtime="20171030 15:26:03.008" status="PASS" starttime="20171030 15:26:03.007"></status>
</kw>
<status endtime="20171030 15:26:03.008" status="PASS" starttime="20171030 15:26:03.006"></status>
</kw>
<status endtime="20171030 15:26:03.008" status="PASS" starttime="20171030 15:26:03.005"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:03.008" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:03.009" status="PASS" starttime="20171030 15:26:03.008"></status>
</kw>
<msg timestamp="20171030 15:26:03.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:03.009" status="PASS" starttime="20171030 15:26:02.495"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:03.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:03.010" status="PASS" starttime="20171030 15:26:03.009"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:03.010" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:03.010" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:03.010" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:26:03.010" status="PASS" starttime="20171030 15:26:03.010"></status>
</kw>
<msg timestamp="20171030 15:26:03.011" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:26:03.011" status="PASS" starttime="20171030 15:26:02.494"></status>
</kw>
<msg timestamp="20171030 15:26:03.011" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:26:03.011" status="PASS" starttime="20171030 15:26:02.494"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:26:03.011" status="PASS" starttime="20171030 15:26:03.011"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:03.016" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:03.016" status="PASS" starttime="20171030 15:26:03.016"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:03.017" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:03.017" status="PASS" starttime="20171030 15:26:03.016"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:03.017" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:03.018" status="PASS" starttime="20171030 15:26:03.017"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:03.018" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:03.018" status="PASS" starttime="20171030 15:26:03.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:03.270" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:03.270" status="PASS" starttime="20171030 15:26:03.019"></status>
</kw>
<msg timestamp="20171030 15:26:03.270" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:03.270" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:03.270" status="PASS" starttime="20171030 15:26:03.018"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:03.271" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:03.271" status="PASS" starttime="20171030 15:26:03.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:03.271" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:03.272" status="PASS" starttime="20171030 15:26:03.271"></status>
</kw>
<status endtime="20171030 15:26:03.272" status="PASS" starttime="20171030 15:26:03.015"></status>
</kw>
<status endtime="20171030 15:26:03.272" status="PASS" starttime="20171030 15:26:03.014"></status>
</kw>
<status endtime="20171030 15:26:03.272" status="PASS" starttime="20171030 15:26:03.014"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:03.272" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:26:03.273" status="PASS" starttime="20171030 15:26:03.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:03.275" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:26:03.275" status="PASS" starttime="20171030 15:26:03.274"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:03.276" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:26:03.276" status="PASS" starttime="20171030 15:26:03.275"></status>
</kw>
<status endtime="20171030 15:26:03.276" status="PASS" starttime="20171030 15:26:03.275"></status>
</kw>
<status endtime="20171030 15:26:03.276" status="PASS" starttime="20171030 15:26:03.273"></status>
</kw>
<status endtime="20171030 15:26:03.276" status="PASS" starttime="20171030 15:26:03.273"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:03.366" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:26:03.366" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:03.366" status="PASS" starttime="20171030 15:26:03.276"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:03.368" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:03.368" status="PASS" starttime="20171030 15:26:03.368"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:03.369" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:03.369" status="PASS" starttime="20171030 15:26:03.369"></status>
</kw>
<status endtime="20171030 15:26:03.370" status="PASS" starttime="20171030 15:26:03.369"></status>
</kw>
<status endtime="20171030 15:26:03.370" status="PASS" starttime="20171030 15:26:03.367"></status>
</kw>
<status endtime="20171030 15:26:03.370" status="PASS" starttime="20171030 15:26:03.367"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:03.370" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:03.370" status="PASS" starttime="20171030 15:26:03.370"></status>
</kw>
<msg timestamp="20171030 15:26:03.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:03.370" status="PASS" starttime="20171030 15:26:03.013"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:03.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:03.371" status="PASS" starttime="20171030 15:26:03.371"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:03.372" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:03.372" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:03.372" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:26:03.372" status="PASS" starttime="20171030 15:26:03.371"></status>
</kw>
<msg timestamp="20171030 15:26:03.372" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:26:03.372" status="PASS" starttime="20171030 15:26:03.012"></status>
</kw>
<msg timestamp="20171030 15:26:03.372" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:26:03.372" status="PASS" starttime="20171030 15:26:03.012"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:26:03.373" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:26:03.373" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:26:03.373" status="FAIL" starttime="20171030 15:26:03.373"></status>
</kw>
<status endtime="20171030 15:26:03.373" status="FAIL" starttime="20171030 15:26:03.012"></status>
</kw>
<status endtime="20171030 15:26:03.374" status="FAIL" starttime="20171030 15:26:02.210"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:13.379" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:13.379" status="PASS" starttime="20171030 15:26:13.379"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:13.380" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:13.380" status="PASS" starttime="20171030 15:26:13.380"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:13.381" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:13.381" status="PASS" starttime="20171030 15:26:13.380"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:13.381" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:13.381" status="PASS" starttime="20171030 15:26:13.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:13.585" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:13.585" status="PASS" starttime="20171030 15:26:13.382"></status>
</kw>
<msg timestamp="20171030 15:26:13.585" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:13.586" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:13.586" status="PASS" starttime="20171030 15:26:13.382"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:13.586" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:13.587" status="PASS" starttime="20171030 15:26:13.586"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:13.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:13.587" status="PASS" starttime="20171030 15:26:13.587"></status>
</kw>
<status endtime="20171030 15:26:13.587" status="PASS" starttime="20171030 15:26:13.378"></status>
</kw>
<status endtime="20171030 15:26:13.588" status="PASS" starttime="20171030 15:26:13.378"></status>
</kw>
<status endtime="20171030 15:26:13.588" status="PASS" starttime="20171030 15:26:13.376"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:13.588" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:26:13.588" status="PASS" starttime="20171030 15:26:13.588"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:13.590" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:13.590" status="PASS" starttime="20171030 15:26:13.590"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:13.591" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:13.591" status="PASS" starttime="20171030 15:26:13.591"></status>
</kw>
<status endtime="20171030 15:26:13.592" status="PASS" starttime="20171030 15:26:13.591"></status>
</kw>
<status endtime="20171030 15:26:13.592" status="PASS" starttime="20171030 15:26:13.589"></status>
</kw>
<status endtime="20171030 15:26:13.592" status="PASS" starttime="20171030 15:26:13.589"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:13.666" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:26:13.666" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:13.666" status="PASS" starttime="20171030 15:26:13.592"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:13.668" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:13.668" status="PASS" starttime="20171030 15:26:13.667"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:13.669" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:13.669" status="PASS" starttime="20171030 15:26:13.669"></status>
</kw>
<status endtime="20171030 15:26:13.669" status="PASS" starttime="20171030 15:26:13.668"></status>
</kw>
<status endtime="20171030 15:26:13.669" status="PASS" starttime="20171030 15:26:13.667"></status>
</kw>
<status endtime="20171030 15:26:13.669" status="PASS" starttime="20171030 15:26:13.666"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:13.670" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:13.670" status="PASS" starttime="20171030 15:26:13.669"></status>
</kw>
<msg timestamp="20171030 15:26:13.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:13.670" status="PASS" starttime="20171030 15:26:13.376"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:13.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:13.671" status="PASS" starttime="20171030 15:26:13.670"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:13.671" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:13.671" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:13.671" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:26:13.671" status="PASS" starttime="20171030 15:26:13.671"></status>
</kw>
<msg timestamp="20171030 15:26:13.672" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:26:13.672" status="PASS" starttime="20171030 15:26:13.375"></status>
</kw>
<msg timestamp="20171030 15:26:13.672" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:26:13.672" status="PASS" starttime="20171030 15:26:13.375"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:26:13.673" status="PASS" starttime="20171030 15:26:13.672"></status>
</kw>
<status endtime="20171030 15:26:13.673" status="PASS" starttime="20171030 15:26:13.375"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:13.676" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:13.677" status="PASS" starttime="20171030 15:26:13.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:13.678" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:13.678" status="PASS" starttime="20171030 15:26:13.677"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:13.678" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:13.678" status="PASS" starttime="20171030 15:26:13.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:13.679" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:13.679" status="PASS" starttime="20171030 15:26:13.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:13.863" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:13.863" status="PASS" starttime="20171030 15:26:13.680"></status>
</kw>
<msg timestamp="20171030 15:26:13.863" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:13.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:13.863" status="PASS" starttime="20171030 15:26:13.679"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:13.864" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:13.864" status="PASS" starttime="20171030 15:26:13.863"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:13.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:13.865" status="PASS" starttime="20171030 15:26:13.864"></status>
</kw>
<status endtime="20171030 15:26:13.865" status="PASS" starttime="20171030 15:26:13.675"></status>
</kw>
<status endtime="20171030 15:26:13.865" status="PASS" starttime="20171030 15:26:13.675"></status>
</kw>
<status endtime="20171030 15:26:13.865" status="PASS" starttime="20171030 15:26:13.674"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:13.866" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:26:13.866" status="PASS" starttime="20171030 15:26:13.865"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:13.868" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:13.868" status="PASS" starttime="20171030 15:26:13.867"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:13.869" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:13.869" status="PASS" starttime="20171030 15:26:13.868"></status>
</kw>
<status endtime="20171030 15:26:13.869" status="PASS" starttime="20171030 15:26:13.868"></status>
</kw>
<status endtime="20171030 15:26:13.869" status="PASS" starttime="20171030 15:26:13.866"></status>
</kw>
<status endtime="20171030 15:26:13.869" status="PASS" starttime="20171030 15:26:13.866"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:13.986" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:26:13.987" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:13.987" status="PASS" starttime="20171030 15:26:13.869"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:13.989" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:13.989" status="PASS" starttime="20171030 15:26:13.988"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:13.989" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:13.990" status="PASS" starttime="20171030 15:26:13.989"></status>
</kw>
<status endtime="20171030 15:26:13.990" status="PASS" starttime="20171030 15:26:13.989"></status>
</kw>
<status endtime="20171030 15:26:13.990" status="PASS" starttime="20171030 15:26:13.988"></status>
</kw>
<status endtime="20171030 15:26:13.990" status="PASS" starttime="20171030 15:26:13.987"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:13.990" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:13.990" status="PASS" starttime="20171030 15:26:13.990"></status>
</kw>
<msg timestamp="20171030 15:26:13.991" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:13.991" status="PASS" starttime="20171030 15:26:13.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:13.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:13.991" status="PASS" starttime="20171030 15:26:13.991"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:13.992" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:13.992" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:13.992" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:26:13.992" status="PASS" starttime="20171030 15:26:13.992"></status>
</kw>
<msg timestamp="20171030 15:26:13.992" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:26:13.992" status="PASS" starttime="20171030 15:26:13.673"></status>
</kw>
<msg timestamp="20171030 15:26:13.993" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:26:13.993" status="PASS" starttime="20171030 15:26:13.673"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:26:13.993" status="PASS" starttime="20171030 15:26:13.993"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:14.001" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:14.001" status="PASS" starttime="20171030 15:26:14.001"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:14.002" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:14.002" status="PASS" starttime="20171030 15:26:14.002"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:14.003" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:14.003" status="PASS" starttime="20171030 15:26:14.002"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:14.004" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:14.004" status="PASS" starttime="20171030 15:26:14.003"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:14.409" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:14.409" status="PASS" starttime="20171030 15:26:14.004"></status>
</kw>
<msg timestamp="20171030 15:26:14.409" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:14.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:14.409" status="PASS" starttime="20171030 15:26:14.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:14.410" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:14.410" status="PASS" starttime="20171030 15:26:14.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:14.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:14.411" status="PASS" starttime="20171030 15:26:14.410"></status>
</kw>
<status endtime="20171030 15:26:14.411" status="PASS" starttime="20171030 15:26:14.000"></status>
</kw>
<status endtime="20171030 15:26:14.411" status="PASS" starttime="20171030 15:26:14.000"></status>
</kw>
<status endtime="20171030 15:26:14.411" status="PASS" starttime="20171030 15:26:13.999"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:14.412" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:26:14.412" status="PASS" starttime="20171030 15:26:14.412"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:14.414" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:26:14.414" status="PASS" starttime="20171030 15:26:14.413"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:14.415" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:26:14.415" status="PASS" starttime="20171030 15:26:14.415"></status>
</kw>
<status endtime="20171030 15:26:14.415" status="PASS" starttime="20171030 15:26:14.414"></status>
</kw>
<status endtime="20171030 15:26:14.415" status="PASS" starttime="20171030 15:26:14.413"></status>
</kw>
<status endtime="20171030 15:26:14.415" status="PASS" starttime="20171030 15:26:14.412"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:14.607" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:26:14.608" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:14.608" status="PASS" starttime="20171030 15:26:14.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:14.610" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:14.610" status="PASS" starttime="20171030 15:26:14.609"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:14.610" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:14.611" status="PASS" starttime="20171030 15:26:14.610"></status>
</kw>
<status endtime="20171030 15:26:14.611" status="PASS" starttime="20171030 15:26:14.610"></status>
</kw>
<status endtime="20171030 15:26:14.611" status="PASS" starttime="20171030 15:26:14.609"></status>
</kw>
<status endtime="20171030 15:26:14.611" status="PASS" starttime="20171030 15:26:14.608"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:14.611" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:14.611" status="PASS" starttime="20171030 15:26:14.611"></status>
</kw>
<msg timestamp="20171030 15:26:14.612" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:14.612" status="PASS" starttime="20171030 15:26:13.998"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:14.612" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:14.612" status="PASS" starttime="20171030 15:26:14.612"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:14.613" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:14.613" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:14.613" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20171030 15:26:14.613" status="PASS" starttime="20171030 15:26:14.613"></status>
</kw>
<msg timestamp="20171030 15:26:14.613" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:26:14.613" status="PASS" starttime="20171030 15:26:13.994"></status>
</kw>
<msg timestamp="20171030 15:26:14.614" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:26:14.614" status="PASS" starttime="20171030 15:26:13.994"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:26:14.614" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:26:14.614" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20171030 15:26:14.614" status="FAIL" starttime="20171030 15:26:14.614"></status>
</kw>
<status endtime="20171030 15:26:14.615" status="FAIL" starttime="20171030 15:26:13.993"></status>
</kw>
<status endtime="20171030 15:26:14.615" status="FAIL" starttime="20171030 15:26:13.374"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:24.620" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:24.620" status="PASS" starttime="20171030 15:26:24.620"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:24.621" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:24.621" status="PASS" starttime="20171030 15:26:24.621"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:24.622" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:24.622" status="PASS" starttime="20171030 15:26:24.621"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:24.622" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:24.622" status="PASS" starttime="20171030 15:26:24.622"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:24.826" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:24.827" status="PASS" starttime="20171030 15:26:24.623"></status>
</kw>
<msg timestamp="20171030 15:26:24.827" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:24.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:24.827" status="PASS" starttime="20171030 15:26:24.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:24.828" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:24.828" status="PASS" starttime="20171030 15:26:24.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:24.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:24.828" status="PASS" starttime="20171030 15:26:24.828"></status>
</kw>
<status endtime="20171030 15:26:24.829" status="PASS" starttime="20171030 15:26:24.619"></status>
</kw>
<status endtime="20171030 15:26:24.829" status="PASS" starttime="20171030 15:26:24.619"></status>
</kw>
<status endtime="20171030 15:26:24.829" status="PASS" starttime="20171030 15:26:24.618"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:24.829" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:26:24.829" status="PASS" starttime="20171030 15:26:24.829"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:24.831" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:24.832" status="PASS" starttime="20171030 15:26:24.831"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:24.832" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:24.833" status="PASS" starttime="20171030 15:26:24.832"></status>
</kw>
<status endtime="20171030 15:26:24.833" status="PASS" starttime="20171030 15:26:24.832"></status>
</kw>
<status endtime="20171030 15:26:24.833" status="PASS" starttime="20171030 15:26:24.830"></status>
</kw>
<status endtime="20171030 15:26:24.833" status="PASS" starttime="20171030 15:26:24.830"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:24.909" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:26:24.909" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:24.909" status="PASS" starttime="20171030 15:26:24.833"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:24.911" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:24.911" status="PASS" starttime="20171030 15:26:24.910"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:24.912" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:24.912" status="PASS" starttime="20171030 15:26:24.911"></status>
</kw>
<status endtime="20171030 15:26:24.912" status="PASS" starttime="20171030 15:26:24.911"></status>
</kw>
<status endtime="20171030 15:26:24.912" status="PASS" starttime="20171030 15:26:24.910"></status>
</kw>
<status endtime="20171030 15:26:24.912" status="PASS" starttime="20171030 15:26:24.909"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:24.912" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:24.912" status="PASS" starttime="20171030 15:26:24.912"></status>
</kw>
<msg timestamp="20171030 15:26:24.913" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:24.913" status="PASS" starttime="20171030 15:26:24.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:24.913" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:24.913" status="PASS" starttime="20171030 15:26:24.913"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:24.914" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:24.914" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:24.914" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:26:24.914" status="PASS" starttime="20171030 15:26:24.914"></status>
</kw>
<msg timestamp="20171030 15:26:24.914" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:26:24.914" status="PASS" starttime="20171030 15:26:24.617"></status>
</kw>
<msg timestamp="20171030 15:26:24.915" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:26:24.915" status="PASS" starttime="20171030 15:26:24.616"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:26:24.915" status="PASS" starttime="20171030 15:26:24.915"></status>
</kw>
<status endtime="20171030 15:26:24.915" status="PASS" starttime="20171030 15:26:24.616"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:24.919" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:24.920" status="PASS" starttime="20171030 15:26:24.919"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:24.920" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:24.921" status="PASS" starttime="20171030 15:26:24.920"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:24.921" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:24.921" status="PASS" starttime="20171030 15:26:24.921"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:24.922" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:24.922" status="PASS" starttime="20171030 15:26:24.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:25.238" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:25.238" status="PASS" starttime="20171030 15:26:24.923"></status>
</kw>
<msg timestamp="20171030 15:26:25.238" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:25.238" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:25.238" status="PASS" starttime="20171030 15:26:24.922"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:25.239" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:25.239" status="PASS" starttime="20171030 15:26:25.239"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:25.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:25.240" status="PASS" starttime="20171030 15:26:25.239"></status>
</kw>
<status endtime="20171030 15:26:25.240" status="PASS" starttime="20171030 15:26:24.918"></status>
</kw>
<status endtime="20171030 15:26:25.240" status="PASS" starttime="20171030 15:26:24.918"></status>
</kw>
<status endtime="20171030 15:26:25.240" status="PASS" starttime="20171030 15:26:24.917"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:25.241" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:26:25.241" status="PASS" starttime="20171030 15:26:25.241"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:25.243" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:25.243" status="PASS" starttime="20171030 15:26:25.242"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:25.244" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:25.244" status="PASS" starttime="20171030 15:26:25.244"></status>
</kw>
<status endtime="20171030 15:26:25.244" status="PASS" starttime="20171030 15:26:25.243"></status>
</kw>
<status endtime="20171030 15:26:25.245" status="PASS" starttime="20171030 15:26:25.242"></status>
</kw>
<status endtime="20171030 15:26:25.245" status="PASS" starttime="20171030 15:26:25.241"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:25.350" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:26:25.350" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:25.350" status="PASS" starttime="20171030 15:26:25.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:25.352" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:25.352" status="PASS" starttime="20171030 15:26:25.352"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:25.353" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:25.353" status="PASS" starttime="20171030 15:26:25.353"></status>
</kw>
<status endtime="20171030 15:26:25.353" status="PASS" starttime="20171030 15:26:25.352"></status>
</kw>
<status endtime="20171030 15:26:25.353" status="PASS" starttime="20171030 15:26:25.351"></status>
</kw>
<status endtime="20171030 15:26:25.353" status="PASS" starttime="20171030 15:26:25.351"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:25.354" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:25.354" status="PASS" starttime="20171030 15:26:25.354"></status>
</kw>
<msg timestamp="20171030 15:26:25.354" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:25.354" status="PASS" starttime="20171030 15:26:24.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:25.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:25.355" status="PASS" starttime="20171030 15:26:25.354"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:25.355" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:25.355" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:25.356" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:26:25.356" status="PASS" starttime="20171030 15:26:25.355"></status>
</kw>
<msg timestamp="20171030 15:26:25.356" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:26:25.356" status="PASS" starttime="20171030 15:26:24.916"></status>
</kw>
<msg timestamp="20171030 15:26:25.356" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:26:25.356" status="PASS" starttime="20171030 15:26:24.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:26:25.357" status="PASS" starttime="20171030 15:26:25.357"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:25.361" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:25.362" status="PASS" starttime="20171030 15:26:25.361"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:25.362" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:25.362" status="PASS" starttime="20171030 15:26:25.362"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:25.363" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:25.363" status="PASS" starttime="20171030 15:26:25.362"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:25.363" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:25.364" status="PASS" starttime="20171030 15:26:25.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:25.578" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:25.578" status="PASS" starttime="20171030 15:26:25.364"></status>
</kw>
<msg timestamp="20171030 15:26:25.578" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:25.578" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:25.578" status="PASS" starttime="20171030 15:26:25.364"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:25.579" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:25.579" status="PASS" starttime="20171030 15:26:25.579"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:25.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:25.580" status="PASS" starttime="20171030 15:26:25.579"></status>
</kw>
<status endtime="20171030 15:26:25.580" status="PASS" starttime="20171030 15:26:25.360"></status>
</kw>
<status endtime="20171030 15:26:25.580" status="PASS" starttime="20171030 15:26:25.360"></status>
</kw>
<status endtime="20171030 15:26:25.580" status="PASS" starttime="20171030 15:26:25.359"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:25.581" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:26:25.581" status="PASS" starttime="20171030 15:26:25.580"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:25.583" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:26:25.583" status="PASS" starttime="20171030 15:26:25.582"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:25.584" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:26:25.584" status="PASS" starttime="20171030 15:26:25.584"></status>
</kw>
<status endtime="20171030 15:26:25.584" status="PASS" starttime="20171030 15:26:25.583"></status>
</kw>
<status endtime="20171030 15:26:25.584" status="PASS" starttime="20171030 15:26:25.582"></status>
</kw>
<status endtime="20171030 15:26:25.584" status="PASS" starttime="20171030 15:26:25.581"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:25.694" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:26:25.694" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:25.694" status="PASS" starttime="20171030 15:26:25.585"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:25.696" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:25.696" status="PASS" starttime="20171030 15:26:25.696"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:25.697" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:25.698" status="PASS" starttime="20171030 15:26:25.697"></status>
</kw>
<status endtime="20171030 15:26:25.698" status="PASS" starttime="20171030 15:26:25.696"></status>
</kw>
<status endtime="20171030 15:26:25.698" status="PASS" starttime="20171030 15:26:25.695"></status>
</kw>
<status endtime="20171030 15:26:25.698" status="PASS" starttime="20171030 15:26:25.695"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:25.698" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:25.698" status="PASS" starttime="20171030 15:26:25.698"></status>
</kw>
<msg timestamp="20171030 15:26:25.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:25.699" status="PASS" starttime="20171030 15:26:25.358"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:25.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:25.699" status="PASS" starttime="20171030 15:26:25.699"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:25.700" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:25.700" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:25.700" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20171030 15:26:25.700" status="PASS" starttime="20171030 15:26:25.699"></status>
</kw>
<msg timestamp="20171030 15:26:25.700" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:26:25.700" status="PASS" starttime="20171030 15:26:25.358"></status>
</kw>
<msg timestamp="20171030 15:26:25.700" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:26:25.701" status="PASS" starttime="20171030 15:26:25.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:26:25.701" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:25.701" status="PASS" starttime="20171030 15:26:25.701"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:25.705" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:25.705" status="PASS" starttime="20171030 15:26:25.705"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:25.706" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:25.706" status="PASS" starttime="20171030 15:26:25.705"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:25.706" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:25.706" status="PASS" starttime="20171030 15:26:25.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:25.707" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:25.707" status="PASS" starttime="20171030 15:26:25.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:25.900" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:25.900" status="PASS" starttime="20171030 15:26:25.708"></status>
</kw>
<msg timestamp="20171030 15:26:25.900" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:25.900" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:25.900" status="PASS" starttime="20171030 15:26:25.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:25.901" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:25.901" status="PASS" starttime="20171030 15:26:25.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:25.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:25.902" status="PASS" starttime="20171030 15:26:25.901"></status>
</kw>
<status endtime="20171030 15:26:25.902" status="PASS" starttime="20171030 15:26:25.704"></status>
</kw>
<status endtime="20171030 15:26:25.902" status="PASS" starttime="20171030 15:26:25.703"></status>
</kw>
<status endtime="20171030 15:26:25.902" status="PASS" starttime="20171030 15:26:25.703"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:25.902" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20171030 15:26:25.903" status="PASS" starttime="20171030 15:26:25.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:25.905" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:25.905" status="PASS" starttime="20171030 15:26:25.904"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:25.906" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:25.906" status="PASS" starttime="20171030 15:26:25.905"></status>
</kw>
<status endtime="20171030 15:26:25.906" status="PASS" starttime="20171030 15:26:25.905"></status>
</kw>
<status endtime="20171030 15:26:25.906" status="PASS" starttime="20171030 15:26:25.903"></status>
</kw>
<status endtime="20171030 15:26:25.906" status="PASS" starttime="20171030 15:26:25.903"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:26.098" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171030 15:26:26.098" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:26.098" status="PASS" starttime="20171030 15:26:25.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:26.100" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:26.101" status="PASS" starttime="20171030 15:26:26.100"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:26.101" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:26.102" status="PASS" starttime="20171030 15:26:26.101"></status>
</kw>
<status endtime="20171030 15:26:26.102" status="PASS" starttime="20171030 15:26:26.101"></status>
</kw>
<status endtime="20171030 15:26:26.102" status="PASS" starttime="20171030 15:26:26.099"></status>
</kw>
<status endtime="20171030 15:26:26.102" status="PASS" starttime="20171030 15:26:26.099"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:26.102" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:26.102" status="PASS" starttime="20171030 15:26:26.102"></status>
</kw>
<msg timestamp="20171030 15:26:26.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:26.103" status="PASS" starttime="20171030 15:26:25.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:26.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:26.103" status="PASS" starttime="20171030 15:26:26.103"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:26.104" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:26.104" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:26.104" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20171030 15:26:26.104" status="PASS" starttime="20171030 15:26:26.104"></status>
</kw>
<msg timestamp="20171030 15:26:26.104" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:26:26.104" status="PASS" starttime="20171030 15:26:25.702"></status>
</kw>
<msg timestamp="20171030 15:26:26.105" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:26:26.105" status="PASS" starttime="20171030 15:26:25.701"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171030 15:26:26.105" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:26:26.105" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:26:26.105" status="FAIL" starttime="20171030 15:26:26.105"></status>
</kw>
<status endtime="20171030 15:26:26.106" status="FAIL" starttime="20171030 15:26:25.357"></status>
</kw>
<status endtime="20171030 15:26:26.106" status="FAIL" starttime="20171030 15:26:24.615"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:36.111" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:36.112" status="PASS" starttime="20171030 15:26:36.111"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:36.112" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:36.112" status="PASS" starttime="20171030 15:26:36.112"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:36.113" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:36.113" status="PASS" starttime="20171030 15:26:36.113"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:36.114" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:36.114" status="PASS" starttime="20171030 15:26:36.113"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:36.391" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:36.391" status="PASS" starttime="20171030 15:26:36.114"></status>
</kw>
<msg timestamp="20171030 15:26:36.391" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:36.392" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:36.393" status="PASS" starttime="20171030 15:26:36.114"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:36.395" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:36.395" status="PASS" starttime="20171030 15:26:36.394"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:36.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:36.395" status="PASS" starttime="20171030 15:26:36.395"></status>
</kw>
<status endtime="20171030 15:26:36.396" status="PASS" starttime="20171030 15:26:36.110"></status>
</kw>
<status endtime="20171030 15:26:36.396" status="PASS" starttime="20171030 15:26:36.109"></status>
</kw>
<status endtime="20171030 15:26:36.396" status="PASS" starttime="20171030 15:26:36.109"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:36.397" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:26:36.397" status="PASS" starttime="20171030 15:26:36.396"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:36.399" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:36.399" status="PASS" starttime="20171030 15:26:36.399"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:36.400" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:36.400" status="PASS" starttime="20171030 15:26:36.400"></status>
</kw>
<status endtime="20171030 15:26:36.401" status="PASS" starttime="20171030 15:26:36.400"></status>
</kw>
<status endtime="20171030 15:26:36.401" status="PASS" starttime="20171030 15:26:36.398"></status>
</kw>
<status endtime="20171030 15:26:36.401" status="PASS" starttime="20171030 15:26:36.397"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:40.792" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:26:40.792" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:40.792" status="PASS" starttime="20171030 15:26:36.401"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:40.794" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:40.794" status="PASS" starttime="20171030 15:26:40.794"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:40.796" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:40.796" status="PASS" starttime="20171030 15:26:40.795"></status>
</kw>
<status endtime="20171030 15:26:40.796" status="PASS" starttime="20171030 15:26:40.795"></status>
</kw>
<status endtime="20171030 15:26:40.796" status="PASS" starttime="20171030 15:26:40.793"></status>
</kw>
<status endtime="20171030 15:26:40.796" status="PASS" starttime="20171030 15:26:40.793"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:40.796" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:40.797" status="PASS" starttime="20171030 15:26:40.796"></status>
</kw>
<msg timestamp="20171030 15:26:40.797" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:40.797" status="PASS" starttime="20171030 15:26:36.108"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:40.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:40.798" status="PASS" starttime="20171030 15:26:40.797"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:40.798" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:40.798" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:40.798" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:26:40.798" status="PASS" starttime="20171030 15:26:40.798"></status>
</kw>
<msg timestamp="20171030 15:26:40.799" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:26:40.799" status="PASS" starttime="20171030 15:26:36.108"></status>
</kw>
<msg timestamp="20171030 15:26:40.799" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:26:40.799" status="PASS" starttime="20171030 15:26:36.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:26:40.800" status="PASS" starttime="20171030 15:26:40.799"></status>
</kw>
<status endtime="20171030 15:26:40.800" status="PASS" starttime="20171030 15:26:36.107"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:40.803" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:40.804" status="PASS" starttime="20171030 15:26:40.803"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:40.804" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:40.804" status="PASS" starttime="20171030 15:26:40.804"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:40.805" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:40.805" status="PASS" starttime="20171030 15:26:40.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:40.806" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:40.806" status="PASS" starttime="20171030 15:26:40.805"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:41.309" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:41.309" status="PASS" starttime="20171030 15:26:40.806"></status>
</kw>
<msg timestamp="20171030 15:26:41.309" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:41.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:41.309" status="PASS" starttime="20171030 15:26:40.806"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:41.310" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:41.310" status="PASS" starttime="20171030 15:26:41.310"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:41.311" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:41.311" status="PASS" starttime="20171030 15:26:41.310"></status>
</kw>
<status endtime="20171030 15:26:41.311" status="PASS" starttime="20171030 15:26:40.802"></status>
</kw>
<status endtime="20171030 15:26:41.311" status="PASS" starttime="20171030 15:26:40.802"></status>
</kw>
<status endtime="20171030 15:26:41.311" status="PASS" starttime="20171030 15:26:40.801"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:41.312" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:26:41.312" status="PASS" starttime="20171030 15:26:41.311"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:41.315" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:41.315" status="PASS" starttime="20171030 15:26:41.313"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:41.316" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:41.316" status="PASS" starttime="20171030 15:26:41.315"></status>
</kw>
<status endtime="20171030 15:26:41.316" status="PASS" starttime="20171030 15:26:41.315"></status>
</kw>
<status endtime="20171030 15:26:41.316" status="PASS" starttime="20171030 15:26:41.313"></status>
</kw>
<status endtime="20171030 15:26:41.316" status="PASS" starttime="20171030 15:26:41.312"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:43.377" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:26:43.378" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:43.378" status="PASS" starttime="20171030 15:26:41.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:43.380" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:43.380" status="PASS" starttime="20171030 15:26:43.379"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:43.381" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:43.381" status="PASS" starttime="20171030 15:26:43.381"></status>
</kw>
<status endtime="20171030 15:26:43.381" status="PASS" starttime="20171030 15:26:43.380"></status>
</kw>
<status endtime="20171030 15:26:43.381" status="PASS" starttime="20171030 15:26:43.379"></status>
</kw>
<status endtime="20171030 15:26:43.381" status="PASS" starttime="20171030 15:26:43.378"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:43.382" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:43.382" status="PASS" starttime="20171030 15:26:43.381"></status>
</kw>
<msg timestamp="20171030 15:26:43.382" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:43.382" status="PASS" starttime="20171030 15:26:40.801"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:43.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:43.383" status="PASS" starttime="20171030 15:26:43.382"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:43.383" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:43.383" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:43.383" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:26:43.383" status="PASS" starttime="20171030 15:26:43.383"></status>
</kw>
<msg timestamp="20171030 15:26:43.384" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:26:43.384" status="PASS" starttime="20171030 15:26:40.800"></status>
</kw>
<msg timestamp="20171030 15:26:43.384" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:26:43.384" status="PASS" starttime="20171030 15:26:40.800"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:26:43.384" status="PASS" starttime="20171030 15:26:43.384"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:43.389" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:43.389" status="PASS" starttime="20171030 15:26:43.388"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:43.390" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:43.390" status="PASS" starttime="20171030 15:26:43.389"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:43.390" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:43.390" status="PASS" starttime="20171030 15:26:43.390"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:43.391" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:43.391" status="PASS" starttime="20171030 15:26:43.390"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:43.907" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:43.907" status="PASS" starttime="20171030 15:26:43.392"></status>
</kw>
<msg timestamp="20171030 15:26:43.907" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:43.907" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:43.907" status="PASS" starttime="20171030 15:26:43.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:43.908" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:43.908" status="PASS" starttime="20171030 15:26:43.908"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:43.909" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:43.909" status="PASS" starttime="20171030 15:26:43.908"></status>
</kw>
<status endtime="20171030 15:26:43.909" status="PASS" starttime="20171030 15:26:43.388"></status>
</kw>
<status endtime="20171030 15:26:43.909" status="PASS" starttime="20171030 15:26:43.387"></status>
</kw>
<status endtime="20171030 15:26:43.909" status="PASS" starttime="20171030 15:26:43.387"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:43.910" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:26:43.910" status="PASS" starttime="20171030 15:26:43.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:43.912" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:26:43.912" status="PASS" starttime="20171030 15:26:43.911"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:43.913" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:26:43.913" status="PASS" starttime="20171030 15:26:43.913"></status>
</kw>
<status endtime="20171030 15:26:43.913" status="PASS" starttime="20171030 15:26:43.912"></status>
</kw>
<status endtime="20171030 15:26:43.913" status="PASS" starttime="20171030 15:26:43.911"></status>
</kw>
<status endtime="20171030 15:26:43.913" status="PASS" starttime="20171030 15:26:43.910"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:44.676" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:26:44.677" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:44.677" status="PASS" starttime="20171030 15:26:43.913"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:44.679" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:44.679" status="PASS" starttime="20171030 15:26:44.678"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:44.680" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:44.680" status="PASS" starttime="20171030 15:26:44.679"></status>
</kw>
<status endtime="20171030 15:26:44.680" status="PASS" starttime="20171030 15:26:44.679"></status>
</kw>
<status endtime="20171030 15:26:44.680" status="PASS" starttime="20171030 15:26:44.678"></status>
</kw>
<status endtime="20171030 15:26:44.680" status="PASS" starttime="20171030 15:26:44.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:44.680" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:44.681" status="PASS" starttime="20171030 15:26:44.680"></status>
</kw>
<msg timestamp="20171030 15:26:44.681" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:44.681" status="PASS" starttime="20171030 15:26:43.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:44.681" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:44.681" status="PASS" starttime="20171030 15:26:44.681"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:44.682" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:44.682" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:44.682" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20171030 15:26:44.682" status="PASS" starttime="20171030 15:26:44.682"></status>
</kw>
<msg timestamp="20171030 15:26:44.683" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:26:44.683" status="PASS" starttime="20171030 15:26:43.385"></status>
</kw>
<msg timestamp="20171030 15:26:44.683" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:26:44.683" status="PASS" starttime="20171030 15:26:43.385"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:26:44.683" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:44.683" status="PASS" starttime="20171030 15:26:44.683"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:44.688" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:44.688" status="PASS" starttime="20171030 15:26:44.687"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:44.689" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:44.689" status="PASS" starttime="20171030 15:26:44.688"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:44.689" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:44.689" status="PASS" starttime="20171030 15:26:44.689"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:44.690" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:44.690" status="PASS" starttime="20171030 15:26:44.689"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:45.213" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:45.213" status="PASS" starttime="20171030 15:26:44.691"></status>
</kw>
<msg timestamp="20171030 15:26:45.213" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:45.213" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:45.213" status="PASS" starttime="20171030 15:26:44.690"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:45.214" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:45.214" status="PASS" starttime="20171030 15:26:45.213"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:45.214" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:45.214" status="PASS" starttime="20171030 15:26:45.214"></status>
</kw>
<status endtime="20171030 15:26:45.215" status="PASS" starttime="20171030 15:26:44.686"></status>
</kw>
<status endtime="20171030 15:26:45.215" status="PASS" starttime="20171030 15:26:44.686"></status>
</kw>
<status endtime="20171030 15:26:45.215" status="PASS" starttime="20171030 15:26:44.685"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:45.215" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20171030 15:26:45.215" status="PASS" starttime="20171030 15:26:45.215"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:45.218" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:45.218" status="PASS" starttime="20171030 15:26:45.217"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:45.219" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:45.219" status="PASS" starttime="20171030 15:26:45.218"></status>
</kw>
<status endtime="20171030 15:26:45.219" status="PASS" starttime="20171030 15:26:45.218"></status>
</kw>
<status endtime="20171030 15:26:45.219" status="PASS" starttime="20171030 15:26:45.216"></status>
</kw>
<status endtime="20171030 15:26:45.219" status="PASS" starttime="20171030 15:26:45.216"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:45.640" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171030 15:26:45.641" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:45.641" status="PASS" starttime="20171030 15:26:45.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:45.643" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:45.643" status="PASS" starttime="20171030 15:26:45.642"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:45.646" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:45.646" status="PASS" starttime="20171030 15:26:45.643"></status>
</kw>
<status endtime="20171030 15:26:45.646" status="PASS" starttime="20171030 15:26:45.643"></status>
</kw>
<status endtime="20171030 15:26:45.647" status="PASS" starttime="20171030 15:26:45.642"></status>
</kw>
<status endtime="20171030 15:26:45.647" status="PASS" starttime="20171030 15:26:45.641"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:45.647" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:45.647" status="PASS" starttime="20171030 15:26:45.647"></status>
</kw>
<msg timestamp="20171030 15:26:45.647" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:45.647" status="PASS" starttime="20171030 15:26:44.685"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:45.648" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:45.648" status="PASS" starttime="20171030 15:26:45.648"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:45.649" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:45.649" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:45.649" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20171030 15:26:45.649" status="PASS" starttime="20171030 15:26:45.649"></status>
</kw>
<msg timestamp="20171030 15:26:45.650" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:26:45.650" status="PASS" starttime="20171030 15:26:44.684"></status>
</kw>
<msg timestamp="20171030 15:26:45.650" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:26:45.650" status="PASS" starttime="20171030 15:26:44.684"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171030 15:26:45.650" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:26:45.651" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:26:45.651" status="FAIL" starttime="20171030 15:26:45.650"></status>
</kw>
<status endtime="20171030 15:26:45.651" status="FAIL" starttime="20171030 15:26:43.385"></status>
</kw>
<status endtime="20171030 15:26:45.651" status="FAIL" starttime="20171030 15:26:36.106"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:55.657" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:55.657" status="PASS" starttime="20171030 15:26:55.656"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:55.658" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:55.658" status="PASS" starttime="20171030 15:26:55.657"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:55.658" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:55.659" status="PASS" starttime="20171030 15:26:55.658"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:55.659" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:55.659" status="PASS" starttime="20171030 15:26:55.659"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:55.854" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:55.855" status="PASS" starttime="20171030 15:26:55.660"></status>
</kw>
<msg timestamp="20171030 15:26:55.855" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:55.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:55.855" status="PASS" starttime="20171030 15:26:55.659"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:55.855" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:55.855" status="PASS" starttime="20171030 15:26:55.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:55.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:55.856" status="PASS" starttime="20171030 15:26:55.856"></status>
</kw>
<status endtime="20171030 15:26:55.856" status="PASS" starttime="20171030 15:26:55.656"></status>
</kw>
<status endtime="20171030 15:26:55.856" status="PASS" starttime="20171030 15:26:55.655"></status>
</kw>
<status endtime="20171030 15:26:55.857" status="PASS" starttime="20171030 15:26:55.655"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:55.857" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:26:55.857" status="PASS" starttime="20171030 15:26:55.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:55.859" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:55.859" status="PASS" starttime="20171030 15:26:55.859"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:55.860" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:55.860" status="PASS" starttime="20171030 15:26:55.860"></status>
</kw>
<status endtime="20171030 15:26:55.860" status="PASS" starttime="20171030 15:26:55.859"></status>
</kw>
<status endtime="20171030 15:26:55.861" status="PASS" starttime="20171030 15:26:55.858"></status>
</kw>
<status endtime="20171030 15:26:55.861" status="PASS" starttime="20171030 15:26:55.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:55.981" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:26:55.981" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:55.981" status="PASS" starttime="20171030 15:26:55.861"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:55.983" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:55.983" status="PASS" starttime="20171030 15:26:55.983"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:55.984" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:55.984" status="PASS" starttime="20171030 15:26:55.984"></status>
</kw>
<status endtime="20171030 15:26:55.984" status="PASS" starttime="20171030 15:26:55.983"></status>
</kw>
<status endtime="20171030 15:26:55.985" status="PASS" starttime="20171030 15:26:55.982"></status>
</kw>
<status endtime="20171030 15:26:55.985" status="PASS" starttime="20171030 15:26:55.982"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:55.985" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:55.985" status="PASS" starttime="20171030 15:26:55.985"></status>
</kw>
<msg timestamp="20171030 15:26:55.985" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:55.985" status="PASS" starttime="20171030 15:26:55.654"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:55.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:55.986" status="PASS" starttime="20171030 15:26:55.986"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:55.987" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:55.987" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:55.987" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:26:55.987" status="PASS" starttime="20171030 15:26:55.986"></status>
</kw>
<msg timestamp="20171030 15:26:55.987" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:26:55.987" status="PASS" starttime="20171030 15:26:55.653"></status>
</kw>
<msg timestamp="20171030 15:26:55.987" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:26:55.987" status="PASS" starttime="20171030 15:26:55.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:26:55.988" status="PASS" starttime="20171030 15:26:55.988"></status>
</kw>
<status endtime="20171030 15:26:55.988" status="PASS" starttime="20171030 15:26:55.653"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:55.992" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:55.992" status="PASS" starttime="20171030 15:26:55.991"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:55.993" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:55.993" status="PASS" starttime="20171030 15:26:55.993"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:55.994" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:55.994" status="PASS" starttime="20171030 15:26:55.993"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:55.994" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:55.994" status="PASS" starttime="20171030 15:26:55.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:56.292" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:56.293" status="PASS" starttime="20171030 15:26:55.995"></status>
</kw>
<msg timestamp="20171030 15:26:56.293" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:56.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:56.293" status="PASS" starttime="20171030 15:26:55.995"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:56.294" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:56.294" status="PASS" starttime="20171030 15:26:56.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:56.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:56.294" status="PASS" starttime="20171030 15:26:56.294"></status>
</kw>
<status endtime="20171030 15:26:56.294" status="PASS" starttime="20171030 15:26:55.991"></status>
</kw>
<status endtime="20171030 15:26:56.295" status="PASS" starttime="20171030 15:26:55.990"></status>
</kw>
<status endtime="20171030 15:26:56.295" status="PASS" starttime="20171030 15:26:55.990"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:56.295" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:26:56.295" status="PASS" starttime="20171030 15:26:56.295"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:56.298" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:56.298" status="PASS" starttime="20171030 15:26:56.297"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:56.299" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:26:56.299" status="PASS" starttime="20171030 15:26:56.298"></status>
</kw>
<status endtime="20171030 15:26:56.299" status="PASS" starttime="20171030 15:26:56.298"></status>
</kw>
<status endtime="20171030 15:26:56.299" status="PASS" starttime="20171030 15:26:56.296"></status>
</kw>
<status endtime="20171030 15:26:56.299" status="PASS" starttime="20171030 15:26:56.296"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:56.525" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:26:56.525" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:56.525" status="PASS" starttime="20171030 15:26:56.299"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:56.527" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:56.527" status="PASS" starttime="20171030 15:26:56.526"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:56.528" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:56.528" status="PASS" starttime="20171030 15:26:56.528"></status>
</kw>
<status endtime="20171030 15:26:56.528" status="PASS" starttime="20171030 15:26:56.527"></status>
</kw>
<status endtime="20171030 15:26:56.528" status="PASS" starttime="20171030 15:26:56.526"></status>
</kw>
<status endtime="20171030 15:26:56.528" status="PASS" starttime="20171030 15:26:56.525"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:56.529" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:56.529" status="PASS" starttime="20171030 15:26:56.529"></status>
</kw>
<msg timestamp="20171030 15:26:56.529" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:56.529" status="PASS" starttime="20171030 15:26:55.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:56.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:56.530" status="PASS" starttime="20171030 15:26:56.529"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:56.530" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:56.530" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:56.530" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:26:56.531" status="PASS" starttime="20171030 15:26:56.530"></status>
</kw>
<msg timestamp="20171030 15:26:56.531" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:26:56.531" status="PASS" starttime="20171030 15:26:55.989"></status>
</kw>
<msg timestamp="20171030 15:26:56.531" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:26:56.531" status="PASS" starttime="20171030 15:26:55.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:26:56.532" status="PASS" starttime="20171030 15:26:56.531"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:26:56.536" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:26:56.536" status="PASS" starttime="20171030 15:26:56.536"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:26:56.537" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:26:56.537" status="PASS" starttime="20171030 15:26:56.537"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:26:56.538" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:26:56.538" status="PASS" starttime="20171030 15:26:56.537"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:26:56.538" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:26:56.538" status="PASS" starttime="20171030 15:26:56.538"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:26:56.724" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:26:56.724" status="PASS" starttime="20171030 15:26:56.539"></status>
</kw>
<msg timestamp="20171030 15:26:56.724" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:26:56.724" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:56.724" status="PASS" starttime="20171030 15:26:56.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:26:56.725" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:56.725" status="PASS" starttime="20171030 15:26:56.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:56.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:56.726" status="PASS" starttime="20171030 15:26:56.725"></status>
</kw>
<status endtime="20171030 15:26:56.726" status="PASS" starttime="20171030 15:26:56.535"></status>
</kw>
<status endtime="20171030 15:26:56.726" status="PASS" starttime="20171030 15:26:56.535"></status>
</kw>
<status endtime="20171030 15:26:56.726" status="PASS" starttime="20171030 15:26:56.534"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:26:56.727" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:26:56.727" status="PASS" starttime="20171030 15:26:56.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:56.729" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:26:56.729" status="PASS" starttime="20171030 15:26:56.728"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:56.730" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:26:56.730" status="PASS" starttime="20171030 15:26:56.730"></status>
</kw>
<status endtime="20171030 15:26:56.730" status="PASS" starttime="20171030 15:26:56.729"></status>
</kw>
<status endtime="20171030 15:26:56.730" status="PASS" starttime="20171030 15:26:56.728"></status>
</kw>
<status endtime="20171030 15:26:56.730" status="PASS" starttime="20171030 15:26:56.727"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:26:56.822" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:26:56.822" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:56.822" status="PASS" starttime="20171030 15:26:56.731"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:26:56.824" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:56.824" status="PASS" starttime="20171030 15:26:56.823"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:26:56.825" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:26:56.825" status="PASS" starttime="20171030 15:26:56.824"></status>
</kw>
<status endtime="20171030 15:26:56.825" status="PASS" starttime="20171030 15:26:56.824"></status>
</kw>
<status endtime="20171030 15:26:56.825" status="PASS" starttime="20171030 15:26:56.823"></status>
</kw>
<status endtime="20171030 15:26:56.825" status="PASS" starttime="20171030 15:26:56.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:26:56.825" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:26:56.826" status="PASS" starttime="20171030 15:26:56.825"></status>
</kw>
<msg timestamp="20171030 15:26:56.826" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:26:56.826" status="PASS" starttime="20171030 15:26:56.533"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:26:56.826" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:26:56.826" status="PASS" starttime="20171030 15:26:56.826"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:26:56.827" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:26:56.827" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:26:56.827" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit'}</msg>
<status endtime="20171030 15:26:56.827" status="PASS" starttime="20171030 15:26:56.827"></status>
</kw>
<msg timestamp="20171030 15:26:56.827" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status endtime="20171030 15:26:56.827" status="PASS" starttime="20171030 15:26:56.533"></status>
</kw>
<msg timestamp="20171030 15:26:56.828" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status endtime="20171030 15:26:56.828" status="PASS" starttime="20171030 15:26:56.532"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:26:56.828" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:26:56.829" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status endtime="20171030 15:26:56.829" status="FAIL" starttime="20171030 15:26:56.828"></status>
</kw>
<status endtime="20171030 15:26:56.829" status="FAIL" starttime="20171030 15:26:56.532"></status>
</kw>
<status endtime="20171030 15:26:56.829" status="FAIL" starttime="20171030 15:26:55.652"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:27:06.834" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:27:06.835" status="PASS" starttime="20171030 15:27:06.834"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:27:06.835" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:27:06.835" status="PASS" starttime="20171030 15:27:06.835"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:27:06.836" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:27:06.836" status="PASS" starttime="20171030 15:27:06.836"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:27:06.837" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:27:06.837" status="PASS" starttime="20171030 15:27:06.836"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:27:07.018" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:27:07.018" status="PASS" starttime="20171030 15:27:06.838"></status>
</kw>
<msg timestamp="20171030 15:27:07.018" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:27:07.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:07.018" status="PASS" starttime="20171030 15:27:06.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:27:07.019" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:07.019" status="PASS" starttime="20171030 15:27:07.019"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:07.020" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:07.020" status="PASS" starttime="20171030 15:27:07.020"></status>
</kw>
<status endtime="20171030 15:27:07.020" status="PASS" starttime="20171030 15:27:06.833"></status>
</kw>
<status endtime="20171030 15:27:07.020" status="PASS" starttime="20171030 15:27:06.833"></status>
</kw>
<status endtime="20171030 15:27:07.020" status="PASS" starttime="20171030 15:27:06.832"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:27:07.021" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:27:07.021" status="PASS" starttime="20171030 15:27:07.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:07.023" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:07.023" status="PASS" starttime="20171030 15:27:07.022"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:07.024" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:07.024" status="PASS" starttime="20171030 15:27:07.024"></status>
</kw>
<status endtime="20171030 15:27:07.024" status="PASS" starttime="20171030 15:27:07.023"></status>
</kw>
<status endtime="20171030 15:27:07.024" status="PASS" starttime="20171030 15:27:07.022"></status>
</kw>
<status endtime="20171030 15:27:07.024" status="PASS" starttime="20171030 15:27:07.021"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:27:07.160" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:27:07.160" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:07.160" status="PASS" starttime="20171030 15:27:07.025"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:07.162" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:07.162" status="PASS" starttime="20171030 15:27:07.162"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:07.163" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:07.163" status="PASS" starttime="20171030 15:27:07.163"></status>
</kw>
<status endtime="20171030 15:27:07.163" status="PASS" starttime="20171030 15:27:07.162"></status>
</kw>
<status endtime="20171030 15:27:07.163" status="PASS" starttime="20171030 15:27:07.161"></status>
</kw>
<status endtime="20171030 15:27:07.164" status="PASS" starttime="20171030 15:27:07.161"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:27:07.164" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:27:07.164" status="PASS" starttime="20171030 15:27:07.164"></status>
</kw>
<msg timestamp="20171030 15:27:07.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:07.164" status="PASS" starttime="20171030 15:27:06.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:07.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:07.165" status="PASS" starttime="20171030 15:27:07.165"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:27:07.166" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:27:07.166" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:27:07.166" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:27:07.166" status="PASS" starttime="20171030 15:27:07.165"></status>
</kw>
<msg timestamp="20171030 15:27:07.166" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:27:07.166" status="PASS" starttime="20171030 15:27:06.831"></status>
</kw>
<msg timestamp="20171030 15:27:07.166" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:27:07.166" status="PASS" starttime="20171030 15:27:06.831"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:27:07.167" status="PASS" starttime="20171030 15:27:07.167"></status>
</kw>
<status endtime="20171030 15:27:07.167" status="PASS" starttime="20171030 15:27:06.830"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:27:07.171" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:27:07.172" status="PASS" starttime="20171030 15:27:07.171"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:27:07.172" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:27:07.172" status="PASS" starttime="20171030 15:27:07.172"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:27:07.173" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:27:07.173" status="PASS" starttime="20171030 15:27:07.173"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:27:07.174" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:27:07.174" status="PASS" starttime="20171030 15:27:07.173"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:27:07.783" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:27:07.783" status="PASS" starttime="20171030 15:27:07.174"></status>
</kw>
<msg timestamp="20171030 15:27:07.784" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:27:07.784" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:07.784" status="PASS" starttime="20171030 15:27:07.174"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:27:07.784" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:07.784" status="PASS" starttime="20171030 15:27:07.784"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:07.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:07.785" status="PASS" starttime="20171030 15:27:07.785"></status>
</kw>
<status endtime="20171030 15:27:07.785" status="PASS" starttime="20171030 15:27:07.170"></status>
</kw>
<status endtime="20171030 15:27:07.785" status="PASS" starttime="20171030 15:27:07.170"></status>
</kw>
<status endtime="20171030 15:27:07.785" status="PASS" starttime="20171030 15:27:07.169"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:27:07.786" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:27:07.786" status="PASS" starttime="20171030 15:27:07.786"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:07.788" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:07.788" status="PASS" starttime="20171030 15:27:07.788"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:07.789" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:07.789" status="PASS" starttime="20171030 15:27:07.789"></status>
</kw>
<status endtime="20171030 15:27:07.789" status="PASS" starttime="20171030 15:27:07.788"></status>
</kw>
<status endtime="20171030 15:27:07.790" status="PASS" starttime="20171030 15:27:07.787"></status>
</kw>
<status endtime="20171030 15:27:07.790" status="PASS" starttime="20171030 15:27:07.786"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:27:07.885" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:27:07.885" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:07.886" status="PASS" starttime="20171030 15:27:07.790"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:07.887" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:07.887" status="PASS" starttime="20171030 15:27:07.887"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:07.888" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:07.889" status="PASS" starttime="20171030 15:27:07.888"></status>
</kw>
<status endtime="20171030 15:27:07.889" status="PASS" starttime="20171030 15:27:07.888"></status>
</kw>
<status endtime="20171030 15:27:07.889" status="PASS" starttime="20171030 15:27:07.886"></status>
</kw>
<status endtime="20171030 15:27:07.889" status="PASS" starttime="20171030 15:27:07.886"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:27:07.889" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:27:07.889" status="PASS" starttime="20171030 15:27:07.889"></status>
</kw>
<msg timestamp="20171030 15:27:07.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:07.890" status="PASS" starttime="20171030 15:27:07.168"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:07.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:07.890" status="PASS" starttime="20171030 15:27:07.890"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:27:07.891" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:27:07.891" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:27:07.891" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:27:07.891" status="PASS" starttime="20171030 15:27:07.891"></status>
</kw>
<msg timestamp="20171030 15:27:07.891" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:27:07.891" status="PASS" starttime="20171030 15:27:07.168"></status>
</kw>
<msg timestamp="20171030 15:27:07.892" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:27:07.892" status="PASS" starttime="20171030 15:27:07.167"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:27:07.892" status="PASS" starttime="20171030 15:27:07.892"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:27:07.899" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:27:07.899" status="PASS" starttime="20171030 15:27:07.898"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:27:07.900" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:27:07.900" status="PASS" starttime="20171030 15:27:07.900"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:27:07.901" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:27:07.901" status="PASS" starttime="20171030 15:27:07.901"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:27:07.902" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:27:07.902" status="PASS" starttime="20171030 15:27:07.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:27:08.092" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:27:08.092" status="PASS" starttime="20171030 15:27:07.903"></status>
</kw>
<msg timestamp="20171030 15:27:08.093" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:27:08.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:08.093" status="PASS" starttime="20171030 15:27:07.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:27:08.094" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:08.094" status="PASS" starttime="20171030 15:27:08.093"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:08.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:08.095" status="PASS" starttime="20171030 15:27:08.094"></status>
</kw>
<status endtime="20171030 15:27:08.095" status="PASS" starttime="20171030 15:27:07.898"></status>
</kw>
<status endtime="20171030 15:27:08.095" status="PASS" starttime="20171030 15:27:07.897"></status>
</kw>
<status endtime="20171030 15:27:08.095" status="PASS" starttime="20171030 15:27:07.896"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:27:08.096" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:27:08.096" status="PASS" starttime="20171030 15:27:08.096"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:08.100" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:27:08.100" status="PASS" starttime="20171030 15:27:08.099"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:08.101" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:27:08.101" status="PASS" starttime="20171030 15:27:08.101"></status>
</kw>
<status endtime="20171030 15:27:08.101" status="PASS" starttime="20171030 15:27:08.100"></status>
</kw>
<status endtime="20171030 15:27:08.101" status="PASS" starttime="20171030 15:27:08.097"></status>
</kw>
<status endtime="20171030 15:27:08.101" status="PASS" starttime="20171030 15:27:08.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:27:08.195" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:27:08.196" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:08.196" status="PASS" starttime="20171030 15:27:08.102"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:08.198" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:08.198" status="PASS" starttime="20171030 15:27:08.197"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:08.199" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:08.199" status="PASS" starttime="20171030 15:27:08.198"></status>
</kw>
<status endtime="20171030 15:27:08.199" status="PASS" starttime="20171030 15:27:08.198"></status>
</kw>
<status endtime="20171030 15:27:08.199" status="PASS" starttime="20171030 15:27:08.197"></status>
</kw>
<status endtime="20171030 15:27:08.199" status="PASS" starttime="20171030 15:27:08.196"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:27:08.199" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:27:08.199" status="PASS" starttime="20171030 15:27:08.199"></status>
</kw>
<msg timestamp="20171030 15:27:08.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:08.200" status="PASS" starttime="20171030 15:27:07.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:08.200" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:08.200" status="PASS" starttime="20171030 15:27:08.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:27:08.201" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:27:08.201" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:27:08.201" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20171030 15:27:08.201" status="PASS" starttime="20171030 15:27:08.201"></status>
</kw>
<msg timestamp="20171030 15:27:08.202" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:27:08.202" status="PASS" starttime="20171030 15:27:07.894"></status>
</kw>
<msg timestamp="20171030 15:27:08.202" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:27:08.202" status="PASS" starttime="20171030 15:27:07.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:27:08.203" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:08.203" status="PASS" starttime="20171030 15:27:08.202"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:27:08.208" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:27:08.209" status="PASS" starttime="20171030 15:27:08.208"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:27:08.210" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:27:08.210" status="PASS" starttime="20171030 15:27:08.209"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:27:08.211" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:27:08.211" status="PASS" starttime="20171030 15:27:08.210"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:27:08.212" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:27:08.212" status="PASS" starttime="20171030 15:27:08.211"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:27:08.460" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:27:08.460" status="PASS" starttime="20171030 15:27:08.213"></status>
</kw>
<msg timestamp="20171030 15:27:08.460" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:27:08.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:08.461" status="PASS" starttime="20171030 15:27:08.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:27:08.461" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:08.461" status="PASS" starttime="20171030 15:27:08.461"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:08.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:08.462" status="PASS" starttime="20171030 15:27:08.462"></status>
</kw>
<status endtime="20171030 15:27:08.462" status="PASS" starttime="20171030 15:27:08.207"></status>
</kw>
<status endtime="20171030 15:27:08.462" status="PASS" starttime="20171030 15:27:08.206"></status>
</kw>
<status endtime="20171030 15:27:08.462" status="PASS" starttime="20171030 15:27:08.206"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:27:08.463" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20171030 15:27:08.463" status="PASS" starttime="20171030 15:27:08.463"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:08.465" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:08.465" status="PASS" starttime="20171030 15:27:08.464"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:08.466" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:08.466" status="PASS" starttime="20171030 15:27:08.466"></status>
</kw>
<status endtime="20171030 15:27:08.466" status="PASS" starttime="20171030 15:27:08.465"></status>
</kw>
<status endtime="20171030 15:27:08.466" status="PASS" starttime="20171030 15:27:08.464"></status>
</kw>
<status endtime="20171030 15:27:08.466" status="PASS" starttime="20171030 15:27:08.463"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:27:08.557" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171030 15:27:08.557" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:08.557" status="PASS" starttime="20171030 15:27:08.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:08.559" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:08.559" status="PASS" starttime="20171030 15:27:08.559"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:08.560" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:08.560" status="PASS" starttime="20171030 15:27:08.560"></status>
</kw>
<status endtime="20171030 15:27:08.560" status="PASS" starttime="20171030 15:27:08.559"></status>
</kw>
<status endtime="20171030 15:27:08.560" status="PASS" starttime="20171030 15:27:08.558"></status>
</kw>
<status endtime="20171030 15:27:08.560" status="PASS" starttime="20171030 15:27:08.557"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:27:08.561" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:27:08.561" status="PASS" starttime="20171030 15:27:08.561"></status>
</kw>
<msg timestamp="20171030 15:27:08.561" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:08.561" status="PASS" starttime="20171030 15:27:08.205"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:08.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:08.562" status="PASS" starttime="20171030 15:27:08.561"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:27:08.562" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:27:08.563" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:27:08.563" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20171030 15:27:08.563" status="PASS" starttime="20171030 15:27:08.562"></status>
</kw>
<msg timestamp="20171030 15:27:08.563" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:27:08.563" status="PASS" starttime="20171030 15:27:08.204"></status>
</kw>
<msg timestamp="20171030 15:27:08.563" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:27:08.563" status="PASS" starttime="20171030 15:27:08.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171030 15:27:08.564" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:27:08.564" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:27:08.564" status="FAIL" starttime="20171030 15:27:08.563"></status>
</kw>
<status endtime="20171030 15:27:08.564" status="FAIL" starttime="20171030 15:27:07.893"></status>
</kw>
<status endtime="20171030 15:27:08.564" status="FAIL" starttime="20171030 15:27:06.830"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:27:18.570" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:27:18.570" status="PASS" starttime="20171030 15:27:18.569"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:27:18.571" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:27:18.571" status="PASS" starttime="20171030 15:27:18.571"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:27:18.571" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:27:18.572" status="PASS" starttime="20171030 15:27:18.571"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:27:18.572" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:27:18.572" status="PASS" starttime="20171030 15:27:18.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:27:19.120" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:27:19.120" status="PASS" starttime="20171030 15:27:18.573"></status>
</kw>
<msg timestamp="20171030 15:27:19.121" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:27:19.121" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:19.121" status="PASS" starttime="20171030 15:27:18.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:27:19.121" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:19.121" status="PASS" starttime="20171030 15:27:19.121"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:19.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:19.122" status="PASS" starttime="20171030 15:27:19.122"></status>
</kw>
<status endtime="20171030 15:27:19.122" status="PASS" starttime="20171030 15:27:18.568"></status>
</kw>
<status endtime="20171030 15:27:19.122" status="PASS" starttime="20171030 15:27:18.568"></status>
</kw>
<status endtime="20171030 15:27:19.122" status="PASS" starttime="20171030 15:27:18.567"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:27:19.123" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:27:19.123" status="PASS" starttime="20171030 15:27:19.123"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:19.125" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:19.125" status="PASS" starttime="20171030 15:27:19.125"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:19.126" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:19.126" status="PASS" starttime="20171030 15:27:19.126"></status>
</kw>
<status endtime="20171030 15:27:19.126" status="PASS" starttime="20171030 15:27:19.125"></status>
</kw>
<status endtime="20171030 15:27:19.126" status="PASS" starttime="20171030 15:27:19.124"></status>
</kw>
<status endtime="20171030 15:27:19.127" status="PASS" starttime="20171030 15:27:19.123"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:27:19.756" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:27:19.756" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:19.756" status="PASS" starttime="20171030 15:27:19.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:19.758" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:19.758" status="PASS" starttime="20171030 15:27:19.757"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:19.759" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:19.759" status="PASS" starttime="20171030 15:27:19.759"></status>
</kw>
<status endtime="20171030 15:27:19.759" status="PASS" starttime="20171030 15:27:19.758"></status>
</kw>
<status endtime="20171030 15:27:19.760" status="PASS" starttime="20171030 15:27:19.757"></status>
</kw>
<status endtime="20171030 15:27:19.760" status="PASS" starttime="20171030 15:27:19.756"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:27:19.760" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:27:19.760" status="PASS" starttime="20171030 15:27:19.760"></status>
</kw>
<msg timestamp="20171030 15:27:19.760" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:19.760" status="PASS" starttime="20171030 15:27:18.567"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:19.761" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:19.761" status="PASS" starttime="20171030 15:27:19.761"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:27:19.762" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:27:19.762" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:27:19.762" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:27:19.762" status="PASS" starttime="20171030 15:27:19.761"></status>
</kw>
<msg timestamp="20171030 15:27:19.762" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:27:19.762" status="PASS" starttime="20171030 15:27:18.566"></status>
</kw>
<msg timestamp="20171030 15:27:19.762" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:27:19.762" status="PASS" starttime="20171030 15:27:18.566"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:27:19.763" status="PASS" starttime="20171030 15:27:19.763"></status>
</kw>
<status endtime="20171030 15:27:19.763" status="PASS" starttime="20171030 15:27:18.565"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:27:19.767" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:27:19.767" status="PASS" starttime="20171030 15:27:19.766"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:27:19.768" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:27:19.768" status="PASS" starttime="20171030 15:27:19.767"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:27:19.768" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:27:19.768" status="PASS" starttime="20171030 15:27:19.768"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:27:19.769" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:27:19.769" status="PASS" starttime="20171030 15:27:19.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:27:20.323" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:27:20.324" status="PASS" starttime="20171030 15:27:19.770"></status>
</kw>
<msg timestamp="20171030 15:27:20.324" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:27:20.324" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:20.324" status="PASS" starttime="20171030 15:27:19.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:27:20.324" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:20.325" status="PASS" starttime="20171030 15:27:20.324"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:20.325" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:20.325" status="PASS" starttime="20171030 15:27:20.325"></status>
</kw>
<status endtime="20171030 15:27:20.325" status="PASS" starttime="20171030 15:27:19.766"></status>
</kw>
<status endtime="20171030 15:27:20.326" status="PASS" starttime="20171030 15:27:19.765"></status>
</kw>
<status endtime="20171030 15:27:20.326" status="PASS" starttime="20171030 15:27:19.765"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:27:20.326" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:27:20.326" status="PASS" starttime="20171030 15:27:20.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:20.332" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:20.332" status="PASS" starttime="20171030 15:27:20.328"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:20.333" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:20.334" status="PASS" starttime="20171030 15:27:20.333"></status>
</kw>
<status endtime="20171030 15:27:20.334" status="PASS" starttime="20171030 15:27:20.332"></status>
</kw>
<status endtime="20171030 15:27:20.334" status="PASS" starttime="20171030 15:27:20.327"></status>
</kw>
<status endtime="20171030 15:27:20.334" status="PASS" starttime="20171030 15:27:20.327"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:27:21.980" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:27:21.980" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:21.980" status="PASS" starttime="20171030 15:27:20.334"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:21.982" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:21.982" status="PASS" starttime="20171030 15:27:21.982"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:21.983" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:21.983" status="PASS" starttime="20171030 15:27:21.983"></status>
</kw>
<status endtime="20171030 15:27:21.983" status="PASS" starttime="20171030 15:27:21.982"></status>
</kw>
<status endtime="20171030 15:27:21.984" status="PASS" starttime="20171030 15:27:21.981"></status>
</kw>
<status endtime="20171030 15:27:21.984" status="PASS" starttime="20171030 15:27:21.981"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:27:21.984" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:27:21.984" status="PASS" starttime="20171030 15:27:21.984"></status>
</kw>
<msg timestamp="20171030 15:27:21.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:21.984" status="PASS" starttime="20171030 15:27:19.764"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:21.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:21.985" status="PASS" starttime="20171030 15:27:21.985"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:27:21.986" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:27:21.986" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:27:21.986" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:27:21.986" status="PASS" starttime="20171030 15:27:21.986"></status>
</kw>
<msg timestamp="20171030 15:27:21.986" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:27:21.986" status="PASS" starttime="20171030 15:27:19.764"></status>
</kw>
<msg timestamp="20171030 15:27:21.987" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:27:21.987" status="PASS" starttime="20171030 15:27:19.763"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:27:21.987" status="PASS" starttime="20171030 15:27:21.987"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:27:21.992" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:27:21.992" status="PASS" starttime="20171030 15:27:21.991"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:27:21.993" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:27:21.993" status="PASS" starttime="20171030 15:27:21.992"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:27:21.994" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:27:21.994" status="PASS" starttime="20171030 15:27:21.993"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:27:21.994" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:27:21.995" status="PASS" starttime="20171030 15:27:21.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:27:22.568" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:27:22.568" status="PASS" starttime="20171030 15:27:21.996"></status>
</kw>
<msg timestamp="20171030 15:27:22.568" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:27:22.568" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:22.568" status="PASS" starttime="20171030 15:27:21.995"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:27:22.569" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:22.569" status="PASS" starttime="20171030 15:27:22.569"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:22.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:22.570" status="PASS" starttime="20171030 15:27:22.569"></status>
</kw>
<status endtime="20171030 15:27:22.570" status="PASS" starttime="20171030 15:27:21.991"></status>
</kw>
<status endtime="20171030 15:27:22.570" status="PASS" starttime="20171030 15:27:21.990"></status>
</kw>
<status endtime="20171030 15:27:22.570" status="PASS" starttime="20171030 15:27:21.989"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:27:22.571" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:27:22.571" status="PASS" starttime="20171030 15:27:22.570"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:22.573" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:27:22.573" status="PASS" starttime="20171030 15:27:22.572"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:22.574" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:27:22.574" status="PASS" starttime="20171030 15:27:22.574"></status>
</kw>
<status endtime="20171030 15:27:22.574" status="PASS" starttime="20171030 15:27:22.573"></status>
</kw>
<status endtime="20171030 15:27:22.574" status="PASS" starttime="20171030 15:27:22.572"></status>
</kw>
<status endtime="20171030 15:27:22.574" status="PASS" starttime="20171030 15:27:22.571"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:27:23.285" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:27:23.286" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:23.286" status="PASS" starttime="20171030 15:27:22.574"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:23.288" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:23.288" status="PASS" starttime="20171030 15:27:23.287"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:23.289" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:23.289" status="PASS" starttime="20171030 15:27:23.289"></status>
</kw>
<status endtime="20171030 15:27:23.289" status="PASS" starttime="20171030 15:27:23.288"></status>
</kw>
<status endtime="20171030 15:27:23.289" status="PASS" starttime="20171030 15:27:23.287"></status>
</kw>
<status endtime="20171030 15:27:23.289" status="PASS" starttime="20171030 15:27:23.286"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:27:23.290" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:27:23.290" status="PASS" starttime="20171030 15:27:23.289"></status>
</kw>
<msg timestamp="20171030 15:27:23.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:23.290" status="PASS" starttime="20171030 15:27:21.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:23.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:23.291" status="PASS" starttime="20171030 15:27:23.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:27:23.291" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:27:23.291" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:27:23.291" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20171030 15:27:23.291" status="PASS" starttime="20171030 15:27:23.291"></status>
</kw>
<msg timestamp="20171030 15:27:23.292" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:27:23.292" status="PASS" starttime="20171030 15:27:21.988"></status>
</kw>
<msg timestamp="20171030 15:27:23.292" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:27:23.292" status="PASS" starttime="20171030 15:27:21.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:27:23.292" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:23.293" status="PASS" starttime="20171030 15:27:23.292"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:27:23.297" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:27:23.297" status="PASS" starttime="20171030 15:27:23.296"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:27:23.298" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:27:23.298" status="PASS" starttime="20171030 15:27:23.297"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:27:23.299" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:27:23.299" status="PASS" starttime="20171030 15:27:23.298"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:27:23.299" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:27:23.300" status="PASS" starttime="20171030 15:27:23.299"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:27:23.871" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:27:23.871" status="PASS" starttime="20171030 15:27:23.300"></status>
</kw>
<msg timestamp="20171030 15:27:23.871" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:27:23.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:23.871" status="PASS" starttime="20171030 15:27:23.300"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:27:23.872" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:23.872" status="PASS" starttime="20171030 15:27:23.871"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:23.873" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:23.873" status="PASS" starttime="20171030 15:27:23.872"></status>
</kw>
<status endtime="20171030 15:27:23.873" status="PASS" starttime="20171030 15:27:23.295"></status>
</kw>
<status endtime="20171030 15:27:23.873" status="PASS" starttime="20171030 15:27:23.295"></status>
</kw>
<status endtime="20171030 15:27:23.873" status="PASS" starttime="20171030 15:27:23.294"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:27:23.874" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20171030 15:27:23.874" status="PASS" starttime="20171030 15:27:23.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:23.876" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:23.876" status="PASS" starttime="20171030 15:27:23.875"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:23.877" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:23.877" status="PASS" starttime="20171030 15:27:23.876"></status>
</kw>
<status endtime="20171030 15:27:23.877" status="PASS" starttime="20171030 15:27:23.876"></status>
</kw>
<status endtime="20171030 15:27:23.877" status="PASS" starttime="20171030 15:27:23.874"></status>
</kw>
<status endtime="20171030 15:27:23.877" status="PASS" starttime="20171030 15:27:23.874"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:27:24.754" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171030 15:27:24.754" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:24.754" status="PASS" starttime="20171030 15:27:23.877"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:24.756" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:24.756" status="PASS" starttime="20171030 15:27:24.756"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:24.757" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:24.758" status="PASS" starttime="20171030 15:27:24.757"></status>
</kw>
<status endtime="20171030 15:27:24.758" status="PASS" starttime="20171030 15:27:24.756"></status>
</kw>
<status endtime="20171030 15:27:24.758" status="PASS" starttime="20171030 15:27:24.755"></status>
</kw>
<status endtime="20171030 15:27:24.758" status="PASS" starttime="20171030 15:27:24.754"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:27:24.758" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:27:24.758" status="PASS" starttime="20171030 15:27:24.758"></status>
</kw>
<msg timestamp="20171030 15:27:24.759" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:24.759" status="PASS" starttime="20171030 15:27:23.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:24.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:24.759" status="PASS" starttime="20171030 15:27:24.759"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:27:24.760" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:27:24.760" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:27:24.760" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20171030 15:27:24.760" status="PASS" starttime="20171030 15:27:24.760"></status>
</kw>
<msg timestamp="20171030 15:27:24.760" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:27:24.760" status="PASS" starttime="20171030 15:27:23.293"></status>
</kw>
<msg timestamp="20171030 15:27:24.761" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:27:24.761" status="PASS" starttime="20171030 15:27:23.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171030 15:27:24.761" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171030 15:27:24.761" level="FAIL">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20171030 15:27:24.762" status="FAIL" starttime="20171030 15:27:24.761"></status>
</kw>
<status endtime="20171030 15:27:24.762" status="FAIL" starttime="20171030 15:27:21.987"></status>
</kw>
<status endtime="20171030 15:27:24.762" status="FAIL" starttime="20171030 15:27:18.565"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:27:34.767" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:27:34.767" status="PASS" starttime="20171030 15:27:34.766"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:27:34.768" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:27:34.768" status="PASS" starttime="20171030 15:27:34.767"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:27:34.769" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:27:34.769" status="PASS" starttime="20171030 15:27:34.768"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:27:34.769" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:27:34.769" status="PASS" starttime="20171030 15:27:34.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:27:35.539" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:27:35.539" status="PASS" starttime="20171030 15:27:34.770"></status>
</kw>
<msg timestamp="20171030 15:27:35.539" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:27:35.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:35.539" status="PASS" starttime="20171030 15:27:34.770"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:27:35.540" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:35.540" status="PASS" starttime="20171030 15:27:35.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:35.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:35.541" status="PASS" starttime="20171030 15:27:35.540"></status>
</kw>
<status endtime="20171030 15:27:35.541" status="PASS" starttime="20171030 15:27:34.766"></status>
</kw>
<status endtime="20171030 15:27:35.541" status="PASS" starttime="20171030 15:27:34.765"></status>
</kw>
<status endtime="20171030 15:27:35.541" status="PASS" starttime="20171030 15:27:34.765"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:27:35.542" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20171030 15:27:35.542" status="PASS" starttime="20171030 15:27:35.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:35.544" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:35.544" status="PASS" starttime="20171030 15:27:35.543"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:35.545" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:35.545" status="PASS" starttime="20171030 15:27:35.545"></status>
</kw>
<status endtime="20171030 15:27:35.545" status="PASS" starttime="20171030 15:27:35.544"></status>
</kw>
<status endtime="20171030 15:27:35.545" status="PASS" starttime="20171030 15:27:35.543"></status>
</kw>
<status endtime="20171030 15:27:35.545" status="PASS" starttime="20171030 15:27:35.542"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:27:38.870" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171030 15:27:38.870" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:38.870" status="PASS" starttime="20171030 15:27:35.546"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:38.872" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:38.873" status="PASS" starttime="20171030 15:27:38.872"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:38.873" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:38.874" status="PASS" starttime="20171030 15:27:38.873"></status>
</kw>
<status endtime="20171030 15:27:38.874" status="PASS" starttime="20171030 15:27:38.873"></status>
</kw>
<status endtime="20171030 15:27:38.874" status="PASS" starttime="20171030 15:27:38.871"></status>
</kw>
<status endtime="20171030 15:27:38.874" status="PASS" starttime="20171030 15:27:38.871"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:27:38.874" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:27:38.874" status="PASS" starttime="20171030 15:27:38.874"></status>
</kw>
<msg timestamp="20171030 15:27:38.875" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:38.875" status="PASS" starttime="20171030 15:27:34.764"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:38.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:38.875" status="PASS" starttime="20171030 15:27:38.875"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:27:38.876" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:27:38.876" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:27:38.876" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20171030 15:27:38.876" status="PASS" starttime="20171030 15:27:38.876"></status>
</kw>
<msg timestamp="20171030 15:27:38.876" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20171030 15:27:38.876" status="PASS" starttime="20171030 15:27:34.764"></status>
</kw>
<msg timestamp="20171030 15:27:38.877" level="INFO">${power_state} = On</msg>
<status endtime="20171030 15:27:38.877" status="PASS" starttime="20171030 15:27:34.763"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20171030 15:27:38.877" status="PASS" starttime="20171030 15:27:38.877"></status>
</kw>
<status endtime="20171030 15:27:38.877" status="PASS" starttime="20171030 15:27:34.763"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:27:38.881" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:27:38.882" status="PASS" starttime="20171030 15:27:38.881"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:27:38.882" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:27:38.882" status="PASS" starttime="20171030 15:27:38.882"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:27:38.883" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:27:38.883" status="PASS" starttime="20171030 15:27:38.883"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:27:38.884" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:27:38.884" status="PASS" starttime="20171030 15:27:38.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:27:40.086" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:27:40.086" status="PASS" starttime="20171030 15:27:38.885"></status>
</kw>
<msg timestamp="20171030 15:27:40.087" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:27:40.087" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:40.087" status="PASS" starttime="20171030 15:27:38.884"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:27:40.087" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:40.087" status="PASS" starttime="20171030 15:27:40.087"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:40.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:40.088" status="PASS" starttime="20171030 15:27:40.088"></status>
</kw>
<status endtime="20171030 15:27:40.088" status="PASS" starttime="20171030 15:27:38.880"></status>
</kw>
<status endtime="20171030 15:27:40.088" status="PASS" starttime="20171030 15:27:38.880"></status>
</kw>
<status endtime="20171030 15:27:40.089" status="PASS" starttime="20171030 15:27:38.879"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:27:40.089" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20171030 15:27:40.089" status="PASS" starttime="20171030 15:27:40.089"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:40.091" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:40.091" status="PASS" starttime="20171030 15:27:40.091"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:40.092" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:40.092" status="PASS" starttime="20171030 15:27:40.092"></status>
</kw>
<status endtime="20171030 15:27:40.092" status="PASS" starttime="20171030 15:27:40.091"></status>
</kw>
<status endtime="20171030 15:27:40.093" status="PASS" starttime="20171030 15:27:40.090"></status>
</kw>
<status endtime="20171030 15:27:40.093" status="PASS" starttime="20171030 15:27:40.089"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:27:41.099" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171030 15:27:41.100" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:41.100" status="PASS" starttime="20171030 15:27:40.093"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:41.102" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:41.102" status="PASS" starttime="20171030 15:27:41.101"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:41.103" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:41.103" status="PASS" starttime="20171030 15:27:41.102"></status>
</kw>
<status endtime="20171030 15:27:41.103" status="PASS" starttime="20171030 15:27:41.102"></status>
</kw>
<status endtime="20171030 15:27:41.103" status="PASS" starttime="20171030 15:27:41.101"></status>
</kw>
<status endtime="20171030 15:27:41.103" status="PASS" starttime="20171030 15:27:41.100"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:27:41.103" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:27:41.104" status="PASS" starttime="20171030 15:27:41.103"></status>
</kw>
<msg timestamp="20171030 15:27:41.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:41.104" status="PASS" starttime="20171030 15:27:38.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:41.104" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:41.104" status="PASS" starttime="20171030 15:27:41.104"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:27:41.105" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:27:41.105" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:27:41.105" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20171030 15:27:41.105" status="PASS" starttime="20171030 15:27:41.105"></status>
</kw>
<msg timestamp="20171030 15:27:41.106" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20171030 15:27:41.106" status="PASS" starttime="20171030 15:27:38.878"></status>
</kw>
<msg timestamp="20171030 15:27:41.106" level="INFO">${host_state} = Running</msg>
<status endtime="20171030 15:27:41.106" status="PASS" starttime="20171030 15:27:38.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20171030 15:27:41.106" status="PASS" starttime="20171030 15:27:41.106"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:27:41.111" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:27:41.111" status="PASS" starttime="20171030 15:27:41.111"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:27:41.112" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:27:41.112" status="PASS" starttime="20171030 15:27:41.111"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:27:41.112" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:27:41.112" status="PASS" starttime="20171030 15:27:41.112"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:27:41.113" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:27:41.113" status="PASS" starttime="20171030 15:27:41.113"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:27:42.717" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:27:42.717" status="PASS" starttime="20171030 15:27:41.114"></status>
</kw>
<msg timestamp="20171030 15:27:42.717" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:27:42.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:42.717" status="PASS" starttime="20171030 15:27:41.113"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:27:42.718" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:42.718" status="PASS" starttime="20171030 15:27:42.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:42.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:42.719" status="PASS" starttime="20171030 15:27:42.718"></status>
</kw>
<status endtime="20171030 15:27:42.719" status="PASS" starttime="20171030 15:27:41.110"></status>
</kw>
<status endtime="20171030 15:27:42.719" status="PASS" starttime="20171030 15:27:41.110"></status>
</kw>
<status endtime="20171030 15:27:42.719" status="PASS" starttime="20171030 15:27:41.109"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:27:42.720" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20171030 15:27:42.720" status="PASS" starttime="20171030 15:27:42.719"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:42.722" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:27:42.722" status="PASS" starttime="20171030 15:27:42.721"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:42.723" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20171030 15:27:42.723" status="PASS" starttime="20171030 15:27:42.723"></status>
</kw>
<status endtime="20171030 15:27:42.723" status="PASS" starttime="20171030 15:27:42.722"></status>
</kw>
<status endtime="20171030 15:27:42.723" status="PASS" starttime="20171030 15:27:42.720"></status>
</kw>
<status endtime="20171030 15:27:42.723" status="PASS" starttime="20171030 15:27:42.720"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:27:48.531" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171030 15:27:48.532" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:48.532" status="PASS" starttime="20171030 15:27:42.724"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:48.534" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:48.534" status="PASS" starttime="20171030 15:27:48.533"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:48.535" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:48.535" status="PASS" starttime="20171030 15:27:48.534"></status>
</kw>
<status endtime="20171030 15:27:48.535" status="PASS" starttime="20171030 15:27:48.534"></status>
</kw>
<status endtime="20171030 15:27:48.535" status="PASS" starttime="20171030 15:27:48.533"></status>
</kw>
<status endtime="20171030 15:27:48.535" status="PASS" starttime="20171030 15:27:48.532"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:27:48.536" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:27:48.536" status="PASS" starttime="20171030 15:27:48.536"></status>
</kw>
<msg timestamp="20171030 15:27:48.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:48.536" status="PASS" starttime="20171030 15:27:41.108"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:48.537" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:48.537" status="PASS" starttime="20171030 15:27:48.536"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:27:48.537" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:27:48.537" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:27:48.538" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20171030 15:27:48.538" status="PASS" starttime="20171030 15:27:48.537"></status>
</kw>
<msg timestamp="20171030 15:27:48.538" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:27:48.538" status="PASS" starttime="20171030 15:27:41.107"></status>
</kw>
<msg timestamp="20171030 15:27:48.538" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20171030 15:27:48.538" status="PASS" starttime="20171030 15:27:41.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20171030 15:27:48.539" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:48.539" status="PASS" starttime="20171030 15:27:48.538"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:27:48.542" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:27:48.543" status="PASS" starttime="20171030 15:27:48.542"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:27:48.543" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:27:48.543" status="PASS" starttime="20171030 15:27:48.543"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:27:48.544" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:27:48.544" status="PASS" starttime="20171030 15:27:48.544"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:27:48.545" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:27:48.545" status="PASS" starttime="20171030 15:27:48.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:27:48.922" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:27:48.922" status="PASS" starttime="20171030 15:27:48.546"></status>
</kw>
<msg timestamp="20171030 15:27:48.922" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:27:48.922" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:48.922" status="PASS" starttime="20171030 15:27:48.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:27:48.923" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:48.923" status="PASS" starttime="20171030 15:27:48.923"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:48.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:48.924" status="PASS" starttime="20171030 15:27:48.923"></status>
</kw>
<status endtime="20171030 15:27:48.924" status="PASS" starttime="20171030 15:27:48.542"></status>
</kw>
<status endtime="20171030 15:27:48.924" status="PASS" starttime="20171030 15:27:48.541"></status>
</kw>
<status endtime="20171030 15:27:48.924" status="PASS" starttime="20171030 15:27:48.541"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:27:48.925" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20171030 15:27:48.925" status="PASS" starttime="20171030 15:27:48.924"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:48.927" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:48.927" status="PASS" starttime="20171030 15:27:48.926"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:48.928" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20171030 15:27:48.928" status="PASS" starttime="20171030 15:27:48.928"></status>
</kw>
<status endtime="20171030 15:27:48.928" status="PASS" starttime="20171030 15:27:48.927"></status>
</kw>
<status endtime="20171030 15:27:48.928" status="PASS" starttime="20171030 15:27:48.926"></status>
</kw>
<status endtime="20171030 15:27:48.928" status="PASS" starttime="20171030 15:27:48.925"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:27:52.080" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg timestamp="20171030 15:27:52.080" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:52.080" status="PASS" starttime="20171030 15:27:48.928"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:27:52.082" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:52.082" status="PASS" starttime="20171030 15:27:52.082"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:27:52.083" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:27:52.083" status="PASS" starttime="20171030 15:27:52.083"></status>
</kw>
<status endtime="20171030 15:27:52.083" status="PASS" starttime="20171030 15:27:52.082"></status>
</kw>
<status endtime="20171030 15:27:52.083" status="PASS" starttime="20171030 15:27:52.081"></status>
</kw>
<status endtime="20171030 15:27:52.084" status="PASS" starttime="20171030 15:27:52.081"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:27:52.084" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:27:52.084" status="PASS" starttime="20171030 15:27:52.084"></status>
</kw>
<msg timestamp="20171030 15:27:52.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:27:52.084" status="PASS" starttime="20171030 15:27:48.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:27:52.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:52.085" status="PASS" starttime="20171030 15:27:52.085"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:27:52.086" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:27:52.086" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:27:52.086" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete'}</msg>
<status endtime="20171030 15:27:52.086" status="PASS" starttime="20171030 15:27:52.085"></status>
</kw>
<msg timestamp="20171030 15:27:52.086" level="INFO">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status endtime="20171030 15:27:52.086" status="PASS" starttime="20171030 15:27:48.539"></status>
</kw>
<msg timestamp="20171030 15:27:52.086" level="INFO">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status endtime="20171030 15:27:52.086" status="PASS" starttime="20171030 15:27:48.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg timestamp="20171030 15:27:52.087" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:27:52.087" status="PASS" starttime="20171030 15:27:52.087"></status>
</kw>
<status endtime="20171030 15:27:52.087" status="PASS" starttime="20171030 15:27:41.107"></status>
</kw>
<status endtime="20171030 15:27:52.087" status="PASS" starttime="20171030 15:27:34.762"></status>
</kw>
<status endtime="20171030 15:27:52.087" status="PASS" starttime="20171030 15:24:57.898"></status>
</kw>
<status endtime="20171030 15:27:52.087" status="PASS" starttime="20171030 15:24:57.349"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
</arguments>
<msg timestamp="20171030 15:28:22.088" level="INFO">Slept 30 seconds</msg>
<status endtime="20171030 15:28:22.089" status="PASS" starttime="20171030 15:27:52.088"></status>
</kw>
<status endtime="20171030 15:28:22.089" status="PASS" starttime="20171030 15:18:28.183"></status>
</kw>
<status endtime="20171030 15:28:22.089" status="PASS" starttime="20171030 15:13:19.535"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20171030 15:28:22.091" status="PASS" starttime="20171030 15:28:22.091"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171030 15:28:22.102" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20171030 15:28:22.102" status="PASS" starttime="20171030 15:28:22.092"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171030 15:28:22.103" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/10510/obmc-robot/logs/20171030151318253884_TestsSecurityTestSsl/20171030151318253884_TestSSLConnection/</msg>
<status endtime="20171030 15:28:22.103" status="PASS" starttime="20171030 15:28:22.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20171030 15:28:22.104" status="PASS" starttime="20171030 15:28:22.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20171030 15:28:22.104" status="PASS" starttime="20171030 15:28:22.104"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:22.105" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs"&gt;/tmp/fspcibld/10510/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20171030 15:28:22.105" status="PASS" starttime="20171030 15:28:22.104"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:22.106" level="INFO">File '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20171030 15:28:22.106" status="PASS" starttime="20171030 15:28:22.105"></status>
</kw>
<msg timestamp="20171030 15:28:22.106" level="INFO">${exist} = True</msg>
<status endtime="20171030 15:28:22.106" status="PASS" starttime="20171030 15:28:22.105"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20171030 15:28:22.107" status="PASS" starttime="20171030 15:28:22.106"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20171030 15:28:22.108" status="PASS" starttime="20171030 15:28:22.107"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171030 15:28:22.109" level="INFO">${cur_time} = 2017-10-30 15:28:22:108734</msg>
<status endtime="20171030 15:28:22.109" status="PASS" starttime="20171030 15:28:22.108"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171030 15:28:22.110" level="INFO">${cur_time} = 20171030152822108734</msg>
<status endtime="20171030 15:28:22.110" status="PASS" starttime="20171030 15:28:22.109"></status>
</kw>
<msg timestamp="20171030 15:28:22.110" level="INFO">${cur_time} = 20171030152822108734</msg>
<status endtime="20171030 15:28:22.110" status="PASS" starttime="20171030 15:28:22.108"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:22.111" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:22.111" status="PASS" starttime="20171030 15:28:22.110"></status>
</kw>
<status endtime="20171030 15:28:22.111" status="PASS" starttime="20171030 15:28:22.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status endtime="20171030 15:28:22.112" status="PASS" starttime="20171030 15:28:22.111"></status>
</kw>
<status endtime="20171030 15:28:22.112" status="PASS" starttime="20171030 15:28:22.090"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171030 15:28:22.114" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:28:22.114" status="PASS" starttime="20171030 15:28:22.114"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171030 15:28:22.115" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:28:22.115" status="PASS" starttime="20171030 15:28:22.114"></status>
</kw>
<msg timestamp="20171030 15:28:22.115" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:28:22.115" status="PASS" starttime="20171030 15:28:22.113"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:22.116" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw'</msg>
<status endtime="20171030 15:28:22.116" status="PASS" starttime="20171030 15:28:22.116"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:28:22.117" status="PASS" starttime="20171030 15:28:22.117"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:28:22.138" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171030 15:28:22.160" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:28:22.160" level="INFO">${output} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:28:22.161" status="PASS" starttime="20171030 15:28:22.118"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20171030 15:28:22.177" status="PASS" starttime="20171030 15:28:22.173"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171030 15:28:22.179" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status endtime="20171030 15:28:22.179" status="PASS" starttime="20171030 15:28:22.177"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171030 15:28:22.181" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:28:22.181" status="PASS" starttime="20171030 15:28:22.181"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:22.183" level="INFO">${cmd_buf} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:28:22.183" status="PASS" starttime="20171030 15:28:22.181"></status>
</kw>
<msg timestamp="20171030 15:28:22.185" level="INFO">${search_string} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:28:22.185" status="PASS" starttime="20171030 15:28:22.116"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171030 15:28:22.187" level="INFO">${search_string} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status endtime="20171030 15:28:22.187" status="PASS" starttime="20171030 15:28:22.185"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:22.189" level="INFO">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20171030 15:28:22.189" status="PASS" starttime="20171030 15:28:22.187"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:28:22.190" status="PASS" starttime="20171030 15:28:22.190"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171030 15:28:22.195" level="INFO">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171030 15:28:22.206" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:28:22.206" level="INFO">${os_con_pid} = 202</msg>
<status endtime="20171030 15:28:22.206" status="PASS" starttime="20171030 15:28:22.190"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20171030 15:28:22.209" status="PASS" starttime="20171030 15:28:22.209"></status>
</kw>
<msg timestamp="20171030 15:28:22.210" level="INFO">${os_con_pid} = 202</msg>
<status endtime="20171030 15:28:22.210" status="PASS" starttime="20171030 15:28:22.115"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:22.211" level="INFO">${cmd_buf} = kill -9 202</msg>
<status endtime="20171030 15:28:22.211" status="PASS" starttime="20171030 15:28:22.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:28:22.213" status="PASS" starttime="20171030 15:28:22.213"></status>
</kw>
<status endtime="20171030 15:28:22.213" status="PASS" starttime="20171030 15:28:22.211"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20171030 15:28:22.219" level="INFO">Running command 'kill -9 202 2&gt;&amp;1'.</msg>
<status endtime="20171030 15:28:22.224" status="PASS" starttime="20171030 15:28:22.215"></status>
</kw>
<msg timestamp="20171030 15:28:22.225" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:28:22.225" level="INFO">${output} = </msg>
<status endtime="20171030 15:28:22.225" status="PASS" starttime="20171030 15:28:22.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20171030 15:28:22.229" status="PASS" starttime="20171030 15:28:22.228"></status>
</kw>
<status endtime="20171030 15:28:22.229" status="PASS" starttime="20171030 15:28:22.227"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:22.234" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:22.235" status="PASS" starttime="20171030 15:28:22.231"></status>
</kw>
<status endtime="20171030 15:28:22.235" status="PASS" starttime="20171030 15:28:22.230"></status>
</kw>
<status endtime="20171030 15:28:22.235" status="PASS" starttime="20171030 15:28:22.229"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:28:22.235" level="INFO">${output} = </msg>
<status endtime="20171030 15:28:22.235" status="PASS" starttime="20171030 15:28:22.235"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171030 15:28:22.236" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20171030 15:28:22.237" status="PASS" starttime="20171030 15:28:22.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status endtime="20171030 15:28:22.293" status="PASS" starttime="20171030 15:28:22.238"></status>
</kw>
<msg timestamp="20171030 15:28:22.295" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:28:22.376" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20171030 15:28:22.376" status="PASS" starttime="20171030 15:28:22.237"></status>
</kw>
<msg timestamp="20171030 15:28:22.466" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20171030 15:28:22.466" status="PASS" starttime="20171030 15:28:22.112"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20171030 15:28:22.555" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.94425|secure|Booting in non-secure mode.
  3.94426|secure|SecureROM valid - enabling functionality
  7.32625|ERRL|Dumping errors reported prior to registration
  7.35151|================================================
  7.35151|Error reported by ipmi (0x2500) PLID 0x9000005C
  7.35574|  Request to get power limit information failed
  7.35575|  ModuleId   0x04 IPMI::MOD_IPMIDCMI
  7.35575|  ReasonCode 0x250a IPMI::RC_DCMI_CMD_FAILED
  7.35972|  UserData1  BMC IPMI Completion code. : 0x00000000000000c3
  7.50181|  UserData2   : 0x0000000000000000
  7.50181|------------------------------------------------
  7.50181|  Callout type             : Procedure Callout
  7.50182|  Procedure                : EPUB_PRC_HB_CODE
  7.50183|  Priority                 : SRCI_PRIORITY_HIGH
  7.50183|------------------------------------------------
  7.50183|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
  7.50184|================================================
  8.33900|================================================
  8.34388|Error reported by htmgt (0x2600) PLID 0x9000005E
  8.34388|  &lt;none&gt;
  8.34389|  ModuleId   0x07 unknown
  8.34389|  ReasonCode 0x2616 unknown
  8.35219|  UserData1   : 0x0000000000000000
  8.35219|  UserData2   : 0x0000000000000000
  8.35245|------------------------------------------------
  8.35246|  Callout type             : Procedure Callout
  8.35246|  Procedure                : EPUB_PRC_LVL_SUPP
  8.35246|  Priority                 : SRCI_PRIORITY_MED
  8.35247|------------------------------------------------
  8.35247|  Callout type             : Procedure Callout
  8.35248|  Procedure                : EPUB_PRC_HB_CODE
  8.35248|  Priority                 : SRCI_PRIORITY_MED
  8.35249|------------------------------------------------
  8.35249|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
  8.35249|================================================
  9.59321|ISTEP  6. 5 - host_init_fsi
  9.70960|ISTEP  6. 6 - host_set_ipl_parms
  9.73183|ISTEP  6. 7 - host_discover_targets
 10.70355|HWAS|PRESENT&gt; DIMM[03]=FF77000000000000
 10.70356|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 10.72745|ISTEP  6. 8 - host_update_master_tpm
118.09272|SECURE|Security Access Bit&gt; 0x0000000000000000
118.09273|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
118.09285|ISTEP  6. 9 - host_gard
118.23972|ISTEP  6.10 - host_revert_sbe_mcs_setup
118.24562|ISTEP  6.11 - host_start_occ_xstop_handler
118.24875|ISTEP  6.12 - host_voltage_config
118.27981|ISTEP  7. 2 - mss_volt
118.85132|ISTEP  7. 3 - mss_freq
118.93661|ISTEP  7. 4 - mss_eff_config
121.63406|ISTEP  7. 5 - mss_attr_update
121.64487|ISTEP  8. 1 - host_slave_sbe_config
121.68706|ISTEP  8. 2 - host_setup_sbe
121.69271|ISTEP  8. 3 - host_cbs_start
121.71874|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
128.93660|ISTEP  8. 5 - host_attnlisten_proc
128.93745|ISTEP  8. 6 - host_p9_fbc_eff_config
128.94245|ISTEP  8. 7 - host_p9_eff_config_links
128.95286|ISTEP  8. 8 - proc_attr_update
128.95404|ISTEP  8. 9 - proc_chiplet_fabric_scominit
128.98230|ISTEP  8.10 - proc_xbus_scominit
130.53554|ISTEP  8.11 - proc_xbus_enable_ridi
130.53865|ISTEP  9. 1 - fabric_erepair
130.73160|ISTEP  9. 2 - fabric_io_dccal
131.40140|ISTEP  9. 3 - fabric_pre_trainadv
131.41120|ISTEP  9. 4 - fabric_io_run_training
131.53272|ISTEP  9. 5 - fabric_post_trainadv
131.53695|ISTEP  9. 6 - proc_smp_link_layer
131.54080|ISTEP  9. 7 - proc_fab_iovalid
131.57333|ISTEP  9. 8 - host_fbc_eff_config_aggregate
131.57905|ISTEP 10. 1 - proc_build_smp
131.69470|ISTEP 10. 2 - host_slave_sbe_update
132.50303|ISTEP 10. 3 - host_set_voltages
132.53995|ISTEP 10. 4 - proc_cen_ref_clk_enable
132.54575|ISTEP 10. 5 - proc_enable_osclite
132.54700|ISTEP 10. 6 - proc_chiplet_scominit
132.58662|ISTEP 10. 7 - proc_abus_scominit
132.59660|ISTEP 10. 8 - proc_obus_scominit
132.65772|ISTEP 10. 9 - proc_npu_scominit
132.68702|ISTEP 10.10 - proc_pcie_scominit
132.72843|ISTEP 10.11 - proc_scomoverride_chiplets
132.73006|ISTEP 10.12 - proc_chiplet_enable_ridi
132.73262|ISTEP 10.13 - host_rng_bist
132.73508|ISTEP 10.14 - host_update_redundant_tpm
132.82719|ISTEP 11. 1 - host_prd_hwreconfig
132.83439|ISTEP 11. 2 - cen_tp_chiplet_init1
132.83572|ISTEP 11. 3 - cen_pll_initf
132.83673|ISTEP 11. 4 - cen_pll_setup
132.83913|ISTEP 11. 5 - cen_tp_chiplet_init2
132.84083|ISTEP 11. 6 - cen_tp_arrayinit
132.84195|ISTEP 11. 7 - cen_tp_chiplet_init3
132.84316|ISTEP 11. 8 - cen_chiplet_init
132.84469|ISTEP 11. 9 - cen_arrayinit
132.84581|ISTEP 11.10 - cen_initf
132.84698|ISTEP 11.11 - cen_do_manual_inits
132.84814|ISTEP 11.12 - cen_startclocks
132.84963|ISTEP 11.13 - cen_scominits
132.85077|ISTEP 12. 1 - mss_getecid
132.85642|ISTEP 12. 2 - dmi_attr_update
132.85800|ISTEP 12. 3 - proc_dmi_scominit
132.85915|ISTEP 12. 4 - cen_dmi_scominit
132.86041|ISTEP 12. 5 - dmi_erepair
132.86147|ISTEP 12. 6 - dmi_io_dccal
132.86411|ISTEP 12. 7 - dmi_pre_trainadv
132.86515|ISTEP 12. 8 - dmi_io_run_training
132.86613|ISTEP 12. 9 - dmi_post_trainadv
132.86743|ISTEP 12.10 - proc_cen_framelock
132.86855|ISTEP 12.11 - host_startprd_dmi
132.87741|ISTEP 12.12 - host_attnlisten_memb
132.87898|ISTEP 12.13 - cen_set_inband_addr
132.88041|ISTEP 13. 1 - host_disable_memvolt
133.02241|ISTEP 13. 2 - mem_pll_reset
133.03662|ISTEP 13. 3 - mem_pll_initf
133.08186|ISTEP 13. 4 - mem_pll_setup
133.10742|ISTEP 13. 6 - mem_startclocks
133.12446|ISTEP 13. 7 - host_enable_memvolt
133.12567|ISTEP 13. 8 - mss_scominit
133.41158|ISTEP 13. 9 - mss_ddr_phy_reset
133.47932|ISTEP 13.10 - mss_draminit
133.73981|ISTEP 13.11 - mss_draminit_training
134.06753|ISTEP 13.12 - mss_draminit_trainadv
134.07177|ISTEP 13.13 - mss_draminit_mc
134.10553|ISTEP 14. 1 - mss_memdiag
144.48449|ISTEP 14. 2 - mss_thermal_init
144.50748|ISTEP 14. 3 - proc_pcie_config
144.52295|ISTEP 14. 4 - mss_power_cleanup
144.52462|ISTEP 14. 5 - proc_setup_bars
144.56367|ISTEP 14. 6 - proc_htm_setup
144.57448|ISTEP 14. 7 - proc_exit_cache_contained
144.58825|ISTEP 15. 1 - host_build_stop_image
145.53850|ISTEP 15. 2 - proc_set_pba_homer_bar
145.54544|ISTEP 15. 3 - host_establish_ex_chiplet
145.55238|ISTEP 15. 4 - host_start_stop_engine
145.65803|ISTEP 16. 1 - host_activate_master
  0.00707|ISTEP 16. 2 - host_activate_slave_cores
147.32710|ISTEP 16. 3 - host_secure_rng
147.35729|ISTEP 16. 4 - mss_scrub
147.38002|ISTEP 16. 5 - host_ipl_complete
147.39918|ISTEP 16. 6 - host_load_io_ppe
147.42336|ISTEP 18.11 - proc_tod_setup
147.56054|ISTEP 18.12 - proc_tod_init
147.57993|ISTEP 20. 1 - host_load_payload
147.86103|ISTEP 20. 2 - host_load_hdat
151.59900|ISTEP 21. 1 - host_runtime_setup
151.77031|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FD800000 EndAddress 0x80002017FDBFFFFF
151.77035|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x8 StartAddress 0x80002017FDC00000 EndAddress 0x80002017FDFFFFFF
151.77039|dw-Setting HDAT HB Reserved Memory Range: ibm,occ-common-area RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FF800000 EndAddress 0x80002017FFFFFFFF
152.16195|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-data RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD670000 EndAddress 0x80002017FD7FFFFF
153.72710|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-code-image RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD390000 EndAddress 0x80002017FD66FFFF
153.76191|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD380000 EndAddress 0x80002017FD38FFFF
153.76195|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD370000 EndAddress 0x80002017FD37FFFF
153.79355|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD360000 EndAddress 0x80002017FD36FFFF
153.79359|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD350000 EndAddress 0x80002017FD35FFFF
153.77048|dw-Setting HDAT HB Reserved Memory Range: ibm,secure-crypt-algo-code RangeType 0x3 RangeId 0x0 StartAddress 0x80002017FD340000 EndAddress 0x80002017FD34FFFF
154.05606|dw-Setting HDAT HB Reserved Memory Range: OCC RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD2A0000 EndAddress 0x80002017FD33FFFF
154.05254|dw-Setting HDAT HB Reserved Memory Range: WOFDATA RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD1A0000 EndAddress 0x80002017FD29FFFF
154.05710|dw-Setting HDAT HB Reserved Memory Range: HCODE RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD130000 EndAddress 0x80002017FD19FFFF
162.17598|htmgt|OCCs are now running in ACTIVE state
162.16841|ISTEP 21. 2 - host_verify_hdat
162.19844|ISTEP 21. 3 - host_start_payload
[  183.376650033,5] OPAL skiboot-v5.8-rc1-pd9d2012 starting...
[  183.376654051,7] initial console log level: memory 7, driver 5
[  183.376656127,6] CPU: P9 generation processor (max 4 threads/core)
[  183.376658073,7] CPU: Boot CPU PIR is 0x0824 PVR is 0x004e1200
[  183.376660166,7] CPU: Initial max PIR set to 0x7fff
[  183.378284138,7] OPAL table: 0x300e4740 .. 0x300e4c80, branch table: 0x30002000
[  183.378288182,7] Assigning physical memory map table for nimbus
[  183.378291002,7] Parsing HDAT...
[  183.378292364,5] SPIRA-S found.
[  183.378295249,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[  183.378500455,4] SENSORS: Duplicate sensor ID : 8
[  183.378660618,4] SENSORS: Duplicate sensor ID : 9
[  183.378662583,6] SP Family is openbmc
[  183.378668572,7] LPC: IOPATH chip id = 0
[  183.378670012,7] LPC: FW BAR       = f0000000
[  183.378671711,7] LPC: MEM BAR      = e0000000
[  183.378673276,7] LPC: IO BAR       = d0010000
[  183.378674828,7] LPC: Internal BAR = c0012000
[  183.378687894,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[  183.378690914,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[  183.379504735,5] UART: Using UART at 0x60300d00103f8
[  183.382114846,3] I2C: v2 found, but not supported. Parsing as v1
[  183.382453149,3] I2C: v2 found, but not supported. Parsing as v1
[  183.383144498,5] P9 DD2.00 detected
[  183.383204645,5] CHIP: Chip ID 0000 type: P9N DD2.0
[  183.383255174,5] P9 DD2.00 detected
[  183.383286673,5] CHIP: Chip ID 0008 type: P9N DD2.0
[  183.383628156,5] SLW: Enabling: stop0_lite
[  183.383676999,5] SLW: Enabling: stop0
[  183.383842147,5] PLAT: Using virtual UART
[  183.384074128,7] LPC: Routing irq 9, policy: 0 (r=1)
[  183.384076089,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[  183.384319050,5] PLAT: Detected Witherspoon platform
[  183.384374968,5] PLAT: Detected BMC platform OpenBMC
[  183.425440820,5] CPU: All 176 processors called in...
[    2.337245316,5] FLASH: Found system flash:  id:0
[    2.337349281,5] BT: Interface initialized, IO 0x00e4
[    2.337390915,7] LPC: Routing irq 10, policy: 0 (r=1)
[    2.337392629,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    5.081566038,5] NVRAM: Size is 576 KB
[    5.296601010,5] STB: secure and trusted boot not supported
[    5.296601254,7] LPC-MBOX: Sending BMC interrupt
[    5.297905234,5] OPAL: Using OPAL UART console
[    5.297938923,7] LPC: Routing irq 4, policy: 0 (r=1)
[    5.297940385,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[    5.302164161,5] VAS: Initialized chip 0
[    5.303201756,5] VAS: Initialized chip 8
[    5.304511650,5] Found ibm,power9-nx
[    5.305089344,3] NX0: DMA VAS MMIO BAR, 0x0006019100000000, xcfg 0x201105e
[    5.305244637,5] Found ibm,power9-nx
[    5.305286654,3] NX8: DMA VAS MMIO BAR, 0x0006219100000000, xcfg 0x201105e
[    8.019261565,3] FLASH: flash subpartition not found.
[    8.019311727,3] FLASH: Failed to parse subpart info for CAPP
[    8.021664543,3] CAPP: Error loading ucode lid. index=200d1
[    8.045902704,5] PCI: Resetting PHBs and training links...
[    9.142845068,5] PCI: Probing slots...
[    9.199228422,3] PCI: built-in device not found:  (loc: 100)
[    9.199296838,3] PCI: built-in device not found: GPU0 down (loc: 250)
[    9.199355860,3] PCI: built-in device not found: GPU0 (loc: 400)
[    9.199395196,3] PCI: built-in device not found: GPU1 down (loc: 258)
[    9.199433825,3] PCI: built-in device not found: GPU1 (loc: 500)
[    9.199478042,3] PCI: built-in device not found: GPU2 down (loc: 260)
[    9.199526654,3] PCI: built-in device not found: GPU2 (loc: 600)
[    9.199574594,3] PCI: built-in device not found:  (loc: 100)
[    9.199614722,3] PCI: built-in device not found: GPU3 down (loc: 220)
[    9.199670787,3] PCI: built-in device not found: GPU3 (loc: 300)
[    9.199709958,3] PCI: built-in device not found: GPU4 down (loc: 228)
[    9.199748509,3] PCI: built-in device not found: GPU4 (loc: 400)
[    9.199794988,3] PCI: built-in device not found: GPU5 down (loc: 268)
[    9.199835818,3] PCI: built-in device not found: GPU5 (loc: 500)
[    9.199887945,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    9.199962137,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    9.200023134,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[    9.200075235,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[    9.200125462,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[    9.200193627,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[    9.200255341,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    9.200309049,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[    9.200368581,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[    9.200447243,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[    9.200516165,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[    9.200596055,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[    9.200670990,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[    9.200758369,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 SLOT=GPU2 down 
[    9.200837860,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    9.200895997,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    9.200971606,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    9.201037666,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    9.201103488,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    9.201163922,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    9.201225591,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    9.201295599,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    9.201365958,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    9.201439252,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    9.201512297,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    9.201587571,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    9.201658126,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    9.201720845,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    9.201808556,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    9.201888693,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    9.201961604,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    9.202034365,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    9.202107328,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    9.202167193,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    9.202225431,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    9.202286500,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    9.202344547,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..08 
[    9.202406347,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..08 
[    9.202482932,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[    9.202545649,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..08 SLOT=GPU5 down 
[   18.381710535,5] IPMI: Resetting boot count on successful boot
[   18.381777365,5] INIT: Waiting for kernel...
[   18.381817224,5] INIT: 64-bit LE kernel discovered
[   18.381865199,5] OCC: All Chip Rdy after 0 ms
[   18.424740264,5] INIT: Starting kernel at 0x20011000, fdt at 0x30957c98 349535 bytes)
[   19.386664704,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c000000001440000
[    0.000000] Linux version 4.12.8-openpower1 (fspbld@gfwa610.aus.stglabs.ibm.com) (gcc version 6.3.0 (Buildroot 2017.05.2-00163-g8035745) ) #2 SMP Wed Aug 30 16:46:19 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x075c7afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6700-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e2700-0x2017ff6ebfff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a6700-0x2017ff6affff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69ce00-0x2017ff6a66ff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693500-0x2017ff69cdff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689c00-0x2017ff6934ff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff680300-0x2017ff689bff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff676a00-0x2017ff6802ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000001ff84b0000 s67992 r0 d63080 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404960
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1033784(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 217623296K/218103808K available (6208K kernel code, 1088K rwdata, 1968K rodata, 11456K init, 1693K bss, 480512K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: VP block alloc, for max VCPUs 176 use order 8
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000004] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000274] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000641] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001128] Console: colour dummy device 80x25
[    0.003733] console [tty0] enabled
[    0.003881] console [hvc0] enabled
[    0.003881] console [hvc0] enabled
[    0.004058] bootconsole [udbg0] disabled
[    0.004058] bootconsole [udbg0] disabled
[    0.004712] pid_max: default: 180224 minimum: 1408
[    0.006142] Security Framework initialized
[    0.009574] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.098965] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.166382] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.166628] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.172172] EEH: PowerNV platform initialized
[    0.172313] POWER9 performance monitor hardware support registered
[    0.173752] smp: Bringing up secondary CPUs ...
[    0.652891] smp: Brought up 8 nodes, 176 CPUs
[    0.653066] numa: Node 0 CPUs: 0-87
[    0.653158] numa: Node 8 CPUs: 88-175
[    0.653225] numa: Node 250 CPUs:
[    0.653288] numa: Node 251 CPUs:
[    0.653355] numa: Node 252 CPUs:
[    0.653417] numa: Node 253 CPUs:
[    0.653485] numa: Node 254 CPUs:
[    0.653557] numa: Node 255 CPUs:
[    0.671743] devtmpfs: initialized
[    0.686384] evm: security.capability
[    0.687137] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.687461] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.689208] NET: Registered protocol family 16
[    0.689952] cpuidle: using governor menu
[   23.088147821,3] LPC: Got LPC reset on chip 0x0 !
[   23.088151868,3] LPC[000]: Unknown LPC error Error address reg: 0x00000000
[   23.088162243,6] IPMI: dropping non severe PEL event
[   23.088282127,7] UART: IRQ functional !
[    0.749980] PCI: Probing PCI hardware
[    0.750102] PCI host bridge to bus 0000:00
[    0.750205] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.750301] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.750383] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.750559] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.750636] pci 0000:00:00.0: disabling bridge mem windows
[    0.750854] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.751006] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.751120] PCI host bridge to bus 0001:00
[    0.751162] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.751252] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.751333] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.751475] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.751552] pci 0001:00:00.0: disabling bridge mem windows
[    0.751969] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.752049] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    0.752317] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.752504] PCI host bridge to bus 0002:00
[    0.752592] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.752683] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.752764] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.752907] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.752984] pci 0002:00:00.0: disabling bridge mem windows
[    0.753380] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.753457] pci 0002:01:00.0: disabling bridge mem windows
[    0.753698] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.754042] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    0.754266] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.754417] PCI host bridge to bus 0003:00
[    0.754459] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.754549] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.754631] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.754775] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.754852] pci 0003:00:00.0: disabling bridge mem windows
[    0.755053] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.755209] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.755316] PCI host bridge to bus 0004:00
[    0.755358] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.755448] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.755529] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.755673] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.755751] pci 0004:00:00.0: disabling bridge mem windows
[    0.756160] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.756238] pci 0004:01:00.0: disabling bridge mem windows
[    0.756698] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.756777] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.757175] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.757254] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.757667] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.757746] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.758151] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    0.758230] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.758466] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.760136] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    0.769171] pci 0004:02:02.0: disabling bridge mem windows
[    0.769614] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    0.769788] pci 0004:02:0a.0: disabling bridge mem windows
[    0.770255] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    0.770467] pci 0004:02:0b.0: disabling bridge mem windows
[    0.770927] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    0.771120] pci 0004:02:0c.0: disabling bridge mem windows
[    0.771428] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.773137] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.773304] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    0.773612] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.773849] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.773990] random: fast init done
[    0.774054] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.774166] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.774410] PCI host bridge to bus 0005:00
[    0.774500] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.774711] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.774926] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.775152] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.775307] pci 0005:00:00.0: disabling bridge mem windows
[    0.775800] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.776367] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.776723] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.776947] PCI host bridge to bus 0030:00
[    0.776997] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.777211] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.777349] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.777525] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.777658] pci 0030:00:00.0: disabling bridge mem windows
[    0.777886] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.778081] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.778223] PCI host bridge to bus 0033:00
[    0.778297] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.778467] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.778629] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.778790] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.778934] pci 0033:00:00.0: disabling bridge mem windows
[    0.779162] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.779369] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.779517] PCI host bridge to bus 0034:00
[    0.779561] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.779715] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.779893] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.780076] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.780202] pci 0034:00:00.0: disabling bridge mem windows
[    0.780434] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.780624] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.780747] PCI host bridge to bus 0035:00
[    0.780821] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.780976] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.781146] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.781301] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.781445] pci 0035:00:00.0: disabling bridge mem windows
[    0.781806] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.781898] pci 0035:01:00.0: disabling bridge mem windows
[    0.782213] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.782544] pci 0035:02:08.0: Disabling memory decoding and releasing memory resources.
[    0.782666] pci 0035:02:08.0: disabling bridge mem windows
[    0.783055] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    0.783158] pci 0035:02:0d.0: disabling bridge mem windows
[    0.783443] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.784339] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.784497] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.784654] PCI host bridge to bus 0006:00
[    0.784699] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.784847] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.785036] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.785324] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.785626] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.785937] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.786250] pci 0006:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.786563] pci 0006:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.786980] PCI host bridge to bus 0007:00
[    0.787055] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.787193] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.787374] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.787679] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.787967] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.788271] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.788568] pci 0007:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.788854] pci 0007:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.789171] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.789615] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.789735] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.789876] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.790022] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.790152] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.790566] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.790949] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.797396] IOMMU table initialized, virtual merging enabled
[    0.797475] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.797717] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.797816] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.797910] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.798073] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.798212] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.798316] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.798447] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.798553] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.798697] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.798807] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.798923] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.799045] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.799445] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.799862] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.806261] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.806363] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.806480] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.806584] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.806721] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.807139] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.807208] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.807358] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.807517] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.807936] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.808128] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.808286] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.808429] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.808573] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.808684] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.808828] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.808967] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200850000-0x600c200851fff]
[    0.809097] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200860000-0x600c200861fff]
[    0.809237] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200870000-0x600c200871fff]
[    0.809376] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.809483] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.809596] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.809683] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.809809] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.809962] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.810062] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.810178] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.810300] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.810406] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.810518] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200000000-0x600c2000007ff]
[    0.810659] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200010000-0x600c20001ffff pref]
[    0.810791] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.810896] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.810970] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.811095] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.811215] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.811321] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.811431] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.811540] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.811652] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.811739] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.811867] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.812293] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.812676] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.819087] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.819183] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.819285] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.819364] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.819515] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.819638] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.819778] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.819886] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.819991] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.820416] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.820488] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.820644] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.820807] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.821200] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.827600] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.827698] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.827816] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.827909] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.828066] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.828227] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.828413] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.828570] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.828697] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.828894] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.829067] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.829218] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.829359] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.829535] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.829946] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.830358] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.836781] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.836877] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.836957] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.837082] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.837259] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.837699] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.837781] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.838235] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.838354] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.838757] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.838895] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.839034] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.839174] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.839575] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.839648] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.839765] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.840187] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.840267] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.840690] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.840764] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.840923] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.841087] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.841279] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.841454] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.841639] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.841828] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.842017] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.842179] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.842371] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.842550] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.842739] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.842927] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.843111] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.843277] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.843452] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.843635] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.843790] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.843972] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.844158] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.844340] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.844497] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.844687] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.844869] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.845049] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.845239] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.845352] pci 0006:00:00.1: Associating to existing PE d
[    0.845424] pci 0006:00:01.0: Associating to existing PE d
[    0.845548] pci 0006:00:01.1: Associating to existing PE d
[    0.845646] pci 0006:00:02.0: Associating to existing PE d
[    0.845746] pci 0006:00:02.1: Associating to existing PE d
[    0.845879] NPU6: Found 1 MMIO ATSD registers
[    0.845884] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.846065] pci 0007:00:00.1: Associating to existing PE d
[    0.846162] pci 0007:00:01.0: Associating to existing PE d
[    0.846260] pci 0007:00:01.1: Associating to existing PE d
[    0.846341] pci 0007:00:02.0: Associating to existing PE d
[    0.846445] pci 0007:00:02.1: Associating to existing PE d
[    0.846547] NPU7: Found 1 MMIO ATSD registers
[    0.850415] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.858931] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.859071] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.859126] vgaarb: loaded
[    0.859305] SCSI subsystem initialized
[    0.859520] usbcore: registered new interface driver usbfs
[    0.859600] usbcore: registered new interface driver hub
[    0.860168] usbcore: registered new device driver usb
[    0.860276] pps_core: LinuxPPS API ver. 1 registered
[    0.860370] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.860537] PTP clock support registered
[    0.861369] clocksource: Switched to clocksource timebase
[    0.864454] NET: Registered protocol family 2
[    0.864798] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.867248] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.867691] TCP: Hash tables configured (established 524288 bind 65536)
[    0.868007] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.868817] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.870058] NET: Registered protocol family 1
[    0.870153] pci 0001:00:00.0: enabling device (0105 -&gt; 0107)
[    0.870249] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    3.194378] Initialise system trusted keyrings
[    3.194565] workingset: timestamp_bits=54 max_order=22 bucket_order=0
[    3.199546] Key type asymmetric registered
[    3.199596] Asymmetric key parser 'x509' registered
[    3.199684] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    3.199808] io scheduler noop registered
[    3.200244] io scheduler cfq registered (default)
[    3.200299] io scheduler mq-deadline registered
[    3.200374] io scheduler kyber registered
[    3.202905] ipmi message handler version 39.2
[    3.202970] ipmi device interface
[    3.203102] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    5.605077] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    5.618645] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    5.618721] hvc0: No interrupts property, using OPAL event
[    5.619102] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[    5.619617] [drm] radeon kernel modesetting enabled.
[    5.629146] brd: module loaded
[    5.649433] loop: module loaded
[    5.649642] pci 0004:00:00.0: enabling device (0105 -&gt; 0107)
[    5.649734] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[    5.649834] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[    5.649912] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[    5.650184] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    5.660339] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    5.660420] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    5.661147] scsi host0: ahci
[    5.661409] scsi host1: ahci
[    5.661582] scsi host2: ahci
[    5.661756] scsi host3: ahci
[    5.661854] ata1: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000100 irq 88
[    5.661962] ata2: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000180 irq 88
[    5.662085] ata3: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000200 irq 88
[    5.662208] ata4: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000280 irq 88
[    5.662416] libphy: Fixed MDIO Bus: probed
[    5.662515] tg3.c:v3.137 (May 11, 2014)
[    5.662583] pci 0005:00:00.0: enabling device (0105 -&gt; 0107)
[    5.662662] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[    5.696618] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    5.697047] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    5.697128] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    5.697206] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    5.697271] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    5.697414] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[    5.728063] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    5.728511] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    5.728617] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    5.728771] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    5.728885] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    5.729158] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    5.729246] ehci-pci: EHCI PCI platform driver
[    5.729367] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    5.729473] ohci-pci: OHCI PCI platform driver
[    5.729643] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    5.729782] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    5.729970] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    5.730107] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    5.730890] hub 1-0:1.0: USB hub found
[    5.730947] hub 1-0:1.0: 4 ports detected
[    5.731141] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    5.731267] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    5.731409] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    5.731689] hub 2-0:1.0: USB hub found
[    5.731739] hub 2-0:1.0: 4 ports detected
[    5.732000] usbcore: registered new interface driver usb-storage
[    5.961329] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    5.961411] i2c /dev entries driver
[    5.961790] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.962120] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.962452] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.962790] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.963122] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    6.002491] ata3: SATA link down (SStatus 0 SControl 300)
[    6.008857] ata4: SATA link down (SStatus 0 SControl 300)
[   28.292063839,3] I2C: Request timeout !
[   28.293044891,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   28.296698554,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   28.300318750,3] I2C:  start_time=000000036749a0f5 end_time=0000000367e68895 (duration=00000000009ce7a0)
[   28.303967804,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    6.161276] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    6.161379] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    6.162245] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    6.162342] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    6.162595] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    6.162722] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    6.163250] a[   28.340207991,3] I2C: Request timeout !
[   28.340265229,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   28.340352644,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   28.340417241,3] I2C:  start_time=000000036a283d17 end_time=000000036ac527b4 (duration=00000000009cea9d)
[   28.340530287,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
ta1.00: configured for UDMA/133
[    6.204132] ata2.00: configured for UDMA/133
[    6.204539] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    6.205388] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   28.370036757,3] I2C: Request timeout !
[   28.370878522,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   28.372162094,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   28.374598854,3] I2C:  start_time=000000036bef665c end_time=000000036c8c4f06 (duration=00000000009ce8aa)
[   28.378245504,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   28.480839775,3] I2C: Request timeout !
[   28.480907289,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   28.480989655,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   28.481049346,3] I2C:  start_time=00000003728a1fdf end_time=000000037327078d (duration=00000000009ce7ae)
[   28.481137653,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   29.089903284,3] I2C: Request timeout !
[   29.090633830,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   29.093093308,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   29.093157998,3] I2C:  start_time=0000000379c167b2 end_time=000000037a5e4fdf (duration=00000000009ce82d)
[   29.093246218,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   29.194550924,3] I2C: Request timeout !
[   29.194618263,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   29.194710419,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   29.194772526,3] I2C:  start_time=000000037ffe3354 end_time=00000003809b1bb2 (duration=00000000009ce85e)
[   29.194865463,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    7.083053] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.083383] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.083724] at24 9-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.084055] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   29.312437469,3] I2C: Request timeout !
[   29.313060231,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   29.314535631,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   29.315305627,3] I2C:  start_time=000000038704feb7 end_time=0000000387a1e925 (duration=00000000009cea6e)
[   29.318176154,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   29.435550649,3] I2C: Request timeout !
[   29.435605649,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   29.435703793,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   29.435767790,3] I2C:  start_time=000000038e5b91c8 end_time=000000038ef878c2 (duration=00000000009ce6fa)
[   29.435861351,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   30.046665864,3] I2C: Request timeout !
[   30.046730470,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   30.046836184,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   30.046907706,3] I2C:  start_time=0000000395b227f3 end_time=00000003964f0fb7 (duration=00000000009ce7c4)
[   30.047011646,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   30.180043369,3] I2C: Request timeout !
[   30.180108077,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   30.180198692,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   30.180252660,3] I2C:  start_time=000000039da55646 end_time=000000039e423d93 (duration=00000000009ce74d)
[   30.180334061,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   30.294950737,3] I2C: Request timeout !
[   30.295010164,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   30.295113223,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   30.295175274,3] I2C:  start_time=00000003a47eae8e end_time=00000003a51b967b (duration=00000000009ce7ed)
[   30.295259070,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    8.317850] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    8.317910] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[    8.327342] usbcore: registered new interface driver usbhid
[    8.327394] usbhid: USB HID core driver
[    8.327786] ipip: IPv4 and MPLS over IPv4 tunneling driver
[    8.328095] NET: Registered protocol family 17
[    8.328152] Key type dns_resolver registered
[    8.328414] registered taskstats version 1
[    8.328449] Loading compiled-in X.509 certificates
[    8.335731] Loaded X.509 cert 'Build time autogenerated kernel key: 69b7bd2878a4bab90574770d0a2ffddecb40bd94'
[    8.340880] Key type encrypted registered
[    8.340930] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    8.341068] evm: HMAC attrs: 0x1
[    8.441433] rtc-opal opal-rtc: setting system clock to 2017-10-30 15:17:11 UTC (1509376631)
[    8.443898] Freeing unused kernel memory: 11456K
[    8.443962] This architecture does not have kernel memory protection.
[    8.463598] udevd[2947]: starting version 3.2.2
[    8.468256] udevd[2948]: starting eudev-3.2.2
[    8.517335] pci 0002:00:00.0: enabling device (0105 -&gt; 0107)
[    8.517411] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[    8.517482] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[    8.517675] [drm] platform has no IO space, trying MMIO
[    8.517730] [drm] VGA not enabled on entry, requesting chip POST
[    8.517805] [drm] Using P2A bridge for configuration
[    8.517858] [drm] AST 2500 detected
[    8.517902] [drm] Analog VGA only
[    8.517985] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    8.518129] [TTM] Zone  kernel: Available graphics memory: 108817376 kiB
[    8.518189] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    8.518248] [TTM] Initializing pool allocator
[    8.521005] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    8.522115] scsi 0:0:0:0: Attached scsi generic sg0 type 0
[    8.522234] scsi 1:0:0:0: Attached scsi generic sg1 type 0

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.5.1-p848cad7)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[J[1;47H0000000000000000 0000000000000000[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / 728d2189-0c67-4551-8857-40e2845ba17b][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic (recovery mode)[14;54H[0;7m   [10B[55D[m[enP5p1s0f0] Configuring with static address (ip: 9.3.86.161/24) Booting in 9 sec: [sda2] Ubuntu[K[24;13H8[24;33H[24;13H7[24;33H[24;13H6[24;33H[24;13H5[24;33H[24;13H4[24;33H[24;13H3[24;33H[24;13H2[24;33H[24;13H1[24;33H[24;10HUbuntu                 [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   70.791956] kexec_core: Starting new kernel
[   93.213320521,5] OPAL: Switch to big-endian OS
[   95.347454044,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c0000000014a0000
[    0.000000] Linux version 4.10.0-26-generic (buildd@bos01-ppc64el-012) (gcc version 6.3.0 20170406 (Ubuntu 6.3.0-12ubuntu2) ) #30-Ubuntu SMP Tue Jun 27 09:29:34 UTC 2017 (Ubuntu 4.10.0-26.30-generic 4.10.17)
[    0.000000] Found initrd at 0xc000000002d90000:0xc00000000533e9f2
[    0.000000] OPAL: Power8 LPC bus found, chip ID 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x077c7afd18500249
[    0.000000]   possible        = 0x7fffffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000110000000
[    0.000000] -----------------------------------------------------
[    0.000000] cma: Reserved 10656 MiB at 0x0000201563000000
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6300-0x1fffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x2017ffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e4d80-0x2017ff6eea7f]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6bb080-0x2017ff6c4d7f]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6b1380-0x2017ff6bb07f]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a7680-0x2017ff6b137f]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69d980-0x2017ff6a767f]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693c80-0x2017ff69d97f]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689f80-0x2017ff693c7f]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 3 pages/cpu @c000001ff5eb0000 s149272 r0 d47336 u196608
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404544
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: root=UUID=728d2189-0c67-4551-8857-40e2845ba17b ro powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 131072 bytes
[    0.000000] log_buf_len: 1048576 bytes
[    0.000000] early log buf free: 115232(87%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 206570240K/218103808K available (11712K kernel code, 1600K rwdata, 3352K rodata, 4416K init, 3045K bss, 621824K reserved, 10911744K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000420] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.001147] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001770] Console: colour dummy device 80x25
[    0.002327] console [hvc0] enabled
[    0.002327] console [hvc0] enabled
[    0.002625] bootconsole [udbg0] disabled
[    0.002625] bootconsole [udbg0] disabled
[    0.003252] mempolicy: Enabling automatic NUMA balancing. Configure with numa_balancing= or the kernel.numa_balancing sysctl
[    0.003379] pid_max: default: 180224 minimum: 1408
[    0.005474] Security Framework initialized
[    0.005509] Yama: becoming mindful.
[    0.005626] AppArmor: AppArmor initialized
[    0.009082] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.098829] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.151998] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.152126] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.155846] ftrace: allocating 30684 entries in 12 pages
[    0.174261] EEH: PowerNV platform initialized
[    0.174307] POWER9 performance monitor hardware support registered
[    0.176596] smp: Bringing up secondary CPUs ...
[    0.651365] smp: Brought up 8 nodes, 176 CPUs
[    0.651438] numa: Node 0 CPUs: 0-87
[    0.651477] numa: Node 8 CPUs: 88-175
[    0.651553] numa: Node 250 CPUs:
[    0.651599] numa: Node 251 CPUs:
[    0.651654] numa: Node 252 CPUs:
[    0.651699] numa: Node 253 CPUs:
[    0.651755] numa: Node 254 CPUs:
[    0.651818] numa: Node 255 CPUs:
[    0.664027] devtmpfs: initialized
[    0.725243] evm: security.selinux
[    0.725280] evm: security.SMACK64
[    0.725305] evm: security.SMACK64EXEC
[    0.725329] evm: security.SMACK64TRANSMUTE
[    0.725355] evm: security.SMACK64MMAP
[    0.725379] evm: security.ima
[    0.725404] evm: security.capability
[    0.726409] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.726585] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.732627] NET: Registered protocol family 16
[    0.750541] cpuidle: using governor ladder
[    0.774558] cpuidle: using governor menu
[    0.774820] pstore: using zlib compression
[    0.774866] pstore: Registered nvram as persistent store backend
[    0.845166] PCI: Probing PCI hardware
[    0.845290] PCI host bridge to bus 0000:00
[    0.845349] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.845473] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.845569] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.845955] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.846087] PCI host bridge to bus 0001:00
[    0.846142] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.846274] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.846390] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.847065] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.847366] PCI host bridge to bus 0002:00
[    0.847397] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.847537] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.847663] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.848314] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.848787] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.848962] PCI host bridge to bus 0003:00
[    0.849017] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.849152] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.849265] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.849618] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.849748] PCI host bridge to bus 0004:00
[    0.849797] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.849946] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.850060] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.851829] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.853379] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.855367] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.855540] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.855705] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.855854] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.856053] PCI host bridge to bus 0005:00
[    0.856095] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.856235] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.856367] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.857437] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.857658] PCI host bridge to bus 0030:00
[    0.857694] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.857828] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.857876] random: fast init done
[    0.857980] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.858382] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.858513] PCI host bridge to bus 0033:00
[    0.858572] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.858717] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.858838] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.859244] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.859389] PCI host bridge to bus 0034:00
[    0.859438] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.859544] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.859648] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.860052] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.860183] PCI host bridge to bus 0035:00
[    0.860236] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.860378] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.860500] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.861315] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.862273] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.863346] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.863505] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.863696] PCI host bridge to bus 0006:00
[    0.863738] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.863816] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.865041] PCI host bridge to bus 0007:00
[    0.865071] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.865177] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.866352] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.866722] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.866816] pci 0001:00:00.0: BAR 14: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.866919] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.867035] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.867149] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.867556] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.867954] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.872725] IOMMU table initialized, virtual merging enabled
[    0.872780] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.872853] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.872938] iommu: Adding device 0001:01:00.0 to group 0
[    0.872990] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.873058] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.873189] pci 0002:00:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.873302] pci 0002:01:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.873411] pci 0002:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.873501] pci 0002:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.873603] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.873715] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.873840] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.873941] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.874043] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.874434] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.874810] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.879591] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.879658] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.879762] iommu: Adding device 0002:02:00.0 to group 1
[    0.879825] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.879894] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.879995] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.880404] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.880460] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.880565] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.880727] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.881120] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.881292] pci 0004:00:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.881401] pci 0004:00:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.881522] pci 0004:01:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.881637] pci 0004:01:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.881716] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.881831] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.881915] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200842000-0x600c200843fff]
[    0.882034] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200844000-0x600c200845fff]
[    0.882153] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200846000-0x600c200847fff]
[    0.882276] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.882359] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.882446] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.882532] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.882622] pci 0004:02:02.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.882736] pci 0004:02:02.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.882833] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.882912] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.883008] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.883091] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.883185] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.883289] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.883393] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.883475] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.883561] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.883643] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.883727] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.883808] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.883895] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.883980] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.884064] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.884155] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.884241] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.884634] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.885003] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.889752] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.889822] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.889898] iommu: Adding device 0004:03:00.0 to group 2
[    0.889973] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.890052] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.890157] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.890257] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.890337] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.890423] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.890513] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.890931] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.890974] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.891076] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.891209] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.891632] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.896413] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.896489] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.896586] iommu: Adding device 0004:01:00.0 to group 3
[    0.896639] iommu: Adding device 0004:01:00.1 to group 3
[    0.896715] iommu: Adding device 0004:01:00.2 to group 3
[    0.896799] iommu: Adding device 0004:01:00.3 to group 3
[    0.896876] iommu: Adding device 0004:01:00.4 to group 3
[    0.896957] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.897043] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.897150] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.897271] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.897430] pci 0005:00:00.0: BAR 15: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.897546] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.897682] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.897811] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.897937] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.898063] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.898189] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.898321] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.898728] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.899092] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.903868] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.903932] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.904018] iommu: Adding device 0005:01:00.0 to group 4
[    0.904103] iommu: Adding device 0005:01:00.1 to group 4
[    0.904199] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.904269] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.904433] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.904833] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.904927] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.905323] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.905430] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.905826] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.905971] pci 0035:00:00.0: BAR 14: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.906073] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.906183] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.906574] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.906632] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.906723] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.907119] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.907197] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.907602] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.907658] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.907790] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.907945] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.908097] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.908246] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.908390] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.908535] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.908679] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.908821] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.908969] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.909117] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.909265] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.909405] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.909559] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.909708] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.909856] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.910006] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.910154] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.910296] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.910450] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.910602] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.910756] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.910903] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.911047] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.911197] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.911357] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.911442] pci 0006:00:00.1: Associating to existing PE d
[    0.911517] pci 0006:00:01.0: Associating to existing PE d
[    0.911579] pci 0006:00:01.1: Associating to existing PE d
[    0.911666] pci 0006:00:02.0: Associating to existing PE d
[    0.911749] pci 0006:00:02.1: Associating to existing PE d
[    0.911874] NPU6: Found 1 MMIO ATSD registers
[    0.911880] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.912028] pci 0007:00:00.1: Associating to existing PE d
[    0.912107] pci 0007:00:01.0: Associating to existing PE d
[    0.912181] pci 0007:00:01.1: Associating to existing PE d
[    0.912263] pci 0007:00:02.0: Associating to existing PE d
[    0.912340] pci 0007:00:02.1: Associating to existing PE d
[    0.912422] NPU7: Found 1 MMIO ATSD registers
[    0.916131] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.940538] HugeTLB registered 2 MB page size, pre-allocated 0 pages
[    0.940596] HugeTLB registered 1 GB page size, pre-allocated 0 pages
[    0.944609] SCSI subsystem initialized
[    0.945008] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.945136] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.945213] vgaarb: loaded
[    0.945294] usbcore: registered new interface driver usbfs
[    0.945343] usbcore: registered new interface driver hub
[    0.945866] usbcore: registered new device driver usb
[    0.945928] pps_core: LinuxPPS API ver. 1 registered
[    0.945961] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.946020] PTP clock support registered
[    0.946886] NetLabel: Initializing
[    0.946912] NetLabel:  domain hash size = 128
[    0.946945] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO
[    0.947009] NetLabel:  unlabeled traffic allowed by default
[    0.947889] clocksource: Switched to clocksource timebase
[    0.967408] VFS: Disk quotas dquot_6.6.0
[    0.967689] VFS: Dquot-cache hash table entries: 8192 (order 0, 65536 bytes)
[    0.968191] AppArmor: AppArmor Filesystem Enabled
[    0.971781] NET: Registered protocol family 2
[    0.972580] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.974343] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.974684] TCP: Hash tables configured (established 524288 bind 65536)
[    0.974771] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.975463] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.976734] NET: Registered protocol family 1
[    0.977042] Unpacking initramfs...
[    1.906518] Freeing initrd memory: 38528K
[    1.945109] audit: initializing netlink subsys (disabled)
[    1.945232] audit: type=2000 audit(1509376702.936:1): initialized
[    1.952392] Initialise system trusted keyrings
[    1.953068] workingset: timestamp_bits=38 max_order=22 bucket_order=0
[    1.956550] zbud: loaded
[    1.960915] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    1.961774] fuse init (API version 7.26)
[    1.966208] Key type asymmetric registered
[    1.966237] Asymmetric key parser 'x509' registered
[    1.966307] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 246)
[    1.966635] io scheduler noop registered
[    1.966675] io scheduler deadline registered
[    1.966737] io scheduler cfq registered (default)
[    1.969172] Using unsupported 1024x768 vga at 600c100010000, depth=32, pitch=4096
[    2.051856] Console: switching to colour frame buffer device 128x48
[    2.134303] fb0: Open Firmware frame buffer device on /pciex@600c3c0200000/pci@0/pci@0/vga@0
[    2.134670] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    2.134740] hvc0: No interrupts property, using OPAL event
[    2.135152] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
[    2.137515] Linux agpgart interface v0.103
[    2.152644] loop: module loaded
[    2.152999] libphy: Fixed MDIO Bus: probed
[    2.153030] tun: Universal TUN/TAP device driver, 1.6
[    2.153083] tun: (C) 1999-2004 Max Krasnyansky &lt;maxk@qualcomm.com&gt;
[    2.153236] PPP generic driver version 2.4.2
[    2.153405] VFIO - User Level meta-driver version: 0.3
[    2.154324] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    2.154395] ehci-pci: EHCI PCI platform driver
[    2.154454] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    2.154516] ohci-pci: OHCI PCI platform driver
[    2.154593] uhci_hcd: USB Universal Host Controller Interface driver
[    2.154791] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.154831] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    2.154959] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    2.155057] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    2.155639] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002
[    2.155682] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.155730] usb usb1: Product: xHCI Host Controller
[    2.155764] usb usb1: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.155809] usb usb1: SerialNumber: 0001:01:00.0
[    2.156013] hub 1-0:1.0: USB hub found
[    2.156051] hub 1-0:1.0: 4 ports detected
[    2.156366] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.156404] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    2.156474] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    2.156557] usb usb2: New USB device found, idVendor=1d6b, idProduct=0003
[    2.156599] usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.156647] usb usb2: Product: xHCI Host Controller
[    2.156681] usb usb2: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.156722] usb usb2: SerialNumber: 0001:01:00.0
[    2.156914] hub 2-0:1.0: USB hub found
[    2.156949] hub 2-0:1.0: 4 ports detected
[    2.157698] mousedev: PS/2 mouse device common for all mice
[    2.779855] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    2.779943] i2c /dev entries driver
[    2.782975] device-mapper: uevent: version 1.0.3
[    2.783338] device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
[    2.783432] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    2.796491] ledtrig-cpu: registered to indicate activity on CPUs
[    2.797557] NET: Registered protocol family 10
[    2.805008] Segment Routing with IPv6
[    2.805082] NET: Registered protocol family 17
[    2.805145] Key type dns_resolver registered
[    2.805447] registered taskstats version 1
[    2.805496] Loading compiled-in X.509 certificates
[    2.809624] Loaded X.509 cert 'Build time autogenerated kernel key: 5d3adc177bbb659f71409a29e976c45eb95b6207'
[    2.809920] zswap: loaded using pool lzo/zbud
[    2.812957] Key type big_key registered
[    2.812990] Key type trusted registered
[    2.815754] Key type encrypted registered
[    2.815792] AppArmor: AppArmor sha1 policy hashing enabled
[    2.815837] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    2.815942] evm: HMAC attrs: 0x1
[    3.871896] rtc-opal opal-rtc: setting system clock to 2017-10-30 15:18:24 UTC (1509376704)
[    3.872704] Unable to open file: /etc/keys/x509_ima.der (-2)
[    3.872709] Unable to open file: /etc/keys/x509_evm.der (-2)
[    3.873188] Freeing unused kernel memory: 4416K
[    3.873300] This architecture does not have kernel memory protection.
Loading, please wait...
starting version 232
[    4.089212] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    4.091686] tg3.c:v3.137 (May 11, 2014)
[    4.096291] [drm] Initialized
[    4.099356] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    4.099420] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    4.100498] scsi host0: ahci
[    4.100773] scsi host1: ahci
[    4.101009] scsi host2: ahci
[    4.101242] scsi host3: ahci
[    4.101384] ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
[    4.101485] ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
[    4.101594] ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
[    4.101695] ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
[    4.109083] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    4.109641] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    4.109721] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    4.109860] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    4.109949] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    4.119118] [drm] platform has no IO space, trying MMIO
[    4.119176] [drm] Using P2A bridge for configuration
[    4.119219] [drm] AST 2500 detected
[    4.119267] [drm] Analog VGA only
[    4.119318] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    4.119452] [TTM] Zone  kernel: Available graphics memory: 108795936 kiB
[    4.119525] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    4.119622] [TTM] Initializing pool allocator
[    4.119692] [TTM] Initializing DMA pool allocator
[    4.122691] fb: switching to astdrmfb from OFfb vga
[    4.122778] Console: switching to colour dummy device 80x25
[    4.126561] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    4.126995] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    4.126998] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    4.127000] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    4.127002] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    4.141145] Console: switching to colour frame buffer device 128x48
[    4.161292] ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[    4.187786] [drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
[    4.198780] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    4.324319] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    4.413951] ata3: SATA link down (SStatus 0 SControl 300)
[    4.414038] ata4: SATA link down (SStatus 0 SControl 300)
[    4.575791] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    4.575861] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    4.576749] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    4.576819] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    4.576902] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    4.576999] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    4.577504] ata2.00: configured for UDMA/133
[    4.577629] ata1.00: configured for UDMA/133
[    4.578318] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    4.624032] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    4.624070] sd 0:0:0:0: Attached scsi generic sg0 type 0
[    4.624133] sd 0:0:0:0: [sda] 4096-byte physical blocks
[    4.624200] sd 0:0:0:0: [sda] Write Protect is off
[    4.624295] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    4.624762] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    4.664449]  sda: sda1 sda2
[    4.664908] sd 0:0:0:0: [sda] Attached SCSI removable disk
[    4.715984] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    4.716045] sd 1:0:0:0: Attached scsi generic sg1 type 0
[    4.716100] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[    4.716162] sd 1:0:0:0: [sdb] Write Protect is off
[    4.716232] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    4.730085] sd 1:0:0:0: [sdb] Attached SCSI removable disk
Begin: Loading essential drivers ... done.
Begin: Running /scripts/init-premount ... done.
Begin: Mounting root file system ... Begin: Running /scripts/local-top ... done.
Begin: Running /scripts/local-premount ... done.
Begin: Will now check root file system ... fsck from util-linux 2.29
[/sbin/fsck.ext4 (1) -- /dev/sda2] fsck.ext4 -a -C0 /dev/sda2 
/dev/sda2: clean, 62079/61054976 files, 5060992/244188416 blocks
done.
[    5.178342] EXT4-fs (sda2): mounted filesystem with ordered data mode. Opts: (null)
done.
Begin: Running /scripts/local-bottom ... done.
Begin: Running /scripts/init-bottom ... done.
[    5.984298] ip_tables: (C) 2000-2006 Netfilter Core Team
[    6.025612] systemd[1]: systemd 232 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN)
[    6.026386] systemd[1]: Detected architecture ppc64-le.

Welcome to [1mUbuntu 17.04[0m!

[    6.039093] systemd[1]: Set hostname to &lt;w54L&gt;.
[    6.669118] systemd[1]: Started Forward Password Requests to Wall Directory Watch.
[[0;32m  OK  [0m] Started Forward Password Requests to Wall Directory Watch.
[    6.669527] systemd[1]: Listening on Journal Socket.
[[0;32m  OK  [0m] Listening on Journal Socket.
[    6.669931] systemd[1]: Created slice User and Session Slice.
[[0;32m  OK  [0m] Created slice User and Session Slice.
[    6.670161] systemd[1]: Listening on /dev/initctl Compatibility Named Pipe.
[[0;32m  OK  [0m] Listening on /dev/initctl Compatibility Named Pipe.
[    6.670363] systemd[1]: Reached target Remote File Systems.
[[0;32m  OK  [0m] Reached target Remote File Systems.
[    6.670906] systemd[1]: Set up automount Arbitrary Executable File Formats File System Automount Point.
[[0;32m  OK  [0m] Set up automount Arbitrary Executab\xe2\x80\xa6rmats File System Automount Point.
[    6.671171] systemd[1]: Listening on fsck to fsckd communication Socket.
[[0;32m  OK  [0m] Listening on fsck to fsckd communication Socket.
[[0;32m  OK  [0m] Listening on udev Kernel Socket.
[[0;32m  OK  [0m] Listening on Syslog Socket.
[[0;32m  OK  [0m] Reached target User and Group Name Lookups.
[[0;32m  OK  [0m] Listening on Journal Audit Socket.
[[0;32m  OK  [0m] Created slice System Slice.
[[0;32m  OK  [0m] Started Read required files in advance.
         Mounting POSIX Message Queue File System...
         Starting Load Kernel Modules...
[    6.697072] random: crng init done
         Starting Set the console keyboard layout...
[[0;32m  OK  [0m] Reached target Slices.
         Starting Create list of required st\xe2\x80\xa6ce nodes for the current kernel...
[[0;32m  OK  [0m] Created slice system-serial\x2dgetty.slice.
         Starting Uncomplicated firewall...
         Mounting Debug File System...
         Mounting Huge Pages File System...
         Starting Nameserver information manager...
[[0;32m  OK  [0m] Listening on Journal Socket (/dev/log).
         Starting Journal Service...
[[0;32m  OK  [0m] Listening on udev Control Socket.
[[0;32m  OK  [0m] Started Uncomplicated firewall.
[[0;32m  OK  [0m] Started Create list of required sta\xe2\x80\xa6vice nodes for the current kernel.
         Starting Create Static Device Nodes in /dev...
[[0;32m  OK  [0m] Started Load Kernel Modules.
         Mounting FUSE Control File System...
         Starting Apply Kernel Variables...
[[0;32m  OK  [0m] Started Journal Service.
[[0;32m  OK  [0m] Started Create Static Device Nodes in /dev.
         Starting udev Kernel Device Manager...
[[0;32m  OK  [0m] Started Apply Kernel Variables.
[[0;32m  OK  [0m] Mounted FUSE Control File System.
[[0;32m  OK  [0m] Mounted Huge Pages File System.
[[0;32m  OK  [0m] Mounted POSIX Message Queue File System.
[[0;32m  OK  [0m] Mounted Debug File System.
[[0;32m  OK  [0m] Started Nameserver information manager.
[[0;32m  OK  [0m] Reached target Network (Pre).
[[0;32m  OK  [0m] Started udev Kernel Device Manager.
         Starting Remount Root and Kernel File Systems...
[[0;32m  OK  [0m] Started Remount Root and Kernel File Systems.
         Starting udev Coldplug all Devices...
         Starting Flush Journal to Persistent Storage...
         Activating swap /swapfile...
         Starting Load/Save Random Seed...
[[0;32m  OK  [0m] Started Load/Save Random Seed.
[[0;32m  OK  [0m] Started Flush Journal to Persistent Storage.
[[0;32m  OK  [0m] Started Set the console keyboard layout.
[[0;32m  OK  [0m] Reached target Local File Systems (Pre).
[[0;32m  OK  [0m] Reached target Local File Systems.
         Starting Tell Plymouth To Write Out Runtime Data...
         Starting Set console font and keymap...
         Starting AppArmor initialization...
         Starting Create Volatile Files and Directories...
[[0;32m  OK  [0m] Started Set console font and keymap.
[[0;32m  OK  [0m] Started Tell Plymouth To Write Out Runtime Data.
[[0;32m  OK  [0m] Started Create Volatile Files and Directories.
         Starting Update UTMP about System Boot/Shutdown...
         Starting Network Time Synchronization...
[[0;32m  OK  [0m] Activated swap /swapfile.
[[0;32m  OK  [0m] Reached target Swap.
[[0;32m  OK  [0m] Started udev Coldplug all Devices.
[  109.040101819,3] I2C: Request timeout !
[  109.040279547,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  109.041033399,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[  109.041783741,3] I2C:  start_time=0000000d007f0bd2 end_time=0000000d00ce6257 (duration=00000000004f5685)
[  109.042560866,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Reached target Paths.
[[0;32m  OK  [0m] Reached target Encrypted Volumes.
[[0;32m  OK  [0m] Started AppArmor initialization.
         Starting Raise network interfaces...
[[0;32m  OK  [0m] Started ifup for enP5p1s0f0.
[[0;32m  OK  [0m] Started Update UTMP about System Boot/Shutdown.
[  109.112902205,3] I2C: Request timeout !
[  109.112957719,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  109.113039835,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[  109.113129026,3] I2C:  start_time=0000000d048843a6 end_time=0000000d05253b90 (duration=00000000009cf7ea)
[  109.113319957,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[  109.174449412,3] I2C: Request timeout !
[  109.174512533,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  109.174616597,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[  109.174685436,3] I2C:  start_time=0000000d083373f7 end_time=0000000d08d060f9 (duration=00000000009ced02)
[  109.174785434,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Found device /dev/hvc0.
[  109.223693737,3] I2C: Request timeout !
[  109.223766075,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  109.223870495,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[  109.223929670,3] I2C:  start_time=0000000d0b22e26a end_time=0000000d0bbfca8f (duration=00000000009ce825)
[  109.224013725,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Network Time Synchronization.
[[0;32m  OK  [0m] Reached target System Time Synchronized.
[[0;32m  OK  [0m] Reached target System Initialization.
[[0;32m  OK  [0m] Started Message of the Day.
[[0;32m  OK  [0m] Listening on D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Started Daily apt activities.
[[0;32m  OK  [0m] Listening on UUID daemon activation socket.
[[0;32m  OK  [0m] Reached target Sockets.
[[0;32m  OK  [0m] Reached target Basic Syst[  109.289134754,3] I2C: Request timeout !
[  109.289192188,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  109.289287322,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[  109.289344758,3] I2C:  start_time=0000000d0f096fa0 end_time=0000000d0f3b451a (duration=000000000031d57a)
[  109.289429079,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
em.
[[0;32m  OK  [0m] Started Regular background program processing daemon.
[[0;32m  OK  [0m] Started D-Bus System Message Bus.
         Starting Login Service...
         Starting Accounts Service...
         Starting System Logging Service...
[[0;32m  OK  [0m] Started Set the CPU Frequency Scaling governor.
         Starting LSB: daemon to balance interrupts for SMP systems...
[[0;32m  OK  [0m] Started Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Reached target Timers.
[  109.349793778,3] I2C: Request timeout !
[  109.350304337,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  109.351597507,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[  109.352847449,3] I2C:  start_time=0000000d12a70068 end_time=0000000d1343ebdf (duration=00000000009ceb77)
[  109.355302870,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started System Logging Service.
[[0;32m  OK  [0m] Started Login Service.
[  109.429815022,3] I2C: Request timeout !
[  109.429871941,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  109.429964858,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[  109.430041783,3] I2C:  start_time=0000000d176c08ca end_time=0000000d1808f345 (duration=00000000009cea7b)
[  109.430137761,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started LSB: daemon to balance interrupts for SMP systems.
[[0;32m  OK  [0m] Started Accounts Service.
         Starting Daily apt activities...
[[0;32m  OK  [0m] Started Daily apt activities.
[[0m[0;31m*     [0m] A start job is running for Raise network interfaces (10s / 5min 3s)[K[[0;1;31m*[0m[0;31m*    [0m] A start job is running for Raise network interfaces (10s / 5min 3s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A start job is running for Raise network interfaces (11s / 5min 3s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A start job is running for Raise network interfaces (11s / 5min 3s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A start job is running for Raise network interfaces (12s / 5min 3s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A start job is running for Raise network interfaces (13s / 5min 3s)[K[    [0;31m*[0;1;31m*[0m] A start job is running for Raise network interfaces (13s / 5min 3s)[K[     [0;31m*[0m] A start job is running for Raise network interfaces (14s / 5min 3s)[K[    [0;31m*[0;1;31m*[0m] A start job is running for Raise network interfaces (14s / 5min 3s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A start job is running for Raise network interfaces (15s / 5min 3s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A start job is running for Raise network interfaces (16s / 5min 3s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A start job is running for Raise network interfaces (16s / 5min 3s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A start job is running for Raise network interfaces (17s / 5min 3s)[K[[0;1;31m*[0m[0;31m*    [0m] A start job is running for Raise network interfaces (17s / 5min 3s)[K[[0m[0;31m*     [0m] A start job is running for Raise network interfaces (18s / 5min 3s)[K[[0;1;31m*[0m[0;31m*    [0m] A start job is running for Raise network interfaces (19s / 5min 3s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A start job is running for Raise network interfaces (19s / 5min 3s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A start job is running for Raise network interfaces (20s / 5min 3s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A start job is running for Raise network interfaces (20s / 5min 3s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A start job is running for Raise network interfaces (21s / 5min 3s)[K[    [0;31m*[0;1;31m*[0m] A start job is running for Raise network interfaces (21s / 5min 3s)[K[     [0;31m*[0m] A start job is running for Raise network interfaces (22s / 5min 3s)[K[    [0;31m*[0;1;31m*[0m] A start job is running for Raise network interfaces (23s / 5min 3s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A start job is running for Raise network interfaces (23s / 5min 3s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A start job is running for Raise network interfaces (24s / 5min 3s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A start job is running for Raise network interfaces (24s / 5min 3s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A start job is running for Raise network interfaces (25s / 5min 3s)[K[[0;1;31m*[0m[0;31m*    [0m] A start job is running for Raise network interfaces (26s / 5min 3s)[K[[0m[0;31m*     [0m] A start job is running for Raise network interfaces (26s / 5min 3s)[K[[0;1;31m*[0m[0;31m*    [0m] A start job is running for Raise network interfaces (27s / 5min 3s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A start job is running for Raise network interfaces (27s / 5min 3s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A start job is running for Raise network interfaces (28s / 5min 3s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A start job is running for Raise network interfaces (28s / 5min 3s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A start job is running for Raise network interfaces (29s / 5min 3s)[K[    [0;31m*[0;1;31m*[0m] A start job is running for Raise network interfaces (30s / 5min 3s)[K[     [0;31m*[0m] A start job is running for Raise network interfaces (30s / 5min 3s)[K[    [0;31m*[0;1;31m*[0m] A start job is running for Raise network interfaces (31s / 5min 3s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A start job is running for Raise network interfaces (31s / 5min 3s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A start job is running for Raise network interfaces (32s / 5min 3s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A start job is running for Raise network interfaces (33s / 5min 3s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A start job is running for Raise network interfaces (33s / 5min 3s)[K[[0;1;31m*[0m[0;31m*    [0m] A start job is running for Raise network interfaces (34s / 5min 3s)[K[[0m[0;31m*     [0m] A start job is running for Raise network interfaces (34s / 5min 3s)[K[[0;1;31m*[0m[0;31m*    [0m] A start job is running for Raise network interfaces (35s / 5min 3s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A start job is running for Raise network interfaces (35s / 5min 3s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A start job is running for Raise network interfaces (36s / 5min 3s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A start job is running for Raise network interfaces (37s / 5min 3s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A start job is running for Raise network interfaces (37s / 5min 3s)[K[    [0;31m*[0;1;31m*[0m] A start job is running for Raise network interfaces (38s / 5min 3s)[K[     [0;31m*[0m] A start job is running for Raise network interfaces (38s / 5min 3s)[K[    [0;31m*[0;1;31m*[0m] A start job is running for Raise network interfaces (39s / 5min 3s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A start job is running for Raise network interfaces (40s / 5min 3s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A start job is running for Raise network interfaces (40s / 5min 3s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A start job is running for Raise network interfaces (41s / 5min 3s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A start job is running for Raise network interfaces (41s / 5min 3s)[K[[0;1;31m*[0m[0;31m*    [0m] A start job is running for Raise network interfaces (42s / 5min 3s)[  149.338158726,5] IPMI: Soft shutdown requested
[K[[0m[0;31m*     [0m] A start job is running for Raise network interfaces (42s / 5min 3s)[K[[0;32m  OK  [0m] Stopped target Timers.
[[0;32m  OK  [0m] Stopped Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Stopped Daily apt activities.
[[0;32m  OK  [0m] Stopped target System Time Synchronized.
[[0;32m  OK  [0m] Stopped Message of the Day.
         Stopping LSB: daemon to balance interrupts for SMP systems...
         Stopping Regular background program processing daemon...
         Stopping D-Bus System Message Bus...
         Starting Set console scheme...
         Stopping System Logging Service...
         Stopping Login Service...
         Stopping ifup for enP5p1s0f0...
         Stopping Accounts Service...
[[0;32m  OK  [0m] Removed slice system-serial\x2dgetty.slice.
[[0;32m  OK  [0m] Stopped Regular background program processing daemon.
[[0;32m  OK  [0m] Stopped Login Service.
[[0;32m  OK  [0m] Stopped Accounts Service.
[[0;32m  OK  [0m] Stopped System Logging Service.
[[0;32m  OK  [0m] Stopped target User and Group Name Lookups.
[[0;32m  OK  [0m] Stopped LSB: daemon to balance interrupts for SMP systems.
[[0;32m  OK  [0m] Stopped target Remote File Systems.
[[0;32m  OK  [0m] Stopped D-Bus System Message Bus.
[[0;32m  OK  [0m] Stopped target Basic System.
[[0;32m  OK  [0m] Stopped target Sockets.
[[0;32m  OK  [0m] Closed Syslog Socket.
[[0;32m  OK  [0m] Closed UUID daemon activation socket.
[[0;32m  OK  [0m] Stopped target Slices.
[[0;32m  OK  [0m] Removed slice User and Session Slice.
[[0;32m  OK  [0m] Stopped target Paths.
[[0;32m  OK  [0m] Closed D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Stopped target System Initialization.
[[0;32m  OK  [0m] Stopped target Swap.
         Deactivating swap /swapfile...
         Stopping Network Time Synchronization...
         Stopping Load/Save Random Seed...
[[0;32m  OK  [0m] Stopped target Encrypted Volumes.
[[0;32m  OK  [0m] Stopped Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Stopped Forward Password Requests to Wall Directory Watch.
         Stopping Update UTMP about System Boot/Shutdown...
[[0;32m  OK  [0m] Stopped Load/Save Random Seed.
[[0;32m  OK  [0m] Stopped Update UTMP about System Boot/Shutdown.
[[0;32m  OK  [0m] Started Set console scheme.
[[0;32m  OK  [0m] Stopped Network Time Synchronization.
[[0;32m  OK  [0m] Stopped Create Volatile Files and Directories.
[[0;32m  OK  [0m] Deactivated swap /swapfile.
[[0;32m  OK  [0m] Reached target Unmount All Filesystems.
[[0;32m  OK  [0m] Stopped ifup for enP5p1s0f0.
[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (5s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (5s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (6s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (6s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (7s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (7s / 1min 30s)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (8s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (8s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (9s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (9s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (10s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (10s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (11s / 1min 30s)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (11s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (12s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (12s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (13s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (13s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (14s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (14s / 1min 30s)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (15s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (15s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (16s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (16s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (17s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (17s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (18s / 1min 30s)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (18s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (19s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (19s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (20s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (20s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (21s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (21s / 1min 30s)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (22s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (22s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (23s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (23s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (24s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (24s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (25s / 1min 30s)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (25s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (26s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (26s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (27s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (27s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (28s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (28s / 1min 30s)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (29s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (29s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (30s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (30s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (31s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (31s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (32s / 1min 30s)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (32s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (33s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (33s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (34s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (34s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (35s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (35s / 1min 30s)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (36s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (36s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (37s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (37s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (38s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (38s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (39s / 1min 30s)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (39s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (40s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (40s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (41s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (41s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (42s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (42s / 1min 30s)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (43s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (43s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (44s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (44s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (45s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (45s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (46s / 1min 30s)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (46s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (47s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (47s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (48s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (48s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (49s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (49s / 1min 30s)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (50s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (50s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (51s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (51s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (52s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (52s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (53s / 1min 30s)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (53s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (54s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (54s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (55s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (55s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (56s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (56s / 1min 30s)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (57s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (57s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (58s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (58s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (59s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (59s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (1min / 1min 30s)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (1min / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 1s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 1s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 2s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 2s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 3s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 3s / 1min 30s)[K[     [0;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 4s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 4s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 5s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 5s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 6s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 6s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 7s / 1min 30s)[K[[0m[0;31m*     [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 7s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 8s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 8s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 9s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise net\xe2\x80\xa6rk interfaces (1min 9s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 10s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 10s / 1min 30s)[K[     [0;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 11s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 11s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 12s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 12s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 13s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 13s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 14s / 1min 30s)[K[[0m[0;31m*     [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 14s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 15s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 15s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 16s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 16s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 17s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 17s / 1min 30s)[K[     [0;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 18s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 18s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 19s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 19s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 20s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 20s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 21s / 1min 30s)[K[[0m[0;31m*     [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 21s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 22s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 22s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 23s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 23s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 24s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 24s / 1min 30s)[K[     [0;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 25s / 1min 30s)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 25s / 1min 30s)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 26s / 1min 30s)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 26s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 27s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 27s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 28s / 1min 30s)[K[[0m[0;31m*     [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 28s / 1min 30s)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 29s / 1min 30s)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise net\xe2\x80\xa6k interfaces (1min 29s / 1min 30s)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (1min 30s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (1min 30s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (1min 31s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (1min 31s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (1min 32s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (1min 32s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (1min 33s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (1min 33s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (1min 34s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (1min 34s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (1min 35s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (1min 35s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (1min 36s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (1min 36s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (1min 37s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (1min 37s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (1min 38s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (1min 38s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (1min 39s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (1min 39s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (1min 40s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (1min 40s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (1min 41s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (1min 41s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (1min 42s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (1min 42s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (1min 43s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (1min 43s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (1min 44s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (1min 44s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (1min 45s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (1min 45s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (1min 46s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (1min 46s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (1min 47s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (1min 47s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (1min 48s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (1min 48s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (1min 49s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (1min 49s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (1min 50s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (1min 50s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (1min 51s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (1min 51s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (1min 52s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (1min 52s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (1min 53s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (1min 53s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (1min 54s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (1min 54s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (1min 55s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (1min 55s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (1min 56s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (1min 56s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (1min 57s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (1min 57s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (1min 58s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (1min 58s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (1min 59s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (1min 59s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (2min / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 1s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 1s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 2s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 2s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 3s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (2min 3s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 4s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 4s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 5s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 5s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 6s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 6s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (2min 7s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 7s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 8s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 8s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 9s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 9s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 10s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (2min 10s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 11s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 11s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 12s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 12s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 13s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 13s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (2min 14s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 14s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 15s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 15s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 16s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 16s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 17s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (2min 17s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 18s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 18s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 19s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 19s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 20s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 20s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (2min 21s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 21s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 22s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 22s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 23s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 23s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 24s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (2min 24s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 25s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 25s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 26s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 26s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 27s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 27s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (2min 28s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 28s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 29s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 29s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 30s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 30s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 31s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (2min 31s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 32s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 32s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 33s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 33s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 34s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 34s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (2min 35s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 35s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 36s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 36s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 37s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 37s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 38s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (2min 38s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 39s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 39s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 40s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 40s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 41s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 41s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (2min 42s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 42s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 43s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 43s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 44s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 44s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 45s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (2min 45s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 46s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 46s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 47s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 47s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 48s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 48s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (2min 49s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 49s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 50s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 50s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 51s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 51s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 52s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (2min 52s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 53s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 53s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 54s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 54s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 55s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 55s / 3min)[K[     [0;31m*[0m] A stop job is running for Raise network interfaces (2min 56s / 3min)[K[    [0;31m*[0;1;31m*[0m] A stop job is running for Raise network interfaces (2min 56s / 3min)[K[   [0;31m*[0;1;31m*[0m[0;31m*[0m] A stop job is running for Raise network interfaces (2min 57s / 3min)[K[  [0;31m*[0;1;31m*[0m[0;31m* [0m] A stop job is running for Raise network interfaces (2min 57s / 3min)[K[ [0;31m*[0;1;31m*[0m[0;31m*  [0m] A stop job is running for Raise network interfaces (2min 58s / 3min)[K[[0;31m*[0;1;31m*[0m[0;31m*   [0m] A stop job is running for Raise network interfaces (2min 58s / 3min)[K[[0;1;31m*[0m[0;31m*    [0m] A stop job is running for Raise network interfaces (2min 59s / 3min)[K[[0m[0;31m*     [0m] A stop job is running for Raise network interfaces (2min 59s / 3min)[K[[0;32m  OK  [0m] Stopped Raise network interfaces.
[[0;32m  OK  [0m] Stopped target Local File Systems.
[[0;32m  OK  [0m] Stopped target Local File Systems (Pre).
[[0;32m  OK  [0m] Stopped Create Static Device Nodes in /dev.
[[0;32m  OK  [0m] Stopped Remount Root and Kernel File Systems.
[[0;32m  OK  [0m] Stopped Apply Kernel Variables.
[[0;32m  OK  [0m] Stopped target Network (Pre).
[[0;32m  OK  [0m] Stopped Load Kernel Modules.
[[0;32m  OK  [0m] Reached target Shutdown.
[[0;32m  OK  [0m] Reached target Final Step.
         Starting Power-Off...


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.91414|secure|Booting in non-secure mode.
  3.91415|secure|SecureROM valid - enabling functionality
  4.92510|ERRL|Dumping errors reported prior to registration
  4.94675|================================================
  4.94675|Error reported by ipmi (0x2500) PLID 0x9000005C
  4.95106|  Request to get power limit information failed
  4.95106|  ModuleId   0x04 IPMI::MOD_IPMIDCMI
  4.95106|  ReasonCode 0x250a IPMI::RC_DCMI_CMD_FAILED
  4.95442|  UserData1  BMC IPMI Completion code. : 0x00000000000000c3
  4.98230|  UserData2   : 0x0000000000000000
  4.98231|------------------------------------------------
  4.98231|  Callout type             : Procedure Callout
  4.98232|  Procedure                : EPUB_PRC_HB_CODE
  4.98232|  Priority                 : SRCI_PRIORITY_HIGH
  4.98232|------------------------------------------------
  4.98233|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
  4.98233|================================================
  5.40084|================================================
  5.41058|Error reported by htmgt (0x2600) PLID 0x9000005E
  5.41058|  &lt;none&gt;
  5.41059|  ModuleId   0x07 unknown
  5.41059|  ReasonCode 0x2616 unknown
  5.42356|  UserData1   : 0x0000000000000000
  5.42356|  UserData2   : 0x0000000000000000
  5.42357|------------------------------------------------
  5.42357|  Callout type             : Procedure Callout
  5.42357|  Procedure                : EPUB_PRC_LVL_SUPP
  5.42358|  Priority                 : SRCI_PRIORITY_MED
  5.42358|------------------------------------------------
  5.42359|  Callout type             : Procedure Callout
  5.42359|  Procedure                : EPUB_PRC_HB_CODE
  5.42360|  Priority                 : SRCI_PRIORITY_MED
  5.42360|------------------------------------------------
  5.42360|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
  5.42361|================================================
  5.96683|ISTEP  6. 5 - host_init_fsi
  6.08688|ISTEP  6. 6 - host_set_ipl_parms
  6.11401|ISTEP  6. 7 - host_discover_targets
  6.65244|HWAS|PRESENT&gt; DIMM[03]=FF77000000000000
  6.65245|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  6.67176|ISTEP  6. 8 - host_update_master_tpm
 32.96297|SECURE|Security Access Bit&gt; 0x0000000000000000
 32.96297|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 32.96307|ISTEP  6. 9 - host_gard
 33.01445|ISTEP  6.10 - host_revert_sbe_mcs_setup
 33.02053|ISTEP  6.11 - host_start_occ_xstop_handler
 33.02197|ISTEP  6.12 - host_voltage_config
 33.05911|ISTEP  7. 2 - mss_volt
 33.34664|ISTEP  7. 3 - mss_freq
 33.43528|ISTEP  7. 4 - mss_eff_config
 36.04899|ISTEP  7. 5 - mss_attr_update
 36.05974|ISTEP  8. 1 - host_slave_sbe_config
 36.21336|ISTEP  8. 2 - host_setup_sbe
 36.21844|ISTEP  8. 3 - host_cbs_start
 36.24403|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 43.46030|ISTEP  8. 5 - host_attnlisten_proc
 43.46245|ISTEP  8. 6 - host_p9_fbc_eff_config
 43.46774|ISTEP  8. 7 - host_p9_eff_config_links
 43.47778|ISTEP  8. 8 - proc_attr_update
 43.47890|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 43.50752|ISTEP  8.10 - proc_xbus_scominit
 45.06129|ISTEP  8.11 - proc_xbus_enable_ridi
 45.06402|ISTEP  9. 1 - fabric_erepair
 45.22753|ISTEP  9. 2 - fabric_io_dccal
 45.93193|ISTEP  9. 3 - fabric_pre_trainadv
 45.94104|ISTEP  9. 4 - fabric_io_run_training
 46.06254|ISTEP  9. 5 - fabric_post_trainadv
 46.06680|ISTEP  9. 6 - proc_smp_link_layer
 46.07030|ISTEP  9. 7 - proc_fab_iovalid
 46.13120|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 46.13743|ISTEP 10. 1 - proc_build_smp
 46.25327|ISTEP 10. 2 - host_slave_sbe_update
 46.96561|ISTEP 10. 3 - host_set_voltages
 46.99611|ISTEP 10. 4 - proc_cen_ref_clk_enable
 46.99979|ISTEP 10. 5 - proc_enable_osclite
 47.00077|ISTEP 10. 6 - proc_chiplet_scominit
 47.03003|ISTEP 10. 7 - proc_abus_scominit
 47.04037|ISTEP 10. 8 - proc_obus_scominit
 47.10098|ISTEP 10. 9 - proc_npu_scominit
 47.12418|ISTEP 10.10 - proc_pcie_scominit
 47.16836|ISTEP 10.11 - proc_scomoverride_chiplets
 47.16986|ISTEP 10.12 - proc_chiplet_enable_ridi
 47.17230|ISTEP 10.13 - host_rng_bist
 47.17391|ISTEP 10.14 - host_update_redundant_tpm
 47.24096|ISTEP 11. 1 - host_prd_hwreconfig
 47.24920|ISTEP 11. 2 - cen_tp_chiplet_init1
 47.25073|ISTEP 11. 3 - cen_pll_initf
 47.25173|ISTEP 11. 4 - cen_pll_setup
 47.25273|ISTEP 11. 5 - cen_tp_chiplet_init2
 47.25400|ISTEP 11. 6 - cen_tp_arrayinit
 47.25506|ISTEP 11. 7 - cen_tp_chiplet_init3
 47.25629|ISTEP 11. 8 - cen_chiplet_init
 47.25770|ISTEP 11. 9 - cen_arrayinit
 47.25904|ISTEP 11.10 - cen_initf
 47.26009|ISTEP 11.11 - cen_do_manual_inits
 47.26137|ISTEP 11.12 - cen_startclocks
 47.27630|ISTEP 11.13 - cen_scominits
 47.27779|ISTEP 12. 1 - mss_getecid
 47.28231|ISTEP 12. 2 - dmi_attr_update
 47.28335|ISTEP 12. 3 - proc_dmi_scominit
 47.28531|ISTEP 12. 4 - cen_dmi_scominit
 47.28833|ISTEP 12. 5 - dmi_erepair
 47.28935|ISTEP 12. 6 - dmi_io_dccal
 47.29040|ISTEP 12. 7 - dmi_pre_trainadv
 47.29141|ISTEP 12. 8 - dmi_io_run_training
 47.29327|ISTEP 12. 9 - dmi_post_trainadv
 47.29434|ISTEP 12.10 - proc_cen_framelock
 47.29538|ISTEP 12.11 - host_startprd_dmi
 47.29645|ISTEP 12.12 - host_attnlisten_memb
 47.29856|ISTEP 12.13 - cen_set_inband_addr
 47.30132|ISTEP 13. 1 - host_disable_memvolt
 47.44082|ISTEP 13. 2 - mem_pll_reset
 47.45515|ISTEP 13. 3 - mem_pll_initf
 47.49935|ISTEP 13. 4 - mem_pll_setup
 47.52470|ISTEP 13. 6 - mem_startclocks
 47.54120|ISTEP 13. 7 - host_enable_memvolt
 47.54374|ISTEP 13. 8 - mss_scominit
 47.83518|ISTEP 13. 9 - mss_ddr_phy_reset
 47.90182|ISTEP 13.10 - mss_draminit
 48.14501|ISTEP 13.11 - mss_draminit_training
 48.47534|ISTEP 13.12 - mss_draminit_trainadv
 48.47713|ISTEP 13.13 - mss_draminit_mc
 48.50738|ISTEP 14. 1 - mss_memdiag
 58.92593|ISTEP 14. 2 - mss_thermal_init
 58.94057|ISTEP 14. 3 - proc_pcie_config
 58.95594|ISTEP 14. 4 - mss_power_cleanup
 58.95770|ISTEP 14. 5 - proc_setup_bars
 58.99894|ISTEP 14. 6 - proc_htm_setup
 59.00992|ISTEP 14. 7 - proc_exit_cache_contained
 59.02388|ISTEP 15. 1 - host_build_stop_image
 59.98012|ISTEP 15. 2 - proc_set_pba_homer_bar
 59.98384|ISTEP 15. 3 - host_establish_ex_chiplet
 59.99070|ISTEP 15. 4 - host_start_stop_engine
 60.09430|ISTEP 16. 1 - host_activate_master
  0.00807|ISTEP 16. 2 - host_activate_slave_cores
 61.79240|ISTEP 16. 3 - host_secure_rng
 61.80533|ISTEP 16. 4 - mss_scrub
 61.80733|ISTEP 16. 5 - host_ipl_complete
 61.86020|ISTEP 16. 6 - host_load_io_ppe
 61.85524|ISTEP 18.11 - proc_tod_setup
 61.94553|ISTEP 18.12 - proc_tod_init
 61.99032|ISTEP 20. 1 - host_load_payload
 62.26966|ISTEP 20. 2 - host_load_hdat
 65.99206|ISTEP 21. 1 - host_runtime_setup
 66.18731|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FD800000 EndAddress 0x80002017FDBFFFFF
 66.18735|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x8 StartAddress 0x80002017FDC00000 EndAddress 0x80002017FDFFFFFF
 66.18739|dw-Setting HDAT HB Reserved Memory Range: ibm,occ-common-area RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FF800000 EndAddress 0x80002017FFFFFFFF
 66.62361|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-data RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD670000 EndAddress 0x80002017FD7FFFFF
 67.94639|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-code-image RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD390000 EndAddress 0x80002017FD66FFFF
 67.95672|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD380000 EndAddress 0x80002017FD38FFFF
 67.95676|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD370000 EndAddress 0x80002017FD37FFFF
 67.96950|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD360000 EndAddress 0x80002017FD36FFFF
 67.96954|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD350000 EndAddress 0x80002017FD35FFFF
 67.97073|dw-Setting HDAT HB Reserved Memory Range: ibm,secure-crypt-algo-code RangeType 0x3 RangeId 0x0 StartAddress 0x80002017FD340000 EndAddress 0x80002017FD34FFFF
 68.24786|dw-Setting HDAT HB Reserved Memory Range: OCC RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD2A0000 EndAddress 0x80002017FD33FFFF
 68.25224|dw-Setting HDAT HB Reserved Memory Range: WOFDATA RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD1A0000 EndAddress 0x80002017FD29FFFF
 68.25403|dw-Setting HDAT HB Reserved Memory Range: HCODE RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD130000 EndAddress 0x80002017FD19FFFF
 75.69037|htmgt|OCCs are now running in ACTIVE state
 75.72716|ISTEP 21. 2 - host_verify_hdat
 75.69112|ISTEP 21. 3 - host_start_payload
[   96.027706968,5] OPAL skiboot-v5.8-rc1-pd9d2012 starting...
[   96.027710928,7] initial console log level: memory 7, driver 5
[   96.027712983,6] CPU: P9 generation processor (max 4 threads/core)
[   96.027714914,7] CPU: Boot CPU PIR is 0x084c PVR is 0x004e1200
[   96.027716949,7] CPU: Initial max PIR set to 0x7fff
[   96.029347581,7] OPAL table: 0x300e4740 .. 0x300e4c80, branch table: 0x30002000
[   96.029351665,7] Assigning physical memory map table for nimbus
[   96.029354687,7] Parsing HDAT...
[   96.029356114,5] SPIRA-S found.
[   96.029359076,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[   96.029564759,4] SENSORS: Duplicate sensor ID : 8
[   96.029725591,4] SENSORS: Duplicate sensor ID : 9
[   96.029727489,6] SP Family is openbmc
[   96.029733371,7] LPC: IOPATH chip id = 0
[   96.029734791,7] LPC: FW BAR       = f0000000
[   96.029736371,7] LPC: MEM BAR      = e0000000
[   96.029737886,7] LPC: IO BAR       = d0010000
[   96.029739392,7] LPC: Internal BAR = c0012000
[   96.029752431,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[   96.029755443,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[   96.030572893,5] UART: Using UART at 0x60300d00103f8
[   96.033179743,3] I2C: v2 found, but not supported. Parsing as v1
[   96.033524849,3] I2C: v2 found, but not supported. Parsing as v1
[   96.034221129,5] P9 DD2.00 detected
[   96.034299235,5] CHIP: Chip ID 0000 type: P9N DD2.0
[   96.034350188,5] P9 DD2.00 detected
[   96.034381846,5] CHIP: Chip ID 0008 type: P9N DD2.0
[   96.034722615,5] SLW: Enabling: stop0_lite
[   96.034786840,5] SLW: Enabling: stop0
[   96.034949534,5] PLAT: Using virtual UART
[   96.035178328,7] LPC: Routing irq 9, policy: 0 (r=1)
[   96.035180249,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[   96.035408779,5] PLAT: Detected Witherspoon platform
[   96.035470617,5] PLAT: Detected BMC platform OpenBMC
[   96.075901281,5] CPU: All 176 processors called in...
[   96.070046723,7] XIVE[CPU 005b] Initialized TMA (VP: 0/db W01=0000000000000000)
[    2.279965753,5] FLASH: Found system flash:  id:0
[    2.280064177,5] BT: Interface initialized, IO 0x00e4
[    2.280117860,7] LPC: Routing irq 10, policy: 0 (r=1)
[    2.280119562,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    4.024295768,5] NVRAM: Size is 576 KB
[    4.239006979,5] STB: secure and trusted boot not supported
[    4.239006846,7] LPC-MBOX: Sending BMC interrupt
[    4.239614466,5] OPAL: Using OPAL UART console
[    4.239659902,7] LPC: Routing irq 4, policy: 0 (r=1)
[    4.239661435,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[    4.241078636,5] VAS: Initialized chip 0
[    4.242090446,5] VAS: Initialized chip 8
[    4.242293125,5] Found ibm,power9-nx
[    4.242345295,3] NX0: DMA VAS MMIO BAR, 0x0006019100000000, xcfg 0x201105e
[    4.242485223,5] Found ibm,power9-nx
[    4.242527274,3] NX8: DMA VAS MMIO BAR, 0x0006219100000000, xcfg 0x201105e
[    6.473091888,3] FLASH: flash subpartition not found.
[    6.473157342,3] FLASH: Failed to parse subpart info for CAPP
[    6.475494344,3] CAPP: Error loading ucode lid. index=200d1
[    6.499656005,5] PCI: Resetting PHBs and training links...
[    8.086006606,5] PCI: Probing slots...
[    8.142395824,3] PCI: built-in device not found:  (loc: 100)
[    8.142478437,3] PCI: built-in device not found: GPU0 down (loc: 250)
[    8.142531746,3] PCI: built-in device not found: GPU0 (loc: 400)
[    8.142572910,3] PCI: built-in device not found: GPU1 down (loc: 258)
[    8.142613156,3] PCI: built-in device not found: GPU1 (loc: 500)
[    8.142654108,3] PCI: built-in device not found: GPU2 down (loc: 260)
[    8.142696930,3] PCI: built-in device not found: GPU2 (loc: 600)
[    8.142749000,3] PCI: built-in device not found:  (loc: 100)
[    8.142790885,3] PCI: built-in device not found: GPU3 down (loc: 220)
[    8.142836141,3] PCI: built-in device not found: GPU3 (loc: 300)
[    8.142876895,3] PCI: built-in device not found: GPU4 down (loc: 228)
[    8.142927036,3] PCI: built-in device not found: GPU4 (loc: 400)
[    8.142965373,3] PCI: built-in device not found: GPU5 down (loc: 268)
[    8.143003204,3] PCI: built-in device not found: GPU5 (loc: 500)
[    8.143049814,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.143120582,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.143180564,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[    8.143249079,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[    8.143308305,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[    8.143377693,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[    8.143448500,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.143505751,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[    8.143564758,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[    8.143647523,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[    8.143725222,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[    8.143806411,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[    8.143887408,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[    8.143963291,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 SLOT=GPU2 down 
[    8.144032144,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.144111822,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.144166576,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.144229038,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.144291320,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.144361603,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    8.144424646,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    8.144496162,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    8.144567734,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    8.144626772,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    8.144701128,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    8.144775474,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    8.144867840,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    8.144934221,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    8.144993123,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    8.145064650,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    8.145136379,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    8.145213039,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    8.145277456,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    8.145331213,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.145390979,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.145448672,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.145508265,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..08 
[    8.145569099,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..08 
[    8.145642042,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[    8.145701211,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..08 SLOT=GPU5 down 
[   17.267734448,5] IPMI: Resetting boot count on successful boot
[   17.267798172,5] INIT: Waiting for kernel...
[   17.267845238,5] INIT: 64-bit LE kernel discovered
[   17.267894959,5] OCC: All Chip Rdy after 0 ms
[   17.310144344,5] INIT: Starting kernel at 0x20011000, fdt at 0x30957c98 349535 bytes)
[   18.272326133,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c000000001440000
[    0.000000] Linux version 4.12.8-openpower1 (fspbld@gfwa610.aus.stglabs.ibm.com) (gcc version 6.3.0 (Buildroot 2017.05.2-00163-g8035745) ) #2 SMP Wed Aug 30 16:46:19 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x075c7afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6700-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e2700-0x2017ff6ebfff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a6700-0x2017ff6affff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69ce00-0x2017ff6a66ff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693500-0x2017ff69cdff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689c00-0x2017ff6934ff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff680300-0x2017ff689bff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff676a00-0x2017ff6802ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000001ff84b0000 s67992 r0 d63080 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404960
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1033784(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 217623296K/218103808K available (6208K kernel code, 1088K rwdata, 1968K rodata, 11456K init, 1693K bss, 480512K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: VP block alloc, for max VCPUs 176 use order 8
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000004] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000219] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000593] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001081] Console: colour dummy device 80x25
[    0.003690] console [tty0] enabled
[    0.003819] console [hvc0] enabled
[    0.003819] console [hvc0] enabled
[    0.004007] bootconsole [udbg0] disabled
[    0.004007] bootconsole [udbg0] disabled
[    0.004661] pid_max: default: 180224 minimum: 1408
[    0.006085] Security Framework initialized
[    0.009473] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.098662] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.164212] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.164441] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.170014] EEH: PowerNV platform initialized
[    0.170123] POWER9 performance monitor hardware support registered
[    0.171589] smp: Bringing up secondary CPUs ...
[    0.652750] smp: Brought up 8 nodes, 176 CPUs
[    0.652929] numa: Node 0 CPUs: 0-87
[    0.653011] numa: Node 8 CPUs: 88-175
[    0.653082] numa: Node 250 CPUs:
[    0.653159] numa: Node 251 CPUs:
[    0.653221] numa: Node 252 CPUs:
[    0.653327] numa: Node 253 CPUs:
[    0.653393] numa: Node 254 CPUs:
[    0.653464] numa: Node 255 CPUs:
[    0.671608] devtmpfs: initialized
[    0.686187] evm: security.capability
[    0.686911] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.687217] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.688993] NET: Registered protocol family 16
[    0.689692] cpuidle: using governor menu
[   21.473373745,3] LPC: Got LPC reset on chip 0x0 !
[   21.473377813,3] LPC[000]: Unknown LPC error Error address reg: 0x00000000
[   21.473387976,6] IPMI: dropping non severe PEL event
[   21.473517333,7] UART: IRQ functional !
[    0.749777] PCI: Probing PCI hardware
[    0.749903] PCI host bridge to bus 0000:00
[    0.749982] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.750141] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.750298] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.750493] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.750588] pci 0000:00:00.0: disabling bridge mem windows
[    0.750822] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.751001] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.751153] PCI host bridge to bus 0001:00
[    0.751212] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.751400] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.751549] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.751734] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.751826] pci 0001:00:00.0: disabling bridge mem windows
[    0.752290] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.752390] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    0.752756] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.752941] PCI host bridge to bus 0002:00
[    0.753010] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.753182] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.753302] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.753491] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.753634] pci 0002:00:00.0: disabling bridge mem windows
[    0.754075] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.754192] pci 0002:01:00.0: disabling bridge mem windows
[    0.754479] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.754858] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    0.755097] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.755285] PCI host bridge to bus 0003:00
[    0.755334] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.755489] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.755618] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.755817] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.755911] pci 0003:00:00.0: disabling bridge mem windows
[    0.756146] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.756318] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.756463] PCI host bridge to bus 0004:00
[    0.756523] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.756707] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.756840] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.757032] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.757135] pci 0004:00:00.0: disabling bridge mem windows
[    0.757610] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.757716] pci 0004:01:00.0: disabling bridge mem windows
[    0.758220] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.758310] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.758763] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.758905] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.759027] random: fast init done
[    0.759433] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.759528] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.759989] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    0.760084] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.760341] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.760832] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    0.760923] pci 0004:02:02.0: disabling bridge mem windows
[    0.761384] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    0.761501] pci 0004:02:0a.0: disabling bridge mem windows
[    0.761941] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    0.762040] pci 0004:02:0b.0: disabling bridge mem windows
[    0.762507] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    0.762598] pci 0004:02:0c.0: disabling bridge mem windows
[    0.762910] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.764532] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.764623] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    0.764923] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.765110] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.765301] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.765468] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.765643] PCI host bridge to bus 0005:00
[    0.765685] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.765866] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.766016] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.766201] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.766330] pci 0005:00:00.0: disabling bridge mem windows
[    0.766807] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.767295] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.767617] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.767831] PCI host bridge to bus 0030:00
[    0.767887] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.768081] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.768224] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.768392] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.768480] pci 0030:00:00.0: disabling bridge mem windows
[    0.768677] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.768877] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.768999] PCI host bridge to bus 0033:00
[    0.769065] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.769230] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.769358] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.769537] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.769645] pci 0033:00:00.0: disabling bridge mem windows
[    0.769880] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.770076] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.770184] PCI host bridge to bus 0034:00
[    0.770261] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.770431] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.770566] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.770740] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.770843] pci 0034:00:00.0: disabling bridge mem windows
[    0.771076] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.771248] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.771389] PCI host bridge to bus 0035:00
[    0.771462] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.771640] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.771789] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.771926] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.772066] pci 0035:00:00.0: disabling bridge mem windows
[    0.772456] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.772561] pci 0035:01:00.0: disabling bridge mem windows
[    0.772851] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.773152] pci 0035:02:08.0: Disabling memory decoding and releasing memory resources.
[    0.773243] pci 0035:02:08.0: disabling bridge mem windows
[    0.773660] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    0.773752] pci 0035:02:0d.0: disabling bridge mem windows
[    0.774024] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.774919] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.775071] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.775244] PCI host bridge to bus 0006:00
[    0.775294] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.775442] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.775622] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.775925] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.776205] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.776506] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.776776] pci 0006:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.777057] pci 0006:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.777446] PCI host bridge to bus 0007:00
[    0.777488] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.777588] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.777763] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.778062] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.778318] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.778599] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.778855] pci 0007:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.779121] pci 0007:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.779447] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.779859] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.779982] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.780081] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.780263] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.780415] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.780836] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.781212] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.787629] IOMMU table initialized, virtual merging enabled
[    0.787703] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.787922] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.787995] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.788080] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.788277] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.788368] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.788494] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.788619] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.788729] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.788835] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.788961] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.789061] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.789179] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.789579] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.789967] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.796371] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.796464] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.796575] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.796652] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.796795] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.797209] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.797271] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.797415] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.797603] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.798012] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.798186] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.798334] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.798470] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.798622] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.798752] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.798886] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.799023] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200850000-0x600c200851fff]
[    0.799159] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200860000-0x600c200861fff]
[    0.799296] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200870000-0x600c200871fff]
[    0.799406] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.799515] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.799622] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.799724] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.799828] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.799977] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.800110] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.800212] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.800316] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.800419] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.800527] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200000000-0x600c2000007ff]
[    0.800668] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200010000-0x600c20001ffff pref]
[    0.800781] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.800900] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.800995] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.801105] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.801207] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.801314] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.801423] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.801526] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.801634] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.801737] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.801843] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.802259] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.802633] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.809015] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.809110] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.809209] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.809290] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.809386] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.809534] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.809621] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.809745] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.809850] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.810236] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.810291] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.810423] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.810570] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.811002] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.817393] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.817494] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.817594] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.817668] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.817800] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.817937] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.818146] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.818247] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.818423] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.818609] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.818742] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.818906] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.819048] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.819225] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.819627] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.819998] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.826426] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.826526] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.826616] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.826681] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.826863] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.827300] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.827386] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.827815] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.827916] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.828332] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.828459] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.828595] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.828732] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.829151] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.829228] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.829311] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.829741] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.829805] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.830198] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.830265] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.830403] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.830599] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.830773] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.830934] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.831122] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.831303] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.831473] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.831637] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.831815] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.832003] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.832188] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.832373] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.832566] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.832731] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.832896] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.833056] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.833236] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.833384] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.833561] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.833699] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.833882] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.834060] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.834227] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.834384] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.834565] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.834643] pci 0006:00:00.1: Associating to existing PE d
[    0.834720] pci 0006:00:01.0: Associating to existing PE d
[    0.834811] pci 0006:00:01.1: Associating to existing PE d
[    0.834921] pci 0006:00:02.0: Associating to existing PE d
[    0.835019] pci 0006:00:02.1: Associating to existing PE d
[    0.835146] NPU6: Found 1 MMIO ATSD registers
[    0.835150] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.835323] pci 0007:00:00.1: Associating to existing PE d
[    0.835386] pci 0007:00:01.0: Associating to existing PE d
[    0.835482] pci 0007:00:01.1: Associating to existing PE d
[    0.835580] pci 0007:00:02.0: Associating to existing PE d
[    0.835668] pci 0007:00:02.1: Associating to existing PE d
[    0.835762] NPU7: Found 1 MMIO ATSD registers
[    0.839604] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.848034] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.848164] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.848250] vgaarb: loaded
[    0.848450] SCSI subsystem initialized
[    0.848630] usbcore: registered new interface driver usbfs
[    0.848714] usbcore: registered new interface driver hub
[    0.849250] usbcore: registered new device driver usb
[    0.849351] pps_core: LinuxPPS API ver. 1 registered
[    0.849446] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.849585] PTP clock support registered
[    0.850409] clocksource: Switched to clocksource timebase
[    0.853499] NET: Registered protocol family 2
[    0.853843] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.856293] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.856736] TCP: Hash tables configured (established 524288 bind 65536)
[    0.857031] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.857851] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.859075] NET: Registered protocol family 1
[    0.859165] pci 0001:00:00.0: enabling device (0105 -&gt; 0107)
[    0.859271] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    3.186675] Initialise system trusted keyrings
[    3.186869] workingset: timestamp_bits=54 max_order=22 bucket_order=0
[    3.191921] Key type asymmetric registered
[    3.191982] Asymmetric key parser 'x509' registered
[    3.192081] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    3.192227] io scheduler noop registered
[    3.192656] io scheduler cfq registered (default)
[    3.192720] io scheduler mq-deadline registered
[    3.192815] io scheduler kyber registered
[    3.195416] ipmi message handler version 39.2
[    3.195483] ipmi device interface
[    3.195590] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    3.217840] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    3.231106] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    3.231188] hvc0: No interrupts property, using OPAL event
[    3.231574] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[    3.232088] [drm] radeon kernel modesetting enabled.
[    3.241566] brd: module loaded
[    3.262222] loop: module loaded
[    3.262437] pci 0004:00:00.0: enabling device (0105 -&gt; 0107)
[    3.262521] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[    3.262626] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[    3.262718] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[    3.262975] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    3.273130] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    3.273217] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    3.273997] scsi host0: ahci
[    3.274188] scsi host1: ahci
[    3.274377] scsi host2: ahci
[    3.274557] scsi host3: ahci
[    3.274652] ata1: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000100 irq 88
[    3.274749] ata2: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000180 irq 88
[    3.274871] ata3: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000200 irq 88
[    3.274955] ata4: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000280 irq 88
[    3.275150] libphy: Fixed MDIO Bus: probed
[    3.275269] tg3.c:v3.137 (May 11, 2014)
[    3.275327] pci 0005:00:00.0: enabling device (0105 -&gt; 0107)
[    3.275423] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[    3.305673] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    3.306117] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    3.306213] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.306379] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.306512] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.306697] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[    3.337099] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    3.337561] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    3.337656] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.337771] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.337903] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.338191] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    3.338262] ehci-pci: EHCI PCI platform driver
[    3.338397] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    3.338507] ohci-pci: OHCI PCI platform driver
[    3.338680] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.338825] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    3.339019] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    3.339163] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    3.339923] hub 1-0:1.0: USB hub found
[    3.339978] hub 1-0:1.0: 4 ports detected
[    3.340162] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.340263] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    3.340411] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    3.340694] hub 2-0:1.0: USB hub found
[    3.340742] hub 2-0:1.0: 4 ports detected
[    3.341006] usbcore: registered new interface driver usb-storage
[    3.400436] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    3.400514] i2c /dev entries driver
[    3.400892] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.401223] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.401551] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.401912] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.402234] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   24.336648059,3] I2C: Request timeout !
[   24.336698977,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   24.336799545,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   24.336871933,3] I2C:  start_time=00000002efdfe8b5 end_time=00000002f07cd5a1 (duration=00000000009cecec)
[   24.336963182,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    3.601527] ata4: SATA link down (SStatus 0 SControl 300)
[    3.601667] ata3: SATA link down (SStatus 0 SControl 300)
[   24.457709180,3] I2C: Request timeout !
[   24.457761286,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   24.457845963,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   24.457900523,3] I2C:  start_time=00000002f717298d end_time=00000002f7b415ba (duration=00000000009cec2d)
[   24.457985934,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    3.770301] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.770418] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.771425] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.771510] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.771732] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.771873] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.772410] ata1.00: configured for UDMA/133
[    3.772604] ata2.00: configured for UDMA/133
[    3.773003] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.792751] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   25.062667705,3] I2C: Request timeout !
[   25.062725178,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.062817557,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   25.062884875,3] I2C:  start_time=00000002fe0fd251 end_time=00000002feacba9e (duration=00000000009ce84d)
[   25.062982985,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   25.175522918,3] I2C: Request timeout !
[   25.175567505,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.175665060,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   25.175732366,3] I2C:  start_time=0000000304c9db55 end_time=000000030566c389 (duration=00000000009ce834)
[   25.175822870,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   25.298638045,3] I2C: Request timeout !
[   25.298693126,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.298783193,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   25.298845291,3] I2C:  start_time=000000030c2071c6 end_time=000000030cbd59d9 (duration=00000000009ce813)
[   25.298928508,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   25.421753177,3] I2C: Request timeout !
[   25.421805302,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.421905218,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   25.421969799,3] I2C:  start_time=000000031377089c end_time=000000031413f06c (duration=00000000009ce7d0)
[   25.422065181,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    4.815328] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    4.815660] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    4.815987] at24 9-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    4.816316] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   26.036850313,3] I2C: Request timeout !
[   26.036897125,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.037000505,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   26.037065048,3] I2C:  start_time=000000031b0a5d41 end_time=000000031ba748fa (duration=00000000009cebb9)
[   26.037161666,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.178433914,3] I2C: Request timeout !
[   26.178488408,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.178581826,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   26.178655815,3] I2C:  start_time=00000003237ac64a end_time=000000032417ae9b (duration=00000000009ce851)
[   26.178756926,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.297445360,3] I2C: Request timeout !
[   26.297499751,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.297597996,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   26.297666916,3] I2C:  start_time=000000032a92bf2b end_time=000000032b2fa70f (duration=00000000009ce7e4)
[   26.297750302,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.400041063,3] I2C: Request timeout !
[   26.400100471,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.400198415,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   26.400272285,3] I2C:  start_time=0000000330b03c31 end_time=00000003314d2388 (duration=00000000009ce757)
[   26.400363140,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   27.000894087,3] I2C: Request timeout !
[   27.001259978,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   27.004923621,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   27.008546049,3] I2C:  start_time=00000003376a3bd4 end_time=00000003380723b7 (duration=00000000009ce7e3)
[   27.010994106,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    5.953536] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    5.953605] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[    5.962813] usbcore: registered new interface driver usbhid
[    5.962874] usbhid: USB HID core driver
[    5.963257] ipip: IPv4 and MPLS over IPv4 tunneling driver
[    5.963588] NET: Registered protocol family 17
[    5.963664] Key type dns_resolver registered
[    5.963964] registered taskstats version 1
[    5.964004] Loading compiled-in X.509 certificates
[    5.970684] Loaded X.509 cert 'Build time autogenerated kernel key: 69b7bd2878a4bab90574770d0a2ffddecb40bd94'
[    5.976024] Key type encrypted registered
[    5.976085] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    5.976285] evm: HMAC attrs: 0x1
[    6.030441] rtc-opal opal-rtc: setting system clock to 2017-10-30 15:27:28 UTC (1509377248)
[    6.032842] Freeing unused kernel memory: 11456K
[    6.032918] This architecture does not have kernel memory protection.
[    6.051422] udevd[2948]: starting version 3.2.2
[    6.054895] udevd[2949]: starting eudev-3.2.2
[    6.107408] pci 0002:00:00.0: enabling device (0105 -&gt; 0107)
[    6.107501] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[    6.107622] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[    6.107847] [drm] platform has no IO space, trying MMIO
[    6.107919] [drm] VGA not enabled on entry, requesting chip POST
[    6.108049] [drm] Using P2A bridge for configuration
[    6.108135] [drm] AST 2500 detected
[    6.108200] [drm] Analog VGA only
[    6.108305] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    6.108510] [TTM] Zone  kernel: Available graphics memory: 108817376 kiB
[    6.108597] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    6.108716] [TTM] Initializing pool allocator
[    6.111338] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    6.112410] scsi 0:0:0:0: Attached scsi generic sg0 type 0
[    6.112601] scsi 1:0:0:0: Attached scsi generic sg1 type 0

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.5.1-p848cad7)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[J[1;47H0000000000000000 0000000000000000[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / 728d2189-0c67-4551-8857-40e2845ba17b][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic (recovery mode)[14;54H[0;7m   [10B[55D[m[enP5p1s0f0] Configuring with static address (ip: 9.3.86.161/24) Booting in 9 sec: [sda2] Ubuntu[K[24;13H8[24;33H[24;13H7[24;33H[24;13H6[24;33H[24;13H5[24;33H[24;13H4[24;33H[24;13H3[24;33H[24;13H2[24;33H[24;13H1[24;33H[24;10HUbuntu                 [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   46.270993] kexec_core: Starting new kernel
[   67.327331133,5] OPAL: Switch to big-endian OS
[   69.460881985,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c0000000014a0000
[    0.000000] Linux version 4.10.0-26-generic (buildd@bos01-ppc64el-012) (gcc version 6.3.0 20170406 (Ubuntu 6.3.0-12ubuntu2) ) #30-Ubuntu SMP Tue Jun 27 09:29:34 UTC 2017 (Ubuntu 4.10.0-26.30-generic 4.10.17)
[    0.000000] Found initrd at 0xc000000002d90000:0xc00000000533e9f2
[    0.000000] OPAL: Power8 LPC bus found, chip ID 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x077c7afd18500249
[    0.000000]   possible        = 0x7fffffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000110000000
[    0.000000] -----------------------------------------------------
[    0.000000] cma: Reserved 10656 MiB at 0x0000201563000000
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6300-0x1fffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x2017ffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e4d80-0x2017ff6eea7f]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6bb080-0x2017ff6c4d7f]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6b1380-0x2017ff6bb07f]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a7680-0x2017ff6b137f]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69d980-0x2017ff6a767f]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693c80-0x2017ff69d97f]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689f80-0x2017ff693c7f]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 3 pages/cpu @c000001ff5eb0000 s149272 r0 d47336 u196608
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404544
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: root=UUID=728d2189-0c67-4551-8857-40e2845ba17b ro powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 131072 bytes
[    0.000000] log_buf_len: 1048576 bytes
[    0.000000] early log buf free: 115232(87%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 206570240K/218103808K available (11712K kernel code, 1600K rwdata, 3352K rodata, 4416K init, 3045K bss, 621824K reserved, 10911744K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000421] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.001148] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001771] Console: colour dummy device 80x25
[    0.002333] console [hvc0] enabled
[    0.002333] console [hvc0] enabled
[    0.002629] bootconsole [udbg0] disabled
[    0.002629] bootconsole [udbg0] disabled
[    0.003248] mempolicy: Enabling automatic NUMA balancing. Configure with numa_balancing= or the kernel.numa_balancing sysctl
[    0.003356] pid_max: default: 180224 minimum: 1408
[    0.005440] Security Framework initialized
[    0.005475] Yama: becoming mindful.
[    0.005578] AppArmor: AppArmor initialized
[    0.009051] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.098611] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.151802] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.151930] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.155649] ftrace: allocating 30684 entries in 12 pages
[    0.174069] EEH: PowerNV platform initialized
[    0.174114] POWER9 performance monitor hardware support registered
[    0.176407] smp: Bringing up secondary CPUs ...
[    0.651324] smp: Brought up 8 nodes, 176 CPUs
[    0.651389] numa: Node 0 CPUs: 0-87
[    0.651419] numa: Node 8 CPUs: 88-175
[    0.651448] numa: Node 250 CPUs:
[    0.651475] numa: Node 251 CPUs:
[    0.651503] numa: Node 252 CPUs:
[    0.651530] numa: Node 253 CPUs:
[    0.651557] numa: Node 254 CPUs:
[    0.651584] numa: Node 255 CPUs:
[    0.663695] devtmpfs: initialized
[    0.724770] evm: security.selinux
[    0.724807] evm: security.SMACK64
[    0.724842] evm: security.SMACK64EXEC
[    0.724885] evm: security.SMACK64TRANSMUTE
[    0.724929] evm: security.SMACK64MMAP
[    0.724972] evm: security.ima
[    0.725025] evm: security.capability
[    0.726062] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.726242] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.732289] NET: Registered protocol family 16
[    0.750616] cpuidle: using governor ladder
[    0.770627] cpuidle: using governor menu
[    0.770893] pstore: using zlib compression
[    0.770930] pstore: Registered nvram as persistent store backend
[    0.840872] PCI: Probing PCI hardware
[    0.841008] PCI host bridge to bus 0000:00
[    0.841098] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.841168] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.841225] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.841568] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.841685] PCI host bridge to bus 0001:00
[    0.841713] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.841778] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.841835] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.842472] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.842772] PCI host bridge to bus 0002:00
[    0.842829] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.842989] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.843113] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.843756] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.844241] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.844415] PCI host bridge to bus 0003:00
[    0.844469] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.844613] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.844735] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.845057] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.845186] PCI host bridge to bus 0004:00
[    0.845235] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.845366] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.845494] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.847258] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.848797] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.850747] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.850917] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.851081] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.851238] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.851426] PCI host bridge to bus 0005:00
[    0.851467] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.851609] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.851747] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.852820] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.852886] random: fast init done
[    0.853037] PCI host bridge to bus 0030:00
[    0.853087] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.853230] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.853346] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.853736] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.853876] PCI host bridge to bus 0033:00
[    0.853928] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.854069] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.854188] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.854592] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.854734] PCI host bridge to bus 0034:00
[    0.854787] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.854900] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.855032] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.855437] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.855574] PCI host bridge to bus 0035:00
[    0.855626] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.855773] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.855889] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.856705] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.857658] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.858698] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.858857] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.859045] PCI host bridge to bus 0006:00
[    0.859086] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.859173] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.860418] PCI host bridge to bus 0007:00
[    0.860456] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.860562] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.861726] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.862099] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.862183] pci 0001:00:00.0: BAR 14: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.862293] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.862414] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.862531] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.862922] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.863322] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.868036] IOMMU table initialized, virtual merging enabled
[    0.868101] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.868213] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.868315] iommu: Adding device 0001:01:00.0 to group 0
[    0.868384] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.868455] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.868599] pci 0002:00:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.868703] pci 0002:01:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.868792] pci 0002:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.868875] pci 0002:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.868965] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.869049] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.869168] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.869259] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.869346] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.869740] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.870121] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.874805] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.874880] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.874977] iommu: Adding device 0002:02:00.0 to group 1
[    0.875073] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.875147] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.875259] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.875651] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.875713] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.875832] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.875975] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.876368] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.876545] pci 0004:00:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.876653] pci 0004:00:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.876777] pci 0004:01:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.876890] pci 0004:01:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.876989] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.877092] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.877189] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200842000-0x600c200843fff]
[    0.877293] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200844000-0x600c200845fff]
[    0.877395] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200846000-0x600c200847fff]
[    0.877498] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.877580] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.877667] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.877751] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.877844] pci 0004:02:02.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.877957] pci 0004:02:02.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.878058] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.878143] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.878232] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.878310] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.878392] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.878500] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.878616] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.878700] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.878787] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.878868] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.878955] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.879039] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.879123] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.879205] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.879289] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.879369] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.879457] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.879844] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.880227] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.884899] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.884968] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.885060] iommu: Adding device 0004:03:00.0 to group 2
[    0.885143] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.885230] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.885330] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.885454] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.885530] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.885611] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.885689] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.886078] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.886139] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.886252] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.886384] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.886786] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.891500] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.891575] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.891673] iommu: Adding device 0004:01:00.0 to group 3
[    0.891760] iommu: Adding device 0004:01:00.1 to group 3
[    0.891842] iommu: Adding device 0004:01:00.2 to group 3
[    0.891913] iommu: Adding device 0004:01:00.3 to group 3
[    0.891984] iommu: Adding device 0004:01:00.4 to group 3
[    0.892032] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.892122] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.892239] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.892358] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.892512] pci 0005:00:00.0: BAR 15: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.892631] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.892759] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.892887] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.893012] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.893136] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.893253] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.893390] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.893787] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.894152] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.898835] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.898905] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.898997] iommu: Adding device 0005:01:00.0 to group 4
[    0.899082] iommu: Adding device 0005:01:00.1 to group 4
[    0.899137] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.899215] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.899378] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.899769] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.899859] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.900248] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.900332] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.900730] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.900861] pci 0035:00:00.0: BAR 14: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.900961] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.901066] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.901463] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.901520] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.901602] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.902011] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.902079] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.902490] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.902545] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.902667] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.902809] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.902961] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.903109] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.903256] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.903402] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.903540] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.903683] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.903814] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.903969] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.904116] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.904263] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.904419] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.904570] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.904717] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.904859] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.905005] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.905155] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.905302] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.905453] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.905593] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.905688] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.905803] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.905956] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.906125] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.906231] pci 0006:00:00.1: Associating to existing PE d
[    0.906307] pci 0006:00:01.0: Associating to existing PE d
[    0.906374] pci 0006:00:01.1: Associating to existing PE d
[    0.906464] pci 0006:00:02.0: Associating to existing PE d
[    0.906521] pci 0006:00:02.1: Associating to existing PE d
[    0.906643] NPU6: Found 1 MMIO ATSD registers
[    0.906648] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.906783] pci 0007:00:00.1: Associating to existing PE d
[    0.906862] pci 0007:00:01.0: Associating to existing PE d
[    0.906935] pci 0007:00:01.1: Associating to existing PE d
[    0.906977] pci 0007:00:02.0: Associating to existing PE d
[    0.907063] pci 0007:00:02.1: Associating to existing PE d
[    0.907155] NPU7: Found 1 MMIO ATSD registers
[    0.910833] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.932712] HugeTLB registered 2 MB page size, pre-allocated 0 pages
[    0.932769] HugeTLB registered 1 GB page size, pre-allocated 0 pages
[    0.937021] SCSI subsystem initialized
[    0.937438] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.937525] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.937614] vgaarb: loaded
[    0.937715] usbcore: registered new interface driver usbfs
[    0.937802] usbcore: registered new interface driver hub
[    0.938319] usbcore: registered new device driver usb
[    0.938398] pps_core: LinuxPPS API ver. 1 registered
[    0.938466] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.938595] PTP clock support registered
[    0.939514] NetLabel: Initializing
[    0.939544] NetLabel:  domain hash size = 128
[    0.939588] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO
[    0.939674] NetLabel:  unlabeled traffic allowed by default
[    0.940598] clocksource: Switched to clocksource timebase
[    0.960268] VFS: Disk quotas dquot_6.6.0
[    0.960572] VFS: Dquot-cache hash table entries: 8192 (order 0, 65536 bytes)
[    0.961119] AppArmor: AppArmor Filesystem Enabled
[    0.964740] NET: Registered protocol family 2
[    0.965573] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.967374] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.967729] TCP: Hash tables configured (established 524288 bind 65536)
[    0.967830] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.968562] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.969842] NET: Registered protocol family 1
[    0.970153] Unpacking initramfs...
[    1.907895] Freeing initrd memory: 38528K
[    1.949850] audit: initializing netlink subsys (disabled)
[    1.949974] audit: type=2000 audit(1509377295.940:1): initialized
[    1.957135] Initialise system trusted keyrings
[    1.957842] workingset: timestamp_bits=38 max_order=22 bucket_order=0
[    1.961288] zbud: loaded
[    1.965523] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    1.966367] fuse init (API version 7.26)
[    1.970854] Key type asymmetric registered
[    1.970889] Asymmetric key parser 'x509' registered
[    1.970958] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 246)
[    1.971334] io scheduler noop registered
[    1.971372] io scheduler deadline registered
[    1.971443] io scheduler cfq registered (default)
[    1.974037] Using unsupported 1024x768 vga at 600c100010000, depth=32, pitch=4096
[    2.059753] Console: switching to colour frame buffer device 128x48
[    2.145245] fb0: Open Firmware frame buffer device on /pciex@600c3c0200000/pci@0/pci@0/vga@0
[    2.145611] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    2.145680] hvc0: No interrupts property, using OPAL event
[    2.146097] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
[    2.148446] Linux agpgart interface v0.103
[    2.163592] loop: module loaded
[    2.163950] libphy: Fixed MDIO Bus: probed
[    2.163976] tun: Universal TUN/TAP device driver, 1.6
[    2.164009] tun: (C) 1999-2004 Max Krasnyansky &lt;maxk@qualcomm.com&gt;
[    2.164114] PPP generic driver version 2.4.2
[    2.164240] VFIO - User Level meta-driver version: 0.3
[    2.165241] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    2.165308] ehci-pci: EHCI PCI platform driver
[    2.165368] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    2.165411] ohci-pci: OHCI PCI platform driver
[    2.165468] uhci_hcd: USB Universal Host Controller Interface driver
[    2.165626] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.165718] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    2.165847] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    2.165947] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    2.166540] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002
[    2.166583] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.166632] usb usb1: Product: xHCI Host Controller
[    2.166666] usb usb1: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.166707] usb usb1: SerialNumber: 0001:01:00.0
[    2.166915] hub 1-0:1.0: USB hub found
[    2.166952] hub 1-0:1.0: 4 ports detected
[    2.167307] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.167345] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    2.167415] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    2.167539] usb usb2: New USB device found, idVendor=1d6b, idProduct=0003
[    2.167582] usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.167631] usb usb2: Product: xHCI Host Controller
[    2.167664] usb usb2: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.167705] usb usb2: SerialNumber: 0001:01:00.0
[    2.167900] hub 2-0:1.0: USB hub found
[    2.167935] hub 2-0:1.0: 4 ports detected
[    2.168673] mousedev: PS/2 mouse device common for all mice
[    5.084582] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    5.084670] i2c /dev entries driver
[    5.087738] device-mapper: uevent: version 1.0.3
[    5.088114] device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
[    5.088206] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    5.101383] ledtrig-cpu: registered to indicate activity on CPUs
[    5.102432] NET: Registered protocol family 10
[    5.109645] Segment Routing with IPv6
[    5.109695] NET: Registered protocol family 17
[    5.109751] Key type dns_resolver registered
[    5.110028] registered taskstats version 1
[    5.110081] Loading compiled-in X.509 certificates
[    5.114225] Loaded X.509 cert 'Build time autogenerated kernel key: 5d3adc177bbb659f71409a29e976c45eb95b6207'
[    5.114511] zswap: loaded using pool lzo/zbud
[    5.117399] Key type big_key registered
[    5.117430] Key type trusted registered
[    5.120348] Key type encrypted registered
[    5.120382] AppArmor: AppArmor sha1 policy hashing enabled
[    5.120416] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    5.120482] evm: HMAC attrs: 0x1
[    5.544611] rtc-opal opal-rtc: setting system clock to 2017-10-30 15:28:19 UTC (1509377299)
[    5.545290] Unable to open file: /etc/keys/x509_ima.der (-2)
[    5.545294] Unable to open file: /etc/keys/x509_evm.der (-2)
[    5.545749] Freeing unused kernel memory: 4416K
[    5.545840] This architecture does not have kernel memory protection.
Loading, please wait...
starting version 232
[    5.761870] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    5.764635] tg3.c:v3.137 (May 11, 2014)
[    5.769184] [drm] Initialized
[    5.772005] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    5.772058] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    5.773096] scsi host0: ahci
[    5.773359] scsi host1: ahci
[    5.773590] scsi host2: ahci
[    5.773826] scsi host3: ahci
[    5.773943] ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
[    5.773991] ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
[    5.774038] ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
[    5.774085] ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
[    5.781784] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    5.782320] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    5.782387] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    5.782450] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    5.782497] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    5.792714] [drm] platform has no IO space, trying MMIO
[    5.792759] [drm] Using P2A bridge for configuration
[    5.792792] [drm] AST 2500 detected
[    5.792819] [drm] Analog VGA only
[    5.792855] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    5.792960] [TTM] Zone  kernel: Available graphics memory: 108795936 kiB
[    5.793003] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    5.793041] [TTM] Initializing pool allocator
[    5.793082] [TTM] Initializing DMA pool allocator
[    5.796126] fb: switching to astdrmfb from OFfb vga
[    5.796198] Console: switching to colour dummy device 80x25
[    5.801006] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    5.806063] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    5.806101] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    5.806133] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    5.806161] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    5.814371] Console: switching to colour frame buffer device 128x48
[    5.835030] ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[    5.864498] [drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
[    5.876527] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    5.945026] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    6.086670] ata3: SATA link down (SStatus 0 SControl 300)
[    6.086770] ata4: SATA link down (SStatus 0 SControl 300)
[    6.248502] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    6.248573] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    6.249436] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    6.249508] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    6.249607] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    6.249712] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    6.250229] ata2.00: configured for UDMA/133
[    6.250358] ata1.00: configured for UDMA/133
[    6.251101] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    6.296717] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    6.296769] sd 0:0:0:0: [sda] 4096-byte physical blocks
[    6.296773] sd 0:0:0:0: Attached scsi generic sg0 type 0
[    6.296849] sd 0:0:0:0: [sda] Write Protect is off
[    6.296914] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    6.297566] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    6.342038]  sda: sda1 sda2
[    6.342483] sd 0:0:0:0: [sda] Attached SCSI removable disk
[    6.344701] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    6.344762] sd 1:0:0:0: Attached scsi generic sg1 type 0
[    6.344824] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[    6.344913] sd 1:0:0:0: [sdb] Write Protect is off
[    6.344998] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    6.363351] sd 1:0:0:0: [sdb] Attached SCSI removable disk
Begin: Loading essential drivers ... done.
Begin: Running /scripts/init-premount ... done.
Begin: Mounting root file system ... Begin: Running /scripts/local-top ... done.
Begin: Running /scripts/local-premount ... done.
Begin: Will now check root file system ... fsck from util-linux 2.29
[/sbin/fsck.ext4 (1) -- /dev/sda2] fsck.ext4 -a -C0 /dev/sda2 
/dev/sda2: recovering journal
/dev/sda2: clean, 62079/61054976 files, 5061053/244188416 blocks
done.
[    7.146683] EXT4-fs (sda2): mounted filesystem with ordered data mode. Opts: (null)
done.
Begin: Running /scripts/local-bottom ... done.
Begin: Running /scripts/init-bottom ... done.
[    7.953364] ip_tables: (C) 2000-2006 Netfilter Core Team
[    7.994629] systemd[1]: systemd 232 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN)
[    7.995397] systemd[1]: Detected architecture ppc64-le.

Welcome to [1mUbuntu 17.04[0m!

[    8.008185] systemd[1]: Set hostname to &lt;w54L&gt;.
[    8.408766] random: crng init done
[    8.570017] systemd[1]: Listening on fsck to fsckd communication Socket.
[[0;32m  OK  [0m] Listening on fsck to fsckd communication Socket.
[    8.570373] systemd[1]: Listening on Journal Socket (/dev/log).
[[0;32m  OK  [0m] Listening on Journal Socket (/dev/log).
[    8.570655] systemd[1]: Listening on udev Kernel Socket.
[[0;32m  OK  [0m] Listening on udev Kernel Socket.
[    8.571113] systemd[1]: Created slice System Slice.
[[0;32m  OK  [0m] Created slice System Slice.
[    8.571373] systemd[1]: Listening on udev Control Socket.
[[0;32m  OK  [0m] Listening on udev Control Socket.
[    8.571761] systemd[1]: Created slice User and Session Slice.
[[0;32m  OK  [0m] Created slice User and Session Slice.
[    8.572804] systemd[1]: Mounting Huge Pages File System...
         Mounting Huge Pages File System...
[[0;32m  OK  [0m] Set up automount Arbitrary Executab\xe2\x80\xa6rmats File System Automount Point.
[[0;32m  OK  [0m] Created slice system-serial\x2dgetty.slice.
[[0;32m  OK  [0m] Listening on /dev/initctl Compatibility Named Pipe.
         Mounting Debug File System...
         Mounting POSIX Message Queue File System...
[[0;32m  OK  [0m] Listening on Journal Audit Socket.
[[0;32m  OK  [0m] Listening on Journal Socket.
         Starting Set the console keyboard layout...
         Starting Nameserver information manager...
         Starting Create list of required st\xe2\x80\xa6ce nodes for the current kernel...
         Starting Load Kernel Modules...
[[0;32m  OK  [0m] Reached target Slices.
[[0;32m  OK  [0m] Reached target User and Group Name Lookups.
[[0;32m  OK  [0m] Listening on Syslog Socket.
         Starting Journal Service...
         Starting Uncomplicated firewall...
[[0;32m  OK  [0m] Reached target Remote File Systems.
[[0;32m  OK  [0m] Started Read required files in advance.
[[0;32m  OK  [0m] Started Forward Password Requests to Wall Directory Watch.
[[0;32m  OK  [0m] Started Uncomplicated firewall.
[[0;32m  OK  [0m] Started Create list of required sta\xe2\x80\xa6vice nodes for the current kernel.
         Starting Create Static Device Nodes in /dev...
[[0;32m  OK  [0m] Started Load Kernel Modules.
         Mounting FUSE Control File System...
         Starting Apply Kernel Variables...
[[0;32m  OK  [0m] Started Apply Kernel Variables.
[[0;32m  OK  [0m] Mounted FUSE Control File System.
[[0;32m  OK  [0m] Mounted Huge Pages File System.
[[0;32m  OK  [0m] Mounted POSIX Message Queue File System.
[[0;32m  OK  [0m] Mounted Debug File System.
[[0;32m  OK  [0m] Started Nameserver information manager.
[[0;32m  OK  [0m] Reached target Network (Pre).
[[0;32m  OK  [0m] Started Journal Service.
[[0;32m  OK  [0m] Started Create Static Device Nodes in /dev.
         Starting udev Kernel Device Manager...
[[0;32m  OK  [0m] Started Set the console keyboard layout.
[[0;32m  OK  [0m] Started udev Kernel Device Manager.
         Starting Remount Root and Kernel File Systems...
[[0;32m  OK  [0m] Started Remount Root and Kernel File Systems.
         Starting udev Coldplug all Devices...
         Starting Flush Journal to Persistent Storage...
         Starting Load/Save Random Seed...
[[0;32m  OK  [0m] Reached target Local File Systems (Pre).
         Activating swap /swapfile...
[[0;32m  OK  [0m] Reached target Local File Systems.
         Starting Tell Plymouth To Write Out Runtime Data...
         Starting AppArmor initialization...
         Starting Set console font and keymap...
[[0;32m  OK  [0m] Started Load/Save Random Seed.
[[0;32m  OK  [0m] Started Set console font and keymap.
[[0;32m  OK  [0m] Started Tell Plymouth To Write Out Runtime Data.
[[0;32m  OK  [0m] Started Flush Journal to Persistent Storage.
         Starting Create Volatile Files and Directories...
[[0;32m  OK  [0m] Started Create Volatile Files and Directories.
         Starting Update UTMP about System Boot/Shutdown...
         Starting Network Time Synchronization...
[[0;32m  OK  [0m] Started AppArmor initialization.
         Starting Raise network interfaces...
[[0;32m  OK  [0m] Started Update UTMP about System Boot/Shutdown.
[[0;32m  OK  [0m] Activated swap /swapfile.
[[0;32m  OK  [0m] Reached target Swap.
[[0;32m  OK  [0m] Started udev Coldplug all Devices.
[   83.433453284,3] I2C: Request timeout !
[   83.435470436,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   83.435572711,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   83.435638103,3] I2C:  start_time=00000009fe2e744c end_time=00000009fecb737b (duration=00000000009cff2f)
[   83.435732051,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started ifup for enP5p1s0f0.
[[0;32m  OK  [0m] Started Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Reached target Paths.
[[0;32m  OK  [0m] Reached target Encrypted Volumes.
[   83.495018643,3] I2C: Request timeout !
[   83.495081684,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   83.495182124,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   83.495244154,3] I2C:  start_time=0000000a01d9d5dc end_time=0000000a0276de37 (duration=00000000009d085b)
[   83.495338681,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   84.034307849,3] I2C: Request timeout !
[   84.034374724,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   84.034467286,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   84.034533846,3] I2C:  start_time=0000000a04e88dbd end_time=0000000a05857c3e (duration=00000000009cee81)
[   84.034629220,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   84.089700898,3] I2C: Request timeout !
[   84.090920718,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   84.094570900,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   84.094630419,3] I2C:  start_time=0000000a0835d05a end_time=0000000a08d2b855 (duration=00000000009ce7fb)
[   84.094731284,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Found device /dev/hvc0.
[[0;32m  OK  [0m] Started Raise network interfaces.
[[0;32m  OK  [0m] Reached target Network.
[[0;32m  OK  [0m] Started Network Time Synchronization.
[[0;32m  OK  [0m] Reached target System Initialization.
[[0;32m  OK  [0m] Listening on D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Listening on UUID daemon activation socket.
[[0;32m  OK  [0m] Reached target Sockets.
[[0;32m  OK  [0m] Reached target Basic System.
         Starting System Logging Service...
         Starting Accounts Service...
[   84.184087759,3] I2C: Request timeout !
[   84.184884463,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   84.187342014,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   84.189776718,3] I2C:  start_time=0000000a0dd60c56 end_time=0000000a0e72f399 (duration=00000000009ce743)
[   84.192228034,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
         Starting OpenBSD Secure Shell server...
         Starting Network Name Resolution...
[[0;32m  OK  [0m] Started Message of the Day.
[[0;32m  OK  [0m] Started Set the CPU Frequency Scaling governor.
[[0;32m  OK  [0m] Started D-Bus System Message Bus.
[   84.229112962,3] I2C: Request timeout !
[   84.229158829,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   84.229251962,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   84.229312729,3] I2C:  start_time=0000000a10850fa3 end_time=0000000a1121faee (duration=00000000009ceb4b)
[   84.229429612,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Daily Cleanup of Temporary Directories.
         Starting LSB: daemon to balance interrupts for SMP systems...
         Starting Login Service...
         Starting Permit User Sessions...
[[0;32m  OK  [0m] Started Regular background program processing daemon.
[[0;32m  OK  [0m] Reached target System Time Synchronized.
[[0;32m  OK  [0m] Started Daily apt activities.
[[0;32m  OK  [0m] Reached target Timers.
[   84.284513475,3] I2C: Request timeout !
[   84.284515503,7] opal_ipmi_recv(cmd: 0x08 netfn: 0x07 resp_size: 0x10)
[   84.284708015,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   84.285991359,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   84.288441365,3] I2C:  start_time=0000000a13d26978 end_time=0000000a14122032 (duration=00000000003fb6ba)
[   84.292108147,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started System Logging Service.
[[0;32m  OK  [0m] Started OpenBSD Secure Shell server.
[[0;32m  OK  [0m] Started Permit User Sessions.
         Starting Terminate Plymouth Boot Screen...
         Starting Hold until boot process finishes up...
[[0;32m  OK  [0m] Started Terminate Plymouth Boot Screen.
[[0;32m  OK  [0m] Started Hold until boot process finishes up.
[[0;32m  OK  [0m] Started Login Service.
[[0;32m  OK  [0m] Started Serial Getty on hvc0.
         Starting Set console scheme...
[[0;32m  OK  [0m] Started Set console scheme.
[[0;32m  OK  [0m] Created slice system-getty.slice.
[[0;32m  OK  [0m] Started Getty on tty1.
[[0;32m  OK  [0m] Reached target Login Prompts.
[   84.358380923,3] I2C: Request timeout !
[   84.358443931,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   84.358529440,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   84.358589813,3] I2C:  start_time=0000000a18398e6e end_time=0000000a18d67494 (duration=00000000009ce626)
[   84.358696839,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started LSB: daemon to balance interrupts for SMP systems.
[   84.399418971,3] I2C: Request timeout !
[   84.399486178,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   84.399573621,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   84.399631773,3] I2C:  start_time=0000000a1aabbf3d end_time=0000000a1b48a575 (duration=00000000009ce638)
[   84.399724861,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Accounts Service.
[[0;32m  OK  [0m] Started Network Name Resolution.
[[0;32m  OK  [0m] Reached target Multi-User System.
[[0;32m  OK  [0m] Reached target Graphical Interface.
[[0;32m  OK  [0m] Started Stop ureadahead data collection 45s after completed startup.
         Starting Update UTMP about System Runlevel Changes...
[[0;32m  OK  [0m] Started Update UTMP about System Runlevel Changes.

Ubuntu 17.04 w54L hvc0

w54L login: </msg>
<status endtime="20171030 15:28:22.564" status="PASS" starttime="20171030 15:28:22.468"></status>
</kw>
<status endtime="20171030 15:28:22.564" status="PASS" starttime="20171030 15:28:22.089"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20171030 15:28:22.564" status="PASS" starttime="20171030 15:13:18.328" critical="yes"></status>
</test>
<test name="Check For Application Failures" id="s1-s2-t2">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171030 15:28:22.567" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:28:22.567" status="PASS" starttime="20171030 15:28:22.567"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171030 15:28:22.568" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:28:22.568" status="PASS" starttime="20171030 15:28:22.568"></status>
</kw>
<msg timestamp="20171030 15:28:22.568" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:28:22.569" status="PASS" starttime="20171030 15:28:22.566"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171030 15:28:22.570" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:28:22.570" status="PASS" starttime="20171030 15:28:22.570"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171030 15:28:22.571" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:28:22.571" status="PASS" starttime="20171030 15:28:22.571"></status>
</kw>
<msg timestamp="20171030 15:28:22.571" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:28:22.571" status="PASS" starttime="20171030 15:28:22.569"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:22.573" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw'</msg>
<status endtime="20171030 15:28:22.573" status="PASS" starttime="20171030 15:28:22.572"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:28:22.573" status="PASS" starttime="20171030 15:28:22.573"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:28:22.579" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171030 15:28:22.582" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:28:22.583" level="INFO">${output} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:28:22.583" status="PASS" starttime="20171030 15:28:22.574"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20171030 15:28:22.586" status="PASS" starttime="20171030 15:28:22.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171030 15:28:22.587" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status endtime="20171030 15:28:22.587" status="PASS" starttime="20171030 15:28:22.586"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171030 15:28:22.587" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:28:22.587" status="PASS" starttime="20171030 15:28:22.587"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:22.588" level="INFO">${cmd_buf} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:28:22.589" status="PASS" starttime="20171030 15:28:22.588"></status>
</kw>
<msg timestamp="20171030 15:28:22.589" level="INFO">${search_string} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:28:22.589" status="PASS" starttime="20171030 15:28:22.572"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171030 15:28:22.590" level="INFO">${search_string} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status endtime="20171030 15:28:22.590" status="PASS" starttime="20171030 15:28:22.589"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:22.591" level="INFO">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20171030 15:28:22.591" status="PASS" starttime="20171030 15:28:22.590"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:28:22.591" status="PASS" starttime="20171030 15:28:22.591"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171030 15:28:22.595" level="INFO">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171030 15:28:22.609" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:28:22.609" level="INFO">${os_con_pid} = </msg>
<status endtime="20171030 15:28:22.609" status="PASS" starttime="20171030 15:28:22.592"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20171030 15:28:22.612" status="PASS" starttime="20171030 15:28:22.611"></status>
</kw>
<msg timestamp="20171030 15:28:22.613" level="INFO">${os_con_pid} = </msg>
<status endtime="20171030 15:28:22.613" status="PASS" starttime="20171030 15:28:22.571"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:22.614" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20171030 15:28:22.614" status="PASS" starttime="20171030 15:28:22.613"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:28:22.615" status="PASS" starttime="20171030 15:28:22.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:28:22.616" level="INFO">${rc} = None</msg>
<msg timestamp="20171030 15:28:22.616" level="INFO">${output} = None</msg>
<status endtime="20171030 15:28:22.616" status="PASS" starttime="20171030 15:28:22.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20171030 15:28:22.617" status="PASS" starttime="20171030 15:28:22.616"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:22.624" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:22.624" status="PASS" starttime="20171030 15:28:22.620"></status>
</kw>
<status endtime="20171030 15:28:22.624" status="PASS" starttime="20171030 15:28:22.620"></status>
</kw>
<status endtime="20171030 15:28:22.624" status="PASS" starttime="20171030 15:28:22.617"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:28:22.624" level="INFO">${output} = </msg>
<status endtime="20171030 15:28:22.625" status="PASS" starttime="20171030 15:28:22.624"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171030 15:28:22.625" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20171030 15:28:22.625" status="PASS" starttime="20171030 15:28:22.625"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status endtime="20171030 15:28:22.694" status="PASS" starttime="20171030 15:28:22.626"></status>
</kw>
<msg timestamp="20171030 15:28:22.701" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:28:22.783" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20171030 15:28:22.783" status="PASS" starttime="20171030 15:28:22.625"></status>
</kw>
<msg timestamp="20171030 15:28:22.864" level="INFO">${log_output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20171030 15:28:22.864" status="PASS" starttime="20171030 15:28:22.569"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:22.866" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:22.866" status="PASS" starttime="20171030 15:28:22.865"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:22.868" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw'</msg>
<status endtime="20171030 15:28:22.868" status="PASS" starttime="20171030 15:28:22.867"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:28:22.868" status="PASS" starttime="20171030 15:28:22.868"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:28:22.872" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171030 15:28:22.876" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:28:22.877" level="INFO">${output} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:28:22.877" status="PASS" starttime="20171030 15:28:22.869"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20171030 15:28:22.879" status="PASS" starttime="20171030 15:28:22.879"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171030 15:28:22.880" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status endtime="20171030 15:28:22.881" status="PASS" starttime="20171030 15:28:22.880"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171030 15:28:22.881" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:28:22.881" status="PASS" starttime="20171030 15:28:22.881"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:22.882" level="INFO">${cmd_buf} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:28:22.882" status="PASS" starttime="20171030 15:28:22.881"></status>
</kw>
<msg timestamp="20171030 15:28:22.883" level="INFO">${sub_cmd_buf} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:28:22.883" status="PASS" starttime="20171030 15:28:22.866"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:22.884" level="INFO">${cmd_buf} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status endtime="20171030 15:28:22.884" status="PASS" starttime="20171030 15:28:22.883"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:28:22.885" status="PASS" starttime="20171030 15:28:22.884"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:28:22.889" level="INFO">Running command '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20171030 15:28:22.897" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:28:22.897" level="INFO">${output} = </msg>
<status endtime="20171030 15:28:22.897" status="PASS" starttime="20171030 15:28:22.885"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20171030 15:28:22.900" status="PASS" starttime="20171030 15:28:22.900"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20171030 15:28:23.901" level="INFO">Slept 1 second</msg>
<status endtime="20171030 15:28:23.901" status="PASS" starttime="20171030 15:28:22.901"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:23.904" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw'</msg>
<status endtime="20171030 15:28:23.904" status="PASS" starttime="20171030 15:28:23.904"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:28:23.905" status="PASS" starttime="20171030 15:28:23.904"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:28:23.909" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171030 15:28:23.913" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:28:23.913" level="INFO">${output} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:28:23.913" status="PASS" starttime="20171030 15:28:23.905"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20171030 15:28:23.916" status="PASS" starttime="20171030 15:28:23.915"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171030 15:28:23.917" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status endtime="20171030 15:28:23.917" status="PASS" starttime="20171030 15:28:23.916"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171030 15:28:23.917" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:28:23.917" status="PASS" starttime="20171030 15:28:23.917"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:23.926" level="INFO">${cmd_buf} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:28:23.926" status="PASS" starttime="20171030 15:28:23.918"></status>
</kw>
<msg timestamp="20171030 15:28:23.926" level="INFO">${search_string} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:28:23.926" status="PASS" starttime="20171030 15:28:23.903"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171030 15:28:23.927" level="INFO">${search_string} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status endtime="20171030 15:28:23.927" status="PASS" starttime="20171030 15:28:23.926"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:23.927" level="INFO">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20171030 15:28:23.927" status="PASS" starttime="20171030 15:28:23.927"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:28:23.928" status="PASS" starttime="20171030 15:28:23.928"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171030 15:28:23.940" level="INFO">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171030 15:28:23.963" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:28:23.963" level="INFO">${os_con_pid} = 239</msg>
<status endtime="20171030 15:28:23.964" status="PASS" starttime="20171030 15:28:23.928"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20171030 15:28:23.980" status="PASS" starttime="20171030 15:28:23.977"></status>
</kw>
<msg timestamp="20171030 15:28:23.983" level="INFO">${os_con_pid} = 239</msg>
<status endtime="20171030 15:28:23.983" status="PASS" starttime="20171030 15:28:23.902"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg timestamp="20171030 15:28:23.986" level="INFO">Length is 3</msg>
<status endtime="20171030 15:28:23.986" status="PASS" starttime="20171030 15:28:23.985"></status>
</kw>
<status endtime="20171030 15:28:23.988" status="PASS" starttime="20171030 15:28:22.566"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171030 15:28:23.999" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20171030 15:28:23.999" status="FAIL" starttime="20171030 15:28:23.996"></status>
</kw>
<msg timestamp="20171030 15:28:23.999" level="INFO">${has_host} = False</msg>
<status endtime="20171030 15:28:23.999" status="PASS" starttime="20171030 15:28:23.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20171030 15:28:24.005" status="PASS" starttime="20171030 15:28:24.004"></status>
</kw>
<status endtime="20171030 15:28:24.005" status="PASS" starttime="20171030 15:28:24.001"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20171030 15:28:24.010" level="INFO">${port_num} = 22</msg>
<status endtime="20171030 15:28:24.010" status="PASS" starttime="20171030 15:28:24.008"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20171030 15:28:24.011" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20171030 15:28:24.011" status="PASS" starttime="20171030 15:28:24.010"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20171030 15:28:24.013" level="INFO">${https_num} = 443</msg>
<status endtime="20171030 15:28:24.013" status="PASS" starttime="20171030 15:28:24.012"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20171030 15:28:24.014" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20171030 15:28:24.014" status="PASS" starttime="20171030 15:28:24.014"></status>
</kw>
<status endtime="20171030 15:28:24.015" status="PASS" starttime="20171030 15:28:24.007"></status>
</kw>
<status endtime="20171030 15:28:24.015" status="PASS" starttime="20171030 15:28:24.005"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171030 15:28:24.016" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20171030 15:28:24.017" status="FAIL" starttime="20171030 15:28:24.016"></status>
</kw>
<msg timestamp="20171030 15:28:24.017" level="INFO">${has_port} = False</msg>
<status endtime="20171030 15:28:24.017" status="PASS" starttime="20171030 15:28:24.015"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20171030 15:28:24.021" status="PASS" starttime="20171030 15:28:24.020"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20171030 15:28:24.024" status="PASS" starttime="20171030 15:28:24.021"></status>
</kw>
<status endtime="20171030 15:28:24.024" status="PASS" starttime="20171030 15:28:24.020"></status>
</kw>
<status endtime="20171030 15:28:24.024" status="PASS" starttime="20171030 15:28:24.018"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171030 15:28:24.025" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171030 15:28:29.687" level="INFO">Read output:</msg>
<status endtime="20171030 15:28:29.687" status="PASS" starttime="20171030 15:28:24.025"></status>
</kw>
<status endtime="20171030 15:28:29.688" status="PASS" starttime="20171030 15:28:23.989"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>journalctl --no-pager | egrep '${ERROR_REGEX}'</arg>
</arguments>
<assign>
<var>${journal_log}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:28:29.690" level="INFO">Executing command 'journalctl --no-pager | egrep 'SEGV|core-dump''.</msg>
<msg timestamp="20171030 15:28:35.802" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171030 15:28:35.802" level="INFO">${stdout} = Oct 30 15:12:01 witherspoon systemd[1]: xyz.openbmc_project.Logging.service: Failed with result 'core-dump'.</msg>
<msg timestamp="20171030 15:28:35.802" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:28:35.802" status="PASS" starttime="20171030 15:28:29.689"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171030 15:28:35.803" level="INFO">Length is 0</msg>
<status endtime="20171030 15:28:35.803" status="PASS" starttime="20171030 15:28:35.803"></status>
</kw>
<msg timestamp="20171030 15:28:35.804" level="INFO">${journal_log} = Oct 30 15:12:01 witherspoon systemd[1]: xyz.openbmc_project.Logging.service: Failed with result 'core-dump'.</msg>
<status endtime="20171030 15:28:35.804" status="PASS" starttime="20171030 15:28:29.688"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${journal_log}</arg>
</arguments>
<msg timestamp="20171030 15:28:35.804" level="INFO">Length is 108</msg>
<msg timestamp="20171030 15:28:35.804" level="FAIL">'Oct 30 15:12:01 witherspoon systemd[1]: xyz.openbmc_project.Logging.service: Failed with result 'core-dump'.' should be empty.</msg>
<status endtime="20171030 15:28:35.804" status="FAIL" starttime="20171030 15:28:35.804"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171030 15:28:35.843" level="INFO">Length is 10</msg>
<status endtime="20171030 15:28:35.843" status="PASS" starttime="20171030 15:28:35.843"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:28:35.848" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171030 15:28:38.871" level="INFO">${RC} = 0</msg>
<msg timestamp="20171030 15:28:38.871" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=6.41 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=6.36 ms
64 bytes from 9.3.86.161: icmp_seq=...</msg>
<status endtime="20171030 15:28:38.871" status="PASS" starttime="20171030 15:28:35.844"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171030 15:28:38.875" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=6.41 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=6.36 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.623 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=15.9 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.623/7.349/15.994/5.518 ms</msg>
<status endtime="20171030 15:28:38.875" status="PASS" starttime="20171030 15:28:38.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20171030 15:28:38.876" status="PASS" starttime="20171030 15:28:38.875"></status>
</kw>
<status endtime="20171030 15:28:38.876" status="PASS" starttime="20171030 15:28:35.842"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171030 15:28:38.933" level="INFO">${cur_time} = 2017-10-30 15:28:38:932910</msg>
<status endtime="20171030 15:28:38.933" status="PASS" starttime="20171030 15:28:38.933"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171030 15:28:38.934" level="INFO">${cur_time} = 20171030152838932910</msg>
<status endtime="20171030 15:28:38.934" status="PASS" starttime="20171030 15:28:38.933"></status>
</kw>
<status endtime="20171030 15:28:38.934" status="PASS" starttime="20171030 15:28:38.932"></status>
</kw>
<msg timestamp="20171030 15:28:38.934" level="INFO">${FFDC_TIME} = 20171030152838932910</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171030 15:28:38.949" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20171030 15:28:38.949" status="PASS" starttime="20171030 15:28:38.949"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171030 15:28:38.950" level="INFO">${suite_name} = 20171030152838932910_TestsTestBasicPoweron</msg>
<status endtime="20171030 15:28:38.950" status="PASS" starttime="20171030 15:28:38.949"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171030 15:28:38.950" level="INFO">${test_name} = CheckForApplicationFailures</msg>
<status endtime="20171030 15:28:38.951" status="PASS" starttime="20171030 15:28:38.950"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171030 15:28:38.951" level="INFO">${test_name} = 20171030152838932910_CheckForApplicationFailures</msg>
<status endtime="20171030 15:28:38.951" status="PASS" starttime="20171030 15:28:38.951"></status>
</kw>
<status endtime="20171030 15:28:38.951" status="PASS" starttime="20171030 15:28:38.948"></status>
</kw>
<msg timestamp="20171030 15:28:38.952" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/</msg>
<msg timestamp="20171030 15:28:38.952" level="INFO">${FFDC_PREFIX} = 20171030152838932910_</msg>
<msg timestamp="20171030 15:28:38.984" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:38.985" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:38.985" status="PASS" starttime="20171030 15:28:38.985"></status>
</kw>
<msg timestamp="20171030 15:28:38.991" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.024" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.024" status="PASS" starttime="20171030 15:28:39.024"></status>
</kw>
<status endtime="20171030 15:28:39.025" status="PASS" starttime="20171030 15:28:39.023"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.026" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.026" status="PASS" starttime="20171030 15:28:39.026"></status>
</kw>
<status endtime="20171030 15:28:39.026" status="PASS" starttime="20171030 15:28:39.025"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.027" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.027" status="PASS" starttime="20171030 15:28:39.027"></status>
</kw>
<status endtime="20171030 15:28:39.028" status="PASS" starttime="20171030 15:28:39.026"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.031" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.031" status="PASS" starttime="20171030 15:28:39.030"></status>
</kw>
<status endtime="20171030 15:28:39.031" status="PASS" starttime="20171030 15:28:39.028"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.033" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.033" status="PASS" starttime="20171030 15:28:39.032"></status>
</kw>
<status endtime="20171030 15:28:39.034" status="PASS" starttime="20171030 15:28:39.031"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.035" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.035" status="PASS" starttime="20171030 15:28:39.034"></status>
</kw>
<status endtime="20171030 15:28:39.035" status="PASS" starttime="20171030 15:28:39.034"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.036" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.036" status="PASS" starttime="20171030 15:28:39.036"></status>
</kw>
<status endtime="20171030 15:28:39.037" status="PASS" starttime="20171030 15:28:39.035"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.038" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.038" status="PASS" starttime="20171030 15:28:39.037"></status>
</kw>
<status endtime="20171030 15:28:39.038" status="PASS" starttime="20171030 15:28:39.037"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.039" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.039" status="PASS" starttime="20171030 15:28:39.039"></status>
</kw>
<status endtime="20171030 15:28:39.039" status="PASS" starttime="20171030 15:28:39.038"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.041" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.041" status="PASS" starttime="20171030 15:28:39.041"></status>
</kw>
<status endtime="20171030 15:28:39.042" status="PASS" starttime="20171030 15:28:39.040"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.043" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.043" status="PASS" starttime="20171030 15:28:39.042"></status>
</kw>
<status endtime="20171030 15:28:39.043" status="PASS" starttime="20171030 15:28:39.042"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.044" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.044" status="PASS" starttime="20171030 15:28:39.044"></status>
</kw>
<status endtime="20171030 15:28:39.045" status="PASS" starttime="20171030 15:28:39.043"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.046" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.046" status="PASS" starttime="20171030 15:28:39.045"></status>
</kw>
<status endtime="20171030 15:28:39.046" status="PASS" starttime="20171030 15:28:39.045"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171030 15:28:39.065" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:28:39.065" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171030 15:28:39.142" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171030 15:28:39.177" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171030 15:28:39.177" level="INFO">${stderr} = </msg>
<msg timestamp="20171030 15:28:39.177" level="INFO">${rc} = 0</msg>
<status endtime="20171030 15:28:39.177" status="PASS" starttime="20171030 15:28:39.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171030 15:28:39.178" level="INFO">Length is 0</msg>
<status endtime="20171030 15:28:39.178" status="PASS" starttime="20171030 15:28:39.178"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171030 15:28:39.179" level="INFO">Length is 11</msg>
<status endtime="20171030 15:28:39.179" status="PASS" starttime="20171030 15:28:39.178"></status>
</kw>
<msg timestamp="20171030 15:28:39.179" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20171030 15:28:39.179" status="PASS" starttime="20171030 15:28:39.046"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.180" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.180" status="PASS" starttime="20171030 15:28:39.180"></status>
</kw>
<status endtime="20171030 15:28:39.180" status="PASS" starttime="20171030 15:28:39.179"></status>
</kw>
<status endtime="20171030 15:28:39.181" status="PASS" starttime="20171030 15:28:39.039"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.182" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.182" status="PASS" starttime="20171030 15:28:39.181"></status>
</kw>
<status endtime="20171030 15:28:39.182" status="PASS" starttime="20171030 15:28:39.181"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171030 15:28:39.182" level="INFO">@{entries} = [ APPLICATION DATA | BMC DATA | DRIVER INFO ]</msg>
<status endtime="20171030 15:28:39.183" status="PASS" starttime="20171030 15:28:39.182"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.184" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.184" status="PASS" starttime="20171030 15:28:39.184"></status>
</kw>
<status endtime="20171030 15:28:39.184" status="PASS" starttime="20171030 15:28:39.183"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.185" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.186" status="PASS" starttime="20171030 15:28:39.185"></status>
</kw>
<status endtime="20171030 15:28:39.186" status="PASS" starttime="20171030 15:28:39.185"></status>
</kw>
<status endtime="20171030 15:28:39.186" status="PASS" starttime="20171030 15:28:39.183"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.187" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.187" status="PASS" starttime="20171030 15:28:39.187"></status>
</kw>
<status endtime="20171030 15:28:39.187" status="PASS" starttime="20171030 15:28:39.186"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.188" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.188" status="PASS" starttime="20171030 15:28:39.188"></status>
</kw>
<status endtime="20171030 15:28:39.189" status="PASS" starttime="20171030 15:28:39.187"></status>
</kw>
<status endtime="20171030 15:28:39.189" status="PASS" starttime="20171030 15:28:39.186"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.190" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.190" status="PASS" starttime="20171030 15:28:39.189"></status>
</kw>
<status endtime="20171030 15:28:39.190" status="PASS" starttime="20171030 15:28:39.189"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.192" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.192" status="PASS" starttime="20171030 15:28:39.191"></status>
</kw>
<status endtime="20171030 15:28:39.192" status="PASS" starttime="20171030 15:28:39.190"></status>
</kw>
<status endtime="20171030 15:28:39.192" status="PASS" starttime="20171030 15:28:39.189"></status>
</kw>
<status endtime="20171030 15:28:39.192" status="PASS" starttime="20171030 15:28:39.183"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:39.195" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:39.196" status="PASS" starttime="20171030 15:28:39.195"></status>
</kw>
<status endtime="20171030 15:28:39.196" status="PASS" starttime="20171030 15:28:39.192"></status>
</kw>
<status endtime="20171030 15:28:39.196" status="PASS" starttime="20171030 15:28:39.022"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171030 15:28:39.218" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20171030 15:28:39.218" status="PASS" starttime="20171030 15:28:39.218"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171030 15:28:39.220" level="INFO">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('SEL Log', 'Collect ...</msg>
<status endtime="20171030 15:28:39.220" status="PASS" starttime="20171030 15:28:39.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20171030 15:28:39.221" status="PASS" starttime="20171030 15:28:39.221"></status>
</kw>
<msg timestamp="20171030 15:28:39.221" level="INFO">@{ffdc_function_list} = [ Get Request FFDC | BMC Specific Files | Core Files | FFDC Generic Report | SEL Log | OS FFDC | Sys Inventory Files ]</msg>
<status endtime="20171030 15:28:39.221" status="PASS" starttime="20171030 15:28:39.220"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20171030 15:28:39.223" status="PASS" starttime="20171030 15:28:39.223"></status>
</kw>
<msg timestamp="20171030 15:28:39.223" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:28:39.224" level="INFO">${ret_values} = None</msg>
<status endtime="20171030 15:28:39.224" status="PASS" starttime="20171030 15:28:39.222"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20171030 15:28:39.225" status="PASS" starttime="20171030 15:28:39.224"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171030 15:28:39.291" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20171030 15:28:39.291" status="PASS" starttime="20171030 15:28:39.291"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171030 15:28:39.298" level="INFO">@{cmd_list} = [ ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/xyz/openbmc_project/led/enumerate') | ('BMC_control_list'...</msg>
<status endtime="20171030 15:28:39.298" status="PASS" starttime="20171030 15:28:39.297"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:28:39.299" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_FIRMWARE_list.txt</msg>
<status endtime="20171030 15:28:39.300" status="PASS" starttime="20171030 15:28:39.299"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:28:39.304" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:28:39.304" status="PASS" starttime="20171030 15:28:39.303"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:28:39.305" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:28:39.305" status="PASS" starttime="20171030 15:28:39.305"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:28:39.306" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:28:39.306" status="PASS" starttime="20171030 15:28:39.306"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:28:39.307" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:28:39.307" status="PASS" starttime="20171030 15:28:39.307"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:28:39.490" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:28:39.490" status="PASS" starttime="20171030 15:28:39.310"></status>
</kw>
<msg timestamp="20171030 15:28:39.490" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:28:39.490" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:39.490" status="PASS" starttime="20171030 15:28:39.308"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:28:39.491" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:39.491" status="PASS" starttime="20171030 15:28:39.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:39.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:39.492" status="PASS" starttime="20171030 15:28:39.491"></status>
</kw>
<status endtime="20171030 15:28:39.492" status="PASS" starttime="20171030 15:28:39.303"></status>
</kw>
<status endtime="20171030 15:28:39.492" status="PASS" starttime="20171030 15:28:39.302"></status>
</kw>
<status endtime="20171030 15:28:39.492" status="PASS" starttime="20171030 15:28:39.301"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:28:39.493" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status endtime="20171030 15:28:39.493" status="PASS" starttime="20171030 15:28:39.492"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:28:39.493" status="PASS" starttime="20171030 15:28:39.493"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:28:40.046" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171030 15:28:40.046" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:40.046" status="PASS" starttime="20171030 15:28:39.493"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:28:40.047" status="PASS" starttime="20171030 15:28:40.047"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:28:40.048" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:28:40.048" status="PASS" starttime="20171030 15:28:40.048"></status>
</kw>
<msg timestamp="20171030 15:28:40.048" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:40.048" status="PASS" starttime="20171030 15:28:39.300"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:40.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:40.049" status="PASS" starttime="20171030 15:28:40.049"></status>
</kw>
<msg timestamp="20171030 15:28:40.050" level="INFO">${status} = True</msg>
<status endtime="20171030 15:28:40.050" status="PASS" starttime="20171030 15:28:40.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20171030 15:28:40.050" status="PASS" starttime="20171030 15:28:40.050"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171030 15:28:40.051" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/612e0eb6": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-230-g490e2be", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/612e0eb6/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/612e0eb6/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/612e0eb6", 
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/faec71ec", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/software/faec71ec": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-227-g240bdec", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/faec71ec/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/faec71ec/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/612e0eb6", 
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:28:40.052" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171030 15:28:40.052" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/612e0eb6": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status endtime="20171030 15:28:40.052" status="PASS" starttime="20171030 15:28:40.050"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:40.053" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_FIRMWARE_list.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:40.053" status="PASS" starttime="20171030 15:28:40.053"></status>
</kw>
<status endtime="20171030 15:28:40.054" status="PASS" starttime="20171030 15:28:40.052"></status>
</kw>
<status endtime="20171030 15:28:40.054" status="PASS" starttime="20171030 15:28:39.298"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:28:40.054" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_inventory.txt</msg>
<status endtime="20171030 15:28:40.055" status="PASS" starttime="20171030 15:28:40.054"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:28:40.057" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:28:40.058" status="PASS" starttime="20171030 15:28:40.057"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:28:40.058" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:28:40.058" status="PASS" starttime="20171030 15:28:40.058"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:28:40.059" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:28:40.059" status="PASS" starttime="20171030 15:28:40.058"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:28:40.059" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:28:40.059" status="PASS" starttime="20171030 15:28:40.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:28:40.445" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:28:40.446" status="PASS" starttime="20171030 15:28:40.060"></status>
</kw>
<msg timestamp="20171030 15:28:40.446" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:28:40.446" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:40.446" status="PASS" starttime="20171030 15:28:40.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:28:40.446" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:40.447" status="PASS" starttime="20171030 15:28:40.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:40.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:40.447" status="PASS" starttime="20171030 15:28:40.447"></status>
</kw>
<status endtime="20171030 15:28:40.447" status="PASS" starttime="20171030 15:28:40.056"></status>
</kw>
<status endtime="20171030 15:28:40.448" status="PASS" starttime="20171030 15:28:40.056"></status>
</kw>
<status endtime="20171030 15:28:40.448" status="PASS" starttime="20171030 15:28:40.055"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:28:40.448" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20171030 15:28:40.448" status="PASS" starttime="20171030 15:28:40.448"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:28:40.449" status="PASS" starttime="20171030 15:28:40.449"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:28:43.144" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20171030 15:28:43.144" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:43.144" status="PASS" starttime="20171030 15:28:40.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:28:43.145" status="PASS" starttime="20171030 15:28:43.145"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:28:43.146" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:28:43.146" status="PASS" starttime="20171030 15:28:43.145"></status>
</kw>
<msg timestamp="20171030 15:28:43.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:43.146" status="PASS" starttime="20171030 15:28:40.055"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:43.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:43.147" status="PASS" starttime="20171030 15:28:43.147"></status>
</kw>
<msg timestamp="20171030 15:28:43.147" level="INFO">${status} = True</msg>
<status endtime="20171030 15:28:43.147" status="PASS" starttime="20171030 15:28:43.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20171030 15:28:43.148" status="PASS" starttime="20171030 15:28:43.148"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171030 15:28:43.151" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/612e0eb6", 
        "/xyz/openbmc_project/software/faec71ec"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 0, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 0, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:28:43.152" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171030 15:28:43.152" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status endtime="20171030 15:28:43.152" status="PASS" starttime="20171030 15:28:43.148"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:43.154" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_inventory.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:43.154" status="PASS" starttime="20171030 15:28:43.153"></status>
</kw>
<status endtime="20171030 15:28:43.154" status="PASS" starttime="20171030 15:28:43.152"></status>
</kw>
<status endtime="20171030 15:28:43.154" status="PASS" starttime="20171030 15:28:40.054"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:28:43.155" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_led.txt</msg>
<status endtime="20171030 15:28:43.155" status="PASS" starttime="20171030 15:28:43.154"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:28:43.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:28:43.158" status="PASS" starttime="20171030 15:28:43.157"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:28:43.158" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:28:43.159" status="PASS" starttime="20171030 15:28:43.158"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:28:43.159" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:28:43.159" status="PASS" starttime="20171030 15:28:43.159"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:28:43.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:28:43.160" status="PASS" starttime="20171030 15:28:43.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:28:43.437" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:28:43.437" status="PASS" starttime="20171030 15:28:43.161"></status>
</kw>
<msg timestamp="20171030 15:28:43.437" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:28:43.437" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:43.437" status="PASS" starttime="20171030 15:28:43.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:28:43.438" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:43.438" status="PASS" starttime="20171030 15:28:43.437"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:43.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:43.438" status="PASS" starttime="20171030 15:28:43.438"></status>
</kw>
<status endtime="20171030 15:28:43.439" status="PASS" starttime="20171030 15:28:43.157"></status>
</kw>
<status endtime="20171030 15:28:43.439" status="PASS" starttime="20171030 15:28:43.156"></status>
</kw>
<status endtime="20171030 15:28:43.439" status="PASS" starttime="20171030 15:28:43.155"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:28:43.439" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status endtime="20171030 15:28:43.439" status="PASS" starttime="20171030 15:28:43.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:28:43.440" status="PASS" starttime="20171030 15:28:43.440"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:28:45.957" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171030 15:28:45.957" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:45.957" status="PASS" starttime="20171030 15:28:43.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:28:45.958" status="PASS" starttime="20171030 15:28:45.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:28:45.958" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:28:45.958" status="PASS" starttime="20171030 15:28:45.958"></status>
</kw>
<msg timestamp="20171030 15:28:45.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:45.958" status="PASS" starttime="20171030 15:28:43.155"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:45.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:45.960" status="PASS" starttime="20171030 15:28:45.959"></status>
</kw>
<msg timestamp="20171030 15:28:45.960" level="INFO">${status} = True</msg>
<status endtime="20171030 15:28:45.960" status="PASS" starttime="20171030 15:28:45.959"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20171030 15:28:45.960" status="PASS" starttime="20171030 15:28:45.960"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171030 15:28:45.962" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:28:45.963" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171030 15:28:45.963" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status endtime="20171030 15:28:45.963" status="PASS" starttime="20171030 15:28:45.961"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:45.964" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_led.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_led.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:45.964" status="PASS" starttime="20171030 15:28:45.964"></status>
</kw>
<status endtime="20171030 15:28:45.965" status="PASS" starttime="20171030 15:28:45.963"></status>
</kw>
<status endtime="20171030 15:28:45.965" status="PASS" starttime="20171030 15:28:43.154"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:28:45.965" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_control_list.txt</msg>
<status endtime="20171030 15:28:45.965" status="PASS" starttime="20171030 15:28:45.965"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:28:45.968" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:28:45.969" status="PASS" starttime="20171030 15:28:45.968"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:28:45.969" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:28:45.969" status="PASS" starttime="20171030 15:28:45.969"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:28:45.970" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:28:45.970" status="PASS" starttime="20171030 15:28:45.969"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:28:45.970" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:28:45.970" status="PASS" starttime="20171030 15:28:45.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:28:46.192" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:28:46.192" status="PASS" starttime="20171030 15:28:45.971"></status>
</kw>
<msg timestamp="20171030 15:28:46.192" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:28:46.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:46.192" status="PASS" starttime="20171030 15:28:45.971"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:28:46.193" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:46.193" status="PASS" starttime="20171030 15:28:46.193"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:46.194" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:46.194" status="PASS" starttime="20171030 15:28:46.193"></status>
</kw>
<status endtime="20171030 15:28:46.194" status="PASS" starttime="20171030 15:28:45.967"></status>
</kw>
<status endtime="20171030 15:28:46.194" status="PASS" starttime="20171030 15:28:45.967"></status>
</kw>
<status endtime="20171030 15:28:46.194" status="PASS" starttime="20171030 15:28:45.966"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:28:46.195" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status endtime="20171030 15:28:46.195" status="PASS" starttime="20171030 15:28:46.194"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:28:46.195" status="PASS" starttime="20171030 15:28:46.195"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:28:46.433" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171030 15:28:46.433" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:46.433" status="PASS" starttime="20171030 15:28:46.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:28:46.434" status="PASS" starttime="20171030 15:28:46.433"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:28:46.434" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:28:46.434" status="PASS" starttime="20171030 15:28:46.434"></status>
</kw>
<msg timestamp="20171030 15:28:46.435" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:46.435" status="PASS" starttime="20171030 15:28:45.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:46.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:46.436" status="PASS" starttime="20171030 15:28:46.435"></status>
</kw>
<msg timestamp="20171030 15:28:46.436" level="INFO">${status} = True</msg>
<status endtime="20171030 15:28:46.436" status="PASS" starttime="20171030 15:28:46.435"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20171030 15:28:46.437" status="PASS" starttime="20171030 15:28:46.436"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171030 15:28:46.438" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:28:46.438" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171030 15:28:46.438" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status endtime="20171030 15:28:46.438" status="PASS" starttime="20171030 15:28:46.437"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:46.439" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_control_list.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:46.439" status="PASS" starttime="20171030 15:28:46.439"></status>
</kw>
<status endtime="20171030 15:28:46.439" status="PASS" starttime="20171030 15:28:46.438"></status>
</kw>
<status endtime="20171030 15:28:46.439" status="PASS" starttime="20171030 15:28:45.965"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:28:46.440" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_OCC_state.txt</msg>
<status endtime="20171030 15:28:46.440" status="PASS" starttime="20171030 15:28:46.440"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:28:46.443" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:28:46.444" status="PASS" starttime="20171030 15:28:46.443"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:28:46.445" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:28:46.445" status="PASS" starttime="20171030 15:28:46.444"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:28:46.445" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:28:46.445" status="PASS" starttime="20171030 15:28:46.445"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:28:46.446" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:28:46.446" status="PASS" starttime="20171030 15:28:46.446"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:28:46.685" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:28:46.686" status="PASS" starttime="20171030 15:28:46.447"></status>
</kw>
<msg timestamp="20171030 15:28:46.686" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:28:46.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:46.686" status="PASS" starttime="20171030 15:28:46.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:28:46.687" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:46.687" status="PASS" starttime="20171030 15:28:46.686"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:46.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:46.687" status="PASS" starttime="20171030 15:28:46.687"></status>
</kw>
<status endtime="20171030 15:28:46.687" status="PASS" starttime="20171030 15:28:46.442"></status>
</kw>
<status endtime="20171030 15:28:46.688" status="PASS" starttime="20171030 15:28:46.442"></status>
</kw>
<status endtime="20171030 15:28:46.688" status="PASS" starttime="20171030 15:28:46.441"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:28:46.688" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status endtime="20171030 15:28:46.688" status="PASS" starttime="20171030 15:28:46.688"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:28:46.689" status="PASS" starttime="20171030 15:28:46.689"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:28:46.845" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171030 15:28:46.846" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:46.846" status="PASS" starttime="20171030 15:28:46.689"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:28:46.847" status="PASS" starttime="20171030 15:28:46.846"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:28:46.847" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:28:46.847" status="PASS" starttime="20171030 15:28:46.847"></status>
</kw>
<msg timestamp="20171030 15:28:46.847" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:46.848" status="PASS" starttime="20171030 15:28:46.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:46.849" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:46.849" status="PASS" starttime="20171030 15:28:46.848"></status>
</kw>
<msg timestamp="20171030 15:28:46.849" level="INFO">${status} = True</msg>
<status endtime="20171030 15:28:46.849" status="PASS" starttime="20171030 15:28:46.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20171030 15:28:46.849" status="PASS" starttime="20171030 15:28:46.849"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171030 15:28:46.850" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 1, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 1, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:28:46.850" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171030 15:28:46.850" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 1,
            "ThrottleMemTemp": 0,
            "ThrottleProcPower": 0,...</msg>
<status endtime="20171030 15:28:46.850" status="PASS" starttime="20171030 15:28:46.850"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:46.852" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_OCC_state.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_OCC_state.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:46.852" status="PASS" starttime="20171030 15:28:46.851"></status>
</kw>
<status endtime="20171030 15:28:46.852" status="PASS" starttime="20171030 15:28:46.851"></status>
</kw>
<status endtime="20171030 15:28:46.852" status="PASS" starttime="20171030 15:28:46.440"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:28:46.853" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_sensor_list.txt</msg>
<status endtime="20171030 15:28:46.853" status="PASS" starttime="20171030 15:28:46.853"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:28:46.856" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:28:46.858" status="PASS" starttime="20171030 15:28:46.855"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:28:46.859" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:28:46.859" status="PASS" starttime="20171030 15:28:46.858"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:28:46.859" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:28:46.859" status="PASS" starttime="20171030 15:28:46.859"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:28:46.860" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:28:46.860" status="PASS" starttime="20171030 15:28:46.860"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:28:47.369" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:28:47.369" status="PASS" starttime="20171030 15:28:46.861"></status>
</kw>
<msg timestamp="20171030 15:28:47.369" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:28:47.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:47.370" status="PASS" starttime="20171030 15:28:46.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:28:47.370" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:47.370" status="PASS" starttime="20171030 15:28:47.370"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:47.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:47.371" status="PASS" starttime="20171030 15:28:47.371"></status>
</kw>
<status endtime="20171030 15:28:47.371" status="PASS" starttime="20171030 15:28:46.855"></status>
</kw>
<status endtime="20171030 15:28:47.371" status="PASS" starttime="20171030 15:28:46.854"></status>
</kw>
<status endtime="20171030 15:28:47.371" status="PASS" starttime="20171030 15:28:46.854"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:28:47.372" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status endtime="20171030 15:28:47.372" status="PASS" starttime="20171030 15:28:47.372"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:28:47.373" status="PASS" starttime="20171030 15:28:47.372"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:28:52.859" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171030 15:28:52.859" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:52.859" status="PASS" starttime="20171030 15:28:47.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:28:52.861" status="PASS" starttime="20171030 15:28:52.860"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:28:52.861" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:28:52.861" status="PASS" starttime="20171030 15:28:52.861"></status>
</kw>
<msg timestamp="20171030 15:28:52.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:52.862" status="PASS" starttime="20171030 15:28:46.853"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:52.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:52.863" status="PASS" starttime="20171030 15:28:52.863"></status>
</kw>
<msg timestamp="20171030 15:28:52.863" level="INFO">${status} = True</msg>
<status endtime="20171030 15:28:52.863" status="PASS" starttime="20171030 15:28:52.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20171030 15:28:52.864" status="PASS" starttime="20171030 15:28:52.863"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171030 15:28:52.870" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 33000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 1125, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 7937, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 8865
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 7937, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 8844
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 7937, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 8886
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 7937, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 8844
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/fan_disk_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 400000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 144000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 375000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/io_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 150000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 10000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 128000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p0_gpu0_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 350000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 2000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 330000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p0_gpu1_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 350000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 2000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 330000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p0_gpu2_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 350000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 2000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 330000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p0_io_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 100000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 53000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p0_mem_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 23000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 250000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p0_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 53000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 250000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p1_gpu0_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 350000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 1000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 330000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p1_gpu1_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 350000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 1000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 330000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p1_gpu2_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 350000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 2000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 330000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p1_io_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 100000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 47000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p1_mem_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 17000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 250000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p1_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 45000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 250000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 430000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/total_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 3100000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 417000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 3050000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 35000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 19800, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 25000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm0_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm10_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm11_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm13_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm15_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 22000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm1_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm2_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm3_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm4_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm5_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm6_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm7_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm9_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 22000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core0_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core10_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core11_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core12_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core13_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core14_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core15_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core16_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core17_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 34000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core18_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 34000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core19_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 34000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core20_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 34000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core21_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core22_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 34000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core23_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 34000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core2_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core3_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core4_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 34000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core5_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core6_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core7_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core8_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core10_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core11_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core12_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core13_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core14_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core15_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core16_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core17_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core18_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core19_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core20_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core21_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core22_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core23_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core2_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core3_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core4_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core5_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core6_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core7_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core8_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core9_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 22000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 23000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 206500, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 12250, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 1, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 1, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 250, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:28:52.871" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171030 15:28:52.872" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "CriticalAlarmHigh": 0,
            "CriticalAlarmLow": 0,
            "CriticalHigh": 180000,
        ...</msg>
<status endtime="20171030 15:28:52.872" status="PASS" starttime="20171030 15:28:52.864"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:52.874" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_sensor_list.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:52.874" status="PASS" starttime="20171030 15:28:52.874"></status>
</kw>
<status endtime="20171030 15:28:52.875" status="PASS" starttime="20171030 15:28:52.872"></status>
</kw>
<status endtime="20171030 15:28:52.875" status="PASS" starttime="20171030 15:28:46.852"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:28:52.875" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_elog.txt</msg>
<status endtime="20171030 15:28:52.875" status="PASS" starttime="20171030 15:28:52.875"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:28:52.878" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:28:52.879" status="PASS" starttime="20171030 15:28:52.878"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:28:52.879" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:28:52.879" status="PASS" starttime="20171030 15:28:52.879"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:28:52.880" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:28:52.880" status="PASS" starttime="20171030 15:28:52.879"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:28:52.881" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:28:52.881" status="PASS" starttime="20171030 15:28:52.881"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:28:53.370" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:28:53.370" status="PASS" starttime="20171030 15:28:52.882"></status>
</kw>
<msg timestamp="20171030 15:28:53.370" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:28:53.371" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:53.371" status="PASS" starttime="20171030 15:28:52.881"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:28:53.371" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:53.371" status="PASS" starttime="20171030 15:28:53.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:53.372" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:53.372" status="PASS" starttime="20171030 15:28:53.372"></status>
</kw>
<status endtime="20171030 15:28:53.372" status="PASS" starttime="20171030 15:28:52.877"></status>
</kw>
<status endtime="20171030 15:28:53.372" status="PASS" starttime="20171030 15:28:52.877"></status>
</kw>
<status endtime="20171030 15:28:53.372" status="PASS" starttime="20171030 15:28:52.876"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:28:53.373" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20171030 15:28:53.373" status="PASS" starttime="20171030 15:28:53.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:28:53.374" status="PASS" starttime="20171030 15:28:53.373"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:28:53.602" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20171030 15:28:53.602" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:53.602" status="PASS" starttime="20171030 15:28:53.374"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:28:53.603" status="PASS" starttime="20171030 15:28:53.603"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:28:53.603" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:28:53.603" status="PASS" starttime="20171030 15:28:53.603"></status>
</kw>
<msg timestamp="20171030 15:28:53.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:28:53.604" status="PASS" starttime="20171030 15:28:52.876"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:28:53.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:28:53.605" status="PASS" starttime="20171030 15:28:53.604"></status>
</kw>
<msg timestamp="20171030 15:28:53.605" level="INFO">${status} = True</msg>
<status endtime="20171030 15:28:53.605" status="PASS" starttime="20171030 15:28:53.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20171030 15:28:53.606" status="PASS" starttime="20171030 15:28:53.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171030 15:28:53.606" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1329"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509376444311, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1329"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509376451457, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1329"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509377130997, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "_PID=1329"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509377137798, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:28:53.606" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171030 15:28:53.607" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "_PID=1329"
            ],
            "Id": 1,
            "Message": "org.open_power...</msg>
<status endtime="20171030 15:28:53.607" status="PASS" starttime="20171030 15:28:53.606"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:28:53.608" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_elog.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:28:53.608" status="PASS" starttime="20171030 15:28:53.608"></status>
</kw>
<status endtime="20171030 15:28:53.608" status="PASS" starttime="20171030 15:28:53.607"></status>
</kw>
<status endtime="20171030 15:28:53.608" status="PASS" starttime="20171030 15:28:52.875"></status>
</kw>
<status endtime="20171030 15:28:53.608" status="PASS" starttime="20171030 15:28:39.298"></status>
</kw>
<status endtime="20171030 15:28:53.608" status="PASS" starttime="20171030 15:28:39.292"></status>
</kw>
<status endtime="20171030 15:28:53.609" status="PASS" starttime="20171030 15:28:39.291"></status>
</kw>
<status endtime="20171030 15:28:53.609" status="PASS" starttime="20171030 15:28:39.291"></status>
</kw>
<status endtime="20171030 15:28:53.609" status="PASS" starttime="20171030 15:28:39.290"></status>
</kw>
<status endtime="20171030 15:28:53.609" status="PASS" starttime="20171030 15:28:39.225"></status>
</kw>
<status endtime="20171030 15:28:53.609" status="PASS" starttime="20171030 15:28:39.221"></status>
</kw>
<status endtime="20171030 15:28:53.609" status="PASS" starttime="20171030 15:28:39.221"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20171030 15:28:53.611" status="PASS" starttime="20171030 15:28:53.611"></status>
</kw>
<msg timestamp="20171030 15:28:53.611" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:28:53.611" level="INFO">${ret_values} = None</msg>
<status endtime="20171030 15:28:53.611" status="PASS" starttime="20171030 15:28:53.610"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20171030 15:28:53.612" status="PASS" starttime="20171030 15:28:53.611"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171030 15:28:53.662" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20171030 15:28:53.662" status="PASS" starttime="20171030 15:28:53.662"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171030 15:28:53.664" level="INFO">@{cmd_list} = [ ('BMC_journalctl_pretty', 'journalctl -o json-pretty') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd_active_list', 'ls -Al /...</msg>
<status endtime="20171030 15:28:53.664" status="PASS" starttime="20171030 15:28:53.663"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:28:53.665" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_journalctl_pretty.txt</msg>
<status endtime="20171030 15:28:53.665" status="PASS" starttime="20171030 15:28:53.664"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20171030 15:28:53.666" status="PASS" starttime="20171030 15:28:53.666"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:28:53.667" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status endtime="20171030 15:28:53.667" status="PASS" starttime="20171030 15:28:53.667"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:28:53.807" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:28:53.807" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171030 15:29:05.307" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:05.342" status="PASS" starttime="20171030 15:28:53.735"></status>
</kw>
<msg timestamp="20171030 15:29:05.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:05.389" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=0a250399922e4f4d9e7699dc72ecd825;i=1;b=b8eb3ed06c71494583545a30d62e4bce;m=158b142;t=55cc5064f145e;x=4120cd0ce5443bcf",\n\t"__REALTIME_TIMESTAMP" : "1509376167711838",\n\t"__MON...</msg>
<status endtime="20171030 15:29:05.390" status="PASS" starttime="20171030 15:28:53.667"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:05.400" level="INFO">${stdout} = {
	"__CURSOR" : "s=0a250399922e4f4d9e7699dc72ecd825;i=1;b=b8eb3ed06c71494583545a30d62e4bce;m=158b142;t=55cc5064f145e;x=4120cd0ce5443bcf",
	"__REALTIME_TIMESTAMP" : "1509376167711838",
	"__MONOTONIC_TI...</msg>
<status endtime="20171030 15:29:05.400" status="PASS" starttime="20171030 15:29:05.390"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:05.401" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:29:05.401" status="PASS" starttime="20171030 15:29:05.401"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:05.429" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:05.429" status="PASS" starttime="20171030 15:29:05.421"></status>
</kw>
<status endtime="20171030 15:29:05.430" status="PASS" starttime="20171030 15:29:05.410"></status>
</kw>
<status endtime="20171030 15:29:05.430" status="PASS" starttime="20171030 15:29:05.402"></status>
</kw>
<status endtime="20171030 15:29:05.430" status="PASS" starttime="20171030 15:28:53.665"></status>
</kw>
<status endtime="20171030 15:29:05.430" status="PASS" starttime="20171030 15:28:53.664"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:29:05.431" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_meminfo.txt</msg>
<status endtime="20171030 15:29:05.431" status="PASS" starttime="20171030 15:29:05.430"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20171030 15:29:05.432" status="PASS" starttime="20171030 15:29:05.432"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:05.433" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20171030 15:29:05.433" status="PASS" starttime="20171030 15:29:05.432"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:29:05.554" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:05.555" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171030 15:29:05.634" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:05.634" status="PASS" starttime="20171030 15:29:05.488"></status>
</kw>
<msg timestamp="20171030 15:29:05.634" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:05.634" level="INFO">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          213624 kB\nMemAvailable:     317688 kB\nBuffers:           31860 kB\nCached:            81984 kB\nSwapCached:            0 kB\nActive:           16551...</msg>
<status endtime="20171030 15:29:05.634" status="PASS" starttime="20171030 15:29:05.433"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:05.635" level="INFO">${stdout} = MemTotal:         432252 kB
MemFree:          213624 kB
MemAvailable:     317688 kB
Buffers:           31860 kB
Cached:            81984 kB
SwapCached:            0 kB
Active:           165516 kB
Inac...</msg>
<status endtime="20171030 15:29:05.635" status="PASS" starttime="20171030 15:29:05.635"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:05.636" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:29:05.636" status="PASS" starttime="20171030 15:29:05.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:05.643" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_meminfo.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:05.643" status="PASS" starttime="20171030 15:29:05.642"></status>
</kw>
<status endtime="20171030 15:29:05.643" status="PASS" starttime="20171030 15:29:05.642"></status>
</kw>
<status endtime="20171030 15:29:05.643" status="PASS" starttime="20171030 15:29:05.636"></status>
</kw>
<status endtime="20171030 15:29:05.643" status="PASS" starttime="20171030 15:29:05.431"></status>
</kw>
<status endtime="20171030 15:29:05.643" status="PASS" starttime="20171030 15:29:05.430"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:29:05.644" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_procinfo.txt</msg>
<status endtime="20171030 15:29:05.644" status="PASS" starttime="20171030 15:29:05.644"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20171030 15:29:05.645" status="PASS" starttime="20171030 15:29:05.645"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:05.646" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20171030 15:29:05.646" status="PASS" starttime="20171030 15:29:05.646"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:29:05.766" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:05.766" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171030 15:29:05.927" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:05.927" status="PASS" starttime="20171030 15:29:05.702"></status>
</kw>
<msg timestamp="20171030 15:29:05.928" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:05.928" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20171030 15:29:05.928" status="PASS" starttime="20171030 15:29:05.646"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:05.929" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20171030 15:29:05.929" status="PASS" starttime="20171030 15:29:05.928"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:05.929" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:29:05.929" status="PASS" starttime="20171030 15:29:05.929"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:05.936" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_procinfo.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:05.937" status="PASS" starttime="20171030 15:29:05.936"></status>
</kw>
<status endtime="20171030 15:29:05.937" status="PASS" starttime="20171030 15:29:05.935"></status>
</kw>
<status endtime="20171030 15:29:05.937" status="PASS" starttime="20171030 15:29:05.929"></status>
</kw>
<status endtime="20171030 15:29:05.937" status="PASS" starttime="20171030 15:29:05.644"></status>
</kw>
<status endtime="20171030 15:29:05.937" status="PASS" starttime="20171030 15:29:05.643"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:29:05.938" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_dmesg.txt</msg>
<status endtime="20171030 15:29:05.938" status="PASS" starttime="20171030 15:29:05.937"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20171030 15:29:05.939" status="PASS" starttime="20171030 15:29:05.939"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:05.940" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20171030 15:29:05.940" status="PASS" starttime="20171030 15:29:05.939"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:29:06.061" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:06.062" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171030 15:29:06.179" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:06.180" status="PASS" starttime="20171030 15:29:05.996"></status>
</kw>
<msg timestamp="20171030 15:29:06.180" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:06.180" level="INFO">${ret_values} = (u'[    2.060000] aspeed-i2c-bus 1e78a100.i2c-bus: i2c bus 3 registered, irq 27\n[    2.060000] aspeed-i2c-bus 1e78a140.i2c-bus: i2c bus 4 registered, irq 28\n[    2.060000] aspeed-i2c-bus 1e78a180.i2...</msg>
<status endtime="20171030 15:29:06.180" status="PASS" starttime="20171030 15:29:05.940"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:06.181" level="INFO">${stdout} = [    2.060000] aspeed-i2c-bus 1e78a100.i2c-bus: i2c bus 3 registered, irq 27
[    2.060000] aspeed-i2c-bus 1e78a140.i2c-bus: i2c bus 4 registered, irq 28
[    2.060000] aspeed-i2c-bus 1e78a180.i2c-bus...</msg>
<status endtime="20171030 15:29:06.181" status="PASS" starttime="20171030 15:29:06.180"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:06.181" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:29:06.181" status="PASS" starttime="20171030 15:29:06.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:06.189" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_dmesg.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:06.189" status="PASS" starttime="20171030 15:29:06.188"></status>
</kw>
<status endtime="20171030 15:29:06.189" status="PASS" starttime="20171030 15:29:06.187"></status>
</kw>
<status endtime="20171030 15:29:06.189" status="PASS" starttime="20171030 15:29:06.182"></status>
</kw>
<status endtime="20171030 15:29:06.189" status="PASS" starttime="20171030 15:29:05.938"></status>
</kw>
<status endtime="20171030 15:29:06.189" status="PASS" starttime="20171030 15:29:05.937"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:29:06.190" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_proc_fd_active_list.txt</msg>
<status endtime="20171030 15:29:06.190" status="PASS" starttime="20171030 15:29:06.190"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20171030 15:29:06.191" status="PASS" starttime="20171030 15:29:06.191"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:06.192" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20171030 15:29:06.192" status="PASS" starttime="20171030 15:29:06.192"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:29:06.314" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:06.314" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171030 15:29:07.207" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:07.208" status="PASS" starttime="20171030 15:29:06.246"></status>
</kw>
<msg timestamp="20171030 15:29:07.208" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:07.209" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct 30 15:29 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct 30 15:29 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20171030 15:29:07.209" status="PASS" starttime="20171030 15:29:06.192"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:07.210" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct 30 15:29 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct 30 15:29 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20171030 15:29:07.210" status="PASS" starttime="20171030 15:29:07.210"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:07.211" level="INFO">${stderr} = ls: /proc/2547/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20171030 15:29:07.211" status="PASS" starttime="20171030 15:29:07.211"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:07.223" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:07.223" status="PASS" starttime="20171030 15:29:07.222"></status>
</kw>
<status endtime="20171030 15:29:07.223" status="PASS" starttime="20171030 15:29:07.220"></status>
</kw>
<status endtime="20171030 15:29:07.223" status="PASS" starttime="20171030 15:29:07.212"></status>
</kw>
<status endtime="20171030 15:29:07.223" status="PASS" starttime="20171030 15:29:06.190"></status>
</kw>
<status endtime="20171030 15:29:07.223" status="PASS" starttime="20171030 15:29:06.189"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:29:07.224" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_journalctl_nopager.txt</msg>
<status endtime="20171030 15:29:07.224" status="PASS" starttime="20171030 15:29:07.224"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20171030 15:29:07.225" status="PASS" starttime="20171030 15:29:07.225"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:07.226" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20171030 15:29:07.226" status="PASS" starttime="20171030 15:29:07.226"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:29:07.343" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:07.344" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171030 15:29:11.078" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:11.079" status="PASS" starttime="20171030 15:29:07.279"></status>
</kw>
<msg timestamp="20171030 15:29:11.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:11.083" level="INFO">${ret_values} = (u'-- Logs begin at Mon 2017-10-30 15:09:27 UTC, end at Mon 2017-10-30 15:28:48 UTC. --\nOct 30 15:09:27 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 30 15:09:27 witherspoon kernel: Linu...</msg>
<status endtime="20171030 15:29:11.083" status="PASS" starttime="20171030 15:29:07.226"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:11.086" level="INFO">${stdout} = -- Logs begin at Mon 2017-10-30 15:09:27 UTC, end at Mon 2017-10-30 15:28:48 UTC. --
Oct 30 15:09:27 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 30 15:09:27 witherspoon kernel: Linux ver...</msg>
<status endtime="20171030 15:29:11.086" status="PASS" starttime="20171030 15:29:11.084"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:11.086" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:29:11.086" status="PASS" starttime="20171030 15:29:11.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:11.098" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:11.098" status="PASS" starttime="20171030 15:29:11.095"></status>
</kw>
<status endtime="20171030 15:29:11.098" status="PASS" starttime="20171030 15:29:11.093"></status>
</kw>
<status endtime="20171030 15:29:11.098" status="PASS" starttime="20171030 15:29:11.087"></status>
</kw>
<status endtime="20171030 15:29:11.098" status="PASS" starttime="20171030 15:29:07.224"></status>
</kw>
<status endtime="20171030 15:29:11.098" status="PASS" starttime="20171030 15:29:07.223"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:29:11.099" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_proc_list.txt</msg>
<status endtime="20171030 15:29:11.099" status="PASS" starttime="20171030 15:29:11.099"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20171030 15:29:11.101" status="PASS" starttime="20171030 15:29:11.101"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:11.102" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20171030 15:29:11.102" status="PASS" starttime="20171030 15:29:11.101"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:29:11.233" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:11.234" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171030 15:29:12.225" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:12.225" status="PASS" starttime="20171030 15:29:11.162"></status>
</kw>
<msg timestamp="20171030 15:29:12.226" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:12.226" level="INFO">${ret_values} = (u'Mem: 218736K used, 213516K free, 8996K shrd, 31860K buff, 81992K cached\nCPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq\nLoad average: 2.87 2.07 1.81 1/177 2549\n  PID  PPID U...</msg>
<status endtime="20171030 15:29:12.226" status="PASS" starttime="20171030 15:29:11.102"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:12.227" level="INFO">${stdout} = Mem: 218736K used, 213516K free, 8996K shrd, 31860K buff, 81992K cached
CPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq
Load average: 2.87 2.07 1.81 1/177 2549
  PID  PPID USER   ...</msg>
<status endtime="20171030 15:29:12.227" status="PASS" starttime="20171030 15:29:12.226"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:12.227" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:29:12.227" status="PASS" starttime="20171030 15:29:12.227"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:12.238" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_proc_list.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:12.238" status="PASS" starttime="20171030 15:29:12.237"></status>
</kw>
<status endtime="20171030 15:29:12.238" status="PASS" starttime="20171030 15:29:12.236"></status>
</kw>
<status endtime="20171030 15:29:12.238" status="PASS" starttime="20171030 15:29:12.228"></status>
</kw>
<status endtime="20171030 15:29:12.238" status="PASS" starttime="20171030 15:29:11.100"></status>
</kw>
<status endtime="20171030 15:29:12.238" status="PASS" starttime="20171030 15:29:11.099"></status>
</kw>
<status endtime="20171030 15:29:12.238" status="PASS" starttime="20171030 15:28:53.664"></status>
</kw>
<status endtime="20171030 15:29:12.238" status="PASS" starttime="20171030 15:28:53.663"></status>
</kw>
<status endtime="20171030 15:29:12.238" status="PASS" starttime="20171030 15:28:53.663"></status>
</kw>
<status endtime="20171030 15:29:12.239" status="PASS" starttime="20171030 15:28:53.663"></status>
</kw>
<status endtime="20171030 15:29:12.239" status="PASS" starttime="20171030 15:28:53.662"></status>
</kw>
<status endtime="20171030 15:29:12.239" status="PASS" starttime="20171030 15:28:53.612"></status>
</kw>
<status endtime="20171030 15:29:12.239" status="PASS" starttime="20171030 15:28:53.609"></status>
</kw>
<status endtime="20171030 15:29:12.239" status="PASS" starttime="20171030 15:28:53.609"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20171030 15:29:12.241" status="PASS" starttime="20171030 15:29:12.241"></status>
</kw>
<msg timestamp="20171030 15:29:12.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:12.241" level="INFO">${ret_values} = None</msg>
<status endtime="20171030 15:29:12.241" status="PASS" starttime="20171030 15:29:12.240"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20171030 15:29:12.242" status="PASS" starttime="20171030 15:29:12.241"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171030 15:29:12.346" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:12.346" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171030 15:29:12.518" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171030 15:29:12.536" level="INFO">${core_files} = None</msg>
<msg timestamp="20171030 15:29:12.536" level="INFO">${stderr} = None</msg>
<msg timestamp="20171030 15:29:12.536" level="INFO">${rc} = None</msg>
<msg timestamp="20171030 15:29:12.537" level="FAIL">#(UTC) 2017/10/30 15:29:12.534828 -    0.190912 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status endtime="20171030 15:29:12.537" status="FAIL" starttime="20171030 15:29:12.287"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171030 15:29:12.538" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171030 15:29:12.538" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status endtime="20171030 15:29:12.538" status="FAIL" starttime="20171030 15:29:12.537"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20171030 15:29:12.563" status="PASS" starttime="20171030 15:29:12.558"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20171030 15:29:13.709" status="PASS" starttime="20171030 15:29:12.564"></status>
</kw>
<status endtime="20171030 15:29:13.709" status="PASS" starttime="20171030 15:29:12.564"></status>
</kw>
<status endtime="20171030 15:29:13.709" status="PASS" starttime="20171030 15:29:12.563"></status>
</kw>
<status endtime="20171030 15:29:13.709" status="PASS" starttime="20171030 15:29:12.558"></status>
</kw>
<status endtime="20171030 15:29:13.709" status="PASS" starttime="20171030 15:29:12.538"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status endtime="20171030 15:29:13.709" status="PASS" starttime="20171030 15:29:13.709"></status>
</kw>
<status endtime="20171030 15:29:13.709" status="FAIL" starttime="20171030 15:29:12.287"></status>
</kw>
<status endtime="20171030 15:29:13.710" status="PASS" starttime="20171030 15:29:12.242"></status>
</kw>
<status endtime="20171030 15:29:13.710" status="PASS" starttime="20171030 15:29:12.239"></status>
</kw>
<status endtime="20171030 15:29:13.710" status="PASS" starttime="20171030 15:29:12.239"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20171030 15:29:13.712" status="PASS" starttime="20171030 15:29:13.712"></status>
</kw>
<msg timestamp="20171030 15:29:13.712" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:13.712" level="INFO">${ret_values} = None</msg>
<status endtime="20171030 15:29:13.712" status="PASS" starttime="20171030 15:29:13.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20171030 15:29:13.713" status="PASS" starttime="20171030 15:29:13.712"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171030 15:29:13.764" level="INFO">@{entries} = [ APPLICATION DATA | BMC DATA | DRIVER INFO ]</msg>
<status endtime="20171030 15:29:13.764" status="PASS" starttime="20171030 15:29:13.764"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171030 15:29:13.766" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20171030 15:29:13.766" status="PASS" starttime="20171030 15:29:13.765"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171030 15:29:13.772" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20171030 15:29:13.772" status="PASS" starttime="20171030 15:29:13.766"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:13.775" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:13.775" status="PASS" starttime="20171030 15:29:13.774"></status>
</kw>
<status endtime="20171030 15:29:13.775" status="PASS" starttime="20171030 15:29:13.774"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:13.776" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:13.777" status="PASS" starttime="20171030 15:29:13.776"></status>
</kw>
<status endtime="20171030 15:29:13.777" status="PASS" starttime="20171030 15:29:13.775"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:13.778" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:13.778" status="PASS" starttime="20171030 15:29:13.777"></status>
</kw>
<status endtime="20171030 15:29:13.778" status="PASS" starttime="20171030 15:29:13.777"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:13.779" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:13.779" status="PASS" starttime="20171030 15:29:13.779"></status>
</kw>
<status endtime="20171030 15:29:13.779" status="PASS" starttime="20171030 15:29:13.778"></status>
</kw>
<status endtime="20171030 15:29:13.779" status="PASS" starttime="20171030 15:29:13.773"></status>
</kw>
<status endtime="20171030 15:29:13.780" status="PASS" starttime="20171030 15:29:13.773"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:13.780" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20171030 15:29:13.780" status="PASS" starttime="20171030 15:29:13.780"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:29:13.901" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:13.902" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171030 15:29:16.466" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:16.466" status="PASS" starttime="20171030 15:29:13.832"></status>
</kw>
<msg timestamp="20171030 15:29:16.466" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:16.466" level="INFO">${ret_values} = (u'CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState    : xyz.openbmc_project.State.Host.HostS...</msg>
<status endtime="20171030 15:29:16.466" status="PASS" starttime="20171030 15:29:13.781"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:16.468" level="INFO">${stdout} = CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState    : xyz.openbmc_project.State.Host.HostState....</msg>
<status endtime="20171030 15:29:16.468" status="PASS" starttime="20171030 15:29:16.467"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:16.469" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:29:16.469" status="PASS" starttime="20171030 15:29:16.468"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:16.479" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:16.480" status="PASS" starttime="20171030 15:29:16.479"></status>
</kw>
<status endtime="20171030 15:29:16.480" status="PASS" starttime="20171030 15:29:16.478"></status>
</kw>
<status endtime="20171030 15:29:16.480" status="PASS" starttime="20171030 15:29:16.469"></status>
</kw>
<status endtime="20171030 15:29:16.480" status="PASS" starttime="20171030 15:29:13.772"></status>
</kw>
<status endtime="20171030 15:29:16.480" status="PASS" starttime="20171030 15:29:13.772"></status>
</kw>
<status endtime="20171030 15:29:16.480" status="PASS" starttime="20171030 15:29:13.772"></status>
</kw>
<status endtime="20171030 15:29:16.480" status="PASS" starttime="20171030 15:29:13.765"></status>
</kw>
<status endtime="20171030 15:29:16.480" status="PASS" starttime="20171030 15:29:13.765"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171030 15:29:16.481" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20171030 15:29:16.481" status="PASS" starttime="20171030 15:29:16.481"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171030 15:29:16.482" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20171030 15:29:16.482" status="PASS" starttime="20171030 15:29:16.482"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:16.485" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:16.485" status="PASS" starttime="20171030 15:29:16.485"></status>
</kw>
<status endtime="20171030 15:29:16.486" status="PASS" starttime="20171030 15:29:16.484"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:16.487" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:16.487" status="PASS" starttime="20171030 15:29:16.486"></status>
</kw>
<status endtime="20171030 15:29:16.487" status="PASS" starttime="20171030 15:29:16.486"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:16.488" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:16.488" status="PASS" starttime="20171030 15:29:16.488"></status>
</kw>
<status endtime="20171030 15:29:16.488" status="PASS" starttime="20171030 15:29:16.487"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:16.489" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:16.490" status="PASS" starttime="20171030 15:29:16.489"></status>
</kw>
<status endtime="20171030 15:29:16.490" status="PASS" starttime="20171030 15:29:16.489"></status>
</kw>
<status endtime="20171030 15:29:16.490" status="PASS" starttime="20171030 15:29:16.484"></status>
</kw>
<status endtime="20171030 15:29:16.490" status="PASS" starttime="20171030 15:29:16.483"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:16.491" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20171030 15:29:16.491" status="PASS" starttime="20171030 15:29:16.490"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:29:16.620" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:16.621" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171030 15:29:16.698" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:16.698" status="PASS" starttime="20171030 15:29:16.552"></status>
</kw>
<msg timestamp="20171030 15:29:16.698" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:16.698" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-64929c7fd2d88ef6a9e18d6a484ddc3957a6ecab #1 Mon Oct 30 14:58:13 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20171030 15:29:16.698" status="PASS" starttime="20171030 15:29:16.491"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:16.699" level="INFO">${stdout} = Linux witherspoon 4.10.17-64929c7fd2d88ef6a9e18d6a484ddc3957a6ecab #1 Mon Oct 30 14:58:13 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20171030 15:29:16.699" status="PASS" starttime="20171030 15:29:16.699"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:16.699" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:29:16.699" status="PASS" starttime="20171030 15:29:16.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:16.707" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:16.707" status="PASS" starttime="20171030 15:29:16.706"></status>
</kw>
<status endtime="20171030 15:29:16.707" status="PASS" starttime="20171030 15:29:16.706"></status>
</kw>
<status endtime="20171030 15:29:16.707" status="PASS" starttime="20171030 15:29:16.700"></status>
</kw>
<status endtime="20171030 15:29:16.707" status="PASS" starttime="20171030 15:29:16.482"></status>
</kw>
<status endtime="20171030 15:29:16.708" status="PASS" starttime="20171030 15:29:16.482"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:16.711" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:16.711" status="PASS" starttime="20171030 15:29:16.710"></status>
</kw>
<status endtime="20171030 15:29:16.711" status="PASS" starttime="20171030 15:29:16.710"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:16.712" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:16.712" status="PASS" starttime="20171030 15:29:16.712"></status>
</kw>
<status endtime="20171030 15:29:16.712" status="PASS" starttime="20171030 15:29:16.711"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:16.714" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:16.714" status="PASS" starttime="20171030 15:29:16.713"></status>
</kw>
<status endtime="20171030 15:29:16.714" status="PASS" starttime="20171030 15:29:16.713"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:16.715" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:16.715" status="PASS" starttime="20171030 15:29:16.715"></status>
</kw>
<status endtime="20171030 15:29:16.715" status="PASS" starttime="20171030 15:29:16.714"></status>
</kw>
<status endtime="20171030 15:29:16.715" status="PASS" starttime="20171030 15:29:16.709"></status>
</kw>
<status endtime="20171030 15:29:16.715" status="PASS" starttime="20171030 15:29:16.709"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:16.716" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20171030 15:29:16.716" status="PASS" starttime="20171030 15:29:16.716"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:29:16.831" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:16.837" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171030 15:29:17.022" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:17.022" status="PASS" starttime="20171030 15:29:16.772"></status>
</kw>
<msg timestamp="20171030 15:29:17.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:17.023" level="INFO">${ret_values} = (u' 15:29:36 up 20 min,  load average: 2.72, 2.05, 1.80', u'', 0)</msg>
<status endtime="20171030 15:29:17.023" status="PASS" starttime="20171030 15:29:16.716"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:17.023" level="INFO">${stdout} =  15:29:36 up 20 min,  load average: 2.72, 2.05, 1.80</msg>
<status endtime="20171030 15:29:17.023" status="PASS" starttime="20171030 15:29:17.023"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:17.024" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:29:17.024" status="PASS" starttime="20171030 15:29:17.024"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.031" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.031" status="PASS" starttime="20171030 15:29:17.031"></status>
</kw>
<status endtime="20171030 15:29:17.032" status="PASS" starttime="20171030 15:29:17.030"></status>
</kw>
<status endtime="20171030 15:29:17.032" status="PASS" starttime="20171030 15:29:17.024"></status>
</kw>
<status endtime="20171030 15:29:17.032" status="PASS" starttime="20171030 15:29:16.708"></status>
</kw>
<status endtime="20171030 15:29:17.032" status="PASS" starttime="20171030 15:29:16.708"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.035" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.035" status="PASS" starttime="20171030 15:29:17.034"></status>
</kw>
<status endtime="20171030 15:29:17.035" status="PASS" starttime="20171030 15:29:17.034"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.036" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.036" status="PASS" starttime="20171030 15:29:17.036"></status>
</kw>
<status endtime="20171030 15:29:17.036" status="PASS" starttime="20171030 15:29:17.035"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.038" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.038" status="PASS" starttime="20171030 15:29:17.037"></status>
</kw>
<status endtime="20171030 15:29:17.038" status="PASS" starttime="20171030 15:29:17.037"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.039" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.039" status="PASS" starttime="20171030 15:29:17.039"></status>
</kw>
<status endtime="20171030 15:29:17.040" status="PASS" starttime="20171030 15:29:17.038"></status>
</kw>
<status endtime="20171030 15:29:17.040" status="PASS" starttime="20171030 15:29:17.033"></status>
</kw>
<status endtime="20171030 15:29:17.040" status="PASS" starttime="20171030 15:29:17.033"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:17.041" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20171030 15:29:17.041" status="PASS" starttime="20171030 15:29:17.040"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:29:17.174" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:17.174" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171030 15:29:17.231" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:17.231" status="PASS" starttime="20171030 15:29:17.095"></status>
</kw>
<msg timestamp="20171030 15:29:17.231" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:17.231" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status endtime="20171030 15:29:17.232" status="PASS" starttime="20171030 15:29:17.041"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:17.232" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status endtime="20171030 15:29:17.232" status="PASS" starttime="20171030 15:29:17.232"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:17.233" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:29:17.233" status="PASS" starttime="20171030 15:29:17.233"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.240" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.240" status="PASS" starttime="20171030 15:29:17.240"></status>
</kw>
<status endtime="20171030 15:29:17.241" status="PASS" starttime="20171030 15:29:17.239"></status>
</kw>
<status endtime="20171030 15:29:17.241" status="PASS" starttime="20171030 15:29:17.233"></status>
</kw>
<status endtime="20171030 15:29:17.241" status="PASS" starttime="20171030 15:29:17.032"></status>
</kw>
<status endtime="20171030 15:29:17.241" status="PASS" starttime="20171030 15:29:17.032"></status>
</kw>
<status endtime="20171030 15:29:17.241" status="PASS" starttime="20171030 15:29:16.482"></status>
</kw>
<status endtime="20171030 15:29:17.241" status="PASS" starttime="20171030 15:29:16.480"></status>
</kw>
<status endtime="20171030 15:29:17.241" status="PASS" starttime="20171030 15:29:16.480"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171030 15:29:17.243" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('FW Timestamp', 'cat /etc/timestamp') ]</msg>
<status endtime="20171030 15:29:17.243" status="PASS" starttime="20171030 15:29:17.242"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171030 15:29:17.243" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20171030 15:29:17.243" status="PASS" starttime="20171030 15:29:17.243"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.247" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.247" status="PASS" starttime="20171030 15:29:17.246"></status>
</kw>
<status endtime="20171030 15:29:17.247" status="PASS" starttime="20171030 15:29:17.246"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.248" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.248" status="PASS" starttime="20171030 15:29:17.248"></status>
</kw>
<status endtime="20171030 15:29:17.248" status="PASS" starttime="20171030 15:29:17.247"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.249" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.249" status="PASS" starttime="20171030 15:29:17.249"></status>
</kw>
<status endtime="20171030 15:29:17.250" status="PASS" starttime="20171030 15:29:17.248"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.251" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.251" status="PASS" starttime="20171030 15:29:17.250"></status>
</kw>
<status endtime="20171030 15:29:17.251" status="PASS" starttime="20171030 15:29:17.250"></status>
</kw>
<status endtime="20171030 15:29:17.251" status="PASS" starttime="20171030 15:29:17.245"></status>
</kw>
<status endtime="20171030 15:29:17.251" status="PASS" starttime="20171030 15:29:17.245"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:17.252" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20171030 15:29:17.252" status="PASS" starttime="20171030 15:29:17.252"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:29:17.377" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:17.378" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171030 15:29:17.563" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:17.563" status="PASS" starttime="20171030 15:29:17.308"></status>
</kw>
<msg timestamp="20171030 15:29:17.563" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:17.563" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-230"\nVERSION_ID="v1.99.10-230-g490e2be"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status endtime="20171030 15:29:17.563" status="PASS" starttime="20171030 15:29:17.252"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:17.564" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-230"
VERSION_ID="v1.99.10-230-g490e2be"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status endtime="20171030 15:29:17.564" status="PASS" starttime="20171030 15:29:17.564"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:17.564" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:29:17.564" status="PASS" starttime="20171030 15:29:17.564"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.572" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.572" status="PASS" starttime="20171030 15:29:17.571"></status>
</kw>
<status endtime="20171030 15:29:17.572" status="PASS" starttime="20171030 15:29:17.571"></status>
</kw>
<status endtime="20171030 15:29:17.572" status="PASS" starttime="20171030 15:29:17.565"></status>
</kw>
<status endtime="20171030 15:29:17.572" status="PASS" starttime="20171030 15:29:17.244"></status>
</kw>
<status endtime="20171030 15:29:17.572" status="PASS" starttime="20171030 15:29:17.244"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.575" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.575" status="PASS" starttime="20171030 15:29:17.575"></status>
</kw>
<status endtime="20171030 15:29:17.575" status="PASS" starttime="20171030 15:29:17.574"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.577" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.577" status="PASS" starttime="20171030 15:29:17.576"></status>
</kw>
<status endtime="20171030 15:29:17.577" status="PASS" starttime="20171030 15:29:17.576"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.579" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.579" status="PASS" starttime="20171030 15:29:17.578"></status>
</kw>
<status endtime="20171030 15:29:17.579" status="PASS" starttime="20171030 15:29:17.577"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.580" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.580" status="PASS" starttime="20171030 15:29:17.580"></status>
</kw>
<status endtime="20171030 15:29:17.580" status="PASS" starttime="20171030 15:29:17.579"></status>
</kw>
<status endtime="20171030 15:29:17.580" status="PASS" starttime="20171030 15:29:17.574"></status>
</kw>
<status endtime="20171030 15:29:17.580" status="PASS" starttime="20171030 15:29:17.573"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:17.581" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status endtime="20171030 15:29:17.581" status="PASS" starttime="20171030 15:29:17.581"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171030 15:29:17.697" level="INFO">width=80
host=9.3.86.161
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
newline=

index=1
timeout=25 seconds
encoding=UTF-8
prompt=# 
height=24</msg>
<msg timestamp="20171030 15:29:17.698" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171030 15:29:17.806" level="INFO">Command exited with return code 0.</msg>
<status endtime="20171030 15:29:17.806" status="PASS" starttime="20171030 15:29:17.632"></status>
</kw>
<msg timestamp="20171030 15:29:17.806" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:17.806" level="INFO">${ret_values} = (u'20171030145939', u'', 0)</msg>
<status endtime="20171030 15:29:17.806" status="PASS" starttime="20171030 15:29:17.581"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171030 15:29:17.807" level="INFO">${stdout} = 20171030145939</msg>
<status endtime="20171030 15:29:17.807" status="PASS" starttime="20171030 15:29:17.806"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171030 15:29:17.807" level="INFO">${stderr} = </msg>
<status endtime="20171030 15:29:17.807" status="PASS" starttime="20171030 15:29:17.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:17.817" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:17.817" status="PASS" starttime="20171030 15:29:17.817"></status>
</kw>
<status endtime="20171030 15:29:17.818" status="PASS" starttime="20171030 15:29:17.816"></status>
</kw>
<status endtime="20171030 15:29:17.818" status="PASS" starttime="20171030 15:29:17.808"></status>
</kw>
<status endtime="20171030 15:29:17.818" status="PASS" starttime="20171030 15:29:17.573"></status>
</kw>
<status endtime="20171030 15:29:17.818" status="PASS" starttime="20171030 15:29:17.572"></status>
</kw>
<status endtime="20171030 15:29:17.818" status="PASS" starttime="20171030 15:29:17.243"></status>
</kw>
<status endtime="20171030 15:29:17.818" status="PASS" starttime="20171030 15:29:17.241"></status>
</kw>
<status endtime="20171030 15:29:17.818" status="PASS" starttime="20171030 15:29:17.241"></status>
</kw>
<status endtime="20171030 15:29:17.818" status="PASS" starttime="20171030 15:29:13.765"></status>
</kw>
<status endtime="20171030 15:29:17.818" status="PASS" starttime="20171030 15:29:13.764"></status>
</kw>
<status endtime="20171030 15:29:17.818" status="PASS" starttime="20171030 15:29:13.713"></status>
</kw>
<status endtime="20171030 15:29:17.818" status="PASS" starttime="20171030 15:29:13.710"></status>
</kw>
<status endtime="20171030 15:29:17.818" status="PASS" starttime="20171030 15:29:13.710"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20171030 15:29:17.820" status="PASS" starttime="20171030 15:29:17.820"></status>
</kw>
<msg timestamp="20171030 15:29:17.820" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:17.820" level="INFO">${ret_values} = None</msg>
<status endtime="20171030 15:29:17.821" status="PASS" starttime="20171030 15:29:17.819"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20171030 15:29:17.821" status="PASS" starttime="20171030 15:29:17.821"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:29:17.870" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:29:17.870" status="PASS" starttime="20171030 15:29:17.870"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:29:17.871" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:29:17.871" status="PASS" starttime="20171030 15:29:17.871"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:29:17.872" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:29:17.872" status="PASS" starttime="20171030 15:29:17.871"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:17.873" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:29:17.873" status="PASS" starttime="20171030 15:29:17.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:29:18.330" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:29:18.330" status="PASS" starttime="20171030 15:29:17.873"></status>
</kw>
<msg timestamp="20171030 15:29:18.330" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:18.330" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:18.330" status="PASS" starttime="20171030 15:29:17.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:29:18.331" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:18.331" status="PASS" starttime="20171030 15:29:18.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:18.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:18.332" status="PASS" starttime="20171030 15:29:18.331"></status>
</kw>
<status endtime="20171030 15:29:18.332" status="PASS" starttime="20171030 15:29:17.869"></status>
</kw>
<status endtime="20171030 15:29:18.332" status="PASS" starttime="20171030 15:29:17.869"></status>
</kw>
<status endtime="20171030 15:29:18.332" status="PASS" starttime="20171030 15:29:17.868"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:29:18.333" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20171030 15:29:18.333" status="PASS" starttime="20171030 15:29:18.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:29:18.333" status="PASS" starttime="20171030 15:29:18.333"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:29:18.506" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171030 15:29:18.507" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:18.507" status="PASS" starttime="20171030 15:29:18.333"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:29:18.507" status="PASS" starttime="20171030 15:29:18.507"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:29:18.508" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:29:18.508" status="PASS" starttime="20171030 15:29:18.508"></status>
</kw>
<msg timestamp="20171030 15:29:18.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:18.508" status="PASS" starttime="20171030 15:29:17.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:18.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:18.509" status="PASS" starttime="20171030 15:29:18.509"></status>
</kw>
<msg timestamp="20171030 15:29:18.510" level="INFO">${status} = True</msg>
<status endtime="20171030 15:29:18.510" status="PASS" starttime="20171030 15:29:18.509"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20171030 15:29:18.510" status="PASS" starttime="20171030 15:29:18.510"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:29:18.511" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1329"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509376444311, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1329"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509376451457, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1329"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509377130997, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "_PID=1329"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509377137798, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:29:18.511" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:29:18.511" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Timestamp': 1509376444311, u'Message': u'org.open_power.Witherspoon.Fault.Error.PowerSupplyInputFault', ...</msg>
<status endtime="20171030 15:29:18.511" status="PASS" starttime="20171030 15:29:18.510"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20171030 15:29:18.512" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status endtime="20171030 15:29:18.512" status="PASS" starttime="20171030 15:29:18.511"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171030 15:29:18.512" level="INFO">${logpath} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_esel</msg>
<status endtime="20171030 15:29:18.512" status="PASS" starttime="20171030 15:29:18.512"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:18.513" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_esel"&gt;/tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/20171030152838932910_esel&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:18.513" status="PASS" starttime="20171030 15:29:18.513"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20171030 15:29:18.514" status="PASS" starttime="20171030 15:29:18.514"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:29:18.518" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:29:18.518" status="PASS" starttime="20171030 15:29:18.517"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:29:18.519" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:29:18.519" status="PASS" starttime="20171030 15:29:18.519"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:29:18.520" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:29:18.520" status="PASS" starttime="20171030 15:29:18.519"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:18.521" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:29:18.521" status="PASS" starttime="20171030 15:29:18.520"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:29:19.700" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:29:19.700" status="PASS" starttime="20171030 15:29:18.522"></status>
</kw>
<msg timestamp="20171030 15:29:19.700" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:19.700" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:19.701" status="PASS" starttime="20171030 15:29:18.521"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:29:19.702" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:19.702" status="PASS" starttime="20171030 15:29:19.701"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:19.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:19.703" status="PASS" starttime="20171030 15:29:19.702"></status>
</kw>
<status endtime="20171030 15:29:19.703" status="PASS" starttime="20171030 15:29:18.517"></status>
</kw>
<status endtime="20171030 15:29:19.703" status="PASS" starttime="20171030 15:29:18.516"></status>
</kw>
<status endtime="20171030 15:29:19.703" status="PASS" starttime="20171030 15:29:18.516"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:29:19.704" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status endtime="20171030 15:29:19.704" status="PASS" starttime="20171030 15:29:19.704"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:29:19.705" status="PASS" starttime="20171030 15:29:19.705"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:29:19.884" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171030 15:29:19.885" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:19.885" status="PASS" starttime="20171030 15:29:19.705"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:29:19.885" status="PASS" starttime="20171030 15:29:19.885"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:29:19.886" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:29:19.886" status="PASS" starttime="20171030 15:29:19.886"></status>
</kw>
<msg timestamp="20171030 15:29:19.886" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:19.886" status="PASS" starttime="20171030 15:29:18.515"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:19.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:19.887" status="PASS" starttime="20171030 15:29:19.886"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:29:19.887" level="INFO">To JSON using : content={
  "data": [
    "_PID=1329"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:29:19.887" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:29:19.887" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'_PID=1329']}</msg>
<status endtime="20171030 15:29:19.887" status="PASS" starttime="20171030 15:29:19.887"></status>
</kw>
<msg timestamp="20171030 15:29:19.888" level="INFO">${esel_data} = [u'_PID=1329']</msg>
<status endtime="20171030 15:29:19.888" status="PASS" starttime="20171030 15:29:18.515"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171030 15:29:19.889" level="FAIL">[ _PID=1329 ] does not contain match for pattern 'ESEL*'.</msg>
<status endtime="20171030 15:29:19.889" status="FAIL" starttime="20171030 15:29:19.889"></status>
</kw>
<msg timestamp="20171030 15:29:19.889" level="INFO">${status} = False</msg>
<status endtime="20171030 15:29:19.889" status="PASS" starttime="20171030 15:29:19.888"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171030 15:29:19.890" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20171030 15:29:19.890" status="PASS" starttime="20171030 15:29:19.890"></status>
</kw>
<status endtime="20171030 15:29:19.890" status="PASS" starttime="20171030 15:29:18.514"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20171030 15:29:19.891" status="PASS" starttime="20171030 15:29:19.891"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:29:19.895" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:29:19.895" status="PASS" starttime="20171030 15:29:19.894"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:29:19.896" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:29:19.896" status="PASS" starttime="20171030 15:29:19.896"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:29:19.897" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:29:19.897" status="PASS" starttime="20171030 15:29:19.896"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:19.897" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:29:19.897" status="PASS" starttime="20171030 15:29:19.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:29:20.107" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:29:20.107" status="PASS" starttime="20171030 15:29:19.898"></status>
</kw>
<msg timestamp="20171030 15:29:20.107" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:20.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:20.107" status="PASS" starttime="20171030 15:29:19.898"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:29:20.108" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:20.109" status="PASS" starttime="20171030 15:29:20.108"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:20.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:20.110" status="PASS" starttime="20171030 15:29:20.109"></status>
</kw>
<status endtime="20171030 15:29:20.110" status="PASS" starttime="20171030 15:29:19.894"></status>
</kw>
<status endtime="20171030 15:29:20.110" status="PASS" starttime="20171030 15:29:19.893"></status>
</kw>
<status endtime="20171030 15:29:20.110" status="PASS" starttime="20171030 15:29:19.893"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:29:20.111" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20171030 15:29:20.111" status="PASS" starttime="20171030 15:29:20.110"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:29:20.112" status="PASS" starttime="20171030 15:29:20.111"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:29:20.199" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171030 15:29:20.199" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:20.199" status="PASS" starttime="20171030 15:29:20.112"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:29:20.200" status="PASS" starttime="20171030 15:29:20.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:29:20.201" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:29:20.201" status="PASS" starttime="20171030 15:29:20.200"></status>
</kw>
<msg timestamp="20171030 15:29:20.201" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:20.201" status="PASS" starttime="20171030 15:29:19.892"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:20.202" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:20.202" status="PASS" starttime="20171030 15:29:20.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:29:20.202" level="INFO">To JSON using : content={
  "data": [
    "_PID=1329"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:29:20.202" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:29:20.202" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'_PID=1329']}</msg>
<status endtime="20171030 15:29:20.203" status="PASS" starttime="20171030 15:29:20.202"></status>
</kw>
<msg timestamp="20171030 15:29:20.203" level="INFO">${esel_data} = [u'_PID=1329']</msg>
<status endtime="20171030 15:29:20.203" status="PASS" starttime="20171030 15:29:19.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171030 15:29:20.204" level="FAIL">[ _PID=1329 ] does not contain match for pattern 'ESEL*'.</msg>
<status endtime="20171030 15:29:20.204" status="FAIL" starttime="20171030 15:29:20.204"></status>
</kw>
<msg timestamp="20171030 15:29:20.204" level="INFO">${status} = False</msg>
<status endtime="20171030 15:29:20.204" status="PASS" starttime="20171030 15:29:20.203"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171030 15:29:20.205" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20171030 15:29:20.205" status="PASS" starttime="20171030 15:29:20.204"></status>
</kw>
<status endtime="20171030 15:29:20.205" status="PASS" starttime="20171030 15:29:19.890"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20171030 15:29:20.206" status="PASS" starttime="20171030 15:29:20.205"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:29:20.209" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:29:20.210" status="PASS" starttime="20171030 15:29:20.209"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:29:20.210" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:29:20.210" status="PASS" starttime="20171030 15:29:20.210"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:29:20.211" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:29:20.211" status="PASS" starttime="20171030 15:29:20.211"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:20.212" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:29:20.212" status="PASS" starttime="20171030 15:29:20.211"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:29:20.611" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:29:20.611" status="PASS" starttime="20171030 15:29:20.213"></status>
</kw>
<msg timestamp="20171030 15:29:20.611" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:20.612" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:20.612" status="PASS" starttime="20171030 15:29:20.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:29:20.612" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:20.612" status="PASS" starttime="20171030 15:29:20.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:20.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:20.613" status="PASS" starttime="20171030 15:29:20.613"></status>
</kw>
<status endtime="20171030 15:29:20.613" status="PASS" starttime="20171030 15:29:20.208"></status>
</kw>
<status endtime="20171030 15:29:20.613" status="PASS" starttime="20171030 15:29:20.208"></status>
</kw>
<status endtime="20171030 15:29:20.613" status="PASS" starttime="20171030 15:29:20.207"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:29:20.614" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20171030 15:29:20.614" status="PASS" starttime="20171030 15:29:20.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:29:20.615" status="PASS" starttime="20171030 15:29:20.615"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:29:20.852" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171030 15:29:20.852" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:20.852" status="PASS" starttime="20171030 15:29:20.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:29:20.853" status="PASS" starttime="20171030 15:29:20.853"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:29:20.853" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:29:20.853" status="PASS" starttime="20171030 15:29:20.853"></status>
</kw>
<msg timestamp="20171030 15:29:20.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:20.854" status="PASS" starttime="20171030 15:29:20.207"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:20.854" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:20.854" status="PASS" starttime="20171030 15:29:20.854"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:29:20.855" level="INFO">To JSON using : content={
  "data": [
    "_PID=1329"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:29:20.855" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:29:20.855" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'_PID=1329']}</msg>
<status endtime="20171030 15:29:20.855" status="PASS" starttime="20171030 15:29:20.855"></status>
</kw>
<msg timestamp="20171030 15:29:20.855" level="INFO">${esel_data} = [u'_PID=1329']</msg>
<status endtime="20171030 15:29:20.855" status="PASS" starttime="20171030 15:29:20.206"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171030 15:29:20.857" level="FAIL">[ _PID=1329 ] does not contain match for pattern 'ESEL*'.</msg>
<status endtime="20171030 15:29:20.857" status="FAIL" starttime="20171030 15:29:20.856"></status>
</kw>
<msg timestamp="20171030 15:29:20.857" level="INFO">${status} = False</msg>
<status endtime="20171030 15:29:20.857" status="PASS" starttime="20171030 15:29:20.856"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171030 15:29:20.857" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20171030 15:29:20.858" status="PASS" starttime="20171030 15:29:20.857"></status>
</kw>
<status endtime="20171030 15:29:20.858" status="PASS" starttime="20171030 15:29:20.205"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20171030 15:29:20.859" status="PASS" starttime="20171030 15:29:20.858"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:29:20.862" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:29:20.863" status="PASS" starttime="20171030 15:29:20.862"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:29:20.863" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:29:20.863" status="PASS" starttime="20171030 15:29:20.863"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:29:20.864" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:29:20.864" status="PASS" starttime="20171030 15:29:20.864"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:20.865" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:29:20.865" status="PASS" starttime="20171030 15:29:20.864"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:29:21.907" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:29:21.907" status="PASS" starttime="20171030 15:29:20.865"></status>
</kw>
<msg timestamp="20171030 15:29:21.908" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:21.908" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:21.908" status="PASS" starttime="20171030 15:29:20.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:29:21.908" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:21.909" status="PASS" starttime="20171030 15:29:21.908"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:21.909" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:21.909" status="PASS" starttime="20171030 15:29:21.909"></status>
</kw>
<status endtime="20171030 15:29:21.909" status="PASS" starttime="20171030 15:29:20.861"></status>
</kw>
<status endtime="20171030 15:29:21.909" status="PASS" starttime="20171030 15:29:20.861"></status>
</kw>
<status endtime="20171030 15:29:21.910" status="PASS" starttime="20171030 15:29:20.860"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:29:21.910" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20171030 15:29:21.910" status="PASS" starttime="20171030 15:29:21.910"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:29:21.911" status="PASS" starttime="20171030 15:29:21.911"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:29:22.092" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20171030 15:29:22.093" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:22.093" status="PASS" starttime="20171030 15:29:21.911"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:29:22.093" status="PASS" starttime="20171030 15:29:22.093"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:29:22.094" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:29:22.094" status="PASS" starttime="20171030 15:29:22.094"></status>
</kw>
<msg timestamp="20171030 15:29:22.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:22.094" status="PASS" starttime="20171030 15:29:20.859"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:22.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:22.095" status="PASS" starttime="20171030 15:29:22.094"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:29:22.095" level="INFO">To JSON using : content={
  "data": [
    "_PID=1329"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:29:22.095" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:29:22.096" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'_PID=1329']}</msg>
<status endtime="20171030 15:29:22.096" status="PASS" starttime="20171030 15:29:22.095"></status>
</kw>
<msg timestamp="20171030 15:29:22.096" level="INFO">${esel_data} = [u'_PID=1329']</msg>
<status endtime="20171030 15:29:22.096" status="PASS" starttime="20171030 15:29:20.859"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20171030 15:29:22.097" level="FAIL">[ _PID=1329 ] does not contain match for pattern 'ESEL*'.</msg>
<status endtime="20171030 15:29:22.097" status="FAIL" starttime="20171030 15:29:22.097"></status>
</kw>
<msg timestamp="20171030 15:29:22.097" level="INFO">${status} = False</msg>
<status endtime="20171030 15:29:22.097" status="PASS" starttime="20171030 15:29:22.096"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20171030 15:29:22.098" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20171030 15:29:22.098" status="PASS" starttime="20171030 15:29:22.097"></status>
</kw>
<status endtime="20171030 15:29:22.098" status="PASS" starttime="20171030 15:29:20.858"></status>
</kw>
<status endtime="20171030 15:29:22.098" status="PASS" starttime="20171030 15:29:18.513"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20171030 15:29:22.103" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20171030 15:29:22.107" level="INFO">${out} = </msg>
<status endtime="20171030 15:29:22.107" status="PASS" starttime="20171030 15:29:22.098"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20171030 15:29:22.111" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status endtime="20171030 15:29:22.112" status="FAIL" starttime="20171030 15:29:22.111"></status>
</kw>
<msg timestamp="20171030 15:29:22.112" level="INFO">${status} = False</msg>
<status endtime="20171030 15:29:22.112" status="PASS" starttime="20171030 15:29:22.110"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171030 15:29:22.113" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20171030 15:29:22.113" status="PASS" starttime="20171030 15:29:22.113"></status>
</kw>
<status endtime="20171030 15:29:22.114" status="PASS" starttime="20171030 15:29:17.867"></status>
</kw>
<status endtime="20171030 15:29:22.114" status="PASS" starttime="20171030 15:29:17.821"></status>
</kw>
<status endtime="20171030 15:29:22.114" status="PASS" starttime="20171030 15:29:17.819"></status>
</kw>
<status endtime="20171030 15:29:22.114" status="PASS" starttime="20171030 15:29:17.818"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20171030 15:29:22.117" status="PASS" starttime="20171030 15:29:22.117"></status>
</kw>
<msg timestamp="20171030 15:29:22.118" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:22.118" level="INFO">${ret_values} = None</msg>
<status endtime="20171030 15:29:22.118" status="PASS" starttime="20171030 15:29:22.116"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20171030 15:29:22.119" status="PASS" starttime="20171030 15:29:22.118"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171030 15:29:22.168" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20171030 15:29:22.168" status="PASS" starttime="20171030 15:29:22.167"></status>
</kw>
<status endtime="20171030 15:29:22.168" status="PASS" starttime="20171030 15:29:22.166"></status>
</kw>
<status endtime="20171030 15:29:22.168" status="PASS" starttime="20171030 15:29:22.119"></status>
</kw>
<status endtime="20171030 15:29:22.168" status="PASS" starttime="20171030 15:29:22.115"></status>
</kw>
<status endtime="20171030 15:29:22.168" status="PASS" starttime="20171030 15:29:22.114"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20171030 15:29:22.170" status="PASS" starttime="20171030 15:29:22.170"></status>
</kw>
<msg timestamp="20171030 15:29:22.170" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:22.170" level="INFO">${ret_values} = None</msg>
<status endtime="20171030 15:29:22.170" status="PASS" starttime="20171030 15:29:22.169"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20171030 15:29:22.171" status="PASS" starttime="20171030 15:29:22.170"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="System Inventory Files">
<doc>Copy systest os_inventory files.</doc>
<kw library="OperatingSystem" name="Copy Files">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status endtime="20171030 15:29:22.217" status="PASS" starttime="20171030 15:29:22.216"></status>
</kw>
<kw library="OperatingSystem" name="Remove Files">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:22.218" level="INFO">File '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/10510/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status endtime="20171030 15:29:22.218" status="PASS" starttime="20171030 15:29:22.217"></status>
</kw>
<status endtime="20171030 15:29:22.218" status="PASS" starttime="20171030 15:29:22.215"></status>
</kw>
<status endtime="20171030 15:29:22.218" status="PASS" starttime="20171030 15:29:22.171"></status>
</kw>
<status endtime="20171030 15:29:22.219" status="PASS" starttime="20171030 15:29:22.168"></status>
</kw>
<status endtime="20171030 15:29:22.219" status="PASS" starttime="20171030 15:29:22.168"></status>
</kw>
<status endtime="20171030 15:29:22.219" status="PASS" starttime="20171030 15:28:39.221"></status>
</kw>
<status endtime="20171030 15:29:22.219" status="PASS" starttime="20171030 15:28:39.219"></status>
</kw>
<status endtime="20171030 15:29:22.219" status="PASS" starttime="20171030 15:28:39.219"></status>
</kw>
<status endtime="20171030 15:29:22.219" status="PASS" starttime="20171030 15:28:39.218"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status endtime="20171030 15:29:22.240" status="PASS" starttime="20171030 15:29:22.234"></status>
</kw>
<status endtime="20171030 15:29:22.240" status="PASS" starttime="20171030 15:29:22.219"></status>
</kw>
<status endtime="20171030 15:29:22.241" status="PASS" starttime="20171030 15:28:39.217"></status>
</kw>
<status endtime="20171030 15:29:22.241" status="PASS" starttime="20171030 15:28:35.806"></status>
</kw>
<status endtime="20171030 15:29:22.241" status="PASS" starttime="20171030 15:28:35.806"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171030 15:29:22.255" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20171030 15:29:22.256" status="PASS" starttime="20171030 15:29:22.242"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171030 15:29:22.256" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/10510/obmc-robot/logs/20171030152838932910_TestsTestBasicPoweron/20171030152838932910_CheckForApplicationFailures/</msg>
<status endtime="20171030 15:29:22.256" status="PASS" starttime="20171030 15:29:22.256"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20171030 15:29:22.257" status="PASS" starttime="20171030 15:29:22.257"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20171030 15:29:22.258" status="PASS" starttime="20171030 15:29:22.257"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:22.258" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs"&gt;/tmp/fspcibld/10510/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20171030 15:29:22.258" status="PASS" starttime="20171030 15:29:22.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:22.259" level="INFO">File '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20171030 15:29:22.259" status="PASS" starttime="20171030 15:29:22.259"></status>
</kw>
<msg timestamp="20171030 15:29:22.259" level="INFO">${exist} = True</msg>
<status endtime="20171030 15:29:22.259" status="PASS" starttime="20171030 15:29:22.259"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20171030 15:29:22.260" status="PASS" starttime="20171030 15:29:22.260"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20171030 15:29:22.261" status="PASS" starttime="20171030 15:29:22.260"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171030 15:29:22.262" level="INFO">${cur_time} = 2017-10-30 15:29:22:261945</msg>
<status endtime="20171030 15:29:22.262" status="PASS" starttime="20171030 15:29:22.262"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171030 15:29:22.263" level="INFO">${cur_time} = 20171030152922261945</msg>
<status endtime="20171030 15:29:22.263" status="PASS" starttime="20171030 15:29:22.262"></status>
</kw>
<msg timestamp="20171030 15:29:22.263" level="INFO">${cur_time} = 20171030152922261945</msg>
<status endtime="20171030 15:29:22.263" status="PASS" starttime="20171030 15:29:22.261"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:22.264" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:22.264" status="PASS" starttime="20171030 15:29:22.263"></status>
</kw>
<status endtime="20171030 15:29:22.264" status="PASS" starttime="20171030 15:29:22.241"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw library="utils" name="Delete Error Logs">
<doc>Delete error logs.</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:29:22.269" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:29:22.270" status="PASS" starttime="20171030 15:29:22.268"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:29:22.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:29:22.271" status="PASS" starttime="20171030 15:29:22.270"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:29:22.271" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:29:22.271" status="PASS" starttime="20171030 15:29:22.271"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:22.272" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:29:22.272" status="PASS" starttime="20171030 15:29:22.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:29:22.605" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:29:22.605" status="PASS" starttime="20171030 15:29:22.273"></status>
</kw>
<msg timestamp="20171030 15:29:22.605" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:22.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:22.605" status="PASS" starttime="20171030 15:29:22.272"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:29:22.606" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:22.606" status="PASS" starttime="20171030 15:29:22.606"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:22.607" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:22.607" status="PASS" starttime="20171030 15:29:22.606"></status>
</kw>
<status endtime="20171030 15:29:22.607" status="PASS" starttime="20171030 15:29:22.268"></status>
</kw>
<status endtime="20171030 15:29:22.607" status="PASS" starttime="20171030 15:29:22.267"></status>
</kw>
<status endtime="20171030 15:29:22.607" status="PASS" starttime="20171030 15:29:22.267"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:29:22.608" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status endtime="20171030 15:29:22.608" status="PASS" starttime="20171030 15:29:22.607"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:29:22.608" status="PASS" starttime="20171030 15:29:22.608"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:29:22.768" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171030 15:29:22.769" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:22.769" status="PASS" starttime="20171030 15:29:22.609"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:29:22.769" status="PASS" starttime="20171030 15:29:22.769"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:29:22.770" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:29:22.770" status="PASS" starttime="20171030 15:29:22.770"></status>
</kw>
<msg timestamp="20171030 15:29:22.770" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:22.770" status="PASS" starttime="20171030 15:29:22.266"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status endtime="20171030 15:29:22.771" status="PASS" starttime="20171030 15:29:22.770"></status>
</kw>
<kw library="utils" name="Get URL List">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:29:22.775" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:29:22.775" status="PASS" starttime="20171030 15:29:22.774"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:29:22.776" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:29:22.776" status="PASS" starttime="20171030 15:29:22.775"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:29:22.777" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:29:22.777" status="PASS" starttime="20171030 15:29:22.776"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:22.777" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:29:22.778" status="PASS" starttime="20171030 15:29:22.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:29:23.121" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:29:23.122" status="PASS" starttime="20171030 15:29:22.778"></status>
</kw>
<msg timestamp="20171030 15:29:23.122" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:23.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:23.122" status="PASS" starttime="20171030 15:29:22.778"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:29:23.123" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:23.123" status="PASS" starttime="20171030 15:29:23.122"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:23.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:23.124" status="PASS" starttime="20171030 15:29:23.123"></status>
</kw>
<status endtime="20171030 15:29:23.124" status="PASS" starttime="20171030 15:29:22.774"></status>
</kw>
<status endtime="20171030 15:29:23.124" status="PASS" starttime="20171030 15:29:22.773"></status>
</kw>
<status endtime="20171030 15:29:23.125" status="PASS" starttime="20171030 15:29:22.773"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:29:23.125" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status endtime="20171030 15:29:23.125" status="PASS" starttime="20171030 15:29:23.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:29:23.126" status="PASS" starttime="20171030 15:29:23.126"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:29:23.242" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171030 15:29:23.242" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:23.242" status="PASS" starttime="20171030 15:29:23.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:29:23.243" status="PASS" starttime="20171030 15:29:23.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:29:23.243" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:29:23.243" status="PASS" starttime="20171030 15:29:23.243"></status>
</kw>
<msg timestamp="20171030 15:29:23.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:23.243" status="PASS" starttime="20171030 15:29:22.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:23.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:23.244" status="PASS" starttime="20171030 15:29:23.244"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171030 15:29:23.245" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/3", 
    "/xyz/openbmc_project/logging/entry/2", 
    "/xyz/openbmc_project/logging/entry/1", 
    "/xyz/openbmc_project/logging/entry/4"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171030 15:29:23.245" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171030 15:29:23.245" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/lo...</msg>
<status endtime="20171030 15:29:23.245" status="PASS" starttime="20171030 15:29:23.244"></status>
</kw>
<msg timestamp="20171030 15:29:23.245" level="INFO">${url_list} = [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status endtime="20171030 15:29:23.245" status="PASS" starttime="20171030 15:29:22.772"></status>
</kw>
<kw library="Collections" name="Sort List">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status endtime="20171030 15:29:23.246" status="PASS" starttime="20171030 15:29:23.245"></status>
</kw>
<msg timestamp="20171030 15:29:23.246" level="INFO">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status endtime="20171030 15:29:23.246" status="PASS" starttime="20171030 15:29:22.771"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/1">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20171030 15:29:23.247" status="PASS" starttime="20171030 15:29:23.247"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:23.248" level="INFO">${data} = {u'data': []}</msg>
<status endtime="20171030 15:29:23.248" status="PASS" starttime="20171030 15:29:23.248"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:29:23.251" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:29:23.251" status="PASS" starttime="20171030 15:29:23.250"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:29:23.252" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:29:23.252" status="PASS" starttime="20171030 15:29:23.252"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:29:23.253" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:29:23.253" status="PASS" starttime="20171030 15:29:23.252"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:23.253" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:29:23.254" status="PASS" starttime="20171030 15:29:23.253"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:29:23.484" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:29:23.484" status="PASS" starttime="20171030 15:29:23.254"></status>
</kw>
<msg timestamp="20171030 15:29:23.484" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:23.484" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:23.484" status="PASS" starttime="20171030 15:29:23.254"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:29:23.485" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:23.485" status="PASS" starttime="20171030 15:29:23.485"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:23.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:23.486" status="PASS" starttime="20171030 15:29:23.485"></status>
</kw>
<status endtime="20171030 15:29:23.486" status="PASS" starttime="20171030 15:29:23.250"></status>
</kw>
<status endtime="20171030 15:29:23.486" status="PASS" starttime="20171030 15:29:23.249"></status>
</kw>
<status endtime="20171030 15:29:23.486" status="PASS" starttime="20171030 15:29:23.249"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:29:23.487" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1</msg>
<status endtime="20171030 15:29:23.487" status="PASS" starttime="20171030 15:29:23.486"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:29:23.489" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status endtime="20171030 15:29:23.489" status="PASS" starttime="20171030 15:29:23.488"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:29:23.490" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status endtime="20171030 15:29:23.490" status="PASS" starttime="20171030 15:29:23.490"></status>
</kw>
<status endtime="20171030 15:29:23.490" status="PASS" starttime="20171030 15:29:23.489"></status>
</kw>
<status endtime="20171030 15:29:23.490" status="PASS" starttime="20171030 15:29:23.487"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:29:23.667" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171030 15:29:23.667" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:23.668" status="PASS" starttime="20171030 15:29:23.490"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:29:23.669" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:29:23.669" status="PASS" starttime="20171030 15:29:23.668"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:29:23.670" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:29:23.670" status="PASS" starttime="20171030 15:29:23.670"></status>
</kw>
<status endtime="20171030 15:29:23.670" status="PASS" starttime="20171030 15:29:23.669"></status>
</kw>
<status endtime="20171030 15:29:23.670" status="PASS" starttime="20171030 15:29:23.668"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:29:23.671" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:29:23.671" status="PASS" starttime="20171030 15:29:23.671"></status>
</kw>
<msg timestamp="20171030 15:29:23.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:23.671" status="PASS" starttime="20171030 15:29:23.248"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:23.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:23.672" status="PASS" starttime="20171030 15:29:23.671"></status>
</kw>
<status endtime="20171030 15:29:23.672" status="PASS" starttime="20171030 15:29:23.246"></status>
</kw>
<status endtime="20171030 15:29:23.672" status="PASS" starttime="20171030 15:29:23.246"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/2">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20171030 15:29:23.673" status="PASS" starttime="20171030 15:29:23.673"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:23.674" level="INFO">${data} = {u'data': []}</msg>
<status endtime="20171030 15:29:23.674" status="PASS" starttime="20171030 15:29:23.673"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:29:23.677" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:29:23.677" status="PASS" starttime="20171030 15:29:23.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:29:23.678" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:29:23.678" status="PASS" starttime="20171030 15:29:23.677"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:29:23.678" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:29:23.678" status="PASS" starttime="20171030 15:29:23.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:23.679" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:29:23.679" status="PASS" starttime="20171030 15:29:23.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:29:24.293" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:29:24.293" status="PASS" starttime="20171030 15:29:23.680"></status>
</kw>
<msg timestamp="20171030 15:29:24.293" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:24.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:24.293" status="PASS" starttime="20171030 15:29:23.679"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:29:24.294" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:24.294" status="PASS" starttime="20171030 15:29:24.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:24.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:24.295" status="PASS" starttime="20171030 15:29:24.295"></status>
</kw>
<status endtime="20171030 15:29:24.295" status="PASS" starttime="20171030 15:29:23.675"></status>
</kw>
<status endtime="20171030 15:29:24.295" status="PASS" starttime="20171030 15:29:23.675"></status>
</kw>
<status endtime="20171030 15:29:24.295" status="PASS" starttime="20171030 15:29:23.674"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:29:24.296" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2</msg>
<status endtime="20171030 15:29:24.296" status="PASS" starttime="20171030 15:29:24.296"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:29:24.298" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status endtime="20171030 15:29:24.298" status="PASS" starttime="20171030 15:29:24.297"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:29:24.299" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status endtime="20171030 15:29:24.299" status="PASS" starttime="20171030 15:29:24.298"></status>
</kw>
<status endtime="20171030 15:29:24.299" status="PASS" starttime="20171030 15:29:24.298"></status>
</kw>
<status endtime="20171030 15:29:24.299" status="PASS" starttime="20171030 15:29:24.296"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:29:24.457" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171030 15:29:24.457" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:24.457" status="PASS" starttime="20171030 15:29:24.299"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:29:24.459" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:29:24.459" status="PASS" starttime="20171030 15:29:24.458"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:29:24.460" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:29:24.460" status="PASS" starttime="20171030 15:29:24.459"></status>
</kw>
<status endtime="20171030 15:29:24.460" status="PASS" starttime="20171030 15:29:24.459"></status>
</kw>
<status endtime="20171030 15:29:24.460" status="PASS" starttime="20171030 15:29:24.458"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:29:24.460" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:29:24.461" status="PASS" starttime="20171030 15:29:24.460"></status>
</kw>
<msg timestamp="20171030 15:29:24.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:24.461" status="PASS" starttime="20171030 15:29:23.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:24.461" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:24.462" status="PASS" starttime="20171030 15:29:24.461"></status>
</kw>
<status endtime="20171030 15:29:24.462" status="PASS" starttime="20171030 15:29:23.672"></status>
</kw>
<status endtime="20171030 15:29:24.462" status="PASS" starttime="20171030 15:29:23.672"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/3">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20171030 15:29:24.466" status="PASS" starttime="20171030 15:29:24.462"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:24.467" level="INFO">${data} = {u'data': []}</msg>
<status endtime="20171030 15:29:24.467" status="PASS" starttime="20171030 15:29:24.467"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:29:24.470" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:29:24.470" status="PASS" starttime="20171030 15:29:24.470"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:29:24.471" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:29:24.471" status="PASS" starttime="20171030 15:29:24.471"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:29:24.472" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:29:24.472" status="PASS" starttime="20171030 15:29:24.471"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:24.472" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:29:24.472" status="PASS" starttime="20171030 15:29:24.472"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:29:24.707" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:29:24.708" status="PASS" starttime="20171030 15:29:24.473"></status>
</kw>
<msg timestamp="20171030 15:29:24.708" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:24.708" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:24.708" status="PASS" starttime="20171030 15:29:24.473"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:29:24.709" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:24.709" status="PASS" starttime="20171030 15:29:24.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:24.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:24.709" status="PASS" starttime="20171030 15:29:24.709"></status>
</kw>
<status endtime="20171030 15:29:24.709" status="PASS" starttime="20171030 15:29:24.469"></status>
</kw>
<status endtime="20171030 15:29:24.710" status="PASS" starttime="20171030 15:29:24.469"></status>
</kw>
<status endtime="20171030 15:29:24.710" status="PASS" starttime="20171030 15:29:24.468"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:29:24.710" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3</msg>
<status endtime="20171030 15:29:24.710" status="PASS" starttime="20171030 15:29:24.710"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:29:24.712" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status endtime="20171030 15:29:24.712" status="PASS" starttime="20171030 15:29:24.711"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:29:24.713" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status endtime="20171030 15:29:24.713" status="PASS" starttime="20171030 15:29:24.713"></status>
</kw>
<status endtime="20171030 15:29:24.713" status="PASS" starttime="20171030 15:29:24.712"></status>
</kw>
<status endtime="20171030 15:29:24.713" status="PASS" starttime="20171030 15:29:24.710"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:29:24.932" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171030 15:29:24.933" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:24.933" status="PASS" starttime="20171030 15:29:24.713"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:29:24.934" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:29:24.934" status="PASS" starttime="20171030 15:29:24.933"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:29:24.936" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:29:24.936" status="PASS" starttime="20171030 15:29:24.935"></status>
</kw>
<status endtime="20171030 15:29:24.936" status="PASS" starttime="20171030 15:29:24.935"></status>
</kw>
<status endtime="20171030 15:29:24.936" status="PASS" starttime="20171030 15:29:24.933"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:29:24.937" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:29:24.937" status="PASS" starttime="20171030 15:29:24.937"></status>
</kw>
<msg timestamp="20171030 15:29:24.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:24.937" status="PASS" starttime="20171030 15:29:24.467"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:24.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:24.938" status="PASS" starttime="20171030 15:29:24.937"></status>
</kw>
<status endtime="20171030 15:29:24.938" status="PASS" starttime="20171030 15:29:24.462"></status>
</kw>
<status endtime="20171030 15:29:24.938" status="PASS" starttime="20171030 15:29:24.462"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/4">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20171030 15:29:24.939" status="PASS" starttime="20171030 15:29:24.939"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:24.940" level="INFO">${data} = {u'data': []}</msg>
<status endtime="20171030 15:29:24.940" status="PASS" starttime="20171030 15:29:24.939"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:29:24.942" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:29:24.943" status="PASS" starttime="20171030 15:29:24.942"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:29:24.943" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:29:24.943" status="PASS" starttime="20171030 15:29:24.943"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:29:24.944" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:29:24.944" status="PASS" starttime="20171030 15:29:24.944"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:24.945" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:29:24.945" status="PASS" starttime="20171030 15:29:24.944"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:29:25.376" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:29:25.376" status="PASS" starttime="20171030 15:29:24.945"></status>
</kw>
<msg timestamp="20171030 15:29:25.376" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:25.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:25.376" status="PASS" starttime="20171030 15:29:24.945"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:29:25.377" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:25.377" status="PASS" starttime="20171030 15:29:25.376"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:25.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:25.377" status="PASS" starttime="20171030 15:29:25.377"></status>
</kw>
<status endtime="20171030 15:29:25.378" status="PASS" starttime="20171030 15:29:24.942"></status>
</kw>
<status endtime="20171030 15:29:25.378" status="PASS" starttime="20171030 15:29:24.941"></status>
</kw>
<status endtime="20171030 15:29:25.378" status="PASS" starttime="20171030 15:29:24.941"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:29:25.378" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4</msg>
<status endtime="20171030 15:29:25.378" status="PASS" starttime="20171030 15:29:25.378"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:29:25.380" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/4, method:Delete, args:{u'data': {u'data': []}}</msg>
<status endtime="20171030 15:29:25.380" status="PASS" starttime="20171030 15:29:25.379"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:29:25.381" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/4, method:Delete, args:{u'data': {u'data': []}}</msg>
<status endtime="20171030 15:29:25.381" status="PASS" starttime="20171030 15:29:25.381"></status>
</kw>
<status endtime="20171030 15:29:25.382" status="PASS" starttime="20171030 15:29:25.380"></status>
</kw>
<status endtime="20171030 15:29:25.382" status="PASS" starttime="20171030 15:29:25.378"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:29:25.541" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20171030 15:29:25.542" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:25.542" status="PASS" starttime="20171030 15:29:25.382"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171030 15:29:25.543" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:29:25.543" status="PASS" starttime="20171030 15:29:25.542"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171030 15:29:25.544" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20171030 15:29:25.544" status="PASS" starttime="20171030 15:29:25.544"></status>
</kw>
<status endtime="20171030 15:29:25.544" status="PASS" starttime="20171030 15:29:25.543"></status>
</kw>
<status endtime="20171030 15:29:25.544" status="PASS" starttime="20171030 15:29:25.542"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:29:25.545" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:29:25.545" status="PASS" starttime="20171030 15:29:25.545"></status>
</kw>
<msg timestamp="20171030 15:29:25.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:25.545" status="PASS" starttime="20171030 15:29:24.940"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:25.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:25.546" status="PASS" starttime="20171030 15:29:25.545"></status>
</kw>
<status endtime="20171030 15:29:25.546" status="PASS" starttime="20171030 15:29:24.938"></status>
</kw>
<status endtime="20171030 15:29:25.546" status="PASS" starttime="20171030 15:29:24.938"></status>
</kw>
<status endtime="20171030 15:29:25.546" status="PASS" starttime="20171030 15:29:23.246"></status>
</kw>
<status endtime="20171030 15:29:25.546" status="PASS" starttime="20171030 15:29:22.266"></status>
</kw>
<kw library="dump_utils" name="Delete All Dumps">
<doc>Delete all dumps.</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171030 15:29:25.549" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20171030 15:29:25.550" status="PASS" starttime="20171030 15:29:25.549"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171030 15:29:25.550" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20171030 15:29:25.550" status="PASS" starttime="20171030 15:29:25.550"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171030 15:29:25.551" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20171030 15:29:25.551" status="PASS" starttime="20171030 15:29:25.550"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171030 15:29:25.551" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20171030 15:29:25.552" status="PASS" starttime="20171030 15:29:25.551"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171030 15:29:25.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20171030 15:29:25.988" status="PASS" starttime="20171030 15:29:25.552"></status>
</kw>
<msg timestamp="20171030 15:29:25.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 15:29:25.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20171030 15:29:25.988" status="PASS" starttime="20171030 15:29:25.552"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171030 15:29:25.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:25.989" status="PASS" starttime="20171030 15:29:25.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171030 15:29:25.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20171030 15:29:25.990" status="PASS" starttime="20171030 15:29:25.989"></status>
</kw>
<status endtime="20171030 15:29:25.990" status="PASS" starttime="20171030 15:29:25.548"></status>
</kw>
<status endtime="20171030 15:29:25.990" status="PASS" starttime="20171030 15:29:25.548"></status>
</kw>
<status endtime="20171030 15:29:25.990" status="PASS" starttime="20171030 15:29:25.547"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171030 15:29:25.990" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status endtime="20171030 15:29:25.990" status="PASS" starttime="20171030 15:29:25.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20171030 15:29:25.991" status="PASS" starttime="20171030 15:29:25.991"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171030 15:29:26.065" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171030 15:29:26.066" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20171030 15:29:26.066" status="PASS" starttime="20171030 15:29:25.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20171030 15:29:26.066" status="PASS" starttime="20171030 15:29:26.066"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20171030 15:29:26.067" level="INFO">Delete All Sessions</msg>
<status endtime="20171030 15:29:26.067" status="PASS" starttime="20171030 15:29:26.067"></status>
</kw>
<msg timestamp="20171030 15:29:26.067" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20171030 15:29:26.067" status="PASS" starttime="20171030 15:29:25.547"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171030 15:29:26.068" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20171030 15:29:26.068" status="PASS" starttime="20171030 15:29:26.067"></status>
</kw>
<status endtime="20171030 15:29:26.068" status="PASS" starttime="20171030 15:29:25.546"></status>
</kw>
<status endtime="20171030 15:29:26.068" status="PASS" starttime="20171030 15:29:22.265"></status>
</kw>
<status endtime="20171030 15:29:26.068" status="PASS" starttime="20171030 15:29:22.265"></status>
</kw>
<status endtime="20171030 15:29:26.068" status="PASS" starttime="20171030 15:28:35.805"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20171030 15:29:26.070" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:29:26.070" status="PASS" starttime="20171030 15:29:26.070"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20171030 15:29:26.071" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:29:26.071" status="PASS" starttime="20171030 15:29:26.071"></status>
</kw>
<msg timestamp="20171030 15:29:26.071" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20171030 15:29:26.071" status="PASS" starttime="20171030 15:29:26.069"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:26.073" level="INFO">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw'</msg>
<status endtime="20171030 15:29:26.073" status="PASS" starttime="20171030 15:29:26.072"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:29:26.073" status="PASS" starttime="20171030 15:29:26.073"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:29:26.078" level="INFO">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/10510/obmc-robot -name 'ssh_pw''.</msg>
<msg timestamp="20171030 15:29:26.081" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:29:26.081" level="INFO">${output} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:29:26.082" status="PASS" starttime="20171030 15:29:26.074"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20171030 15:29:26.084" status="PASS" starttime="20171030 15:29:26.084"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg timestamp="20171030 15:29:26.085" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status endtime="20171030 15:29:26.085" status="PASS" starttime="20171030 15:29:26.085"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg timestamp="20171030 15:29:26.086" level="INFO">${ssh_pw_file_path} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20171030 15:29:26.086" status="PASS" starttime="20171030 15:29:26.086"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:26.087" level="INFO">${cmd_buf} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:29:26.087" status="PASS" starttime="20171030 15:29:26.087"></status>
</kw>
<msg timestamp="20171030 15:29:26.088" level="INFO">${search_string} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20171030 15:29:26.088" status="PASS" starttime="20171030 15:29:26.072"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg timestamp="20171030 15:29:26.089" level="INFO">${search_string} = /tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status endtime="20171030 15:29:26.089" status="PASS" starttime="20171030 15:29:26.088"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:26.090" level="INFO">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20171030 15:29:26.090" status="PASS" starttime="20171030 15:29:26.089"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:29:26.090" status="PASS" starttime="20171030 15:29:26.090"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20171030 15:29:26.094" level="INFO">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/10510/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20171030 15:29:26.115" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:29:26.115" level="INFO">${os_con_pid} = 239</msg>
<status endtime="20171030 15:29:26.115" status="PASS" starttime="20171030 15:29:26.091"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20171030 15:29:26.118" status="PASS" starttime="20171030 15:29:26.118"></status>
</kw>
<msg timestamp="20171030 15:29:26.119" level="INFO">${os_con_pid} = 239</msg>
<status endtime="20171030 15:29:26.119" status="PASS" starttime="20171030 15:29:26.071"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171030 15:29:26.120" level="INFO">${cmd_buf} = kill -9 239</msg>
<status endtime="20171030 15:29:26.120" status="PASS" starttime="20171030 15:29:26.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20171030 15:29:26.122" status="PASS" starttime="20171030 15:29:26.122"></status>
</kw>
<status endtime="20171030 15:29:26.122" status="PASS" starttime="20171030 15:29:26.121"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20171030 15:29:26.129" level="INFO">Running command 'kill -9 239 2&gt;&amp;1'.</msg>
<status endtime="20171030 15:29:26.133" status="PASS" starttime="20171030 15:29:26.124"></status>
</kw>
<msg timestamp="20171030 15:29:26.134" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:29:26.134" level="INFO">${output} = </msg>
<status endtime="20171030 15:29:26.134" status="PASS" starttime="20171030 15:29:26.122"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20171030 15:29:26.138" status="PASS" starttime="20171030 15:29:26.138"></status>
</kw>
<status endtime="20171030 15:29:26.139" status="PASS" starttime="20171030 15:29:26.137"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20171030 15:29:26.145" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/10510/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/10510/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status endtime="20171030 15:29:26.145" status="PASS" starttime="20171030 15:29:26.141"></status>
</kw>
<status endtime="20171030 15:29:26.146" status="PASS" starttime="20171030 15:29:26.140"></status>
</kw>
<status endtime="20171030 15:29:26.146" status="PASS" starttime="20171030 15:29:26.139"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171030 15:29:26.146" level="INFO">${output} = </msg>
<status endtime="20171030 15:29:26.146" status="PASS" starttime="20171030 15:29:26.146"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171030 15:29:26.147" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20171030 15:29:26.147" status="PASS" starttime="20171030 15:29:26.147"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status endtime="20171030 15:29:26.205" status="PASS" starttime="20171030 15:29:26.148"></status>
</kw>
<msg timestamp="20171030 15:29:26.207" level="INFO">${rc} = 0</msg>
<msg timestamp="20171030 15:29:26.207" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
root@9.3.86.161's password: 
</msg>
<status endtime="20171030 15:29:26.207" status="PASS" starttime="20171030 15:29:26.147"></status>
</kw>
<msg timestamp="20171030 15:29:26.208" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
root@9.3.86.161's password: 
</msg>
<status endtime="20171030 15:29:26.208" status="PASS" starttime="20171030 15:29:26.069"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20171030 15:29:26.210" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
root@9.3.86.161's password: 
</msg>
<status endtime="20171030 15:29:26.211" status="PASS" starttime="20171030 15:29:26.210"></status>
</kw>
<status endtime="20171030 15:29:26.211" status="PASS" starttime="20171030 15:28:35.805"></status>
</kw>
<doc>Parse the journal log and check for failures.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Check_For_Application_Failures</tag>
</tags>
<status endtime="20171030 15:29:26.211" status="FAIL" starttime="20171030 15:28:22.565" critical="yes">'Oct 30 15:12:01 witherspoon systemd[1]: xyz.openbmc_project.Logging.service: Failed with result 'core-dump'.' should be empty.</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20171030 15:29:26.213" status="FAIL" starttime="20171030 15:13:18.287"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20171030 15:29:26.220" status="FAIL" starttime="20171030 15:13:06.979"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="2">Critical Tests</stat>
<stat fail="1" pass="2">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="1">chassisboot</stat>
<stat fail="1" pass="0">Check_For_Application_Failures</stat>
<stat fail="0" pass="1">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" pass="2" name="Tests">Tests</stat>
<stat fail="0" id="s1-s1" pass="1" name="Security">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" pass="1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" pass="1" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20171030 15:13:09.681" level="WARN">Keyword 'Execute Command' found both from a custom test library 'SSHLibrary' and a standard library 'Telnet'. The custom keyword is used. To select explicitly, and to get rid of this warning, use either 'SSHLibrary.Execute Command' or 'Telnet.Execute Command'.</msg>
<msg timestamp="20171030 15:13:16.697" level="WARN">Keyword 'Execute Command' found both from a custom test library 'SSHLibrary' and a standard library 'Telnet'. The custom keyword is used. To select explicitly, and to get rid of this warning, use either 'SSHLibrary.Execute Command' or 'Telnet.Execute Command'.</msg>
</errors>
</robot>
