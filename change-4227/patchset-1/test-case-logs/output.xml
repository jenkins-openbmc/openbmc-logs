<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170516 02:34:14.398">
<suite id="s1" source="/tmp/fspcibld/6467/obmc-robot/tests" name="Tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170516 02:34:14.969" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170516 02:34:14.969" status="FAIL" starttime="20170516 02:34:14.968"></status>
</kw>
<msg timestamp="20170516 02:34:14.969" level="INFO">${has_host} = False</msg>
<status endtime="20170516 02:34:14.969" status="PASS" starttime="20170516 02:34:14.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170516 02:34:14.970" status="PASS" starttime="20170516 02:34:14.970"></status>
</kw>
<status endtime="20170516 02:34:14.970" status="PASS" starttime="20170516 02:34:14.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170516 02:34:14.971" level="INFO">${port_num} = 22</msg>
<status endtime="20170516 02:34:14.971" status="PASS" starttime="20170516 02:34:14.971"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170516 02:34:14.972" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170516 02:34:14.972" status="PASS" starttime="20170516 02:34:14.972"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170516 02:34:14.972" level="INFO">${https_num} = 443</msg>
<status endtime="20170516 02:34:14.972" status="PASS" starttime="20170516 02:34:14.972"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170516 02:34:14.973" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170516 02:34:14.973" status="PASS" starttime="20170516 02:34:14.973"></status>
</kw>
<status endtime="20170516 02:34:14.973" status="PASS" starttime="20170516 02:34:14.971"></status>
</kw>
<status endtime="20170516 02:34:14.973" status="PASS" starttime="20170516 02:34:14.970"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170516 02:34:14.974" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170516 02:34:14.974" status="FAIL" starttime="20170516 02:34:14.974"></status>
</kw>
<msg timestamp="20170516 02:34:14.974" level="INFO">${has_port} = False</msg>
<status endtime="20170516 02:34:14.974" status="PASS" starttime="20170516 02:34:14.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170516 02:34:14.976" status="PASS" starttime="20170516 02:34:14.976"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170516 02:34:14.976" status="PASS" starttime="20170516 02:34:14.976"></status>
</kw>
<status endtime="20170516 02:34:14.977" status="PASS" starttime="20170516 02:34:14.975"></status>
</kw>
<status endtime="20170516 02:34:14.977" status="PASS" starttime="20170516 02:34:14.975"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170516 02:34:14.977" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170516 02:34:16.921" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170516 02:34:16.921" status="PASS" starttime="20170516 02:34:14.977"></status>
</kw>
<status endtime="20170516 02:34:16.921" status="PASS" starttime="20170516 02:34:14.967"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:34:16.922" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170516 02:34:17.201" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:34:17.201" level="INFO">${output} = VERSION_ID="v1.99.5-42-g6867b64"</msg>
<msg timestamp="20170516 02:34:17.201" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:34:17.201" status="PASS" starttime="20170516 02:34:16.922"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170516 02:34:17.202" level="INFO">Length is 0</msg>
<status endtime="20170516 02:34:17.202" status="PASS" starttime="20170516 02:34:17.202"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170516 02:34:17.202" level="INFO">VERSION_ID="v1.99.5-42-g6867b64"</msg>
<status endtime="20170516 02:34:17.202" status="PASS" starttime="20170516 02:34:17.202"></status>
</kw>
<status endtime="20170516 02:34:17.203" status="PASS" starttime="20170516 02:34:16.922"></status>
</kw>
<status endtime="20170516 02:34:17.203" status="PASS" starttime="20170516 02:34:16.921"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:34:17.204" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170516 02:34:17.339" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:34:17.339" level="INFO">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg timestamp="20170516 02:34:17.340" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:34:17.340" status="PASS" starttime="20170516 02:34:17.204"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170516 02:34:17.340" level="INFO">Length is 0</msg>
<status endtime="20170516 02:34:17.340" status="PASS" starttime="20170516 02:34:17.340"></status>
</kw>
<msg timestamp="20170516 02:34:17.340" level="INFO">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status endtime="20170516 02:34:17.340" status="PASS" starttime="20170516 02:34:17.203"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg timestamp="20170516 02:34:17.341" level="INFO">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status endtime="20170516 02:34:17.342" status="PASS" starttime="20170516 02:34:17.341"></status>
</kw>
<status endtime="20170516 02:34:17.342" status="PASS" starttime="20170516 02:34:17.203"></status>
</kw>
<status endtime="20170516 02:34:17.342" status="PASS" starttime="20170516 02:34:17.203"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170516 02:34:17.345" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170516 02:34:17.345" status="FAIL" starttime="20170516 02:34:17.345"></status>
</kw>
<msg timestamp="20170516 02:34:17.345" level="INFO">${has_host} = False</msg>
<status endtime="20170516 02:34:17.345" status="PASS" starttime="20170516 02:34:17.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170516 02:34:17.346" status="PASS" starttime="20170516 02:34:17.346"></status>
</kw>
<status endtime="20170516 02:34:17.346" status="PASS" starttime="20170516 02:34:17.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170516 02:34:17.348" level="INFO">${port_num} = 22</msg>
<status endtime="20170516 02:34:17.348" status="PASS" starttime="20170516 02:34:17.347"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170516 02:34:17.348" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170516 02:34:17.348" status="PASS" starttime="20170516 02:34:17.348"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170516 02:34:17.349" level="INFO">${https_num} = 443</msg>
<status endtime="20170516 02:34:17.349" status="PASS" starttime="20170516 02:34:17.348"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170516 02:34:17.349" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170516 02:34:17.349" status="PASS" starttime="20170516 02:34:17.349"></status>
</kw>
<status endtime="20170516 02:34:17.350" status="PASS" starttime="20170516 02:34:17.347"></status>
</kw>
<status endtime="20170516 02:34:17.350" status="PASS" starttime="20170516 02:34:17.346"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170516 02:34:17.351" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170516 02:34:17.351" status="FAIL" starttime="20170516 02:34:17.350"></status>
</kw>
<msg timestamp="20170516 02:34:17.351" level="INFO">${has_port} = False</msg>
<status endtime="20170516 02:34:17.351" status="PASS" starttime="20170516 02:34:17.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170516 02:34:17.352" status="PASS" starttime="20170516 02:34:17.352"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170516 02:34:17.353" status="PASS" starttime="20170516 02:34:17.352"></status>
</kw>
<status endtime="20170516 02:34:17.353" status="PASS" starttime="20170516 02:34:17.352"></status>
</kw>
<status endtime="20170516 02:34:17.353" status="PASS" starttime="20170516 02:34:17.351"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170516 02:34:17.354" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170516 02:34:19.030" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170516 02:34:19.031" status="PASS" starttime="20170516 02:34:17.353"></status>
</kw>
<status endtime="20170516 02:34:19.031" status="PASS" starttime="20170516 02:34:17.344"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:34:19.032" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170516 02:34:19.098" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:34:19.098" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170516 02:34:19.098" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:34:19.098" status="PASS" starttime="20170516 02:34:19.031"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170516 02:34:19.099" level="INFO">Length is 0</msg>
<status endtime="20170516 02:34:19.099" status="PASS" starttime="20170516 02:34:19.099"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170516 02:34:19.099" level="INFO">Length is 11</msg>
<status endtime="20170516 02:34:19.099" status="PASS" starttime="20170516 02:34:19.099"></status>
</kw>
<msg timestamp="20170516 02:34:19.100" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170516 02:34:19.100" status="PASS" starttime="20170516 02:34:17.343"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170516 02:34:19.100" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170516 02:34:19.100" status="PASS" starttime="20170516 02:34:19.100"></status>
</kw>
<status endtime="20170516 02:34:19.100" status="PASS" starttime="20170516 02:34:17.343"></status>
</kw>
<status endtime="20170516 02:34:19.100" status="PASS" starttime="20170516 02:34:17.343"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170516 02:34:19.102" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170516 02:34:19.102" status="FAIL" starttime="20170516 02:34:19.102"></status>
</kw>
<msg timestamp="20170516 02:34:19.103" level="INFO">${has_host} = False</msg>
<status endtime="20170516 02:34:19.103" status="PASS" starttime="20170516 02:34:19.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170516 02:34:19.104" status="PASS" starttime="20170516 02:34:19.103"></status>
</kw>
<status endtime="20170516 02:34:19.104" status="PASS" starttime="20170516 02:34:19.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170516 02:34:19.105" level="INFO">${port_num} = 22</msg>
<status endtime="20170516 02:34:19.105" status="PASS" starttime="20170516 02:34:19.105"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170516 02:34:19.106" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170516 02:34:19.106" status="PASS" starttime="20170516 02:34:19.105"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170516 02:34:19.106" level="INFO">${https_num} = 443</msg>
<status endtime="20170516 02:34:19.106" status="PASS" starttime="20170516 02:34:19.106"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170516 02:34:19.107" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170516 02:34:19.107" status="PASS" starttime="20170516 02:34:19.107"></status>
</kw>
<status endtime="20170516 02:34:19.107" status="PASS" starttime="20170516 02:34:19.105"></status>
</kw>
<status endtime="20170516 02:34:19.107" status="PASS" starttime="20170516 02:34:19.104"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170516 02:34:19.108" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170516 02:34:19.108" status="FAIL" starttime="20170516 02:34:19.108"></status>
</kw>
<msg timestamp="20170516 02:34:19.108" level="INFO">${has_port} = False</msg>
<status endtime="20170516 02:34:19.108" status="PASS" starttime="20170516 02:34:19.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170516 02:34:19.110" status="PASS" starttime="20170516 02:34:19.110"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170516 02:34:19.110" status="PASS" starttime="20170516 02:34:19.110"></status>
</kw>
<status endtime="20170516 02:34:19.110" status="PASS" starttime="20170516 02:34:19.109"></status>
</kw>
<status endtime="20170516 02:34:19.111" status="PASS" starttime="20170516 02:34:19.108"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170516 02:34:19.111" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170516 02:34:20.767" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170516 02:34:20.767" status="PASS" starttime="20170516 02:34:19.111"></status>
</kw>
<status endtime="20170516 02:34:20.767" status="PASS" starttime="20170516 02:34:19.101"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:34:20.768" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170516 02:34:20.845" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:34:20.845" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170516 02:34:20.845" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:34:20.845" status="PASS" starttime="20170516 02:34:20.768"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170516 02:34:20.845" level="INFO">Length is 0</msg>
<status endtime="20170516 02:34:20.845" status="PASS" starttime="20170516 02:34:20.845"></status>
</kw>
<msg timestamp="20170516 02:34:20.846" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170516 02:34:20.846" status="PASS" starttime="20170516 02:34:20.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170516 02:34:20.846" status="PASS" starttime="20170516 02:34:20.846"></status>
</kw>
<status endtime="20170516 02:34:20.846" status="PASS" starttime="20170516 02:34:19.101"></status>
</kw>
<status endtime="20170516 02:34:20.846" status="PASS" starttime="20170516 02:34:19.101"></status>
</kw>
<status endtime="20170516 02:34:20.846" status="PASS" starttime="20170516 02:34:14.967"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/6467/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/6467/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:34:20.926" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:34:20.927" status="PASS" starttime="20170516 02:34:20.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:34:20.927" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:34:20.928" status="PASS" starttime="20170516 02:34:20.927"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:34:20.928" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:34:20.928" status="PASS" starttime="20170516 02:34:20.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:34:20.929" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:34:20.929" status="PASS" starttime="20170516 02:34:20.928"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:34:21.133" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170516 02:34:21.133" status="PASS" starttime="20170516 02:34:20.929"></status>
</kw>
<msg timestamp="20170516 02:34:21.133" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:34:21.133" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:34:21.133" status="PASS" starttime="20170516 02:34:20.929"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:34:21.134" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:34:21.134" status="PASS" starttime="20170516 02:34:21.134"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:34:21.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:34:21.135" status="PASS" starttime="20170516 02:34:21.134"></status>
</kw>
<status endtime="20170516 02:34:21.135" status="PASS" starttime="20170516 02:34:20.925"></status>
</kw>
<status endtime="20170516 02:34:21.135" status="PASS" starttime="20170516 02:34:20.925"></status>
</kw>
<status endtime="20170516 02:34:21.135" status="PASS" starttime="20170516 02:34:20.924"></status>
</kw>
<kw name="FFDC On Test Case Fail" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:34:21.140" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:34:21.141" status="PASS" starttime="20170516 02:34:21.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:34:21.141" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:34:21.142" status="PASS" starttime="20170516 02:34:21.141"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:34:21.143" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:34:21.143" status="PASS" starttime="20170516 02:34:21.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:34:21.144" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:34:21.144" status="PASS" starttime="20170516 02:34:21.143"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:34:21.337" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170516 02:34:21.337" status="PASS" starttime="20170516 02:34:21.144"></status>
</kw>
<msg timestamp="20170516 02:34:21.337" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:34:21.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:34:21.337" status="PASS" starttime="20170516 02:34:21.144"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:34:21.338" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:34:21.338" status="PASS" starttime="20170516 02:34:21.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:34:21.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:34:21.339" status="PASS" starttime="20170516 02:34:21.338"></status>
</kw>
<status endtime="20170516 02:34:21.339" status="PASS" starttime="20170516 02:34:21.139"></status>
</kw>
<status endtime="20170516 02:34:21.339" status="PASS" starttime="20170516 02:34:21.138"></status>
</kw>
<status endtime="20170516 02:34:21.339" status="PASS" starttime="20170516 02:34:21.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170516 02:34:21.340" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170516 02:34:21.340" status="PASS" starttime="20170516 02:34:21.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170516 02:34:21.342" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170516 02:34:21.342" status="PASS" starttime="20170516 02:34:21.341"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170516 02:34:21.343" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170516 02:34:21.343" status="PASS" starttime="20170516 02:34:21.343"></status>
</kw>
<status endtime="20170516 02:34:21.343" status="PASS" starttime="20170516 02:34:21.342"></status>
</kw>
<status endtime="20170516 02:34:21.343" status="PASS" starttime="20170516 02:34:21.340"></status>
</kw>
<status endtime="20170516 02:34:21.343" status="PASS" starttime="20170516 02:34:21.340"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170516 02:34:21.410" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170516 02:34:21.410" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:34:21.410" status="PASS" starttime="20170516 02:34:21.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170516 02:34:21.412" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170516 02:34:21.412" status="PASS" starttime="20170516 02:34:21.411"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170516 02:34:21.413" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170516 02:34:21.413" status="PASS" starttime="20170516 02:34:21.413"></status>
</kw>
<status endtime="20170516 02:34:21.413" status="PASS" starttime="20170516 02:34:21.412"></status>
</kw>
<status endtime="20170516 02:34:21.414" status="PASS" starttime="20170516 02:34:21.411"></status>
</kw>
<status endtime="20170516 02:34:21.414" status="PASS" starttime="20170516 02:34:21.411"></status>
</kw>
<msg timestamp="20170516 02:34:21.414" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:34:21.414" status="PASS" starttime="20170516 02:34:21.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:34:21.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:34:21.415" status="PASS" starttime="20170516 02:34:21.414"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170516 02:34:21.415" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170516 02:34:21.415" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170516 02:34:21.415" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170516 02:34:21.415" status="PASS" starttime="20170516 02:34:21.415"></status>
</kw>
<msg timestamp="20170516 02:34:21.415" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170516 02:34:21.416" status="PASS" starttime="20170516 02:34:21.137"></status>
</kw>
<msg timestamp="20170516 02:34:21.416" level="INFO">${host_state} = Running</msg>
<status endtime="20170516 02:34:21.416" status="PASS" starttime="20170516 02:34:21.136"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170516 02:34:21.417" level="FAIL">Running != Quiesced</msg>
<status endtime="20170516 02:34:21.417" status="FAIL" starttime="20170516 02:34:21.416"></status>
</kw>
<msg timestamp="20170516 02:34:21.417" level="INFO">${status} = False</msg>
<status endtime="20170516 02:34:21.417" status="PASS" starttime="20170516 02:34:21.416"></status>
</kw>
<msg timestamp="20170516 02:34:21.417" level="INFO">${status} = False</msg>
<status endtime="20170516 02:34:21.417" status="PASS" starttime="20170516 02:34:21.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170516 02:34:21.418" status="PASS" starttime="20170516 02:34:21.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170516 02:34:21.418" status="PASS" starttime="20170516 02:34:21.418"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170516 02:34:21.427" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170516 02:34:21.427" status="PASS" starttime="20170516 02:34:21.419"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170516 02:34:21.434" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170516 02:34:21.434" status="PASS" starttime="20170516 02:34:21.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170516 02:34:21.443" level="INFO">${cur_time} = 2017-05-16 02:34:21:442639</msg>
<status endtime="20170516 02:34:21.443" status="PASS" starttime="20170516 02:34:21.442"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170516 02:34:21.443" level="INFO">${cur_time} = 20170516023421442639</msg>
<status endtime="20170516 02:34:21.443" status="PASS" starttime="20170516 02:34:21.443"></status>
</kw>
<status endtime="20170516 02:34:21.444" status="PASS" starttime="20170516 02:34:21.442"></status>
</kw>
<msg timestamp="20170516 02:34:21.448" level="INFO">${FFDC_TIME} = 20170516023421442639</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170516 02:34:21.450" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170516 02:34:21.450" status="PASS" starttime="20170516 02:34:21.449"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170516 02:34:21.450" level="INFO">${suite_name} = 20170516023421442639_TestsSecurityTestSsl</msg>
<status endtime="20170516 02:34:21.450" status="PASS" starttime="20170516 02:34:21.450"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170516 02:34:21.451" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170516 02:34:21.451" status="PASS" starttime="20170516 02:34:21.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170516 02:34:21.451" level="INFO">${test_name} = 20170516023421442639_TestSSLConnection</msg>
<status endtime="20170516 02:34:21.452" status="PASS" starttime="20170516 02:34:21.451"></status>
</kw>
<status endtime="20170516 02:34:21.452" status="PASS" starttime="20170516 02:34:21.449"></status>
</kw>
<msg timestamp="20170516 02:34:21.452" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023421442639_TestsSecurityTestSsl/20170516023421442639_TestSSLConnection/</msg>
<msg timestamp="20170516 02:34:21.456" level="INFO">${FFDC_PREFIX} = 20170516023421442639_</msg>
<status endtime="20170516 02:34:21.456" status="PASS" starttime="20170516 02:34:21.435"></status>
</kw>
<status endtime="20170516 02:34:21.456" status="PASS" starttime="20170516 02:34:21.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170516 02:34:21.457" status="PASS" starttime="20170516 02:34:21.456"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170516 02:34:21.457" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs"&gt;/tmp/fspcibld/6467/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170516 02:34:21.457" status="PASS" starttime="20170516 02:34:21.457"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170516 02:34:21.458" level="FAIL">File '/tmp/fspcibld/6467/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170516 02:34:21.459" status="FAIL" starttime="20170516 02:34:21.458"></status>
</kw>
<msg timestamp="20170516 02:34:21.459" level="INFO">${exist} = False</msg>
<status endtime="20170516 02:34:21.459" status="PASS" starttime="20170516 02:34:21.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170516 02:34:21.460" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:34:21.460" status="PASS" starttime="20170516 02:34:21.459"></status>
</kw>
<status endtime="20170516 02:34:21.460" status="PASS" starttime="20170516 02:34:21.459"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170516 02:34:21.461" status="PASS" starttime="20170516 02:34:21.460"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170516 02:34:21.462" level="INFO">${cur_time} = 2017-05-16 02:34:21:461393</msg>
<status endtime="20170516 02:34:21.462" status="PASS" starttime="20170516 02:34:21.461"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170516 02:34:21.462" level="INFO">${cur_time} = 20170516023421461393</msg>
<status endtime="20170516 02:34:21.462" status="PASS" starttime="20170516 02:34:21.462"></status>
</kw>
<msg timestamp="20170516 02:34:21.462" level="INFO">${cur_time} = 20170516023421461393</msg>
<status endtime="20170516 02:34:21.462" status="PASS" starttime="20170516 02:34:21.461"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170516 02:34:21.463" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:34:21.464" status="PASS" starttime="20170516 02:34:21.463"></status>
</kw>
<status endtime="20170516 02:34:21.464" status="PASS" starttime="20170516 02:34:21.419"></status>
</kw>
<status endtime="20170516 02:34:21.464" status="PASS" starttime="20170516 02:34:21.135"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" endtime="20170516 02:34:21.464" status="PASS" starttime="20170516 02:34:20.924"></status>
</test>
<kw name="Delete All Sessions" type="teardown" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170516 02:34:21.465" level="INFO">Delete All Sessions</msg>
<status endtime="20170516 02:34:21.465" status="PASS" starttime="20170516 02:34:21.465"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170516 02:34:21.465" status="PASS" starttime="20170516 02:34:20.848"></status>
</suite>
<status endtime="20170516 02:34:21.467" status="PASS" starttime="20170516 02:34:20.847"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/6467/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" type="setup" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170516 02:34:21.506" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170516 02:34:21.506" status="PASS" starttime="20170516 02:34:21.505"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170516 02:34:21.506" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170516 02:34:21.507" status="PASS" starttime="20170516 02:34:21.506"></status>
</kw>
<msg timestamp="20170516 02:34:21.507" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170516 02:34:21.507" status="PASS" starttime="20170516 02:34:21.505"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170516 02:34:21.508" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170516 02:34:21.508" status="PASS" starttime="20170516 02:34:21.508"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170516 02:34:21.509" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170516 02:34:21.509" status="PASS" starttime="20170516 02:34:21.508"></status>
</kw>
<msg timestamp="20170516 02:34:21.509" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170516 02:34:21.509" status="PASS" starttime="20170516 02:34:21.507"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:34:21.510" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170516 02:34:21.510" status="PASS" starttime="20170516 02:34:21.510"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170516 02:34:21.517" status="PASS" starttime="20170516 02:34:21.510"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170516 02:34:21.521" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170516 02:34:21.526" level="INFO">${rc} = 0</msg>
<msg timestamp="20170516 02:34:21.526" level="INFO">${output} = /tmp/fspcibld/6467/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170516 02:34:21.526" status="PASS" starttime="20170516 02:34:21.518"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170516 02:34:21.536" status="PASS" starttime="20170516 02:34:21.528"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170516 02:34:21.537" status="PASS" starttime="20170516 02:34:21.536"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:34:21.537" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170516 02:34:21.537" status="PASS" starttime="20170516 02:34:21.537"></status>
</kw>
<msg timestamp="20170516 02:34:21.538" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170516 02:34:21.538" status="PASS" starttime="20170516 02:34:21.509"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:34:21.538" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170516 02:34:21.538" status="PASS" starttime="20170516 02:34:21.538"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170516 02:34:21.546" status="PASS" starttime="20170516 02:34:21.538"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170516 02:34:21.549" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170516 02:34:21.558" level="INFO">${rc} = 0</msg>
<msg timestamp="20170516 02:34:21.558" level="INFO">${os_con_pid} = </msg>
<status endtime="20170516 02:34:21.558" status="PASS" starttime="20170516 02:34:21.546"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170516 02:34:21.569" status="PASS" starttime="20170516 02:34:21.560"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:34:21.570" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170516 02:34:21.570" status="PASS" starttime="20170516 02:34:21.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170516 02:34:21.571" status="PASS" starttime="20170516 02:34:21.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170516 02:34:21.572" level="INFO">${rc} = None</msg>
<msg timestamp="20170516 02:34:21.572" level="INFO">${output} = None</msg>
<status endtime="20170516 02:34:21.572" status="PASS" starttime="20170516 02:34:21.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170516 02:34:21.573" status="PASS" starttime="20170516 02:34:21.572"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:34:21.573" level="INFO">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status endtime="20170516 02:34:21.573" status="PASS" starttime="20170516 02:34:21.573"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170516 02:34:21.580" status="PASS" starttime="20170516 02:34:21.573"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170516 02:34:21.584" level="INFO">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170516 02:34:21.587" level="INFO">${rc} = 1</msg>
<msg timestamp="20170516 02:34:21.587" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status endtime="20170516 02:34:21.587" status="PASS" starttime="20170516 02:34:21.581"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170516 02:34:21.598" status="PASS" starttime="20170516 02:34:21.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170516 02:34:21.599" status="PASS" starttime="20170516 02:34:21.599"></status>
</kw>
<msg timestamp="20170516 02:34:21.599" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status endtime="20170516 02:34:21.599" status="PASS" starttime="20170516 02:34:21.507"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170516 02:34:21.600" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170516 02:34:21.600" status="PASS" starttime="20170516 02:34:21.600"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:34:21.601" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170516 02:34:21.601" status="PASS" starttime="20170516 02:34:21.601"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170516 02:34:21.610" status="PASS" starttime="20170516 02:34:21.601"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170516 02:34:21.620" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170516 02:34:21.636" level="INFO">${rc} = 0</msg>
<msg timestamp="20170516 02:34:21.636" level="INFO">${output} = /tmp/fspcibld/6467/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170516 02:34:21.636" status="PASS" starttime="20170516 02:34:21.610"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170516 02:34:21.646" status="PASS" starttime="20170516 02:34:21.638"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170516 02:34:21.647" status="PASS" starttime="20170516 02:34:21.646"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:34:21.648" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170516 02:34:21.648" status="PASS" starttime="20170516 02:34:21.647"></status>
</kw>
<msg timestamp="20170516 02:34:21.648" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170516 02:34:21.648" status="PASS" starttime="20170516 02:34:21.601"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:34:21.648" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170516 02:34:21.648" status="PASS" starttime="20170516 02:34:21.648"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170516 02:34:21.658" status="PASS" starttime="20170516 02:34:21.649"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170516 02:34:21.663" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170516 02:34:21.667" level="INFO">${rc} = 0</msg>
<msg timestamp="20170516 02:34:21.667" level="INFO">${output} = </msg>
<status endtime="20170516 02:34:21.667" status="PASS" starttime="20170516 02:34:21.658"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170516 02:34:21.670" status="PASS" starttime="20170516 02:34:21.669"></status>
</kw>
<status endtime="20170516 02:34:21.670" status="PASS" starttime="20170516 02:34:21.505"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170516 02:34:21.671" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170516 02:34:21.675" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170516 02:34:21.676" status="PASS" starttime="20170516 02:34:21.675"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170516 02:34:21.677" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170516 02:34:21.677" status="PASS" starttime="20170516 02:34:21.676"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:34:21.680" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:34:21.681" status="PASS" starttime="20170516 02:34:21.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:34:21.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:34:21.682" status="PASS" starttime="20170516 02:34:21.681"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:34:21.682" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:34:21.682" status="PASS" starttime="20170516 02:34:21.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:34:21.683" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:34:21.683" status="PASS" starttime="20170516 02:34:21.682"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:34:22.131" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170516 02:34:22.131" status="PASS" starttime="20170516 02:34:21.684"></status>
</kw>
<msg timestamp="20170516 02:34:22.131" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:34:22.131" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:34:22.132" status="PASS" starttime="20170516 02:34:21.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:34:22.132" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:34:22.132" status="PASS" starttime="20170516 02:34:22.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:34:22.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:34:22.133" status="PASS" starttime="20170516 02:34:22.132"></status>
</kw>
<status endtime="20170516 02:34:22.133" status="PASS" starttime="20170516 02:34:21.679"></status>
</kw>
<status endtime="20170516 02:34:22.133" status="PASS" starttime="20170516 02:34:21.678"></status>
</kw>
<status endtime="20170516 02:34:22.133" status="PASS" starttime="20170516 02:34:21.678"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170516 02:34:22.134" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170516 02:34:22.134" status="PASS" starttime="20170516 02:34:22.134"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:34:22.134" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:34:22.135" status="PASS" starttime="20170516 02:34:22.134"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170516 02:34:22.135" status="PASS" starttime="20170516 02:34:22.135"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170516 02:34:22.137" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170516 02:34:22.137" status="PASS" starttime="20170516 02:34:22.136"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170516 02:34:22.137" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170516 02:34:22.138" status="PASS" starttime="20170516 02:34:22.137"></status>
</kw>
<status endtime="20170516 02:34:22.138" status="PASS" starttime="20170516 02:34:22.137"></status>
</kw>
<status endtime="20170516 02:34:22.138" status="PASS" starttime="20170516 02:34:22.135"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170516 02:34:22.558" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170516 02:34:22.559" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:34:22.559" status="PASS" starttime="20170516 02:34:22.138"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170516 02:34:22.560" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170516 02:34:22.560" status="PASS" starttime="20170516 02:34:22.559"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170516 02:34:22.561" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170516 02:34:22.561" status="PASS" starttime="20170516 02:34:22.560"></status>
</kw>
<status endtime="20170516 02:34:22.561" status="PASS" starttime="20170516 02:34:22.560"></status>
</kw>
<status endtime="20170516 02:34:22.561" status="PASS" starttime="20170516 02:34:22.559"></status>
</kw>
<msg timestamp="20170516 02:34:22.561" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:34:22.561" status="PASS" starttime="20170516 02:34:21.677"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:34:22.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:34:22.562" status="PASS" starttime="20170516 02:34:22.562"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170516 02:34:22.563" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170516 02:34:22.563" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170516 02:34:22.563" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170516 02:34:22.563" status="PASS" starttime="20170516 02:34:22.563"></status>
</kw>
<status endtime="20170516 02:34:22.563" status="PASS" starttime="20170516 02:34:21.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170516 02:34:22.564" status="PASS" starttime="20170516 02:34:22.564"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:34:22.569" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:34:22.569" status="PASS" starttime="20170516 02:34:22.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:34:22.570" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:34:22.570" status="PASS" starttime="20170516 02:34:22.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:34:22.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:34:22.570" status="PASS" starttime="20170516 02:34:22.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:34:22.571" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:34:22.571" status="PASS" starttime="20170516 02:34:22.571"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:34:23.460" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170516 02:34:23.460" status="PASS" starttime="20170516 02:34:22.572"></status>
</kw>
<msg timestamp="20170516 02:34:23.460" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:34:23.460" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:34:23.460" status="PASS" starttime="20170516 02:34:22.571"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:34:23.461" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:34:23.461" status="PASS" starttime="20170516 02:34:23.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:34:23.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:34:23.462" status="PASS" starttime="20170516 02:34:23.461"></status>
</kw>
<status endtime="20170516 02:34:23.462" status="PASS" starttime="20170516 02:34:22.568"></status>
</kw>
<status endtime="20170516 02:34:23.462" status="PASS" starttime="20170516 02:34:22.568"></status>
</kw>
<status endtime="20170516 02:34:23.462" status="PASS" starttime="20170516 02:34:22.567"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170516 02:34:23.463" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170516 02:34:23.463" status="PASS" starttime="20170516 02:34:23.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170516 02:34:23.465" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170516 02:34:23.466" status="PASS" starttime="20170516 02:34:23.465"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170516 02:34:23.467" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170516 02:34:23.467" status="PASS" starttime="20170516 02:34:23.466"></status>
</kw>
<status endtime="20170516 02:34:23.467" status="PASS" starttime="20170516 02:34:23.466"></status>
</kw>
<status endtime="20170516 02:34:23.467" status="PASS" starttime="20170516 02:34:23.464"></status>
</kw>
<status endtime="20170516 02:34:23.467" status="PASS" starttime="20170516 02:34:23.463"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170516 02:34:24.766" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170516 02:34:24.766" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:34:24.766" status="PASS" starttime="20170516 02:34:23.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170516 02:34:24.768" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170516 02:34:24.768" status="PASS" starttime="20170516 02:34:24.768"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170516 02:34:24.770" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170516 02:34:24.770" status="PASS" starttime="20170516 02:34:24.769"></status>
</kw>
<status endtime="20170516 02:34:24.770" status="PASS" starttime="20170516 02:34:24.769"></status>
</kw>
<status endtime="20170516 02:34:24.770" status="PASS" starttime="20170516 02:34:24.767"></status>
</kw>
<status endtime="20170516 02:34:24.770" status="PASS" starttime="20170516 02:34:24.767"></status>
</kw>
<msg timestamp="20170516 02:34:24.770" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:34:24.770" status="PASS" starttime="20170516 02:34:22.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:34:24.771" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:34:24.771" status="PASS" starttime="20170516 02:34:24.771"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170516 02:34:24.771" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170516 02:34:24.772" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170516 02:34:24.772" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170516 02:34:24.772" status="PASS" starttime="20170516 02:34:24.771"></status>
</kw>
<msg timestamp="20170516 02:34:24.772" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170516 02:34:24.772" status="PASS" starttime="20170516 02:34:22.566"></status>
</kw>
<msg timestamp="20170516 02:34:24.772" level="INFO">${host_state} = Running</msg>
<status endtime="20170516 02:34:24.772" status="PASS" starttime="20170516 02:34:22.565"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170516 02:34:24.773" level="FAIL">Off != Running</msg>
<status endtime="20170516 02:34:24.773" status="FAIL" starttime="20170516 02:34:24.773"></status>
</kw>
<status endtime="20170516 02:34:24.773" status="FAIL" starttime="20170516 02:34:22.565"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:34:34.778" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:34:34.779" status="PASS" starttime="20170516 02:34:34.778"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:34:34.779" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:34:34.779" status="PASS" starttime="20170516 02:34:34.779"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:34:34.780" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:34:34.780" status="PASS" starttime="20170516 02:34:34.780"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:34:34.781" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:34:34.781" status="PASS" starttime="20170516 02:34:34.780"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:34:44.797" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:34:44.797" status="FAIL" starttime="20170516 02:34:34.781"></status>
</kw>
<msg timestamp="20170516 02:34:44.797" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170516 02:34:44.797" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:34:44.797" status="PASS" starttime="20170516 02:34:34.781"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:34:44.798" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:34:44.799" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:34:44.799" status="FAIL" starttime="20170516 02:34:44.798"></status>
</kw>
<status endtime="20170516 02:34:44.799" status="FAIL" starttime="20170516 02:34:34.777"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:35:04.801" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:35:04.802" status="PASS" starttime="20170516 02:35:04.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:35:04.802" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:35:04.802" status="PASS" starttime="20170516 02:35:04.802"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:35:04.803" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:35:04.803" status="PASS" starttime="20170516 02:35:04.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:35:04.804" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:35:04.804" status="PASS" starttime="20170516 02:35:04.803"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:35:14.819" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:35:14.819" status="FAIL" starttime="20170516 02:35:04.804"></status>
</kw>
<msg timestamp="20170516 02:35:14.819" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170516 02:35:14.819" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:35:14.820" status="PASS" starttime="20170516 02:35:04.804"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:35:14.820" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:35:14.820" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:35:14.821" status="FAIL" starttime="20170516 02:35:14.820"></status>
</kw>
<status endtime="20170516 02:35:14.821" status="FAIL" starttime="20170516 02:35:04.800"></status>
</kw>
<msg timestamp="20170516 02:35:14.821" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:35:14.821" status="FAIL" starttime="20170516 02:34:34.777"></status>
</kw>
<status endtime="20170516 02:35:14.821" status="FAIL" starttime="20170516 02:34:34.776"></status>
</kw>
<status endtime="20170516 02:35:14.821" status="FAIL" starttime="20170516 02:34:34.776"></status>
</kw>
<status endtime="20170516 02:35:14.821" status="FAIL" starttime="20170516 02:34:34.775"></status>
</kw>
<status endtime="20170516 02:35:14.822" status="FAIL" starttime="20170516 02:34:34.775"></status>
</kw>
<status endtime="20170516 02:35:14.822" status="FAIL" starttime="20170516 02:34:34.774"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:35:24.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:35:24.827" status="PASS" starttime="20170516 02:35:24.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:35:24.828" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:35:24.828" status="PASS" starttime="20170516 02:35:24.827"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:35:24.828" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:35:24.828" status="PASS" starttime="20170516 02:35:24.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:35:24.829" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:35:24.829" status="PASS" starttime="20170516 02:35:24.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:35:34.844" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:35:34.844" status="FAIL" starttime="20170516 02:35:24.830"></status>
</kw>
<msg timestamp="20170516 02:35:34.845" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170516 02:35:34.845" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:35:34.845" status="PASS" starttime="20170516 02:35:24.829"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:35:34.845" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:35:34.846" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:35:34.846" status="FAIL" starttime="20170516 02:35:34.845"></status>
</kw>
<status endtime="20170516 02:35:34.846" status="FAIL" starttime="20170516 02:35:24.826"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:35:54.848" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:35:54.848" status="PASS" starttime="20170516 02:35:54.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:35:54.849" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:35:54.849" status="PASS" starttime="20170516 02:35:54.848"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:35:54.849" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:35:54.849" status="PASS" starttime="20170516 02:35:54.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:35:54.850" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:35:54.850" status="PASS" starttime="20170516 02:35:54.850"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:36:04.865" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:36:04.865" status="FAIL" starttime="20170516 02:35:54.851"></status>
</kw>
<msg timestamp="20170516 02:36:04.866" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170516 02:36:04.866" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:36:04.866" status="PASS" starttime="20170516 02:35:54.850"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:36:04.866" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:36:04.867" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:36:04.867" status="FAIL" starttime="20170516 02:36:04.866"></status>
</kw>
<status endtime="20170516 02:36:04.867" status="FAIL" starttime="20170516 02:35:54.846"></status>
</kw>
<msg timestamp="20170516 02:36:04.867" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:36:04.867" status="FAIL" starttime="20170516 02:35:24.825"></status>
</kw>
<status endtime="20170516 02:36:04.867" status="FAIL" starttime="20170516 02:35:24.825"></status>
</kw>
<status endtime="20170516 02:36:04.867" status="FAIL" starttime="20170516 02:35:24.824"></status>
</kw>
<status endtime="20170516 02:36:04.867" status="FAIL" starttime="20170516 02:35:24.823"></status>
</kw>
<status endtime="20170516 02:36:04.868" status="FAIL" starttime="20170516 02:35:24.823"></status>
</kw>
<status endtime="20170516 02:36:04.868" status="FAIL" starttime="20170516 02:35:24.822"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:36:14.872" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:36:14.873" status="PASS" starttime="20170516 02:36:14.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:36:14.873" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:36:14.873" status="PASS" starttime="20170516 02:36:14.873"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:36:14.874" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:36:14.874" status="PASS" starttime="20170516 02:36:14.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:36:14.875" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:36:14.875" status="PASS" starttime="20170516 02:36:14.874"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:36:24.890" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:36:24.890" status="FAIL" starttime="20170516 02:36:14.876"></status>
</kw>
<msg timestamp="20170516 02:36:24.890" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170516 02:36:24.891" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:36:24.891" status="PASS" starttime="20170516 02:36:14.875"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:36:24.892" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:36:24.892" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:36:24.892" status="FAIL" starttime="20170516 02:36:24.891"></status>
</kw>
<status endtime="20170516 02:36:24.892" status="FAIL" starttime="20170516 02:36:14.871"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:36:44.894" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:36:44.894" status="PASS" starttime="20170516 02:36:44.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:36:44.895" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:36:44.895" status="PASS" starttime="20170516 02:36:44.894"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:36:44.895" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:36:44.895" status="PASS" starttime="20170516 02:36:44.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:36:44.896" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:36:44.896" status="PASS" starttime="20170516 02:36:44.896"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:36:54.907" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:36:54.907" status="FAIL" starttime="20170516 02:36:44.897"></status>
</kw>
<msg timestamp="20170516 02:36:54.907" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170516 02:36:54.908" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:36:54.908" status="PASS" starttime="20170516 02:36:44.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:36:54.908" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:36:54.908" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:36:54.908" status="FAIL" starttime="20170516 02:36:54.908"></status>
</kw>
<status endtime="20170516 02:36:54.909" status="FAIL" starttime="20170516 02:36:44.892"></status>
</kw>
<msg timestamp="20170516 02:36:54.909" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:36:54.909" status="FAIL" starttime="20170516 02:36:14.871"></status>
</kw>
<status endtime="20170516 02:36:54.909" status="FAIL" starttime="20170516 02:36:14.870"></status>
</kw>
<status endtime="20170516 02:36:54.909" status="FAIL" starttime="20170516 02:36:14.870"></status>
</kw>
<status endtime="20170516 02:36:54.909" status="FAIL" starttime="20170516 02:36:14.869"></status>
</kw>
<status endtime="20170516 02:36:54.910" status="FAIL" starttime="20170516 02:36:14.869"></status>
</kw>
<status endtime="20170516 02:36:54.910" status="FAIL" starttime="20170516 02:36:14.868"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:37:04.915" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:37:04.915" status="PASS" starttime="20170516 02:37:04.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:37:04.917" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:37:04.917" status="PASS" starttime="20170516 02:37:04.916"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:37:04.917" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:37:04.918" status="PASS" starttime="20170516 02:37:04.917"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:37:04.918" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:37:04.918" status="PASS" starttime="20170516 02:37:04.918"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:37:14.934" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:37:14.934" status="FAIL" starttime="20170516 02:37:04.919"></status>
</kw>
<msg timestamp="20170516 02:37:14.934" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170516 02:37:14.934" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:37:14.934" status="PASS" starttime="20170516 02:37:04.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:37:14.935" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:37:14.935" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:37:14.935" status="FAIL" starttime="20170516 02:37:14.934"></status>
</kw>
<status endtime="20170516 02:37:14.935" status="FAIL" starttime="20170516 02:37:04.914"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:37:34.937" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:37:34.938" status="PASS" starttime="20170516 02:37:34.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:37:34.939" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:37:34.939" status="PASS" starttime="20170516 02:37:34.938"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:37:34.939" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:37:34.939" status="PASS" starttime="20170516 02:37:34.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:37:34.940" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:37:34.940" status="PASS" starttime="20170516 02:37:34.939"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:37:44.955" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:37:44.955" status="FAIL" starttime="20170516 02:37:34.940"></status>
</kw>
<msg timestamp="20170516 02:37:44.956" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170516 02:37:44.956" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:37:44.956" status="PASS" starttime="20170516 02:37:34.940"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:37:44.956" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:37:44.957" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:37:44.957" status="FAIL" starttime="20170516 02:37:44.956"></status>
</kw>
<status endtime="20170516 02:37:44.957" status="FAIL" starttime="20170516 02:37:34.936"></status>
</kw>
<msg timestamp="20170516 02:37:44.957" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:37:44.957" status="FAIL" starttime="20170516 02:37:04.913"></status>
</kw>
<status endtime="20170516 02:37:44.957" status="FAIL" starttime="20170516 02:37:04.913"></status>
</kw>
<status endtime="20170516 02:37:44.957" status="FAIL" starttime="20170516 02:37:04.912"></status>
</kw>
<status endtime="20170516 02:37:44.958" status="FAIL" starttime="20170516 02:37:04.911"></status>
</kw>
<status endtime="20170516 02:37:44.958" status="FAIL" starttime="20170516 02:37:04.911"></status>
</kw>
<status endtime="20170516 02:37:44.958" status="FAIL" starttime="20170516 02:37:04.910"></status>
</kw>
<msg timestamp="20170516 02:37:44.958" level="FAIL">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:37:44.958" status="FAIL" starttime="20170516 02:34:22.564"></status>
</kw>
<status endtime="20170516 02:37:44.958" status="FAIL" starttime="20170516 02:34:21.673"></status>
</kw>
<status endtime="20170516 02:37:44.958" status="FAIL" starttime="20170516 02:34:21.671"></status>
</kw>
<status endtime="20170516 02:37:44.958" status="FAIL" starttime="20170516 02:34:21.671"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:37:44.963" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:37:44.966" status="PASS" starttime="20170516 02:37:44.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:37:44.966" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:37:44.966" status="PASS" starttime="20170516 02:37:44.966"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:37:44.967" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:37:44.967" status="PASS" starttime="20170516 02:37:44.967"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:37:44.967" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:37:44.968" status="PASS" starttime="20170516 02:37:44.967"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:37:54.982" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:37:54.982" status="FAIL" starttime="20170516 02:37:44.968"></status>
</kw>
<msg timestamp="20170516 02:37:54.983" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170516 02:37:54.983" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:37:54.983" status="PASS" starttime="20170516 02:37:44.968"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:37:54.984" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:37:54.984" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:37:54.984" status="FAIL" starttime="20170516 02:37:54.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:37:54.985" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status endtime="20170516 02:37:54.985" status="FAIL" starttime="20170516 02:37:54.984"></status>
</kw>
<status endtime="20170516 02:37:54.985" status="FAIL" starttime="20170516 02:37:44.962"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:38:14.987" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:38:14.988" status="PASS" starttime="20170516 02:38:14.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:38:14.988" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:38:14.988" status="PASS" starttime="20170516 02:38:14.988"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:38:14.989" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:38:14.989" status="PASS" starttime="20170516 02:38:14.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:38:14.990" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:38:14.990" status="PASS" starttime="20170516 02:38:14.989"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:38:25.005" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:38:25.005" status="FAIL" starttime="20170516 02:38:14.990"></status>
</kw>
<msg timestamp="20170516 02:38:25.005" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170516 02:38:25.005" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status endtime="20170516 02:38:25.005" status="PASS" starttime="20170516 02:38:14.990"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:38:25.006" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:38:25.006" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status endtime="20170516 02:38:25.006" status="FAIL" starttime="20170516 02:38:25.005"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:38:25.006" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status endtime="20170516 02:38:25.007" status="FAIL" starttime="20170516 02:38:25.006"></status>
</kw>
<status endtime="20170516 02:38:25.007" status="FAIL" starttime="20170516 02:38:14.986"></status>
</kw>
<msg timestamp="20170516 02:38:25.007" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status endtime="20170516 02:38:25.007" status="FAIL" starttime="20170516 02:37:44.962"></status>
</kw>
<status endtime="20170516 02:38:25.007" status="FAIL" starttime="20170516 02:37:44.961"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170516 02:38:25.008" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170516 02:38:25.008" status="PASS" starttime="20170516 02:38:25.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170516 02:38:25.010" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170516 02:38:25.010" status="PASS" starttime="20170516 02:38:25.009"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170516 02:38:25.011" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170516 02:38:25.011" status="PASS" starttime="20170516 02:38:25.011"></status>
</kw>
<status endtime="20170516 02:38:25.011" status="PASS" starttime="20170516 02:38:25.010"></status>
</kw>
<status endtime="20170516 02:38:25.012" status="PASS" starttime="20170516 02:38:25.009"></status>
</kw>
<status endtime="20170516 02:38:25.012" status="PASS" starttime="20170516 02:38:25.008"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170516 02:39:05.656" level="INFO">${ret} = None</msg>
<msg timestamp="20170516 02:39:05.656" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/state/host0//attr/CurrentHostState (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status endtime="20170516 02:39:05.656" status="FAIL" starttime="20170516 02:38:25.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170516 02:39:05.658" level="INFO">${msg} = None</msg>
<msg timestamp="20170516 02:39:05.658" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status endtime="20170516 02:39:05.659" status="FAIL" starttime="20170516 02:39:05.658"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170516 02:39:05.659" level="INFO">None</msg>
<status endtime="20170516 02:39:05.660" status="PASS" starttime="20170516 02:39:05.659"></status>
</kw>
<status endtime="20170516 02:39:05.660" status="PASS" starttime="20170516 02:39:05.659"></status>
</kw>
<status endtime="20170516 02:39:05.660" status="FAIL" starttime="20170516 02:39:05.657"></status>
</kw>
<status endtime="20170516 02:39:05.660" status="FAIL" starttime="20170516 02:39:05.657"></status>
</kw>
<msg timestamp="20170516 02:39:05.660" level="INFO">${resp} = None</msg>
<status endtime="20170516 02:39:05.660" status="FAIL" starttime="20170516 02:37:44.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:05.661" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status endtime="20170516 02:39:05.661" status="FAIL" starttime="20170516 02:39:05.661"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170516 02:39:05.661" level="INFO">${content} = None</msg>
<msg timestamp="20170516 02:39:05.662" level="FAIL">Resolving variable '${resp.content}' failed: AttributeError: 'NoneType' object has no attribute 'content'</msg>
<status endtime="20170516 02:39:05.662" status="FAIL" starttime="20170516 02:39:05.661"></status>
</kw>
<msg timestamp="20170516 02:39:05.662" level="INFO">${state} = None</msg>
<msg timestamp="20170516 02:39:05.662" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: TypeError: 'NoneType' object has no attribute '__getitem__'</msg>
<status endtime="20170516 02:39:05.662" status="FAIL" starttime="20170516 02:37:44.960"></status>
</kw>
<msg timestamp="20170516 02:39:05.663" level="INFO">${host_state} = None</msg>
<msg timestamp="20170516 02:39:05.663" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'</msg>
<status endtime="20170516 02:39:05.663" status="FAIL" starttime="20170516 02:37:44.960"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170516 02:39:05.664" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:39:05.664" level="FAIL">None != Quiesced</msg>
<status endtime="20170516 02:39:05.664" status="FAIL" starttime="20170516 02:39:05.663"></status>
</kw>
<msg timestamp="20170516 02:39:05.664" level="INFO">${status} = False</msg>
<status endtime="20170516 02:39:05.664" status="PASS" starttime="20170516 02:39:05.663"></status>
</kw>
<msg timestamp="20170516 02:39:05.664" level="INFO">${status} = False</msg>
<status endtime="20170516 02:39:05.664" status="FAIL" starttime="20170516 02:37:44.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170516 02:39:06.048" level="INFO">Length is 10</msg>
<status endtime="20170516 02:39:06.048" status="PASS" starttime="20170516 02:39:06.048"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170516 02:39:06.054" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170516 02:39:09.060" level="INFO">${RC} = 0</msg>
<msg timestamp="20170516 02:39:09.060" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.32 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.667 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status endtime="20170516 02:39:09.060" status="PASS" starttime="20170516 02:39:06.049"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.063" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.32 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.667 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.634 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.616 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.616/0.810/1.323/0.296 ms</msg>
<status endtime="20170516 02:39:09.063" status="PASS" starttime="20170516 02:39:09.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170516 02:39:09.064" status="PASS" starttime="20170516 02:39:09.064"></status>
</kw>
<status endtime="20170516 02:39:09.065" status="PASS" starttime="20170516 02:39:06.047"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170516 02:39:09.092" level="INFO">${cur_time} = 2017-05-16 02:39:09:092124</msg>
<status endtime="20170516 02:39:09.092" status="PASS" starttime="20170516 02:39:09.092"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170516 02:39:09.093" level="INFO">${cur_time} = 20170516023909092124</msg>
<status endtime="20170516 02:39:09.093" status="PASS" starttime="20170516 02:39:09.093"></status>
</kw>
<status endtime="20170516 02:39:09.093" status="PASS" starttime="20170516 02:39:09.091"></status>
</kw>
<msg timestamp="20170516 02:39:09.093" level="INFO">${FFDC_TIME} = 20170516023909092124</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170516 02:39:09.103" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170516 02:39:09.103" status="PASS" starttime="20170516 02:39:09.103"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170516 02:39:09.103" level="INFO">${suite_name} = 20170516023909092124_TestsTestBasicPoweron</msg>
<status endtime="20170516 02:39:09.103" status="PASS" starttime="20170516 02:39:09.103"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170516 02:39:09.104" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170516 02:39:09.104" status="PASS" starttime="20170516 02:39:09.104"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170516 02:39:09.105" level="INFO">${test_name} = 20170516023909092124_PowerOnTest</msg>
<status endtime="20170516 02:39:09.105" status="PASS" starttime="20170516 02:39:09.104"></status>
</kw>
<status endtime="20170516 02:39:09.105" status="PASS" starttime="20170516 02:39:09.102"></status>
</kw>
<msg timestamp="20170516 02:39:09.105" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/</msg>
<msg timestamp="20170516 02:39:09.105" level="INFO">${FFDC_PREFIX} = 20170516023909092124_</msg>
<msg timestamp="20170516 02:39:09.132" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/</arg>
</arguments>
<msg timestamp="20170516 02:39:09.133" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.133" status="PASS" starttime="20170516 02:39:09.133"></status>
</kw>
<msg timestamp="20170516 02:39:09.137" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.168" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.168" status="PASS" starttime="20170516 02:39:09.167"></status>
</kw>
<status endtime="20170516 02:39:09.168" status="PASS" starttime="20170516 02:39:09.165"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.169" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.170" status="PASS" starttime="20170516 02:39:09.169"></status>
</kw>
<status endtime="20170516 02:39:09.170" status="PASS" starttime="20170516 02:39:09.169"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.171" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.171" status="PASS" starttime="20170516 02:39:09.170"></status>
</kw>
<status endtime="20170516 02:39:09.171" status="PASS" starttime="20170516 02:39:09.170"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.172" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.172" status="PASS" starttime="20170516 02:39:09.172"></status>
</kw>
<status endtime="20170516 02:39:09.172" status="PASS" starttime="20170516 02:39:09.171"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.174" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.174" status="PASS" starttime="20170516 02:39:09.173"></status>
</kw>
<status endtime="20170516 02:39:09.174" status="PASS" starttime="20170516 02:39:09.173"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.175" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.175" status="PASS" starttime="20170516 02:39:09.175"></status>
</kw>
<status endtime="20170516 02:39:09.175" status="PASS" starttime="20170516 02:39:09.174"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.176" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.176" status="PASS" starttime="20170516 02:39:09.176"></status>
</kw>
<status endtime="20170516 02:39:09.176" status="PASS" starttime="20170516 02:39:09.175"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.178" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.178" status="PASS" starttime="20170516 02:39:09.178"></status>
</kw>
<status endtime="20170516 02:39:09.178" status="PASS" starttime="20170516 02:39:09.177"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.179" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.179" status="PASS" starttime="20170516 02:39:09.179"></status>
</kw>
<status endtime="20170516 02:39:09.179" status="PASS" starttime="20170516 02:39:09.178"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.181" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.181" status="PASS" starttime="20170516 02:39:09.180"></status>
</kw>
<status endtime="20170516 02:39:09.181" status="PASS" starttime="20170516 02:39:09.180"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.182" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.182" status="PASS" starttime="20170516 02:39:09.182"></status>
</kw>
<status endtime="20170516 02:39:09.182" status="PASS" starttime="20170516 02:39:09.181"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.183" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.183" status="PASS" starttime="20170516 02:39:09.183"></status>
</kw>
<status endtime="20170516 02:39:09.184" status="PASS" starttime="20170516 02:39:09.182"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.185" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:09.185" status="PASS" starttime="20170516 02:39:09.184"></status>
</kw>
<status endtime="20170516 02:39:09.185" status="PASS" starttime="20170516 02:39:09.184"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170516 02:39:09.187" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170516 02:39:09.187" status="FAIL" starttime="20170516 02:39:09.187"></status>
</kw>
<msg timestamp="20170516 02:39:09.187" level="INFO">${has_host} = False</msg>
<status endtime="20170516 02:39:09.187" status="PASS" starttime="20170516 02:39:09.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170516 02:39:09.188" status="PASS" starttime="20170516 02:39:09.188"></status>
</kw>
<status endtime="20170516 02:39:09.188" status="PASS" starttime="20170516 02:39:09.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170516 02:39:09.190" level="INFO">${port_num} = 22</msg>
<status endtime="20170516 02:39:09.190" status="PASS" starttime="20170516 02:39:09.190"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170516 02:39:09.191" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170516 02:39:09.191" status="PASS" starttime="20170516 02:39:09.190"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170516 02:39:09.191" level="INFO">${https_num} = 443</msg>
<status endtime="20170516 02:39:09.191" status="PASS" starttime="20170516 02:39:09.191"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.193" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170516 02:39:09.193" status="PASS" starttime="20170516 02:39:09.192"></status>
</kw>
<status endtime="20170516 02:39:09.193" status="PASS" starttime="20170516 02:39:09.189"></status>
</kw>
<status endtime="20170516 02:39:09.193" status="PASS" starttime="20170516 02:39:09.189"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170516 02:39:09.194" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170516 02:39:09.194" status="FAIL" starttime="20170516 02:39:09.194"></status>
</kw>
<msg timestamp="20170516 02:39:09.195" level="INFO">${has_port} = False</msg>
<status endtime="20170516 02:39:09.195" status="PASS" starttime="20170516 02:39:09.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170516 02:39:09.197" status="PASS" starttime="20170516 02:39:09.197"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170516 02:39:09.198" status="PASS" starttime="20170516 02:39:09.197"></status>
</kw>
<status endtime="20170516 02:39:09.198" status="PASS" starttime="20170516 02:39:09.196"></status>
</kw>
<status endtime="20170516 02:39:09.198" status="PASS" starttime="20170516 02:39:09.195"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170516 02:39:09.199" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170516 02:39:10.878" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170516 02:39:10.878" status="PASS" starttime="20170516 02:39:09.199"></status>
</kw>
<status endtime="20170516 02:39:10.879" status="PASS" starttime="20170516 02:39:09.185"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:39:10.880" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170516 02:39:10.946" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:39:10.946" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170516 02:39:10.946" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:39:10.946" status="PASS" starttime="20170516 02:39:10.879"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170516 02:39:10.947" level="INFO">Length is 0</msg>
<status endtime="20170516 02:39:10.947" status="PASS" starttime="20170516 02:39:10.947"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170516 02:39:10.947" level="INFO">Length is 11</msg>
<status endtime="20170516 02:39:10.947" status="PASS" starttime="20170516 02:39:10.947"></status>
</kw>
<msg timestamp="20170516 02:39:10.948" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170516 02:39:10.948" status="PASS" starttime="20170516 02:39:09.185"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:10.949" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:10.949" status="PASS" starttime="20170516 02:39:10.948"></status>
</kw>
<status endtime="20170516 02:39:10.949" status="PASS" starttime="20170516 02:39:10.948"></status>
</kw>
<status endtime="20170516 02:39:10.949" status="PASS" starttime="20170516 02:39:09.180"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:10.950" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:10.950" status="PASS" starttime="20170516 02:39:10.950"></status>
</kw>
<status endtime="20170516 02:39:10.951" status="PASS" starttime="20170516 02:39:10.949"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170516 02:39:10.951" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170516 02:39:10.951" status="PASS" starttime="20170516 02:39:10.951"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:10.952" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:10.953" status="PASS" starttime="20170516 02:39:10.952"></status>
</kw>
<status endtime="20170516 02:39:10.953" status="PASS" starttime="20170516 02:39:10.951"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:10.954" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:10.954" status="PASS" starttime="20170516 02:39:10.953"></status>
</kw>
<status endtime="20170516 02:39:10.954" status="PASS" starttime="20170516 02:39:10.953"></status>
</kw>
<status endtime="20170516 02:39:10.954" status="PASS" starttime="20170516 02:39:10.951"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:10.956" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:10.956" status="PASS" starttime="20170516 02:39:10.955"></status>
</kw>
<status endtime="20170516 02:39:10.956" status="PASS" starttime="20170516 02:39:10.955"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:10.957" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:10.957" status="PASS" starttime="20170516 02:39:10.956"></status>
</kw>
<status endtime="20170516 02:39:10.957" status="PASS" starttime="20170516 02:39:10.956"></status>
</kw>
<status endtime="20170516 02:39:10.957" status="PASS" starttime="20170516 02:39:10.954"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:10.958" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:10.959" status="PASS" starttime="20170516 02:39:10.958"></status>
</kw>
<status endtime="20170516 02:39:10.959" status="PASS" starttime="20170516 02:39:10.957"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:10.960" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:10.960" status="PASS" starttime="20170516 02:39:10.959"></status>
</kw>
<status endtime="20170516 02:39:10.960" status="PASS" starttime="20170516 02:39:10.959"></status>
</kw>
<status endtime="20170516 02:39:10.960" status="PASS" starttime="20170516 02:39:10.957"></status>
</kw>
<status endtime="20170516 02:39:10.960" status="PASS" starttime="20170516 02:39:10.951"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:10.961" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:10.961" status="PASS" starttime="20170516 02:39:10.961"></status>
</kw>
<status endtime="20170516 02:39:10.961" status="PASS" starttime="20170516 02:39:10.960"></status>
</kw>
<status endtime="20170516 02:39:10.962" status="PASS" starttime="20170516 02:39:09.164"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170516 02:39:10.971" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170516 02:39:10.971" status="PASS" starttime="20170516 02:39:10.971"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170516 02:39:10.972" level="INFO">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FFDC ...</msg>
<status endtime="20170516 02:39:10.972" status="PASS" starttime="20170516 02:39:10.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170516 02:39:10.974" status="PASS" starttime="20170516 02:39:10.973"></status>
</kw>
<msg timestamp="20170516 02:39:10.975" level="INFO">@{ffdc_function_list} = [ Get Request FFDC | Core Files | OS FFDC | FFDC Generic Report | BMC Specific Files | SEL Log ]</msg>
<status endtime="20170516 02:39:10.975" status="PASS" starttime="20170516 02:39:10.973"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170516 02:39:10.978" status="PASS" starttime="20170516 02:39:10.977"></status>
</kw>
<msg timestamp="20170516 02:39:10.978" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:39:10.978" level="INFO">${ret_values} = None</msg>
<status endtime="20170516 02:39:10.978" status="PASS" starttime="20170516 02:39:10.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170516 02:39:10.979" status="PASS" starttime="20170516 02:39:10.978"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170516 02:39:11.022" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170516 02:39:11.022" status="FAIL" starttime="20170516 02:39:11.021"></status>
</kw>
<msg timestamp="20170516 02:39:11.022" level="INFO">${has_host} = False</msg>
<status endtime="20170516 02:39:11.022" status="PASS" starttime="20170516 02:39:11.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170516 02:39:11.023" status="PASS" starttime="20170516 02:39:11.023"></status>
</kw>
<status endtime="20170516 02:39:11.023" status="PASS" starttime="20170516 02:39:11.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170516 02:39:11.025" level="INFO">${port_num} = 22</msg>
<status endtime="20170516 02:39:11.025" status="PASS" starttime="20170516 02:39:11.025"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170516 02:39:11.025" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170516 02:39:11.026" status="PASS" starttime="20170516 02:39:11.025"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170516 02:39:11.026" level="INFO">${https_num} = 443</msg>
<status endtime="20170516 02:39:11.026" status="PASS" starttime="20170516 02:39:11.026"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170516 02:39:11.027" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170516 02:39:11.027" status="PASS" starttime="20170516 02:39:11.026"></status>
</kw>
<status endtime="20170516 02:39:11.027" status="PASS" starttime="20170516 02:39:11.024"></status>
</kw>
<status endtime="20170516 02:39:11.027" status="PASS" starttime="20170516 02:39:11.024"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170516 02:39:11.028" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170516 02:39:11.028" status="FAIL" starttime="20170516 02:39:11.028"></status>
</kw>
<msg timestamp="20170516 02:39:11.028" level="INFO">${has_port} = False</msg>
<status endtime="20170516 02:39:11.028" status="PASS" starttime="20170516 02:39:11.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170516 02:39:11.030" status="PASS" starttime="20170516 02:39:11.030"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170516 02:39:11.031" status="PASS" starttime="20170516 02:39:11.030"></status>
</kw>
<status endtime="20170516 02:39:11.031" status="PASS" starttime="20170516 02:39:11.029"></status>
</kw>
<status endtime="20170516 02:39:11.031" status="PASS" starttime="20170516 02:39:11.029"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170516 02:39:11.031" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170516 02:39:12.792" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170516 02:39:12.792" status="PASS" starttime="20170516 02:39:11.031"></status>
</kw>
<status endtime="20170516 02:39:12.792" status="PASS" starttime="20170516 02:39:11.017"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170516 02:39:12.793" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170516 02:39:12.793" status="PASS" starttime="20170516 02:39:12.793"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170516 02:39:12.794" level="INFO">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/o...</msg>
<status endtime="20170516 02:39:12.794" status="PASS" starttime="20170516 02:39:12.794"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170516 02:39:12.795" level="INFO">${logpath} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_record_log.txt</msg>
<status endtime="20170516 02:39:12.796" status="PASS" starttime="20170516 02:39:12.795"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:39:12.798" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:39:12.799" status="PASS" starttime="20170516 02:39:12.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:39:12.799" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:39:12.800" status="PASS" starttime="20170516 02:39:12.799"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:39:12.800" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:39:12.800" status="PASS" starttime="20170516 02:39:12.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:39:12.801" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:39:12.801" status="PASS" starttime="20170516 02:39:12.800"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:39:12.994" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170516 02:39:12.994" status="PASS" starttime="20170516 02:39:12.801"></status>
</kw>
<msg timestamp="20170516 02:39:12.994" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:39:12.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:39:12.994" status="PASS" starttime="20170516 02:39:12.801"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:39:12.995" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:12.995" status="PASS" starttime="20170516 02:39:12.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:12.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:12.995" status="PASS" starttime="20170516 02:39:12.995"></status>
</kw>
<status endtime="20170516 02:39:12.996" status="PASS" starttime="20170516 02:39:12.797"></status>
</kw>
<status endtime="20170516 02:39:12.996" status="PASS" starttime="20170516 02:39:12.797"></status>
</kw>
<status endtime="20170516 02:39:12.996" status="PASS" starttime="20170516 02:39:12.796"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170516 02:39:12.996" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170516 02:39:12.996" status="PASS" starttime="20170516 02:39:12.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170516 02:39:12.997" status="PASS" starttime="20170516 02:39:12.997"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170516 02:39:13.062" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170516 02:39:13.063" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170516 02:39:13.063" status="PASS" starttime="20170516 02:39:12.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170516 02:39:13.063" status="PASS" starttime="20170516 02:39:13.063"></status>
</kw>
<msg timestamp="20170516 02:39:13.063" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170516 02:39:13.063" status="PASS" starttime="20170516 02:39:12.796"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:13.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:39:13.065" level="FAIL">404 != 200</msg>
<status endtime="20170516 02:39:13.065" status="FAIL" starttime="20170516 02:39:13.064"></status>
</kw>
<msg timestamp="20170516 02:39:13.065" level="INFO">${status} = False</msg>
<status endtime="20170516 02:39:13.065" status="PASS" starttime="20170516 02:39:13.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170516 02:39:13.066" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170516 02:39:13.066" status="PASS" starttime="20170516 02:39:13.066"></status>
</kw>
<status endtime="20170516 02:39:13.066" status="PASS" starttime="20170516 02:39:13.065"></status>
</kw>
<status endtime="20170516 02:39:13.066" status="PASS" starttime="20170516 02:39:12.795"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170516 02:39:13.067" level="INFO">${logpath} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_sensor_list.txt</msg>
<status endtime="20170516 02:39:13.067" status="PASS" starttime="20170516 02:39:13.066"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:39:13.070" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:39:13.071" status="PASS" starttime="20170516 02:39:13.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:39:13.071" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:39:13.071" status="PASS" starttime="20170516 02:39:13.071"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:39:13.072" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:39:13.072" status="PASS" starttime="20170516 02:39:13.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:39:13.073" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:39:13.073" status="PASS" starttime="20170516 02:39:13.073"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:39:13.265" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170516 02:39:13.265" status="PASS" starttime="20170516 02:39:13.074"></status>
</kw>
<msg timestamp="20170516 02:39:13.265" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:39:13.265" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:39:13.265" status="PASS" starttime="20170516 02:39:13.074"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:39:13.266" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:13.266" status="PASS" starttime="20170516 02:39:13.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:13.267" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:13.267" status="PASS" starttime="20170516 02:39:13.266"></status>
</kw>
<status endtime="20170516 02:39:13.267" status="PASS" starttime="20170516 02:39:13.069"></status>
</kw>
<status endtime="20170516 02:39:13.267" status="PASS" starttime="20170516 02:39:13.068"></status>
</kw>
<status endtime="20170516 02:39:13.267" status="PASS" starttime="20170516 02:39:13.068"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170516 02:39:13.267" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170516 02:39:13.268" status="PASS" starttime="20170516 02:39:13.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170516 02:39:13.268" status="PASS" starttime="20170516 02:39:13.268"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170516 02:39:13.488" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170516 02:39:13.488" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:39:13.488" status="PASS" starttime="20170516 02:39:13.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170516 02:39:13.488" status="PASS" starttime="20170516 02:39:13.488"></status>
</kw>
<msg timestamp="20170516 02:39:13.489" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:39:13.489" status="PASS" starttime="20170516 02:39:13.067"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:13.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:13.490" status="PASS" starttime="20170516 02:39:13.489"></status>
</kw>
<msg timestamp="20170516 02:39:13.490" level="INFO">${status} = True</msg>
<status endtime="20170516 02:39:13.490" status="PASS" starttime="20170516 02:39:13.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170516 02:39:13.491" status="PASS" starttime="20170516 02:39:13.490"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170516 02:39:13.491" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170516 02:39:13.491" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170516 02:39:13.492" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170516 02:39:13.492" status="PASS" starttime="20170516 02:39:13.491"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:13.493" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_sensor_list.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:13.493" status="PASS" starttime="20170516 02:39:13.492"></status>
</kw>
<status endtime="20170516 02:39:13.493" status="PASS" starttime="20170516 02:39:13.492"></status>
</kw>
<status endtime="20170516 02:39:13.493" status="PASS" starttime="20170516 02:39:13.066"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170516 02:39:13.494" level="INFO">${logpath} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_inventory.txt</msg>
<status endtime="20170516 02:39:13.494" status="PASS" starttime="20170516 02:39:13.494"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:39:13.497" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:39:13.497" status="PASS" starttime="20170516 02:39:13.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:39:13.498" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:39:13.498" status="PASS" starttime="20170516 02:39:13.497"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:39:13.498" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:39:13.498" status="PASS" starttime="20170516 02:39:13.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:39:13.499" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:39:13.499" status="PASS" starttime="20170516 02:39:13.498"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:39:13.684" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170516 02:39:13.684" status="PASS" starttime="20170516 02:39:13.500"></status>
</kw>
<msg timestamp="20170516 02:39:13.684" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:39:13.684" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:39:13.684" status="PASS" starttime="20170516 02:39:13.499"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:39:13.685" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:13.685" status="PASS" starttime="20170516 02:39:13.684"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:13.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:13.686" status="PASS" starttime="20170516 02:39:13.685"></status>
</kw>
<status endtime="20170516 02:39:13.686" status="PASS" starttime="20170516 02:39:13.496"></status>
</kw>
<status endtime="20170516 02:39:13.686" status="PASS" starttime="20170516 02:39:13.495"></status>
</kw>
<status endtime="20170516 02:39:13.686" status="PASS" starttime="20170516 02:39:13.495"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170516 02:39:13.687" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170516 02:39:13.687" status="PASS" starttime="20170516 02:39:13.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170516 02:39:13.687" status="PASS" starttime="20170516 02:39:13.687"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170516 02:39:15.373" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170516 02:39:15.373" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:39:15.373" status="PASS" starttime="20170516 02:39:13.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170516 02:39:15.374" status="PASS" starttime="20170516 02:39:15.373"></status>
</kw>
<msg timestamp="20170516 02:39:15.374" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:39:15.374" status="PASS" starttime="20170516 02:39:13.494"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.375" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:15.375" status="PASS" starttime="20170516 02:39:15.375"></status>
</kw>
<msg timestamp="20170516 02:39:15.375" level="INFO">${status} = True</msg>
<status endtime="20170516 02:39:15.375" status="PASS" starttime="20170516 02:39:15.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170516 02:39:15.376" status="PASS" starttime="20170516 02:39:15.375"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170516 02:39:15.379" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "0000000", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775622", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775618", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1983", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ec", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170516 02:39:15.380" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170516 02:39:15.380" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status endtime="20170516 02:39:15.380" status="PASS" starttime="20170516 02:39:15.376"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.382" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_inventory.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:15.382" status="PASS" starttime="20170516 02:39:15.381"></status>
</kw>
<status endtime="20170516 02:39:15.382" status="PASS" starttime="20170516 02:39:15.380"></status>
</kw>
<status endtime="20170516 02:39:15.382" status="PASS" starttime="20170516 02:39:13.493"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170516 02:39:15.383" level="INFO">${logpath} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_led.txt</msg>
<status endtime="20170516 02:39:15.383" status="PASS" starttime="20170516 02:39:15.382"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:39:15.386" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:39:15.386" status="PASS" starttime="20170516 02:39:15.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:39:15.387" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:39:15.387" status="PASS" starttime="20170516 02:39:15.386"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:39:15.388" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:39:15.388" status="PASS" starttime="20170516 02:39:15.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:39:15.389" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:39:15.389" status="PASS" starttime="20170516 02:39:15.389"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.571" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170516 02:39:15.571" status="PASS" starttime="20170516 02:39:15.390"></status>
</kw>
<msg timestamp="20170516 02:39:15.571" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:39:15.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:39:15.571" status="PASS" starttime="20170516 02:39:15.389"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.572" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:15.572" status="PASS" starttime="20170516 02:39:15.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:15.573" status="PASS" starttime="20170516 02:39:15.572"></status>
</kw>
<status endtime="20170516 02:39:15.573" status="PASS" starttime="20170516 02:39:15.385"></status>
</kw>
<status endtime="20170516 02:39:15.573" status="PASS" starttime="20170516 02:39:15.384"></status>
</kw>
<status endtime="20170516 02:39:15.573" status="PASS" starttime="20170516 02:39:15.384"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170516 02:39:15.573" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170516 02:39:15.573" status="PASS" starttime="20170516 02:39:15.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170516 02:39:15.574" status="PASS" starttime="20170516 02:39:15.574"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170516 02:39:15.657" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170516 02:39:15.657" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:39:15.657" status="PASS" starttime="20170516 02:39:15.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170516 02:39:15.658" status="PASS" starttime="20170516 02:39:15.657"></status>
</kw>
<msg timestamp="20170516 02:39:15.658" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:39:15.658" status="PASS" starttime="20170516 02:39:15.383"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.659" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:15.659" status="PASS" starttime="20170516 02:39:15.659"></status>
</kw>
<msg timestamp="20170516 02:39:15.659" level="INFO">${status} = True</msg>
<status endtime="20170516 02:39:15.659" status="PASS" starttime="20170516 02:39:15.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170516 02:39:15.660" status="PASS" starttime="20170516 02:39:15.660"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170516 02:39:15.660" level="INFO">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170516 02:39:15.661" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170516 02:39:15.661" level="INFO">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status endtime="20170516 02:39:15.661" status="PASS" starttime="20170516 02:39:15.660"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.662" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_led.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_led.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:15.662" status="PASS" starttime="20170516 02:39:15.662"></status>
</kw>
<status endtime="20170516 02:39:15.662" status="PASS" starttime="20170516 02:39:15.661"></status>
</kw>
<status endtime="20170516 02:39:15.662" status="PASS" starttime="20170516 02:39:15.382"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170516 02:39:15.663" level="INFO">${logpath} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_elog.txt</msg>
<status endtime="20170516 02:39:15.663" status="PASS" starttime="20170516 02:39:15.663"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:39:15.666" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:39:15.668" status="PASS" starttime="20170516 02:39:15.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:39:15.668" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:39:15.668" status="PASS" starttime="20170516 02:39:15.668"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:39:15.669" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:39:15.669" status="PASS" starttime="20170516 02:39:15.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:39:15.670" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:39:15.670" status="PASS" starttime="20170516 02:39:15.669"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.848" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170516 02:39:15.849" status="PASS" starttime="20170516 02:39:15.670"></status>
</kw>
<msg timestamp="20170516 02:39:15.849" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:39:15.849" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:39:15.849" status="PASS" starttime="20170516 02:39:15.670"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.850" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:15.850" status="PASS" starttime="20170516 02:39:15.849"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.851" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:15.851" status="PASS" starttime="20170516 02:39:15.850"></status>
</kw>
<status endtime="20170516 02:39:15.851" status="PASS" starttime="20170516 02:39:15.665"></status>
</kw>
<status endtime="20170516 02:39:15.851" status="PASS" starttime="20170516 02:39:15.665"></status>
</kw>
<status endtime="20170516 02:39:15.851" status="PASS" starttime="20170516 02:39:15.664"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170516 02:39:15.852" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170516 02:39:15.852" status="PASS" starttime="20170516 02:39:15.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170516 02:39:15.853" status="PASS" starttime="20170516 02:39:15.852"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170516 02:39:15.897" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170516 02:39:15.897" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170516 02:39:15.898" status="PASS" starttime="20170516 02:39:15.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170516 02:39:15.898" status="PASS" starttime="20170516 02:39:15.898"></status>
</kw>
<msg timestamp="20170516 02:39:15.898" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170516 02:39:15.898" status="PASS" starttime="20170516 02:39:15.663"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.899" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:39:15.900" level="FAIL">404 != 200</msg>
<status endtime="20170516 02:39:15.900" status="FAIL" starttime="20170516 02:39:15.899"></status>
</kw>
<msg timestamp="20170516 02:39:15.900" level="INFO">${status} = False</msg>
<status endtime="20170516 02:39:15.900" status="PASS" starttime="20170516 02:39:15.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170516 02:39:15.901" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170516 02:39:15.901" status="PASS" starttime="20170516 02:39:15.901"></status>
</kw>
<status endtime="20170516 02:39:15.901" status="PASS" starttime="20170516 02:39:15.900"></status>
</kw>
<status endtime="20170516 02:39:15.901" status="PASS" starttime="20170516 02:39:15.663"></status>
</kw>
<status endtime="20170516 02:39:15.901" status="PASS" starttime="20170516 02:39:12.794"></status>
</kw>
<status endtime="20170516 02:39:15.901" status="PASS" starttime="20170516 02:39:12.793"></status>
</kw>
<status endtime="20170516 02:39:15.901" status="PASS" starttime="20170516 02:39:12.793"></status>
</kw>
<status endtime="20170516 02:39:15.901" status="PASS" starttime="20170516 02:39:12.793"></status>
</kw>
<status endtime="20170516 02:39:15.901" status="PASS" starttime="20170516 02:39:11.016"></status>
</kw>
<status endtime="20170516 02:39:15.901" status="PASS" starttime="20170516 02:39:10.979"></status>
</kw>
<status endtime="20170516 02:39:15.902" status="PASS" starttime="20170516 02:39:10.976"></status>
</kw>
<status endtime="20170516 02:39:15.902" status="PASS" starttime="20170516 02:39:10.975"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170516 02:39:15.903" status="PASS" starttime="20170516 02:39:15.903"></status>
</kw>
<msg timestamp="20170516 02:39:15.903" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:39:15.903" level="INFO">${ret_values} = None</msg>
<status endtime="20170516 02:39:15.904" status="PASS" starttime="20170516 02:39:15.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170516 02:39:15.904" status="PASS" starttime="20170516 02:39:15.904"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170516 02:39:15.946" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170516 02:39:15.947" status="FAIL" starttime="20170516 02:39:15.946"></status>
</kw>
<msg timestamp="20170516 02:39:15.947" level="INFO">${has_host} = False</msg>
<status endtime="20170516 02:39:15.947" status="PASS" starttime="20170516 02:39:15.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170516 02:39:15.948" status="PASS" starttime="20170516 02:39:15.947"></status>
</kw>
<status endtime="20170516 02:39:15.948" status="PASS" starttime="20170516 02:39:15.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170516 02:39:15.950" level="INFO">${port_num} = 22</msg>
<status endtime="20170516 02:39:15.950" status="PASS" starttime="20170516 02:39:15.950"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170516 02:39:15.950" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170516 02:39:15.950" status="PASS" starttime="20170516 02:39:15.950"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170516 02:39:15.951" level="INFO">${https_num} = 443</msg>
<status endtime="20170516 02:39:15.951" status="PASS" starttime="20170516 02:39:15.951"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.952" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170516 02:39:15.952" status="PASS" starttime="20170516 02:39:15.951"></status>
</kw>
<status endtime="20170516 02:39:15.952" status="PASS" starttime="20170516 02:39:15.949"></status>
</kw>
<status endtime="20170516 02:39:15.952" status="PASS" starttime="20170516 02:39:15.949"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170516 02:39:15.953" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170516 02:39:15.953" status="FAIL" starttime="20170516 02:39:15.953"></status>
</kw>
<msg timestamp="20170516 02:39:15.953" level="INFO">${has_port} = False</msg>
<status endtime="20170516 02:39:15.953" status="PASS" starttime="20170516 02:39:15.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170516 02:39:15.955" status="PASS" starttime="20170516 02:39:15.955"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170516 02:39:15.956" status="PASS" starttime="20170516 02:39:15.956"></status>
</kw>
<status endtime="20170516 02:39:15.956" status="PASS" starttime="20170516 02:39:15.954"></status>
</kw>
<status endtime="20170516 02:39:15.956" status="PASS" starttime="20170516 02:39:15.953"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170516 02:39:15.957" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170516 02:39:17.602" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170516 02:39:17.602" status="PASS" starttime="20170516 02:39:15.957"></status>
</kw>
<status endtime="20170516 02:39:17.602" status="PASS" starttime="20170516 02:39:15.941"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170516 02:39:17.603" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170516 02:39:17.649" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170516 02:39:17.649" level="INFO">${core_files} = </msg>
<status endtime="20170516 02:39:17.649" status="PASS" starttime="20170516 02:39:17.603"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170516 02:39:17.650" level="INFO">@{core_list} = [ ]</msg>
<status endtime="20170516 02:39:17.650" status="PASS" starttime="20170516 02:39:17.650"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170516 02:39:17.667" status="PASS" starttime="20170516 02:39:17.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170516 02:39:18.306" status="PASS" starttime="20170516 02:39:17.669"></status>
</kw>
<status endtime="20170516 02:39:18.306" status="PASS" starttime="20170516 02:39:17.669"></status>
</kw>
<status endtime="20170516 02:39:18.306" status="PASS" starttime="20170516 02:39:17.668"></status>
</kw>
<status endtime="20170516 02:39:18.306" status="PASS" starttime="20170516 02:39:17.650"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status endtime="20170516 02:39:18.306" status="PASS" starttime="20170516 02:39:18.306"></status>
</kw>
<status endtime="20170516 02:39:18.306" status="PASS" starttime="20170516 02:39:15.941"></status>
</kw>
<status endtime="20170516 02:39:18.306" status="PASS" starttime="20170516 02:39:15.904"></status>
</kw>
<status endtime="20170516 02:39:18.307" status="PASS" starttime="20170516 02:39:15.902"></status>
</kw>
<status endtime="20170516 02:39:18.307" status="PASS" starttime="20170516 02:39:15.902"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170516 02:39:18.309" status="PASS" starttime="20170516 02:39:18.308"></status>
</kw>
<msg timestamp="20170516 02:39:18.309" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:39:18.309" level="INFO">${ret_values} = None</msg>
<status endtime="20170516 02:39:18.309" status="PASS" starttime="20170516 02:39:18.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170516 02:39:18.309" status="PASS" starttime="20170516 02:39:18.309"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170516 02:39:18.349" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170516 02:39:18.354" status="PASS" starttime="20170516 02:39:18.349"></status>
</kw>
<status endtime="20170516 02:39:18.354" status="PASS" starttime="20170516 02:39:18.348"></status>
</kw>
<status endtime="20170516 02:39:18.354" status="PASS" starttime="20170516 02:39:18.310"></status>
</kw>
<status endtime="20170516 02:39:18.355" status="PASS" starttime="20170516 02:39:18.307"></status>
</kw>
<status endtime="20170516 02:39:18.355" status="PASS" starttime="20170516 02:39:18.307"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170516 02:39:18.357" status="PASS" starttime="20170516 02:39:18.357"></status>
</kw>
<msg timestamp="20170516 02:39:18.357" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:39:18.358" level="INFO">${ret_values} = None</msg>
<status endtime="20170516 02:39:18.358" status="PASS" starttime="20170516 02:39:18.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170516 02:39:18.358" status="PASS" starttime="20170516 02:39:18.358"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170516 02:39:18.403" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170516 02:39:18.403" status="FAIL" starttime="20170516 02:39:18.403"></status>
</kw>
<msg timestamp="20170516 02:39:18.403" level="INFO">${has_host} = False</msg>
<status endtime="20170516 02:39:18.403" status="PASS" starttime="20170516 02:39:18.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170516 02:39:18.405" status="PASS" starttime="20170516 02:39:18.405"></status>
</kw>
<status endtime="20170516 02:39:18.405" status="PASS" starttime="20170516 02:39:18.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170516 02:39:18.410" level="INFO">${port_num} = 22</msg>
<status endtime="20170516 02:39:18.410" status="PASS" starttime="20170516 02:39:18.410"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170516 02:39:18.411" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170516 02:39:18.411" status="PASS" starttime="20170516 02:39:18.410"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170516 02:39:18.411" level="INFO">${https_num} = 443</msg>
<status endtime="20170516 02:39:18.411" status="PASS" starttime="20170516 02:39:18.411"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170516 02:39:18.412" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170516 02:39:18.412" status="PASS" starttime="20170516 02:39:18.412"></status>
</kw>
<status endtime="20170516 02:39:18.413" status="PASS" starttime="20170516 02:39:18.409"></status>
</kw>
<status endtime="20170516 02:39:18.413" status="PASS" starttime="20170516 02:39:18.405"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170516 02:39:18.414" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170516 02:39:18.414" status="FAIL" starttime="20170516 02:39:18.414"></status>
</kw>
<msg timestamp="20170516 02:39:18.415" level="INFO">${has_port} = False</msg>
<status endtime="20170516 02:39:18.415" status="PASS" starttime="20170516 02:39:18.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170516 02:39:18.417" status="PASS" starttime="20170516 02:39:18.417"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170516 02:39:18.418" status="PASS" starttime="20170516 02:39:18.417"></status>
</kw>
<status endtime="20170516 02:39:18.418" status="PASS" starttime="20170516 02:39:18.416"></status>
</kw>
<status endtime="20170516 02:39:18.418" status="PASS" starttime="20170516 02:39:18.415"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170516 02:39:18.419" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170516 02:39:20.064" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170516 02:39:20.065" status="PASS" starttime="20170516 02:39:18.418"></status>
</kw>
<status endtime="20170516 02:39:20.065" status="PASS" starttime="20170516 02:39:18.401"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170516 02:39:20.065" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170516 02:39:20.065" status="PASS" starttime="20170516 02:39:20.065"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170516 02:39:20.067" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170516 02:39:20.067" status="PASS" starttime="20170516 02:39:20.066"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.072" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170516 02:39:20.072" status="PASS" starttime="20170516 02:39:20.067"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.077" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.077" status="PASS" starttime="20170516 02:39:20.076"></status>
</kw>
<status endtime="20170516 02:39:20.077" status="PASS" starttime="20170516 02:39:20.075"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.078" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.078" status="PASS" starttime="20170516 02:39:20.078"></status>
</kw>
<status endtime="20170516 02:39:20.079" status="PASS" starttime="20170516 02:39:20.077"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.080" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.080" status="PASS" starttime="20170516 02:39:20.079"></status>
</kw>
<status endtime="20170516 02:39:20.080" status="PASS" starttime="20170516 02:39:20.079"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.081" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.081" status="PASS" starttime="20170516 02:39:20.081"></status>
</kw>
<status endtime="20170516 02:39:20.081" status="PASS" starttime="20170516 02:39:20.080"></status>
</kw>
<status endtime="20170516 02:39:20.081" status="PASS" starttime="20170516 02:39:20.075"></status>
</kw>
<status endtime="20170516 02:39:20.081" status="PASS" starttime="20170516 02:39:20.074"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:39:20.082" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170516 02:39:20.138" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:39:20.138" level="INFO">${stdout} = Linux witherspoon 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 #1 Tue May 16 01:26:52 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170516 02:39:20.139" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:39:20.139" status="PASS" starttime="20170516 02:39:20.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.144" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.144" status="PASS" starttime="20170516 02:39:20.144"></status>
</kw>
<status endtime="20170516 02:39:20.145" status="PASS" starttime="20170516 02:39:20.143"></status>
</kw>
<status endtime="20170516 02:39:20.145" status="PASS" starttime="20170516 02:39:20.139"></status>
</kw>
<status endtime="20170516 02:39:20.145" status="PASS" starttime="20170516 02:39:20.073"></status>
</kw>
<status endtime="20170516 02:39:20.145" status="PASS" starttime="20170516 02:39:20.073"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.148" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.148" status="PASS" starttime="20170516 02:39:20.148"></status>
</kw>
<status endtime="20170516 02:39:20.148" status="PASS" starttime="20170516 02:39:20.147"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.149" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.150" status="PASS" starttime="20170516 02:39:20.149"></status>
</kw>
<status endtime="20170516 02:39:20.150" status="PASS" starttime="20170516 02:39:20.148"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.151" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.151" status="PASS" starttime="20170516 02:39:20.150"></status>
</kw>
<status endtime="20170516 02:39:20.151" status="PASS" starttime="20170516 02:39:20.150"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.152" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.152" status="PASS" starttime="20170516 02:39:20.152"></status>
</kw>
<status endtime="20170516 02:39:20.152" status="PASS" starttime="20170516 02:39:20.151"></status>
</kw>
<status endtime="20170516 02:39:20.152" status="PASS" starttime="20170516 02:39:20.147"></status>
</kw>
<status endtime="20170516 02:39:20.152" status="PASS" starttime="20170516 02:39:20.146"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:39:20.153" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170516 02:39:20.212" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:39:20.212" level="INFO">${stdout} =  02:39:25 up 14 min,  load average: 1.27, 1.27, 1.00</msg>
<msg timestamp="20170516 02:39:20.212" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:39:20.212" status="PASS" starttime="20170516 02:39:20.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.218" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.218" status="PASS" starttime="20170516 02:39:20.217"></status>
</kw>
<status endtime="20170516 02:39:20.218" status="PASS" starttime="20170516 02:39:20.217"></status>
</kw>
<status endtime="20170516 02:39:20.218" status="PASS" starttime="20170516 02:39:20.212"></status>
</kw>
<status endtime="20170516 02:39:20.219" status="PASS" starttime="20170516 02:39:20.145"></status>
</kw>
<status endtime="20170516 02:39:20.219" status="PASS" starttime="20170516 02:39:20.145"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.221" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.222" status="PASS" starttime="20170516 02:39:20.221"></status>
</kw>
<status endtime="20170516 02:39:20.222" status="PASS" starttime="20170516 02:39:20.220"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.223" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.223" status="PASS" starttime="20170516 02:39:20.223"></status>
</kw>
<status endtime="20170516 02:39:20.223" status="PASS" starttime="20170516 02:39:20.222"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.225" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.225" status="PASS" starttime="20170516 02:39:20.224"></status>
</kw>
<status endtime="20170516 02:39:20.225" status="PASS" starttime="20170516 02:39:20.223"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.226" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.226" status="PASS" starttime="20170516 02:39:20.226"></status>
</kw>
<status endtime="20170516 02:39:20.226" status="PASS" starttime="20170516 02:39:20.225"></status>
</kw>
<status endtime="20170516 02:39:20.226" status="PASS" starttime="20170516 02:39:20.220"></status>
</kw>
<status endtime="20170516 02:39:20.226" status="PASS" starttime="20170516 02:39:20.220"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:39:20.227" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170516 02:39:20.296" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:39:20.296" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170516 02:39:20.296" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:39:20.296" status="PASS" starttime="20170516 02:39:20.227"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.302" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.302" status="PASS" starttime="20170516 02:39:20.302"></status>
</kw>
<status endtime="20170516 02:39:20.302" status="PASS" starttime="20170516 02:39:20.301"></status>
</kw>
<status endtime="20170516 02:39:20.302" status="PASS" starttime="20170516 02:39:20.296"></status>
</kw>
<status endtime="20170516 02:39:20.302" status="PASS" starttime="20170516 02:39:20.219"></status>
</kw>
<status endtime="20170516 02:39:20.303" status="PASS" starttime="20170516 02:39:20.219"></status>
</kw>
<status endtime="20170516 02:39:20.303" status="PASS" starttime="20170516 02:39:20.073"></status>
</kw>
<status endtime="20170516 02:39:20.303" status="PASS" starttime="20170516 02:39:20.066"></status>
</kw>
<status endtime="20170516 02:39:20.303" status="PASS" starttime="20170516 02:39:20.066"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170516 02:39:20.304" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170516 02:39:20.304" status="PASS" starttime="20170516 02:39:20.304"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.305" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170516 02:39:20.305" status="PASS" starttime="20170516 02:39:20.305"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.309" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.310" status="PASS" starttime="20170516 02:39:20.309"></status>
</kw>
<status endtime="20170516 02:39:20.310" status="PASS" starttime="20170516 02:39:20.308"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.311" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.311" status="PASS" starttime="20170516 02:39:20.310"></status>
</kw>
<status endtime="20170516 02:39:20.311" status="PASS" starttime="20170516 02:39:20.310"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.312" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.312" status="PASS" starttime="20170516 02:39:20.312"></status>
</kw>
<status endtime="20170516 02:39:20.312" status="PASS" starttime="20170516 02:39:20.311"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.313" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.314" status="PASS" starttime="20170516 02:39:20.313"></status>
</kw>
<status endtime="20170516 02:39:20.314" status="PASS" starttime="20170516 02:39:20.313"></status>
</kw>
<status endtime="20170516 02:39:20.314" status="PASS" starttime="20170516 02:39:20.307"></status>
</kw>
<status endtime="20170516 02:39:20.314" status="PASS" starttime="20170516 02:39:20.307"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:39:20.314" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170516 02:39:20.383" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170516 02:39:20.384" level="INFO">${stdout} = </msg>
<msg timestamp="20170516 02:39:20.384" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status endtime="20170516 02:39:20.384" status="PASS" starttime="20170516 02:39:20.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.390" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.390" status="PASS" starttime="20170516 02:39:20.389"></status>
</kw>
<status endtime="20170516 02:39:20.390" status="PASS" starttime="20170516 02:39:20.388"></status>
</kw>
<status endtime="20170516 02:39:20.390" status="PASS" starttime="20170516 02:39:20.384"></status>
</kw>
<status endtime="20170516 02:39:20.390" status="PASS" starttime="20170516 02:39:20.306"></status>
</kw>
<status endtime="20170516 02:39:20.390" status="PASS" starttime="20170516 02:39:20.306"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.394" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.394" status="PASS" starttime="20170516 02:39:20.393"></status>
</kw>
<status endtime="20170516 02:39:20.394" status="PASS" starttime="20170516 02:39:20.393"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.395" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.395" status="PASS" starttime="20170516 02:39:20.395"></status>
</kw>
<status endtime="20170516 02:39:20.395" status="PASS" starttime="20170516 02:39:20.394"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.396" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.396" status="PASS" starttime="20170516 02:39:20.396"></status>
</kw>
<status endtime="20170516 02:39:20.397" status="PASS" starttime="20170516 02:39:20.395"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.398" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.398" status="PASS" starttime="20170516 02:39:20.397"></status>
</kw>
<status endtime="20170516 02:39:20.398" status="PASS" starttime="20170516 02:39:20.397"></status>
</kw>
<status endtime="20170516 02:39:20.398" status="PASS" starttime="20170516 02:39:20.392"></status>
</kw>
<status endtime="20170516 02:39:20.398" status="PASS" starttime="20170516 02:39:20.391"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:39:20.399" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170516 02:39:20.467" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:39:20.467" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-42"
VERSION_ID="v1.99.5-42-g6867b64"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170516 02:39:20.468" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:39:20.468" status="PASS" starttime="20170516 02:39:20.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.473" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.473" status="PASS" starttime="20170516 02:39:20.473"></status>
</kw>
<status endtime="20170516 02:39:20.473" status="PASS" starttime="20170516 02:39:20.472"></status>
</kw>
<status endtime="20170516 02:39:20.474" status="PASS" starttime="20170516 02:39:20.468"></status>
</kw>
<status endtime="20170516 02:39:20.474" status="PASS" starttime="20170516 02:39:20.390"></status>
</kw>
<status endtime="20170516 02:39:20.474" status="PASS" starttime="20170516 02:39:20.390"></status>
</kw>
<status endtime="20170516 02:39:20.474" status="PASS" starttime="20170516 02:39:20.305"></status>
</kw>
<status endtime="20170516 02:39:20.474" status="PASS" starttime="20170516 02:39:20.303"></status>
</kw>
<status endtime="20170516 02:39:20.474" status="PASS" starttime="20170516 02:39:20.303"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170516 02:39:20.475" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20170516 02:39:20.475" status="PASS" starttime="20170516 02:39:20.475"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.476" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170516 02:39:20.476" status="PASS" starttime="20170516 02:39:20.475"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.479" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.479" status="PASS" starttime="20170516 02:39:20.478"></status>
</kw>
<status endtime="20170516 02:39:20.479" status="PASS" starttime="20170516 02:39:20.478"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.480" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.480" status="PASS" starttime="20170516 02:39:20.480"></status>
</kw>
<status endtime="20170516 02:39:20.480" status="PASS" starttime="20170516 02:39:20.479"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.482" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.482" status="PASS" starttime="20170516 02:39:20.481"></status>
</kw>
<status endtime="20170516 02:39:20.482" status="PASS" starttime="20170516 02:39:20.481"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:20.483" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:20.483" status="PASS" starttime="20170516 02:39:20.483"></status>
</kw>
<status endtime="20170516 02:39:20.483" status="PASS" starttime="20170516 02:39:20.482"></status>
</kw>
<status endtime="20170516 02:39:20.483" status="PASS" starttime="20170516 02:39:20.477"></status>
</kw>
<status endtime="20170516 02:39:20.484" status="PASS" starttime="20170516 02:39:20.477"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:39:20.484" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170516 02:39:21.762" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:39:21.762" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170516 02:39:21.762" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:39:21.762" status="PASS" starttime="20170516 02:39:20.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:21.770" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:21.770" status="PASS" starttime="20170516 02:39:21.770"></status>
</kw>
<status endtime="20170516 02:39:21.771" status="PASS" starttime="20170516 02:39:21.769"></status>
</kw>
<status endtime="20170516 02:39:21.771" status="PASS" starttime="20170516 02:39:21.763"></status>
</kw>
<status endtime="20170516 02:39:21.771" status="PASS" starttime="20170516 02:39:20.476"></status>
</kw>
<status endtime="20170516 02:39:21.771" status="PASS" starttime="20170516 02:39:20.476"></status>
</kw>
<status endtime="20170516 02:39:21.771" status="PASS" starttime="20170516 02:39:20.476"></status>
</kw>
<status endtime="20170516 02:39:21.771" status="PASS" starttime="20170516 02:39:20.474"></status>
</kw>
<status endtime="20170516 02:39:21.771" status="PASS" starttime="20170516 02:39:20.474"></status>
</kw>
<status endtime="20170516 02:39:21.771" status="PASS" starttime="20170516 02:39:20.065"></status>
</kw>
<status endtime="20170516 02:39:21.771" status="PASS" starttime="20170516 02:39:18.401"></status>
</kw>
<status endtime="20170516 02:39:21.771" status="PASS" starttime="20170516 02:39:18.359"></status>
</kw>
<status endtime="20170516 02:39:21.771" status="PASS" starttime="20170516 02:39:18.355"></status>
</kw>
<status endtime="20170516 02:39:21.771" status="PASS" starttime="20170516 02:39:18.355"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170516 02:39:21.773" status="PASS" starttime="20170516 02:39:21.773"></status>
</kw>
<msg timestamp="20170516 02:39:21.773" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:39:21.773" level="INFO">${ret_values} = None</msg>
<status endtime="20170516 02:39:21.773" status="PASS" starttime="20170516 02:39:21.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170516 02:39:21.774" status="PASS" starttime="20170516 02:39:21.774"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170516 02:39:21.816" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170516 02:39:21.816" status="FAIL" starttime="20170516 02:39:21.815"></status>
</kw>
<msg timestamp="20170516 02:39:21.816" level="INFO">${has_host} = False</msg>
<status endtime="20170516 02:39:21.816" status="PASS" starttime="20170516 02:39:21.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170516 02:39:21.817" status="PASS" starttime="20170516 02:39:21.817"></status>
</kw>
<status endtime="20170516 02:39:21.817" status="PASS" starttime="20170516 02:39:21.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170516 02:39:21.823" level="INFO">${port_num} = 22</msg>
<status endtime="20170516 02:39:21.823" status="PASS" starttime="20170516 02:39:21.823"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170516 02:39:21.824" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170516 02:39:21.824" status="PASS" starttime="20170516 02:39:21.823"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170516 02:39:21.825" level="INFO">${https_num} = 443</msg>
<status endtime="20170516 02:39:21.825" status="PASS" starttime="20170516 02:39:21.824"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170516 02:39:21.826" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170516 02:39:21.826" status="PASS" starttime="20170516 02:39:21.825"></status>
</kw>
<status endtime="20170516 02:39:21.826" status="PASS" starttime="20170516 02:39:21.822"></status>
</kw>
<status endtime="20170516 02:39:21.826" status="PASS" starttime="20170516 02:39:21.817"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170516 02:39:21.828" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170516 02:39:21.828" status="FAIL" starttime="20170516 02:39:21.827"></status>
</kw>
<msg timestamp="20170516 02:39:21.828" level="INFO">${has_port} = False</msg>
<status endtime="20170516 02:39:21.828" status="PASS" starttime="20170516 02:39:21.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170516 02:39:21.831" status="PASS" starttime="20170516 02:39:21.830"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170516 02:39:21.831" status="PASS" starttime="20170516 02:39:21.831"></status>
</kw>
<status endtime="20170516 02:39:21.831" status="PASS" starttime="20170516 02:39:21.829"></status>
</kw>
<status endtime="20170516 02:39:21.832" status="PASS" starttime="20170516 02:39:21.828"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170516 02:39:21.832" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170516 02:39:23.478" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170516 02:39:23.479" status="PASS" starttime="20170516 02:39:21.832"></status>
</kw>
<status endtime="20170516 02:39:23.479" status="PASS" starttime="20170516 02:39:21.814"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170516 02:39:23.480" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170516 02:39:23.480" status="PASS" starttime="20170516 02:39:23.479"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170516 02:39:23.481" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status endtime="20170516 02:39:23.481" status="PASS" starttime="20170516 02:39:23.481"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170516 02:39:23.482" level="INFO">${logpath} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_procinfo.txt</msg>
<status endtime="20170516 02:39:23.483" status="PASS" starttime="20170516 02:39:23.482"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170516 02:39:23.484" status="PASS" starttime="20170516 02:39:23.484"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:39:23.484" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170516 02:39:23.531" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:39:23.531" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170516 02:39:23.531" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:39:23.531" status="PASS" starttime="20170516 02:39:23.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:23.539" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_procinfo.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:23.539" status="PASS" starttime="20170516 02:39:23.538"></status>
</kw>
<status endtime="20170516 02:39:23.539" status="PASS" starttime="20170516 02:39:23.537"></status>
</kw>
<status endtime="20170516 02:39:23.539" status="PASS" starttime="20170516 02:39:23.532"></status>
</kw>
<status endtime="20170516 02:39:23.539" status="PASS" starttime="20170516 02:39:23.483"></status>
</kw>
<status endtime="20170516 02:39:23.539" status="PASS" starttime="20170516 02:39:23.482"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170516 02:39:23.540" level="INFO">${logpath} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_meminfo.txt</msg>
<status endtime="20170516 02:39:23.540" status="PASS" starttime="20170516 02:39:23.539"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170516 02:39:23.541" status="PASS" starttime="20170516 02:39:23.541"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:39:23.542" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170516 02:39:23.626" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:39:23.627" level="INFO">${stdout} = MemTotal:         432932 kB
MemFree:          279780 kB
MemAvailable:     321400 kB
Buffers:           10492 kB
Cached:            49880 kB
SwapCached:            0 kB
Active:           103856 kB
Inac...</msg>
<msg timestamp="20170516 02:39:23.627" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:39:23.627" status="PASS" starttime="20170516 02:39:23.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:23.633" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_meminfo.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:23.633" status="PASS" starttime="20170516 02:39:23.632"></status>
</kw>
<status endtime="20170516 02:39:23.633" status="PASS" starttime="20170516 02:39:23.631"></status>
</kw>
<status endtime="20170516 02:39:23.633" status="PASS" starttime="20170516 02:39:23.627"></status>
</kw>
<status endtime="20170516 02:39:23.633" status="PASS" starttime="20170516 02:39:23.540"></status>
</kw>
<status endtime="20170516 02:39:23.633" status="PASS" starttime="20170516 02:39:23.539"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170516 02:39:23.634" level="INFO">${logpath} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_proc_list.txt</msg>
<status endtime="20170516 02:39:23.634" status="PASS" starttime="20170516 02:39:23.634"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170516 02:39:23.635" status="PASS" starttime="20170516 02:39:23.635"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:39:23.636" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170516 02:39:24.014" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:39:24.014" level="INFO">${stdout} = Mem: 153152K used, 279780K free, 14636K shrd, 10492K buff, 49884K cached
CPU:   9% usr   4% sys   0% nic  86% idle   0% io   0% irq   0% sirq
Load average: 1.28 1.28 1.01 1/138 1372
  PID  PPID USER  ...</msg>
<msg timestamp="20170516 02:39:24.014" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:39:24.014" status="PASS" starttime="20170516 02:39:23.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:24.022" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_proc_list.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:24.022" status="PASS" starttime="20170516 02:39:24.021"></status>
</kw>
<status endtime="20170516 02:39:24.022" status="PASS" starttime="20170516 02:39:24.020"></status>
</kw>
<status endtime="20170516 02:39:24.022" status="PASS" starttime="20170516 02:39:24.014"></status>
</kw>
<status endtime="20170516 02:39:24.022" status="PASS" starttime="20170516 02:39:23.634"></status>
</kw>
<status endtime="20170516 02:39:24.022" status="PASS" starttime="20170516 02:39:23.634"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170516 02:39:24.023" level="INFO">${logpath} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_dmesg.txt</msg>
<status endtime="20170516 02:39:24.023" status="PASS" starttime="20170516 02:39:24.022"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170516 02:39:24.024" status="PASS" starttime="20170516 02:39:24.024"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:39:24.025" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170516 02:39:24.200" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:39:24.200" level="INFO">${stdout} = pcpu-alloc: [0] 0 
Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 109600
Kernel command line: console=ttyS4,115200n8 root=/dev/ram rw
PID hash table entries: 2048 (order: 1, 8192...</msg>
<msg timestamp="20170516 02:39:24.200" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:39:24.200" status="PASS" starttime="20170516 02:39:24.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:24.206" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_dmesg.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:24.206" status="PASS" starttime="20170516 02:39:24.206"></status>
</kw>
<status endtime="20170516 02:39:24.206" status="PASS" starttime="20170516 02:39:24.205"></status>
</kw>
<status endtime="20170516 02:39:24.206" status="PASS" starttime="20170516 02:39:24.201"></status>
</kw>
<status endtime="20170516 02:39:24.207" status="PASS" starttime="20170516 02:39:24.023"></status>
</kw>
<status endtime="20170516 02:39:24.207" status="PASS" starttime="20170516 02:39:24.022"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170516 02:39:24.207" level="INFO">${logpath} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_journalctl.txt</msg>
<status endtime="20170516 02:39:24.207" status="PASS" starttime="20170516 02:39:24.207"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170516 02:39:24.209" status="PASS" starttime="20170516 02:39:24.208"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170516 02:39:24.209" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170516 02:39:26.391" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170516 02:39:26.393" level="INFO">${stdout} = -- Logs begin at Tue 2017-05-16 02:24:46 UTC, end at Tue 2017-05-16 02:39:29 UTC. --
May 16 02:24:46 witherspoon kernel: Booting Linux on physical CPU 0x0
May 16 02:24:46 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170516 02:39:26.393" level="INFO">${stderr} = </msg>
<status endtime="20170516 02:39:26.393" status="PASS" starttime="20170516 02:39:24.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170516 02:39:26.401" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_journalctl.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/20170516023909092124_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:26.401" status="PASS" starttime="20170516 02:39:26.400"></status>
</kw>
<status endtime="20170516 02:39:26.401" status="PASS" starttime="20170516 02:39:26.398"></status>
</kw>
<status endtime="20170516 02:39:26.401" status="PASS" starttime="20170516 02:39:26.394"></status>
</kw>
<status endtime="20170516 02:39:26.401" status="PASS" starttime="20170516 02:39:24.208"></status>
</kw>
<status endtime="20170516 02:39:26.401" status="PASS" starttime="20170516 02:39:24.207"></status>
</kw>
<status endtime="20170516 02:39:26.401" status="PASS" starttime="20170516 02:39:23.481"></status>
</kw>
<status endtime="20170516 02:39:26.402" status="PASS" starttime="20170516 02:39:23.480"></status>
</kw>
<status endtime="20170516 02:39:26.402" status="PASS" starttime="20170516 02:39:23.480"></status>
</kw>
<status endtime="20170516 02:39:26.402" status="PASS" starttime="20170516 02:39:23.480"></status>
</kw>
<status endtime="20170516 02:39:26.402" status="PASS" starttime="20170516 02:39:21.814"></status>
</kw>
<status endtime="20170516 02:39:26.402" status="PASS" starttime="20170516 02:39:21.774"></status>
</kw>
<status endtime="20170516 02:39:26.402" status="PASS" starttime="20170516 02:39:21.772"></status>
</kw>
<status endtime="20170516 02:39:26.402" status="PASS" starttime="20170516 02:39:21.771"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170516 02:39:26.404" status="PASS" starttime="20170516 02:39:26.404"></status>
</kw>
<msg timestamp="20170516 02:39:26.404" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:39:26.404" level="INFO">${ret_values} = None</msg>
<status endtime="20170516 02:39:26.404" status="PASS" starttime="20170516 02:39:26.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170516 02:39:26.405" status="PASS" starttime="20170516 02:39:26.404"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170516 02:39:26.448" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170516 02:39:26.449" status="PASS" starttime="20170516 02:39:26.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170516 02:39:26.449" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170516 02:39:26.449" status="PASS" starttime="20170516 02:39:26.449"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170516 02:39:26.451" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170516 02:39:26.451" status="PASS" starttime="20170516 02:39:26.449"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170516 02:39:26.452" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170516 02:39:26.452" status="PASS" starttime="20170516 02:39:26.451"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170516 02:39:26.631" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170516 02:39:26.631" status="PASS" starttime="20170516 02:39:26.452"></status>
</kw>
<msg timestamp="20170516 02:39:26.632" level="INFO">${status} = PASS</msg>
<msg timestamp="20170516 02:39:26.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170516 02:39:26.632" status="PASS" starttime="20170516 02:39:26.452"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170516 02:39:26.632" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:26.633" status="PASS" starttime="20170516 02:39:26.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:26.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170516 02:39:26.633" status="PASS" starttime="20170516 02:39:26.633"></status>
</kw>
<status endtime="20170516 02:39:26.633" status="PASS" starttime="20170516 02:39:26.447"></status>
</kw>
<status endtime="20170516 02:39:26.633" status="PASS" starttime="20170516 02:39:26.447"></status>
</kw>
<status endtime="20170516 02:39:26.634" status="PASS" starttime="20170516 02:39:26.446"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170516 02:39:26.634" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170516 02:39:26.634" status="PASS" starttime="20170516 02:39:26.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170516 02:39:26.635" status="PASS" starttime="20170516 02:39:26.634"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170516 02:39:26.679" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170516 02:39:26.679" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170516 02:39:26.679" status="PASS" starttime="20170516 02:39:26.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170516 02:39:26.680" status="PASS" starttime="20170516 02:39:26.679"></status>
</kw>
<msg timestamp="20170516 02:39:26.680" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170516 02:39:26.680" status="PASS" starttime="20170516 02:39:26.445"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170516 02:39:26.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170516 02:39:26.682" level="FAIL">404 != 200</msg>
<status endtime="20170516 02:39:26.682" status="FAIL" starttime="20170516 02:39:26.680"></status>
</kw>
<msg timestamp="20170516 02:39:26.682" level="INFO">${status} = False</msg>
<status endtime="20170516 02:39:26.682" status="PASS" starttime="20170516 02:39:26.680"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170516 02:39:26.683" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170516 02:39:26.683" status="PASS" starttime="20170516 02:39:26.683"></status>
</kw>
<status endtime="20170516 02:39:26.683" status="PASS" starttime="20170516 02:39:26.445"></status>
</kw>
<status endtime="20170516 02:39:26.683" status="PASS" starttime="20170516 02:39:26.405"></status>
</kw>
<status endtime="20170516 02:39:26.683" status="PASS" starttime="20170516 02:39:26.402"></status>
</kw>
<status endtime="20170516 02:39:26.684" status="PASS" starttime="20170516 02:39:26.402"></status>
</kw>
<status endtime="20170516 02:39:26.684" status="PASS" starttime="20170516 02:39:10.975"></status>
</kw>
<status endtime="20170516 02:39:26.684" status="PASS" starttime="20170516 02:39:10.971"></status>
</kw>
<status endtime="20170516 02:39:26.684" status="PASS" starttime="20170516 02:39:10.971"></status>
</kw>
<status endtime="20170516 02:39:26.684" status="PASS" starttime="20170516 02:39:10.971"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170516 02:39:26.752" status="PASS" starttime="20170516 02:39:26.684"></status>
</kw>
<status endtime="20170516 02:39:26.752" status="PASS" starttime="20170516 02:39:10.970"></status>
</kw>
<status endtime="20170516 02:39:26.752" status="PASS" starttime="20170516 02:39:05.665"></status>
</kw>
<status endtime="20170516 02:39:26.752" status="PASS" starttime="20170516 02:39:05.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170516 02:39:26.753" status="PASS" starttime="20170516 02:39:26.753"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170516 02:39:26.762" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170516 02:39:26.762" status="PASS" starttime="20170516 02:39:26.754"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170516 02:39:26.762" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/6467/obmc-robot/logs/20170516023909092124_TestsTestBasicPoweron/20170516023909092124_PowerOnTest/</msg>
<status endtime="20170516 02:39:26.762" status="PASS" starttime="20170516 02:39:26.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170516 02:39:26.763" status="PASS" starttime="20170516 02:39:26.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170516 02:39:26.764" status="PASS" starttime="20170516 02:39:26.763"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170516 02:39:26.764" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs"&gt;/tmp/fspcibld/6467/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170516 02:39:26.764" status="PASS" starttime="20170516 02:39:26.764"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170516 02:39:26.765" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170516 02:39:26.765" status="PASS" starttime="20170516 02:39:26.765"></status>
</kw>
<msg timestamp="20170516 02:39:26.765" level="INFO">${exist} = True</msg>
<status endtime="20170516 02:39:26.765" status="PASS" starttime="20170516 02:39:26.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170516 02:39:26.766" status="PASS" starttime="20170516 02:39:26.766"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170516 02:39:26.766" status="PASS" starttime="20170516 02:39:26.766"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170516 02:39:26.767" level="INFO">${cur_time} = 2017-05-16 02:39:26:767209</msg>
<status endtime="20170516 02:39:26.767" status="PASS" starttime="20170516 02:39:26.767"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170516 02:39:26.768" level="INFO">${cur_time} = 20170516023926767209</msg>
<status endtime="20170516 02:39:26.768" status="PASS" starttime="20170516 02:39:26.768"></status>
</kw>
<msg timestamp="20170516 02:39:26.768" level="INFO">${cur_time} = 20170516023926767209</msg>
<status endtime="20170516 02:39:26.768" status="PASS" starttime="20170516 02:39:26.767"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170516 02:39:26.769" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6467/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6467/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170516 02:39:26.769" status="PASS" starttime="20170516 02:39:26.768"></status>
</kw>
<status endtime="20170516 02:39:26.769" status="PASS" starttime="20170516 02:39:26.753"></status>
</kw>
<status endtime="20170516 02:39:26.769" status="FAIL" starttime="20170516 02:37:44.959"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170516 02:39:26.771" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170516 02:39:26.771" status="PASS" starttime="20170516 02:39:26.771"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170516 02:39:26.772" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170516 02:39:26.772" status="PASS" starttime="20170516 02:39:26.771"></status>
</kw>
<msg timestamp="20170516 02:39:26.772" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170516 02:39:26.772" status="PASS" starttime="20170516 02:39:26.770"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:39:26.773" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170516 02:39:26.773" status="PASS" starttime="20170516 02:39:26.773"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170516 02:39:26.780" status="PASS" starttime="20170516 02:39:26.773"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170516 02:39:26.787" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170516 02:39:26.792" level="INFO">${rc} = 0</msg>
<msg timestamp="20170516 02:39:26.792" level="INFO">${output} = /tmp/fspcibld/6467/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170516 02:39:26.792" status="PASS" starttime="20170516 02:39:26.780"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170516 02:39:26.802" status="PASS" starttime="20170516 02:39:26.794"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170516 02:39:26.803" status="PASS" starttime="20170516 02:39:26.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:39:26.804" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170516 02:39:26.804" status="PASS" starttime="20170516 02:39:26.803"></status>
</kw>
<msg timestamp="20170516 02:39:26.804" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170516 02:39:26.804" status="PASS" starttime="20170516 02:39:26.772"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:39:26.805" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170516 02:39:26.805" status="PASS" starttime="20170516 02:39:26.804"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170516 02:39:26.848" status="PASS" starttime="20170516 02:39:26.805"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170516 02:39:26.855" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170516 02:39:26.864" level="INFO">${rc} = 0</msg>
<msg timestamp="20170516 02:39:26.864" level="INFO">${os_con_pid} = 196</msg>
<status endtime="20170516 02:39:26.864" status="PASS" starttime="20170516 02:39:26.849"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170516 02:39:26.874" status="PASS" starttime="20170516 02:39:26.866"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:39:26.875" level="INFO">${cmd_buf} = kill -9 196</msg>
<status endtime="20170516 02:39:26.875" status="PASS" starttime="20170516 02:39:26.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170516 02:39:26.883" status="PASS" starttime="20170516 02:39:26.876"></status>
</kw>
<status endtime="20170516 02:39:26.884" status="PASS" starttime="20170516 02:39:26.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20170516 02:39:26.888" level="INFO">Running command 'kill -9 196 2&gt;&amp;1'.</msg>
<status endtime="20170516 02:39:26.890" status="PASS" starttime="20170516 02:39:26.884"></status>
</kw>
<msg timestamp="20170516 02:39:26.891" level="INFO">${rc} = 0</msg>
<msg timestamp="20170516 02:39:26.891" level="INFO">${output} = </msg>
<status endtime="20170516 02:39:26.891" status="PASS" starttime="20170516 02:39:26.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170516 02:39:26.904" status="PASS" starttime="20170516 02:39:26.895"></status>
</kw>
<status endtime="20170516 02:39:26.904" status="PASS" starttime="20170516 02:39:26.893"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170516 02:39:26.905" level="INFO">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status endtime="20170516 02:39:26.905" status="PASS" starttime="20170516 02:39:26.904"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170516 02:39:26.912" status="PASS" starttime="20170516 02:39:26.905"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170516 02:39:26.916" level="INFO">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170516 02:39:26.920" level="INFO">${rc} = 0</msg>
<msg timestamp="20170516 02:39:26.920" level="INFO">${output} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:UD0knbv0n/aYnjyQpXhvRYFaEcXJn/QD7sMuqogAYDc.
Are ...</msg>
<status endtime="20170516 02:39:26.920" status="PASS" starttime="20170516 02:39:26.912"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170516 02:39:26.932" status="PASS" starttime="20170516 02:39:26.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170516 02:39:26.933" status="PASS" starttime="20170516 02:39:26.932"></status>
</kw>
<msg timestamp="20170516 02:39:26.933" level="INFO">${sol_log} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:UD0knbv0n/aYnjyQpXhvRYFaEcXJn/QD7sMuqogAYDc.
Are ...</msg>
<status endtime="20170516 02:39:26.933" status="PASS" starttime="20170516 02:39:26.770"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170516 02:39:26.934" level="INFO">spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:UD0knbv0n/aYnjyQpXhvRYFaEcXJn/QD7sMuqogAYDc.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: </msg>
<status endtime="20170516 02:39:26.934" status="PASS" starttime="20170516 02:39:26.933"></status>
</kw>
<status endtime="20170516 02:39:26.934" status="FAIL" starttime="20170516 02:37:44.959">Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'</status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" endtime="20170516 02:39:26.934" status="FAIL" starttime="20170516 02:34:21.504">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS

Also teardown failed:
Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170516 02:39:26.936" status="FAIL" starttime="20170516 02:34:21.469"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170516 02:39:26.939" status="FAIL" starttime="20170516 02:34:14.400"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" pass="1" fail="1" name="Tests">Tests</stat>
<stat id="s1-s1" pass="1" fail="0" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" pass="1" fail="0" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" pass="0" fail="1" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
