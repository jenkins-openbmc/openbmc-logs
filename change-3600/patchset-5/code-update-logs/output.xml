<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170425 03:21:48.152" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update And Boot">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170425 03:21:48.825" level="INFO">Length is 31</msg>
<status status="PASS" endtime="20170425 03:21:48.825" starttime="20170425 03:21:48.825"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170425 03:21:48.826" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon.pnor"&gt;/home/fspcibld/witherspoon.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170425 03:21:48.826" starttime="20170425 03:21:48.825"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:48.826" starttime="20170425 03:21:48.824"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>REST Power Off</arg>
</arguments>
<msg timestamp="20170425 03:21:48.832" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 03:21:48.866" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 03:21:48.866" starttime="20170425 03:21:48.865"></status>
</kw>
<msg timestamp="20170425 03:21:48.866" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 03:21:48.866" starttime="20170425 03:21:48.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:48.867" starttime="20170425 03:21:48.867"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:48.867" starttime="20170425 03:21:48.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:48.868" starttime="20170425 03:21:48.868"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 03:21:48.869" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 03:21:48.869" starttime="20170425 03:21:48.869"></status>
</kw>
<msg timestamp="20170425 03:21:48.869" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 03:21:48.869" starttime="20170425 03:21:48.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:48.871" starttime="20170425 03:21:48.871"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:48.871" starttime="20170425 03:21:48.870"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:48.872" starttime="20170425 03:21:48.870"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 03:21:48.872" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 03:21:50.637" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 03:21:50.637" starttime="20170425 03:21:48.872"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:50.637" starttime="20170425 03:21:48.864"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:21:50.638" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170425 03:21:50.705" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 03:21:50.705" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170425 03:21:50.705" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 03:21:50.705" starttime="20170425 03:21:50.638"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170425 03:21:50.705" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170425 03:21:50.706" starttime="20170425 03:21:50.705"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170425 03:21:50.706" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170425 03:21:50.706" starttime="20170425 03:21:50.706"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:50.706" starttime="20170425 03:21:48.863"></status>
</kw>
<msg timestamp="20170425 03:21:50.707" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170425 03:21:50.901" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170425 03:21:50.914" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170425 03:21:50.914" starttime="20170425 03:21:50.913"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:21:50.915" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170425 03:21:50.915" starttime="20170425 03:21:50.915"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:21:50.917" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:21:50.918" starttime="20170425 03:21:50.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:21:50.919" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:21:50.919" starttime="20170425 03:21:50.918"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:21:50.919" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:21:50.919" starttime="20170425 03:21:50.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:21:50.920" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:21:50.920" starttime="20170425 03:21:50.920"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:21:51.123" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:21:51.123" starttime="20170425 03:21:50.921"></status>
</kw>
<msg timestamp="20170425 03:21:51.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:21:51.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.123" starttime="20170425 03:21:50.920"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:21:51.124" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.124" starttime="20170425 03:21:51.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:51.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.124" starttime="20170425 03:21:51.124"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:51.125" starttime="20170425 03:21:50.916"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:21:51.127" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170425 03:21:51.127" starttime="20170425 03:21:51.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:21:51.127" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:21:51.127" starttime="20170425 03:21:51.127"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:51.128" starttime="20170425 03:21:51.127"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170425 03:21:51.129" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170425 03:21:51.129" starttime="20170425 03:21:51.129"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170425 03:21:51.130" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170425 03:21:51.130" starttime="20170425 03:21:51.130"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:51.131" starttime="20170425 03:21:51.129"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:51.131" starttime="20170425 03:21:51.128"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:21:51.319" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170425 03:21:51.319" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.319" starttime="20170425 03:21:51.131"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170425 03:21:51.320" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 03:21:51.320" starttime="20170425 03:21:51.320"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170425 03:21:51.321" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 03:21:51.321" starttime="20170425 03:21:51.321"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:51.322" starttime="20170425 03:21:51.320"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:51.322" starttime="20170425 03:21:51.319"></status>
</kw>
<msg timestamp="20170425 03:21:51.322" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.322" starttime="20170425 03:21:50.915"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:51.323" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.323" starttime="20170425 03:21:51.322"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170425 03:21:51.323" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 03:21:51.324" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 03:21:51.324" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170425 03:21:51.324" starttime="20170425 03:21:51.323"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:51.324" starttime="20170425 03:21:50.914"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:21:51.326" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:21:51.327" starttime="20170425 03:21:51.326"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:21:51.327" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:21:51.327" starttime="20170425 03:21:51.327"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:21:51.328" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:21:51.328" starttime="20170425 03:21:51.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:21:51.328" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:21:51.328" starttime="20170425 03:21:51.328"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:21:51.504" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:21:51.504" starttime="20170425 03:21:51.329"></status>
</kw>
<msg timestamp="20170425 03:21:51.504" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:21:51.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.504" starttime="20170425 03:21:51.329"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:21:51.505" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.505" starttime="20170425 03:21:51.505"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:51.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.506" starttime="20170425 03:21:51.506"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:51.507" starttime="20170425 03:21:51.325"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:21:51.507" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170425 03:21:51.507" starttime="20170425 03:21:51.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:51.508" starttime="20170425 03:21:51.507"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:21:51.591" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20170425 03:21:51.592" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.592" starttime="20170425 03:21:51.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:51.592" starttime="20170425 03:21:51.592"></status>
</kw>
<msg timestamp="20170425 03:21:51.592" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.593" starttime="20170425 03:21:51.324"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:51.593" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.593" starttime="20170425 03:21:51.593"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 03:21:51.594" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 03:21:51.594" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 03:21:51.594" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170425 03:21:51.594" starttime="20170425 03:21:51.593"></status>
</kw>
<msg timestamp="20170425 03:21:51.594" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170425 03:21:51.594" starttime="20170425 03:21:51.324"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170425 03:21:51.595" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:51.595" starttime="20170425 03:21:51.594"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:51.595" starttime="20170425 03:21:50.911"></status>
</kw>
<msg timestamp="20170425 03:21:51.633" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170425 03:21:51.649" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170425 03:21:51.653" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170425 03:21:51.654" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 03:21:51.656" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 03:21:51.656" starttime="20170425 03:21:51.656"></status>
</kw>
<msg timestamp="20170425 03:21:51.656" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 03:21:51.656" starttime="20170425 03:21:51.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:51.657" starttime="20170425 03:21:51.657"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:51.658" starttime="20170425 03:21:51.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:51.658" starttime="20170425 03:21:51.658"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 03:21:51.659" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 03:21:51.659" starttime="20170425 03:21:51.659"></status>
</kw>
<msg timestamp="20170425 03:21:51.659" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 03:21:51.659" starttime="20170425 03:21:51.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:51.661" starttime="20170425 03:21:51.661"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:51.661" starttime="20170425 03:21:51.660"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:51.661" starttime="20170425 03:21:51.660"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 03:21:51.662" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 03:21:53.273" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 03:21:53.273" starttime="20170425 03:21:51.662"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:53.274" starttime="20170425 03:21:51.655"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:21:53.331" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:21:53.332" starttime="20170425 03:21:53.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:21:53.332" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:21:53.332" starttime="20170425 03:21:53.332"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:21:53.333" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:21:53.333" starttime="20170425 03:21:53.333"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:21:53.334" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:21:53.334" starttime="20170425 03:21:53.333"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:21:53.518" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:21:53.519" starttime="20170425 03:21:53.334"></status>
</kw>
<msg timestamp="20170425 03:21:53.519" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:21:53.519" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:53.519" starttime="20170425 03:21:53.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:21:53.520" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:53.520" starttime="20170425 03:21:53.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:53.520" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:53.520" starttime="20170425 03:21:53.520"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:53.520" starttime="20170425 03:21:53.329"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:21:53.521" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170425 03:21:53.521" starttime="20170425 03:21:53.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:53.522" starttime="20170425 03:21:53.522"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:21:53.585" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170425 03:21:53.585" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:53.585" starttime="20170425 03:21:53.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:53.586" starttime="20170425 03:21:53.585"></status>
</kw>
<msg timestamp="20170425 03:21:53.587" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:53.587" starttime="20170425 03:21:53.327"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:53.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:53.588" starttime="20170425 03:21:53.587"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 03:21:53.589" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 03:21:53.589" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 03:21:53.589" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170425 03:21:53.589" starttime="20170425 03:21:53.588"></status>
</kw>
<msg timestamp="20170425 03:21:53.589" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170425 03:21:53.589" starttime="20170425 03:21:53.326"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:53.590" starttime="20170425 03:21:53.318"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:21:53.593" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:21:53.593" starttime="20170425 03:21:53.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:21:53.594" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:21:53.594" starttime="20170425 03:21:53.593"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:21:53.594" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:21:53.594" starttime="20170425 03:21:53.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:21:53.595" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:21:53.595" starttime="20170425 03:21:53.595"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:21:53.797" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:21:53.797" starttime="20170425 03:21:53.596"></status>
</kw>
<msg timestamp="20170425 03:21:53.797" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:21:53.797" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:53.797" starttime="20170425 03:21:53.595"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:21:53.798" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:53.798" starttime="20170425 03:21:53.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:53.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:53.799" starttime="20170425 03:21:53.799"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:53.799" starttime="20170425 03:21:53.592"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:21:53.800" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170425 03:21:53.800" starttime="20170425 03:21:53.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:53.800" starttime="20170425 03:21:53.800"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:21:53.954" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None </msg>
<msg timestamp="20170425 03:21:53.954" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:53.954" starttime="20170425 03:21:53.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:53.955" starttime="20170425 03:21:53.954"></status>
</kw>
<msg timestamp="20170425 03:21:53.955" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:53.955" starttime="20170425 03:21:53.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:53.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:53.956" starttime="20170425 03:21:53.955"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 03:21:53.956" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 03:21:53.956" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 03:21:53.956" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170425 03:21:53.957" starttime="20170425 03:21:53.956"></status>
</kw>
<msg timestamp="20170425 03:21:53.957" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170425 03:21:53.957" starttime="20170425 03:21:53.591"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:53.957" starttime="20170425 03:21:53.590"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:21:53.960" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:21:53.960" starttime="20170425 03:21:53.959"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:21:53.961" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:21:53.961" starttime="20170425 03:21:53.960"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:21:53.961" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:21:53.961" starttime="20170425 03:21:53.961"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:21:53.962" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:21:53.962" starttime="20170425 03:21:53.962"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:21:54.372" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:21:54.372" starttime="20170425 03:21:53.963"></status>
</kw>
<msg timestamp="20170425 03:21:54.372" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:21:54.372" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:54.372" starttime="20170425 03:21:53.962"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:21:54.373" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:54.373" starttime="20170425 03:21:54.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:54.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:54.373" starttime="20170425 03:21:54.373"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:54.374" starttime="20170425 03:21:53.959"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:21:54.374" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170425 03:21:54.374" starttime="20170425 03:21:54.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:54.375" starttime="20170425 03:21:54.375"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:21:54.455" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170425 03:21:54.456" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:54.456" starttime="20170425 03:21:54.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:54.456" starttime="20170425 03:21:54.456"></status>
</kw>
<msg timestamp="20170425 03:21:54.457" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:54.457" starttime="20170425 03:21:53.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:54.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:54.457" starttime="20170425 03:21:54.457"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 03:21:54.458" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 03:21:54.458" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 03:21:54.458" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170425 03:21:54.458" starttime="20170425 03:21:54.458"></status>
</kw>
<msg timestamp="20170425 03:21:54.458" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170425 03:21:54.458" starttime="20170425 03:21:53.958"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:54.459" starttime="20170425 03:21:53.957"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:21:54.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:21:54.462" starttime="20170425 03:21:54.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:21:54.463" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:21:54.463" starttime="20170425 03:21:54.462"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:21:54.463" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:21:54.463" starttime="20170425 03:21:54.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:21:54.464" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:21:54.464" starttime="20170425 03:21:54.463"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:21:54.706" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:21:54.706" starttime="20170425 03:21:54.465"></status>
</kw>
<msg timestamp="20170425 03:21:54.707" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:21:54.707" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:54.707" starttime="20170425 03:21:54.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:21:54.707" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:54.707" starttime="20170425 03:21:54.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:54.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:54.708" starttime="20170425 03:21:54.708"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:54.708" starttime="20170425 03:21:54.461"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:21:54.709" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170425 03:21:54.709" starttime="20170425 03:21:54.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:54.709" starttime="20170425 03:21:54.709"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:21:54.772" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170425 03:21:54.773" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:54.773" starttime="20170425 03:21:54.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:54.774" starttime="20170425 03:21:54.773"></status>
</kw>
<msg timestamp="20170425 03:21:54.774" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:54.774" starttime="20170425 03:21:54.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:54.775" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:54.775" starttime="20170425 03:21:54.774"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 03:21:54.776" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 03:21:54.776" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 03:21:54.776" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170425 03:21:54.776" starttime="20170425 03:21:54.775"></status>
</kw>
<msg timestamp="20170425 03:21:54.776" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170425 03:21:54.776" starttime="20170425 03:21:54.459"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:54.777" starttime="20170425 03:21:54.459"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:54.812" starttime="20170425 03:21:48.831"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:54.812" starttime="20170425 03:21:48.827"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Clear BMC Record Log</arg>
</arguments>
<kw name="Clear BMC Record Log" library="utils">
<doc>Clears all the event logs on the BMC. This would be</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170425 03:21:54.819" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20170425 03:21:54.819" starttime="20170425 03:21:54.819"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170425 03:21:54.820" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20170425 03:21:54.820" starttime="20170425 03:21:54.819"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}records/events/</arg>
<arg>clear</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:21:54.821" level="INFO">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" endtime="20170425 03:21:54.821" starttime="20170425 03:21:54.821"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:21:54.823" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:21:54.823" starttime="20170425 03:21:54.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:21:54.824" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:21:54.824" starttime="20170425 03:21:54.823"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:21:54.824" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:21:54.824" starttime="20170425 03:21:54.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:21:54.825" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:21:54.825" starttime="20170425 03:21:54.825"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:21:55.208" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:21:55.208" starttime="20170425 03:21:54.826"></status>
</kw>
<msg timestamp="20170425 03:21:55.208" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:21:55.208" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:55.208" starttime="20170425 03:21:54.825"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:21:55.209" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:55.209" starttime="20170425 03:21:55.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:55.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:55.210" starttime="20170425 03:21:55.209"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:55.210" starttime="20170425 03:21:54.822"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:21:55.211" level="INFO">${base_uri} = /org/openbmc/records/events//action/clear</msg>
<status status="PASS" endtime="20170425 03:21:55.211" starttime="20170425 03:21:55.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:21:55.211" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:21:55.211" starttime="20170425 03:21:55.211"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:55.212" starttime="20170425 03:21:55.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:55.212" starttime="20170425 03:21:55.212"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:21:55.516" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events//action/clear, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170425 03:21:55.516" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:55.516" starttime="20170425 03:21:55.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:55.516" starttime="20170425 03:21:55.516"></status>
</kw>
<msg timestamp="20170425 03:21:55.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:55.517" starttime="20170425 03:21:54.821"></status>
</kw>
<msg timestamp="20170425 03:21:55.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:21:55.517" starttime="20170425 03:21:54.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:21:55.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:21:55.518" starttime="20170425 03:21:55.517"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:55.518" starttime="20170425 03:21:54.818"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:55.518" starttime="20170425 03:21:54.812"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:55.518" starttime="20170425 03:21:48.826"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:55.531" starttime="20170425 03:21:55.526"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:55.534" starttime="20170425 03:21:55.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:21:56.170" starttime="20170425 03:21:55.535"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:56.170" starttime="20170425 03:21:55.534"></status>
</kw>
<status status="PASS" endtime="20170425 03:21:56.170" starttime="20170425 03:21:55.532"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170425 03:21:56.171" level="INFO">Copying /home/fspcibld/witherspoon.pnor to /tmp</msg>
<status status="PASS" endtime="20170425 03:21:56.171" starttime="20170425 03:21:56.171"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<msg timestamp="20170425 03:22:16.408" level="FAIL">timeout</msg>
<status status="FAIL" endtime="20170425 03:22:16.409" starttime="20170425 03:21:56.171"></status>
</kw>
<status status="FAIL" endtime="20170425 03:22:16.409" starttime="20170425 03:21:55.525"></status>
</kw>
<msg timestamp="20170425 03:22:16.410" level="FAIL">timeout</msg>
<status status="FAIL" endtime="20170425 03:22:16.410" starttime="20170425 03:21:55.519"></status>
</kw>
<status status="FAIL" endtime="20170425 03:22:16.410" starttime="20170425 03:21:55.518"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:22:16.421" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:22:16.422" starttime="20170425 03:22:16.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:22:16.422" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:22:16.422" starttime="20170425 03:22:16.422"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:22:16.423" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:22:16.423" starttime="20170425 03:22:16.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:22:16.424" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:22:16.424" starttime="20170425 03:22:16.423"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:22:16.598" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:22:16.598" starttime="20170425 03:22:16.424"></status>
</kw>
<msg timestamp="20170425 03:22:16.598" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:22:16.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:16.598" starttime="20170425 03:22:16.424"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:22:16.599" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:16.599" starttime="20170425 03:22:16.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:16.600" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:16.600" starttime="20170425 03:22:16.599"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:16.600" starttime="20170425 03:22:16.420"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:22:16.600" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170425 03:22:16.600" starttime="20170425 03:22:16.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:16.601" starttime="20170425 03:22:16.601"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:22:16.665" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170425 03:22:16.665" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:16.665" starttime="20170425 03:22:16.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:16.666" starttime="20170425 03:22:16.666"></status>
</kw>
<msg timestamp="20170425 03:22:16.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:16.666" starttime="20170425 03:22:16.419"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:16.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:16.667" starttime="20170425 03:22:16.667"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 03:22:16.668" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 03:22:16.668" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 03:22:16.668" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170425 03:22:16.668" starttime="20170425 03:22:16.668"></status>
</kw>
<msg timestamp="20170425 03:22:16.669" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170425 03:22:16.669" starttime="20170425 03:22:16.419"></status>
</kw>
<msg timestamp="20170425 03:22:16.669" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170425 03:22:16.669" starttime="20170425 03:22:16.418"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170425 03:22:16.671" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170425 03:22:16.671" starttime="20170425 03:22:16.670"></status>
</kw>
<msg timestamp="20170425 03:22:16.671" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 03:22:16.671" starttime="20170425 03:22:16.670"></status>
</kw>
<msg timestamp="20170425 03:22:16.672" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 03:22:16.672" starttime="20170425 03:22:16.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 03:22:16.674" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 03:22:16.674" starttime="20170425 03:22:16.674"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 03:22:16.678" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 03:22:19.684" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 03:22:19.684" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.65 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.614 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 03:22:19.684" starttime="20170425 03:22:16.675"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 03:22:19.687" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.65 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.614 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.600 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.603 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.600/0.867/1.654/0.455 ms</msg>
<status status="PASS" endtime="20170425 03:22:19.687" starttime="20170425 03:22:19.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:19.689" starttime="20170425 03:22:19.687"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:19.689" starttime="20170425 03:22:16.673"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 03:22:19.704" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 03:22:19.704" starttime="20170425 03:22:19.703"></status>
</kw>
<msg timestamp="20170425 03:22:19.704" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 03:22:19.704" starttime="20170425 03:22:19.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:19.705" starttime="20170425 03:22:19.705"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:19.705" starttime="20170425 03:22:19.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:19.706" starttime="20170425 03:22:19.705"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 03:22:19.707" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 03:22:19.707" starttime="20170425 03:22:19.706"></status>
</kw>
<msg timestamp="20170425 03:22:19.707" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 03:22:19.707" starttime="20170425 03:22:19.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:19.709" starttime="20170425 03:22:19.708"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:19.709" starttime="20170425 03:22:19.708"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:19.709" starttime="20170425 03:22:19.707"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 03:22:19.709" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 03:22:21.319" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 03:22:21.320" starttime="20170425 03:22:19.709"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.320" starttime="20170425 03:22:19.701"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170425 03:22:21.329" level="INFO">${cur_time} = 2017-04-25 03:22:21:329142</msg>
<status status="PASS" endtime="20170425 03:22:21.329" starttime="20170425 03:22:21.329"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170425 03:22:21.330" level="INFO">${cur_time} = 20170425032221329142</msg>
<status status="PASS" endtime="20170425 03:22:21.330" starttime="20170425 03:22:21.330"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.330" starttime="20170425 03:22:21.328"></status>
</kw>
<msg timestamp="20170425 03:22:21.335" level="INFO">${FFDC_TIME} = 20170425032221329142</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170425 03:22:21.336" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170425 03:22:21.336" starttime="20170425 03:22:21.336"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170425 03:22:21.337" level="INFO">${suite_name} = 20170425032221329142_TestBiosUpdate</msg>
<status status="PASS" endtime="20170425 03:22:21.337" starttime="20170425 03:22:21.337"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170425 03:22:21.337" level="INFO">${test_name} = HostBIOSUpdateAndBoot</msg>
<status status="PASS" endtime="20170425 03:22:21.338" starttime="20170425 03:22:21.337"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170425 03:22:21.338" level="INFO">${test_name} = 20170425032221329142_HostBIOSUpdateAndBoot</msg>
<status status="PASS" endtime="20170425 03:22:21.338" starttime="20170425 03:22:21.338"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.338" starttime="20170425 03:22:21.335"></status>
</kw>
<msg timestamp="20170425 03:22:21.357" level="INFO">${LOG_PREFIX} = 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/</arg>
</arguments>
<msg timestamp="20170425 03:22:21.359" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.359" starttime="20170425 03:22:21.358"></status>
</kw>
<msg timestamp="20170425 03:22:21.363" level="INFO">${FFDC_FILE_PATH} = 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.365" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.365" starttime="20170425 03:22:21.364"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.365" starttime="20170425 03:22:21.364"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.366" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.366" starttime="20170425 03:22:21.366"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.366" starttime="20170425 03:22:21.365"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.367" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.368" starttime="20170425 03:22:21.367"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.368" starttime="20170425 03:22:21.367"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.369" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.369" starttime="20170425 03:22:21.368"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.369" starttime="20170425 03:22:21.368"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.370" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.370" starttime="20170425 03:22:21.370"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.370" starttime="20170425 03:22:21.369"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.372" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.372" starttime="20170425 03:22:21.371"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.372" starttime="20170425 03:22:21.370"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.373" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.373" starttime="20170425 03:22:21.373"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.373" starttime="20170425 03:22:21.372"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.375" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.375" starttime="20170425 03:22:21.374"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.375" starttime="20170425 03:22:21.374"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.376" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.376" starttime="20170425 03:22:21.376"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.376" starttime="20170425 03:22:21.375"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.378" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.378" starttime="20170425 03:22:21.377"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.378" starttime="20170425 03:22:21.377"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.379" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.379" starttime="20170425 03:22:21.379"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.379" starttime="20170425 03:22:21.378"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.381" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.381" starttime="20170425 03:22:21.380"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.381" starttime="20170425 03:22:21.379"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.382" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:21.382" starttime="20170425 03:22:21.382"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.382" starttime="20170425 03:22:21.381"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 03:22:21.384" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 03:22:21.384" starttime="20170425 03:22:21.384"></status>
</kw>
<msg timestamp="20170425 03:22:21.384" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 03:22:21.385" starttime="20170425 03:22:21.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:21.386" starttime="20170425 03:22:21.385"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.386" starttime="20170425 03:22:21.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:21.386" starttime="20170425 03:22:21.386"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 03:22:21.387" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 03:22:21.387" starttime="20170425 03:22:21.387"></status>
</kw>
<msg timestamp="20170425 03:22:21.388" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 03:22:21.388" starttime="20170425 03:22:21.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:21.390" starttime="20170425 03:22:21.389"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.390" starttime="20170425 03:22:21.389"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:21.390" starttime="20170425 03:22:21.388"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 03:22:21.390" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 03:22:23.035" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 03:22:23.035" starttime="20170425 03:22:21.390"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.035" starttime="20170425 03:22:21.383"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:22:23.036" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170425 03:22:23.102" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 03:22:23.103" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170425 03:22:23.103" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 03:22:23.103" starttime="20170425 03:22:23.036"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170425 03:22:23.103" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170425 03:22:23.103" starttime="20170425 03:22:23.103"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170425 03:22:23.104" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170425 03:22:23.104" starttime="20170425 03:22:23.104"></status>
</kw>
<msg timestamp="20170425 03:22:23.104" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170425 03:22:23.104" starttime="20170425 03:22:21.382"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:23.105" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:23.105" starttime="20170425 03:22:23.105"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.105" starttime="20170425 03:22:23.104"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.106" starttime="20170425 03:22:21.376"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:23.107" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:23.107" starttime="20170425 03:22:23.106"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.107" starttime="20170425 03:22:23.106"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170425 03:22:23.107" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170425 03:22:23.108" starttime="20170425 03:22:23.107"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:23.109" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:23.109" starttime="20170425 03:22:23.109"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.109" starttime="20170425 03:22:23.108"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:23.110" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:23.110" starttime="20170425 03:22:23.110"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.110" starttime="20170425 03:22:23.109"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.110" starttime="20170425 03:22:23.108"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:23.112" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:23.112" starttime="20170425 03:22:23.111"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.112" starttime="20170425 03:22:23.111"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:23.113" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:23.113" starttime="20170425 03:22:23.113"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.113" starttime="20170425 03:22:23.112"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.113" starttime="20170425 03:22:23.110"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:23.115" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:23.115" starttime="20170425 03:22:23.114"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.115" starttime="20170425 03:22:23.114"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:23.116" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:23.116" starttime="20170425 03:22:23.116"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.116" starttime="20170425 03:22:23.115"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.116" starttime="20170425 03:22:23.114"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.116" starttime="20170425 03:22:23.108"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:23.117" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:23.117" starttime="20170425 03:22:23.117"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.117" starttime="20170425 03:22:23.116"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.118" starttime="20170425 03:22:21.363"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170425 03:22:23.119" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170425 03:22:23.119" starttime="20170425 03:22:23.118"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170425 03:22:23.120" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170425 03:22:23.120" starttime="20170425 03:22:23.120"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 03:22:23.123" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 03:22:23.123" starttime="20170425 03:22:23.123"></status>
</kw>
<msg timestamp="20170425 03:22:23.123" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 03:22:23.123" starttime="20170425 03:22:23.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:23.124" starttime="20170425 03:22:23.124"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.125" starttime="20170425 03:22:23.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:23.125" starttime="20170425 03:22:23.125"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 03:22:23.126" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 03:22:23.127" starttime="20170425 03:22:23.126"></status>
</kw>
<msg timestamp="20170425 03:22:23.127" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 03:22:23.127" starttime="20170425 03:22:23.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:23.128" starttime="20170425 03:22:23.128"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.128" starttime="20170425 03:22:23.128"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:23.128" starttime="20170425 03:22:23.127"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 03:22:23.129" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 03:22:24.775" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 03:22:24.775" starttime="20170425 03:22:23.129"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:24.775" starttime="20170425 03:22:23.122"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170425 03:22:24.776" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170425 03:22:24.776" starttime="20170425 03:22:24.776"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170425 03:22:24.777" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170425 03:22:24.777" starttime="20170425 03:22:24.777"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170425 03:22:24.782" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170425 03:22:24.782" starttime="20170425 03:22:24.778"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:24.788" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:24.788" starttime="20170425 03:22:24.787"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:24.788" starttime="20170425 03:22:24.785"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:24.789" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:24.789" starttime="20170425 03:22:24.789"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:24.789" starttime="20170425 03:22:24.788"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:24.790" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:24.791" starttime="20170425 03:22:24.790"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:24.791" starttime="20170425 03:22:24.790"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:24.792" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:24.792" starttime="20170425 03:22:24.791"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:24.792" starttime="20170425 03:22:24.791"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:24.792" starttime="20170425 03:22:24.784"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:24.792" starttime="20170425 03:22:24.784"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:22:24.793" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170425 03:22:26.058" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 03:22:26.058" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170425 03:22:26.058" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 03:22:26.058" starttime="20170425 03:22:24.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.064" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.064" starttime="20170425 03:22:26.064"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.064" starttime="20170425 03:22:26.063"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.065" starttime="20170425 03:22:26.058"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.065" starttime="20170425 03:22:24.783"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.065" starttime="20170425 03:22:24.783"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.065" starttime="20170425 03:22:24.782"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.065" starttime="20170425 03:22:24.776"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.065" starttime="20170425 03:22:24.776"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170425 03:22:26.066" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170425 03:22:26.066" starttime="20170425 03:22:26.066"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.067" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170425 03:22:26.067" starttime="20170425 03:22:26.066"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.070" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.070" starttime="20170425 03:22:26.070"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.070" starttime="20170425 03:22:26.069"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.071" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.071" starttime="20170425 03:22:26.071"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.071" starttime="20170425 03:22:26.070"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.072" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.073" starttime="20170425 03:22:26.072"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.073" starttime="20170425 03:22:26.072"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.074" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.074" starttime="20170425 03:22:26.074"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.074" starttime="20170425 03:22:26.073"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.074" starttime="20170425 03:22:26.068"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.074" starttime="20170425 03:22:26.068"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:22:26.075" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170425 03:22:26.144" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170425 03:22:26.144" level="INFO">${stdout} = </msg>
<msg timestamp="20170425 03:22:26.144" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170425 03:22:26.144" starttime="20170425 03:22:26.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.150" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.150" starttime="20170425 03:22:26.149"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.150" starttime="20170425 03:22:26.149"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.150" starttime="20170425 03:22:26.144"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.150" starttime="20170425 03:22:26.067"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.150" starttime="20170425 03:22:26.067"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.153" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.153" starttime="20170425 03:22:26.153"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.153" starttime="20170425 03:22:26.152"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.155" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.155" starttime="20170425 03:22:26.154"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.155" starttime="20170425 03:22:26.154"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.156" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.156" starttime="20170425 03:22:26.156"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.156" starttime="20170425 03:22:26.155"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.157" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.157" starttime="20170425 03:22:26.157"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.157" starttime="20170425 03:22:26.156"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.157" starttime="20170425 03:22:26.152"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.157" starttime="20170425 03:22:26.151"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:22:26.158" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170425 03:22:26.233" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 03:22:26.233" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.4-53"
VERSION_ID="v1.99.4-53-g5c56a71"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170425 03:22:26.233" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 03:22:26.233" starttime="20170425 03:22:26.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.239" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.239" starttime="20170425 03:22:26.238"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.239" starttime="20170425 03:22:26.238"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.239" starttime="20170425 03:22:26.233"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.239" starttime="20170425 03:22:26.151"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.239" starttime="20170425 03:22:26.150"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.239" starttime="20170425 03:22:26.067"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.239" starttime="20170425 03:22:26.065"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.239" starttime="20170425 03:22:26.065"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170425 03:22:26.240" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170425 03:22:26.240" starttime="20170425 03:22:26.240"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.241" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170425 03:22:26.241" starttime="20170425 03:22:26.241"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.245" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.245" starttime="20170425 03:22:26.244"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.245" starttime="20170425 03:22:26.244"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.246" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.246" starttime="20170425 03:22:26.246"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.246" starttime="20170425 03:22:26.245"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.247" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.247" starttime="20170425 03:22:26.247"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.247" starttime="20170425 03:22:26.246"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.248" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.249" starttime="20170425 03:22:26.248"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.249" starttime="20170425 03:22:26.248"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.249" starttime="20170425 03:22:26.243"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.249" starttime="20170425 03:22:26.242"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:22:26.249" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170425 03:22:26.334" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 03:22:26.334" level="INFO">${stdout} =  03:22:29 up 2 min,  load average: 2.80, 1.70, 0.67</msg>
<msg timestamp="20170425 03:22:26.334" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 03:22:26.334" starttime="20170425 03:22:26.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.340" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.340" starttime="20170425 03:22:26.340"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.340" starttime="20170425 03:22:26.339"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.340" starttime="20170425 03:22:26.335"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.341" starttime="20170425 03:22:26.242"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.341" starttime="20170425 03:22:26.241"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.343" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.344" starttime="20170425 03:22:26.343"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.344" starttime="20170425 03:22:26.343"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.345" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.345" starttime="20170425 03:22:26.345"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.345" starttime="20170425 03:22:26.344"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.346" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.346" starttime="20170425 03:22:26.346"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.346" starttime="20170425 03:22:26.345"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.348" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.348" starttime="20170425 03:22:26.347"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.348" starttime="20170425 03:22:26.347"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.348" starttime="20170425 03:22:26.342"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.348" starttime="20170425 03:22:26.342"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:22:26.349" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170425 03:22:26.433" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 03:22:26.433" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170425 03:22:26.433" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 03:22:26.433" starttime="20170425 03:22:26.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.439" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.440" starttime="20170425 03:22:26.439"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.440" starttime="20170425 03:22:26.438"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.440" starttime="20170425 03:22:26.434"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.440" starttime="20170425 03:22:26.341"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.440" starttime="20170425 03:22:26.341"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.443" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.443" starttime="20170425 03:22:26.442"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.443" starttime="20170425 03:22:26.442"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.444" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.444" starttime="20170425 03:22:26.444"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.444" starttime="20170425 03:22:26.443"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.445" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.446" starttime="20170425 03:22:26.445"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.446" starttime="20170425 03:22:26.445"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.447" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.447" starttime="20170425 03:22:26.446"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.447" starttime="20170425 03:22:26.446"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.447" starttime="20170425 03:22:26.441"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.447" starttime="20170425 03:22:26.441"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:22:26.448" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170425 03:22:26.532" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 03:22:26.532" level="INFO">${stdout} = Linux witherspoon 4.7.10-08a5126be4b35613c3d2b6ad5e91400aa87798d9 #1 Tue Apr 25 03:04:39 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170425 03:22:26.532" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 03:22:26.532" starttime="20170425 03:22:26.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.539" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:26.539" starttime="20170425 03:22:26.538"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.539" starttime="20170425 03:22:26.538"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.539" starttime="20170425 03:22:26.533"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.539" starttime="20170425 03:22:26.440"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.539" starttime="20170425 03:22:26.440"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.539" starttime="20170425 03:22:26.241"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.539" starttime="20170425 03:22:26.240"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.539" starttime="20170425 03:22:26.239"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.539" starttime="20170425 03:22:24.776"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.539" starttime="20170425 03:22:23.121"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.539" starttime="20170425 03:22:23.121"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.539" starttime="20170425 03:22:23.120"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.540" starttime="20170425 03:22:23.120"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 03:22:26.543" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 03:22:26.543" starttime="20170425 03:22:26.542"></status>
</kw>
<msg timestamp="20170425 03:22:26.543" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 03:22:26.543" starttime="20170425 03:22:26.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:26.544" starttime="20170425 03:22:26.544"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.544" starttime="20170425 03:22:26.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:26.545" starttime="20170425 03:22:26.544"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 03:22:26.546" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 03:22:26.546" starttime="20170425 03:22:26.546"></status>
</kw>
<msg timestamp="20170425 03:22:26.546" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 03:22:26.546" starttime="20170425 03:22:26.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:26.548" starttime="20170425 03:22:26.548"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.548" starttime="20170425 03:22:26.547"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:26.548" starttime="20170425 03:22:26.546"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 03:22:26.549" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 03:22:28.194" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 03:22:28.194" starttime="20170425 03:22:26.548"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:28.195" starttime="20170425 03:22:26.541"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170425 03:22:28.195" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170425 03:22:28.195" starttime="20170425 03:22:28.195"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170425 03:22:28.197" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170425 03:22:28.197" starttime="20170425 03:22:28.197"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 03:22:28.198" level="INFO">${logpath} = 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_elog.txt</msg>
<status status="PASS" endtime="20170425 03:22:28.198" starttime="20170425 03:22:28.197"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:22:28.200" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:22:28.200" starttime="20170425 03:22:28.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:22:28.201" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:22:28.201" starttime="20170425 03:22:28.200"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:22:28.202" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:22:28.204" starttime="20170425 03:22:28.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:22:28.205" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:22:28.205" starttime="20170425 03:22:28.205"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:22:28.389" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:22:28.389" starttime="20170425 03:22:28.206"></status>
</kw>
<msg timestamp="20170425 03:22:28.389" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:22:28.389" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:28.389" starttime="20170425 03:22:28.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:22:28.390" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:28.391" starttime="20170425 03:22:28.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:28.391" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:28.391" starttime="20170425 03:22:28.391"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:28.391" starttime="20170425 03:22:28.199"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:22:28.392" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170425 03:22:28.392" starttime="20170425 03:22:28.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:28.393" starttime="20170425 03:22:28.392"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:22:28.437" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None </msg>
<msg timestamp="20170425 03:22:28.437" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:28.437" starttime="20170425 03:22:28.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:28.438" starttime="20170425 03:22:28.437"></status>
</kw>
<msg timestamp="20170425 03:22:28.438" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:28.438" starttime="20170425 03:22:28.198"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:28.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170425 03:22:28.439" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170425 03:22:28.439" starttime="20170425 03:22:28.439"></status>
</kw>
<msg timestamp="20170425 03:22:28.439" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 03:22:28.439" starttime="20170425 03:22:28.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170425 03:22:28.440" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170425 03:22:28.440" starttime="20170425 03:22:28.440"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:28.441" starttime="20170425 03:22:28.440"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:28.441" starttime="20170425 03:22:28.197"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 03:22:28.441" level="INFO">${logpath} = 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170425 03:22:28.441" starttime="20170425 03:22:28.441"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:22:28.443" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:22:28.444" starttime="20170425 03:22:28.443"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:22:28.444" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:22:28.444" starttime="20170425 03:22:28.444"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:22:28.445" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:22:28.445" starttime="20170425 03:22:28.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:22:28.446" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:22:28.446" starttime="20170425 03:22:28.445"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:22:28.629" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:22:28.629" starttime="20170425 03:22:28.446"></status>
</kw>
<msg timestamp="20170425 03:22:28.630" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:22:28.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:28.630" starttime="20170425 03:22:28.446"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:22:28.630" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:28.630" starttime="20170425 03:22:28.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:28.631" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:28.631" starttime="20170425 03:22:28.631"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:28.631" starttime="20170425 03:22:28.442"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:22:28.632" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170425 03:22:28.632" starttime="20170425 03:22:28.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:28.633" starttime="20170425 03:22:28.632"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:22:28.850" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg timestamp="20170425 03:22:28.850" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:28.850" starttime="20170425 03:22:28.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:28.851" starttime="20170425 03:22:28.851"></status>
</kw>
<msg timestamp="20170425 03:22:28.851" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:28.851" starttime="20170425 03:22:28.442"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:28.852" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:28.852" starttime="20170425 03:22:28.852"></status>
</kw>
<msg timestamp="20170425 03:22:28.852" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170425 03:22:28.852" starttime="20170425 03:22:28.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:28.853" starttime="20170425 03:22:28.853"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170425 03:22:28.854" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 03:22:28.854" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170425 03:22:28.854" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170425 03:22:28.854" starttime="20170425 03:22:28.853"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:28.856" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_sensor_list.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:28.856" starttime="20170425 03:22:28.855"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:28.856" starttime="20170425 03:22:28.854"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:28.856" starttime="20170425 03:22:28.441"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 03:22:28.857" level="INFO">${logpath} = 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170425 03:22:28.857" starttime="20170425 03:22:28.856"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:22:28.858" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:22:28.859" starttime="20170425 03:22:28.858"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:22:28.860" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:22:28.860" starttime="20170425 03:22:28.859"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:22:28.860" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:22:28.860" starttime="20170425 03:22:28.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:22:28.861" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:22:28.861" starttime="20170425 03:22:28.860"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.038" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:22:29.039" starttime="20170425 03:22:28.862"></status>
</kw>
<msg timestamp="20170425 03:22:29.039" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:22:29.039" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.039" starttime="20170425 03:22:28.861"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.039" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.040" starttime="20170425 03:22:29.039"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.040" starttime="20170425 03:22:29.040"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.040" starttime="20170425 03:22:28.857"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:22:29.041" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170425 03:22:29.041" starttime="20170425 03:22:29.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:29.042" starttime="20170425 03:22:29.041"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:22:29.193" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None </msg>
<msg timestamp="20170425 03:22:29.193" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.193" starttime="20170425 03:22:29.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:29.194" starttime="20170425 03:22:29.193"></status>
</kw>
<msg timestamp="20170425 03:22:29.194" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.194" starttime="20170425 03:22:28.857"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.195" starttime="20170425 03:22:29.195"></status>
</kw>
<msg timestamp="20170425 03:22:29.195" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170425 03:22:29.195" starttime="20170425 03:22:29.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:29.196" starttime="20170425 03:22:29.196"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170425 03:22:29.197" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 03:22:29.197" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170425 03:22:29.197" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc":...</msg>
<status status="PASS" endtime="20170425 03:22:29.197" starttime="20170425 03:22:29.196"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.199" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_inventory.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:29.199" starttime="20170425 03:22:29.198"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.199" starttime="20170425 03:22:29.197"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.199" starttime="20170425 03:22:28.856"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 03:22:29.200" level="INFO">${logpath} = 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_led.txt</msg>
<status status="PASS" endtime="20170425 03:22:29.200" starttime="20170425 03:22:29.199"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:22:29.201" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:22:29.202" starttime="20170425 03:22:29.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:22:29.203" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:22:29.203" starttime="20170425 03:22:29.202"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:22:29.203" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:22:29.203" starttime="20170425 03:22:29.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:22:29.204" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:22:29.204" starttime="20170425 03:22:29.203"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.379" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:22:29.379" starttime="20170425 03:22:29.205"></status>
</kw>
<msg timestamp="20170425 03:22:29.379" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:22:29.379" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.379" starttime="20170425 03:22:29.204"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.380" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.380" starttime="20170425 03:22:29.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.380" starttime="20170425 03:22:29.380"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.381" starttime="20170425 03:22:29.200"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:22:29.381" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170425 03:22:29.381" starttime="20170425 03:22:29.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:29.382" starttime="20170425 03:22:29.381"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:22:29.463" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg timestamp="20170425 03:22:29.463" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.463" starttime="20170425 03:22:29.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:29.464" starttime="20170425 03:22:29.464"></status>
</kw>
<msg timestamp="20170425 03:22:29.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.464" starttime="20170425 03:22:29.200"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.465" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.466" starttime="20170425 03:22:29.465"></status>
</kw>
<msg timestamp="20170425 03:22:29.466" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170425 03:22:29.466" starttime="20170425 03:22:29.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:29.466" starttime="20170425 03:22:29.466"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170425 03:22:29.467" level="INFO">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 03:22:29.467" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170425 03:22:29.467" level="INFO">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 03:22:29.467" starttime="20170425 03:22:29.466"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.468" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_led.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:29.469" starttime="20170425 03:22:29.468"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.469" starttime="20170425 03:22:29.467"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.469" starttime="20170425 03:22:29.199"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 03:22:29.469" level="INFO">${logpath} = 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170425 03:22:29.470" starttime="20170425 03:22:29.469"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:22:29.472" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:22:29.472" starttime="20170425 03:22:29.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:22:29.473" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:22:29.473" starttime="20170425 03:22:29.473"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:22:29.474" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:22:29.474" starttime="20170425 03:22:29.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:22:29.475" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:22:29.475" starttime="20170425 03:22:29.475"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.656" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:22:29.656" starttime="20170425 03:22:29.476"></status>
</kw>
<msg timestamp="20170425 03:22:29.656" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:22:29.657" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.657" starttime="20170425 03:22:29.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.657" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.657" starttime="20170425 03:22:29.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.658" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.658" starttime="20170425 03:22:29.658"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.658" starttime="20170425 03:22:29.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:22:29.659" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170425 03:22:29.659" starttime="20170425 03:22:29.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:29.659" starttime="20170425 03:22:29.659"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:22:29.703" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg timestamp="20170425 03:22:29.703" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.703" starttime="20170425 03:22:29.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:29.704" starttime="20170425 03:22:29.703"></status>
</kw>
<msg timestamp="20170425 03:22:29.704" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:29.704" starttime="20170425 03:22:29.470"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.705" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170425 03:22:29.705" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170425 03:22:29.705" starttime="20170425 03:22:29.705"></status>
</kw>
<msg timestamp="20170425 03:22:29.705" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 03:22:29.705" starttime="20170425 03:22:29.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170425 03:22:29.706" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170425 03:22:29.706" starttime="20170425 03:22:29.706"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.706" starttime="20170425 03:22:29.706"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.706" starttime="20170425 03:22:29.469"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.706" starttime="20170425 03:22:28.197"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.707" starttime="20170425 03:22:28.196"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.707" starttime="20170425 03:22:28.195"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.707" starttime="20170425 03:22:28.195"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.707" starttime="20170425 03:22:26.541"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.707" starttime="20170425 03:22:26.540"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.707" starttime="20170425 03:22:26.540"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.707" starttime="20170425 03:22:26.540"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 03:22:29.711" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 03:22:29.711" starttime="20170425 03:22:29.710"></status>
</kw>
<msg timestamp="20170425 03:22:29.711" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 03:22:29.711" starttime="20170425 03:22:29.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:29.712" starttime="20170425 03:22:29.712"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.713" starttime="20170425 03:22:29.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:29.714" starttime="20170425 03:22:29.713"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 03:22:29.715" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 03:22:29.715" starttime="20170425 03:22:29.714"></status>
</kw>
<msg timestamp="20170425 03:22:29.715" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 03:22:29.715" starttime="20170425 03:22:29.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:29.718" starttime="20170425 03:22:29.717"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.718" starttime="20170425 03:22:29.717"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:29.718" starttime="20170425 03:22:29.716"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 03:22:29.719" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 03:22:31.365" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 03:22:31.365" starttime="20170425 03:22:29.719"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:31.365" starttime="20170425 03:22:29.709"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170425 03:22:31.366" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170425 03:22:31.412" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170425 03:22:31.412" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170425 03:22:31.412" starttime="20170425 03:22:31.365"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170425 03:22:31.413" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170425 03:22:31.413" starttime="20170425 03:22:31.412"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:31.414" starttime="20170425 03:22:31.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:32.050" starttime="20170425 03:22:31.415"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:32.050" starttime="20170425 03:22:31.415"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:32.050" starttime="20170425 03:22:31.413"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170425 03:22:32.050" starttime="20170425 03:22:32.050"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:32.050" starttime="20170425 03:22:29.708"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:32.050" starttime="20170425 03:22:29.708"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:32.051" starttime="20170425 03:22:29.707"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:32.051" starttime="20170425 03:22:29.707"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 03:22:32.054" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 03:22:32.054" starttime="20170425 03:22:32.054"></status>
</kw>
<msg timestamp="20170425 03:22:32.054" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 03:22:32.054" starttime="20170425 03:22:32.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:32.055" starttime="20170425 03:22:32.055"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:32.055" starttime="20170425 03:22:32.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:32.056" starttime="20170425 03:22:32.056"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 03:22:32.057" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 03:22:32.057" starttime="20170425 03:22:32.057"></status>
</kw>
<msg timestamp="20170425 03:22:32.057" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 03:22:32.057" starttime="20170425 03:22:32.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:32.059" starttime="20170425 03:22:32.059"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:32.059" starttime="20170425 03:22:32.058"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:32.059" starttime="20170425 03:22:32.058"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 03:22:32.060" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 03:22:33.668" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 03:22:33.668" starttime="20170425 03:22:32.059"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:33.669" starttime="20170425 03:22:32.052"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170425 03:22:33.669" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170425 03:22:33.669" starttime="20170425 03:22:33.669"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>echo ${OPENBMC_HOST} | sed 's/\(\.\)/\\\1/g'</arg>
</arguments>
<assign>
<var>${OPENBMC_HOST_REGEX}</var>
</assign>
<msg timestamp="20170425 03:22:33.675" level="INFO">Running command 'echo 9.3.86.161 | sed 's/(.)/\1/g' 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 03:22:33.681" level="INFO">${OPENBMC_HOST_REGEX} = sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS</msg>
<status status="PASS" endtime="20170425 03:22:33.682" starttime="20170425 03:22:33.670"></status>
</kw>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170425 03:22:33.697" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170425 03:22:33.697" starttime="20170425 03:22:33.694"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 03:22:33.699" level="INFO">${logpath} = 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170425 03:22:33.699" starttime="20170425 03:22:33.698"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:33.705" starttime="20170425 03:22:33.705"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:22:33.706" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170425 03:22:33.976" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 03:22:33.977" level="INFO">${stdout} = Mem: 176080K used, 256852K free, 47124K shrd, 10316K buff, 81032K cached
CPU:   0% usr  18% sys   0% nic  81% idle   0% io   0% irq   0% sirq
Load average: 2.66 1.69 0.68 1/136 1000
  PID  PPID USER  ...</msg>
<msg timestamp="20170425 03:22:33.977" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 03:22:33.977" starttime="20170425 03:22:33.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:33.986" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_proc_list.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:33.986" starttime="20170425 03:22:33.985"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:33.986" starttime="20170425 03:22:33.984"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:33.986" starttime="20170425 03:22:33.977"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:33.987" starttime="20170425 03:22:33.700"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170425 03:22:33.991" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_proc_list.txt 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20170425 03:22:33.994" starttime="20170425 03:22:33.987"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:33.994" starttime="20170425 03:22:33.698"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 03:22:33.998" level="INFO">${logpath} = 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170425 03:22:33.998" starttime="20170425 03:22:33.997"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:34.000" starttime="20170425 03:22:34.000"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:22:34.001" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170425 03:22:34.112" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 03:22:34.113" level="INFO">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-08a5126be4b35613c3d2b6ad5e91400aa87798d9 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Tue Apr 25 03:04:39 UTC 2017
CPU: ARMv6-compati...</msg>
<msg timestamp="20170425 03:22:34.113" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 03:22:34.113" starttime="20170425 03:22:34.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:34.121" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_dmesg.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:34.121" starttime="20170425 03:22:34.121"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:34.122" starttime="20170425 03:22:34.120"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:34.122" starttime="20170425 03:22:34.113"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:34.122" starttime="20170425 03:22:33.998"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170425 03:22:34.125" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_dmesg.txt 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20170425 03:22:34.128" starttime="20170425 03:22:34.122"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:34.128" starttime="20170425 03:22:33.995"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 03:22:34.131" level="INFO">${logpath} = 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170425 03:22:34.131" starttime="20170425 03:22:34.130"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:34.134" starttime="20170425 03:22:34.133"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:22:34.135" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170425 03:22:34.192" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 03:22:34.193" level="INFO">${stdout} = MemTotal:         432932 kB
MemFree:          256852 kB
MemAvailable:     296808 kB
Buffers:           10316 kB
Cached:            81036 kB
SwapCached:            0 kB
Active:            95432 kB
Inac...</msg>
<msg timestamp="20170425 03:22:34.193" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 03:22:34.193" starttime="20170425 03:22:34.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:34.199" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_meminfo.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:34.199" starttime="20170425 03:22:34.199"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:34.199" starttime="20170425 03:22:34.198"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:34.200" starttime="20170425 03:22:34.193"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:34.200" starttime="20170425 03:22:34.132"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170425 03:22:34.203" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_meminfo.txt 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20170425 03:22:34.206" starttime="20170425 03:22:34.200"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:34.206" starttime="20170425 03:22:34.129"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 03:22:34.209" level="INFO">${logpath} = 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170425 03:22:34.209" starttime="20170425 03:22:34.208"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:34.212" starttime="20170425 03:22:34.211"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:22:34.213" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170425 03:22:34.261" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 03:22:34.261" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170425 03:22:34.261" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 03:22:34.261" starttime="20170425 03:22:34.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:34.268" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_procinfo.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:34.268" starttime="20170425 03:22:34.267"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:34.268" starttime="20170425 03:22:34.267"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:34.268" starttime="20170425 03:22:34.262"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:34.268" starttime="20170425 03:22:34.210"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170425 03:22:34.272" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_procinfo.txt 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20170425 03:22:34.274" starttime="20170425 03:22:34.269"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:34.274" starttime="20170425 03:22:34.206"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170425 03:22:34.278" level="INFO">${logpath} = 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170425 03:22:34.278" starttime="20170425 03:22:34.277"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:34.280" starttime="20170425 03:22:34.279"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 03:22:34.280" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170425 03:22:35.201" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 03:22:35.202" level="INFO">${stdout} = -- Logs begin at Tue 2017-04-25 03:20:05 UTC, end at Tue 2017-04-25 03:22:35 UTC. --
Apr 25 03:20:05 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 25 03:20:05 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170425 03:22:35.202" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 03:22:35.202" starttime="20170425 03:22:34.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170425 03:22:35.209" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_journalctl.txt"&gt;/home/fspcibld/20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:35.210" starttime="20170425 03:22:35.209"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.210" starttime="20170425 03:22:35.207"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.210" starttime="20170425 03:22:35.202"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.210" starttime="20170425 03:22:34.278"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170425 03:22:35.213" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' 20170425032221329142_TestBiosUpdate/20170425032221329142_HostBIOSUpdateAndBoot/20170425032221329142_BMC_journalctl.txt 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20170425 03:22:35.216" starttime="20170425 03:22:35.210"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.216" starttime="20170425 03:22:34.275"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.216" starttime="20170425 03:22:33.698"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.217" starttime="20170425 03:22:33.670"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.217" starttime="20170425 03:22:33.670"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.217" starttime="20170425 03:22:33.669"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.217" starttime="20170425 03:22:32.052"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.217" starttime="20170425 03:22:32.052"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.217" starttime="20170425 03:22:32.051"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.218" starttime="20170425 03:22:32.051"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 03:22:35.225" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 03:22:35.226" starttime="20170425 03:22:35.224"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 03:22:35.227" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 03:22:35.227" starttime="20170425 03:22:35.226"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 03:22:35.228" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 03:22:35.228" starttime="20170425 03:22:35.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 03:22:35.229" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 03:22:35.229" starttime="20170425 03:22:35.228"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 03:22:35.416" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 03:22:35.416" starttime="20170425 03:22:35.230"></status>
</kw>
<msg timestamp="20170425 03:22:35.416" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 03:22:35.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:35.416" starttime="20170425 03:22:35.229"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 03:22:35.417" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:35.417" starttime="20170425 03:22:35.416"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:35.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 03:22:35.418" starttime="20170425 03:22:35.417"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.418" starttime="20170425 03:22:35.223"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 03:22:35.418" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170425 03:22:35.418" starttime="20170425 03:22:35.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:35.419" starttime="20170425 03:22:35.419"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 03:22:35.462" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None </msg>
<msg timestamp="20170425 03:22:35.463" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:35.463" starttime="20170425 03:22:35.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:35.463" starttime="20170425 03:22:35.463"></status>
</kw>
<msg timestamp="20170425 03:22:35.463" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170425 03:22:35.463" starttime="20170425 03:22:35.222"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 03:22:35.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170425 03:22:35.465" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170425 03:22:35.465" starttime="20170425 03:22:35.464"></status>
</kw>
<msg timestamp="20170425 03:22:35.465" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 03:22:35.465" starttime="20170425 03:22:35.464"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170425 03:22:35.466" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170425 03:22:35.466" starttime="20170425 03:22:35.465"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.466" starttime="20170425 03:22:35.221"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.466" starttime="20170425 03:22:35.221"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.466" starttime="20170425 03:22:35.219"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.466" starttime="20170425 03:22:35.218"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170425 03:22:35.468" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170425 03:22:35.469" starttime="20170425 03:22:35.468"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.469" starttime="20170425 03:22:35.467"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.469" starttime="20170425 03:22:35.467"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.469" starttime="20170425 03:22:35.466"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.469" starttime="20170425 03:22:35.466"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.469" starttime="20170425 03:22:23.120"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.469" starttime="20170425 03:22:23.119"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.469" starttime="20170425 03:22:23.119"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.469" starttime="20170425 03:22:23.119"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170425 03:22:35.736" starttime="20170425 03:22:35.469"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.737" starttime="20170425 03:22:23.118"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.737" starttime="20170425 03:22:16.673"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.737" starttime="20170425 03:22:16.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:35.738" starttime="20170425 03:22:35.738"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170425 03:22:35.739" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170425 03:22:35.739" starttime="20170425 03:22:35.739"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170425 03:22:35.740" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170425 03:22:35.740" starttime="20170425 03:22:35.740"></status>
</kw>
<msg timestamp="20170425 03:22:35.740" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170425 03:22:35.740" starttime="20170425 03:22:35.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170425 03:22:35.741" starttime="20170425 03:22:35.740"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170425 03:22:35.742" level="INFO">${cur_time} = 2017-04-25 03:22:35:741525</msg>
<status status="PASS" endtime="20170425 03:22:35.742" starttime="20170425 03:22:35.741"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170425 03:22:35.742" level="INFO">${cur_time} = 20170425032235741525</msg>
<status status="PASS" endtime="20170425 03:22:35.742" starttime="20170425 03:22:35.742"></status>
</kw>
<msg timestamp="20170425 03:22:35.743" level="INFO">${cur_time} = 20170425032235741525</msg>
<status status="PASS" endtime="20170425 03:22:35.743" starttime="20170425 03:22:35.741"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170425 03:22:35.743" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 03:22:35.744" starttime="20170425 03:22:35.743"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.744" starttime="20170425 03:22:35.738"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.744" starttime="20170425 03:22:16.417"></status>
</kw>
<status status="PASS" endtime="20170425 03:22:35.744" starttime="20170425 03:22:16.411"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>Host_BIOS_Update_And_Boot</tag>
<tag>open-power</tag>
</tags>
<status status="FAIL" endtime="20170425 03:22:35.744" critical="yes" starttime="20170425 03:21:48.823">timeout</status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="FAIL" endtime="20170425 03:22:35.746" starttime="20170425 03:21:48.154"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Host_BIOS_Update_And_Boot</stat>
<stat fail="1" pass="0">open-power</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Test Bios Update" pass="0">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
