<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170805 04:38:20.901" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170805 04:38:21.981" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170805 04:38:21.981" starttime="20170805 04:38:21.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:21.982" starttime="20170805 04:38:21.981"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 04:38:21.985" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 04:38:21.986" starttime="20170805 04:38:21.985"></status>
</kw>
<msg timestamp="20170805 04:38:21.986" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 04:38:21.986" starttime="20170805 04:38:21.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:21.988" starttime="20170805 04:38:21.987"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:21.988" starttime="20170805 04:38:21.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:21.988" starttime="20170805 04:38:21.988"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 04:38:21.989" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 04:38:21.990" starttime="20170805 04:38:21.989"></status>
</kw>
<msg timestamp="20170805 04:38:21.990" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 04:38:21.990" starttime="20170805 04:38:21.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:21.992" starttime="20170805 04:38:21.991"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:21.992" starttime="20170805 04:38:21.991"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:21.992" starttime="20170805 04:38:21.990"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 04:38:21.992" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 04:38:23.657" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 04:38:23.657" starttime="20170805 04:38:21.992"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:23.657" starttime="20170805 04:38:21.984"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:38:23.658" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170805 04:38:23.735" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:38:23.735" level="INFO">${output} = 1501882614</msg>
<msg timestamp="20170805 04:38:23.735" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:38:23.735" starttime="20170805 04:38:23.658"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:38:23.736" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:38:23.736" starttime="20170805 04:38:23.735"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170805 04:38:23.736" level="INFO">${btime} = 1501882614</msg>
<status status="PASS" endtime="20170805 04:38:23.736" starttime="20170805 04:38:23.736"></status>
</kw>
<msg timestamp="20170805 04:38:23.737" level="INFO">${cur_btime} = 1501882614</msg>
<status status="PASS" endtime="20170805 04:38:23.737" starttime="20170805 04:38:21.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170805 04:38:23.738" level="INFO">${BOOT_TIME} = 1501882614</msg>
<status status="PASS" endtime="20170805 04:38:23.738" starttime="20170805 04:38:23.738"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:23.738" starttime="20170805 04:38:23.737"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:23.739" starttime="20170805 04:38:21.983"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:23.739" starttime="20170805 04:38:23.739"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:23.740" starttime="20170805 04:38:23.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:23.741" starttime="20170805 04:38:23.740"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:23.741" starttime="20170805 04:38:21.983"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 04:38:23.744" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 04:38:23.744" starttime="20170805 04:38:23.743"></status>
</kw>
<msg timestamp="20170805 04:38:23.744" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 04:38:23.744" starttime="20170805 04:38:23.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:23.745" starttime="20170805 04:38:23.745"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:23.745" starttime="20170805 04:38:23.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:23.746" starttime="20170805 04:38:23.745"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 04:38:23.747" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 04:38:23.747" starttime="20170805 04:38:23.747"></status>
</kw>
<msg timestamp="20170805 04:38:23.747" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 04:38:23.747" starttime="20170805 04:38:23.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:23.749" starttime="20170805 04:38:23.749"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:23.749" starttime="20170805 04:38:23.748"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:23.749" starttime="20170805 04:38:23.748"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 04:38:23.750" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 04:38:25.459" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 04:38:25.459" starttime="20170805 04:38:23.749"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:25.459" starttime="20170805 04:38:23.741"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 04:38:25.460" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170805 04:38:25.537" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:38:25.537" level="INFO">${output} = </msg>
<msg timestamp="20170805 04:38:25.537" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/cc6e1404d87444e8a089dfdb00a18f7d.</msg>
<msg timestamp="20170805 04:38:25.537" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170805 04:38:25.537" starttime="20170805 04:38:25.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:25.538" starttime="20170805 04:38:25.537"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:25.538" starttime="20170805 04:38:23.741"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170805 04:38:25.540" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170805 04:38:25.540" starttime="20170805 04:38:25.540"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:38:25.541" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170805 04:38:25.541" starttime="20170805 04:38:25.541"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:38:25.544" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:38:25.545" starttime="20170805 04:38:25.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:38:25.546" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:38:25.546" starttime="20170805 04:38:25.545"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:38:25.547" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:38:25.547" starttime="20170805 04:38:25.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:38:25.547" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:38:25.547" starttime="20170805 04:38:25.547"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:38:25.749" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:38:25.749" starttime="20170805 04:38:25.548"></status>
</kw>
<msg timestamp="20170805 04:38:25.749" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:38:25.749" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:25.749" starttime="20170805 04:38:25.548"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:38:25.750" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:25.750" starttime="20170805 04:38:25.750"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:38:25.751" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:25.751" starttime="20170805 04:38:25.751"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:25.751" starttime="20170805 04:38:25.543"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:25.751" starttime="20170805 04:38:25.543"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:25.751" starttime="20170805 04:38:25.542"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:38:25.752" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170805 04:38:25.752" starttime="20170805 04:38:25.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:38:25.753" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:38:25.753" starttime="20170805 04:38:25.752"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:25.753" starttime="20170805 04:38:25.753"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:38:25.755" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170805 04:38:25.755" starttime="20170805 04:38:25.755"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:38:25.756" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:38:25.757" starttime="20170805 04:38:25.756"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:25.757" starttime="20170805 04:38:25.755"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:25.757" starttime="20170805 04:38:25.753"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:38:25.942" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 04:38:25.942" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:25.942" starttime="20170805 04:38:25.757"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:38:25.943" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:38:25.944" starttime="20170805 04:38:25.943"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:38:25.944" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:38:25.945" starttime="20170805 04:38:25.944"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:25.945" starttime="20170805 04:38:25.944"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:25.945" starttime="20170805 04:38:25.942"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:38:25.945" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:38:25.945" starttime="20170805 04:38:25.945"></status>
</kw>
<msg timestamp="20170805 04:38:25.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:25.946" starttime="20170805 04:38:25.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:38:25.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:25.947" starttime="20170805 04:38:25.946"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 04:38:25.947" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:38:25.947" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:38:25.947" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 04:38:25.947" starttime="20170805 04:38:25.947"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:25.947" starttime="20170805 04:38:25.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:25.948" starttime="20170805 04:38:25.948"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:38:25.953" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:38:25.954" starttime="20170805 04:38:25.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:38:25.954" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:38:25.955" starttime="20170805 04:38:25.954"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:38:25.955" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:38:25.955" starttime="20170805 04:38:25.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:38:25.956" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:38:25.957" starttime="20170805 04:38:25.956"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:38:26.546" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:38:26.546" starttime="20170805 04:38:25.957"></status>
</kw>
<msg timestamp="20170805 04:38:26.546" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:38:26.546" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:26.546" starttime="20170805 04:38:25.957"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:38:26.547" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:26.547" starttime="20170805 04:38:26.547"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:38:26.548" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:26.548" starttime="20170805 04:38:26.547"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:26.548" starttime="20170805 04:38:25.952"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:26.548" starttime="20170805 04:38:25.952"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:26.548" starttime="20170805 04:38:25.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:38:26.549" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170805 04:38:26.549" starttime="20170805 04:38:26.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:26.549" starttime="20170805 04:38:26.549"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:38:26.707" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170805 04:38:26.707" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:26.707" starttime="20170805 04:38:26.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:26.708" starttime="20170805 04:38:26.707"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:38:26.708" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:38:26.708" starttime="20170805 04:38:26.708"></status>
</kw>
<msg timestamp="20170805 04:38:26.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:26.709" starttime="20170805 04:38:25.951"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:38:26.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:26.709" starttime="20170805 04:38:26.709"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:38:26.710" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:38:26.710" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:38:26.710" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170805 04:38:26.710" starttime="20170805 04:38:26.710"></status>
</kw>
<msg timestamp="20170805 04:38:26.710" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170805 04:38:26.710" starttime="20170805 04:38:25.950"></status>
</kw>
<msg timestamp="20170805 04:38:26.711" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170805 04:38:26.711" starttime="20170805 04:38:25.950"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:26.711" starttime="20170805 04:38:26.711"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:26.711" starttime="20170805 04:38:25.949"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:38:26.716" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:38:26.717" starttime="20170805 04:38:26.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:38:26.717" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:38:26.717" starttime="20170805 04:38:26.717"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:38:26.718" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:38:26.718" starttime="20170805 04:38:26.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:38:26.719" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:38:26.719" starttime="20170805 04:38:26.718"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:38:27.052" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:38:27.052" starttime="20170805 04:38:26.719"></status>
</kw>
<msg timestamp="20170805 04:38:27.052" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:38:27.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.052" starttime="20170805 04:38:26.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:38:27.053" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.053" starttime="20170805 04:38:27.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:38:27.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.053" starttime="20170805 04:38:27.053"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.054" starttime="20170805 04:38:26.715"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.054" starttime="20170805 04:38:26.714"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.054" starttime="20170805 04:38:26.713"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:38:27.054" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170805 04:38:27.054" starttime="20170805 04:38:27.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:27.055" starttime="20170805 04:38:27.055"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:38:27.278" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170805 04:38:27.278" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.278" starttime="20170805 04:38:27.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:27.279" starttime="20170805 04:38:27.279"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:38:27.279" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:38:27.280" starttime="20170805 04:38:27.279"></status>
</kw>
<msg timestamp="20170805 04:38:27.280" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.280" starttime="20170805 04:38:26.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:38:27.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.281" starttime="20170805 04:38:27.280"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:38:27.281" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:38:27.281" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:38:27.281" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170805 04:38:27.281" starttime="20170805 04:38:27.281"></status>
</kw>
<msg timestamp="20170805 04:38:27.282" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 04:38:27.282" starttime="20170805 04:38:26.712"></status>
</kw>
<msg timestamp="20170805 04:38:27.282" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170805 04:38:27.282" starttime="20170805 04:38:26.712"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:27.283" starttime="20170805 04:38:27.282"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.283" starttime="20170805 04:38:25.949"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.283" starttime="20170805 04:38:25.948"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.283" starttime="20170805 04:38:25.539"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.283" starttime="20170805 04:38:25.539"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.283" starttime="20170805 04:38:25.538"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170805 04:38:27.284" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170805 04:38:27.284" starttime="20170805 04:38:27.284"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:38:27.285" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170805 04:38:27.285" starttime="20170805 04:38:27.285"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:38:27.288" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:38:27.289" starttime="20170805 04:38:27.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:38:27.290" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:38:27.290" starttime="20170805 04:38:27.289"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:38:27.290" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:38:27.290" starttime="20170805 04:38:27.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:38:27.291" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:38:27.291" starttime="20170805 04:38:27.291"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:38:27.491" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:38:27.492" starttime="20170805 04:38:27.292"></status>
</kw>
<msg timestamp="20170805 04:38:27.492" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:38:27.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.492" starttime="20170805 04:38:27.291"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:38:27.493" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.493" starttime="20170805 04:38:27.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:38:27.493" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.493" starttime="20170805 04:38:27.493"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.494" starttime="20170805 04:38:27.287"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.494" starttime="20170805 04:38:27.287"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.494" starttime="20170805 04:38:27.286"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:38:27.494" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170805 04:38:27.494" starttime="20170805 04:38:27.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:38:27.495" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:38:27.495" starttime="20170805 04:38:27.495"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:27.496" starttime="20170805 04:38:27.495"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:38:27.497" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:38:27.497" starttime="20170805 04:38:27.497"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:38:27.498" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:38:27.498" starttime="20170805 04:38:27.498"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.498" starttime="20170805 04:38:27.497"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.499" starttime="20170805 04:38:27.496"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:38:27.747" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 04:38:27.747" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.747" starttime="20170805 04:38:27.499"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:38:27.748" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:38:27.748" starttime="20170805 04:38:27.748"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:38:27.749" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:38:27.749" starttime="20170805 04:38:27.749"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.749" starttime="20170805 04:38:27.748"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.750" starttime="20170805 04:38:27.747"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:38:27.750" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:38:27.750" starttime="20170805 04:38:27.750"></status>
</kw>
<msg timestamp="20170805 04:38:27.750" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.750" starttime="20170805 04:38:27.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:38:27.751" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.751" starttime="20170805 04:38:27.751"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 04:38:27.752" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:38:27.752" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:38:27.752" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 04:38:27.752" starttime="20170805 04:38:27.751"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.752" starttime="20170805 04:38:27.284"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:38:27.758" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:38:27.758" starttime="20170805 04:38:27.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:38:27.759" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:38:27.759" starttime="20170805 04:38:27.759"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:38:27.760" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:38:27.760" starttime="20170805 04:38:27.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:38:27.761" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:38:27.761" starttime="20170805 04:38:27.761"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:38:27.966" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:38:27.966" starttime="20170805 04:38:27.762"></status>
</kw>
<msg timestamp="20170805 04:38:27.966" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:38:27.967" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.967" starttime="20170805 04:38:27.761"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:38:27.968" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.968" starttime="20170805 04:38:27.967"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:38:27.968" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:27.968" starttime="20170805 04:38:27.968"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.969" starttime="20170805 04:38:27.757"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.969" starttime="20170805 04:38:27.757"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:27.969" starttime="20170805 04:38:27.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:38:27.969" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170805 04:38:27.969" starttime="20170805 04:38:27.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:27.970" starttime="20170805 04:38:27.970"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:38:28.055" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170805 04:38:28.055" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:28.055" starttime="20170805 04:38:27.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:28.055" starttime="20170805 04:38:28.055"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:38:28.056" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:38:28.056" starttime="20170805 04:38:28.056"></status>
</kw>
<msg timestamp="20170805 04:38:28.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:28.056" starttime="20170805 04:38:27.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:38:28.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:28.057" starttime="20170805 04:38:28.057"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:38:28.058" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:38:28.058" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:38:28.058" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170805 04:38:28.058" starttime="20170805 04:38:28.057"></status>
</kw>
<msg timestamp="20170805 04:38:28.058" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170805 04:38:28.058" starttime="20170805 04:38:27.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:28.059" starttime="20170805 04:38:28.058"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:28.059" starttime="20170805 04:38:27.283"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:38:28.060" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170805 04:38:28.060" starttime="20170805 04:38:28.059"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:38:28.063" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:38:28.063" starttime="20170805 04:38:28.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:38:28.064" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:38:28.064" starttime="20170805 04:38:28.064"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:38:28.065" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:38:28.065" starttime="20170805 04:38:28.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:38:28.065" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:38:28.065" starttime="20170805 04:38:28.065"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:38:28.271" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:38:28.271" starttime="20170805 04:38:28.066"></status>
</kw>
<msg timestamp="20170805 04:38:28.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:38:28.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:28.271" starttime="20170805 04:38:28.066"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:38:28.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:28.272" starttime="20170805 04:38:28.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:38:28.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:28.273" starttime="20170805 04:38:28.272"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:28.273" starttime="20170805 04:38:28.062"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:28.273" starttime="20170805 04:38:28.061"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:28.273" starttime="20170805 04:38:28.061"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:38:28.274" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170805 04:38:28.274" starttime="20170805 04:38:28.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:38:28.274" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:38:28.274" starttime="20170805 04:38:28.274"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:28.275" starttime="20170805 04:38:28.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:28.276" starttime="20170805 04:38:28.275"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:38:28.665" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170805 04:38:28.665" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:28.665" starttime="20170805 04:38:28.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:28.666" starttime="20170805 04:38:28.666"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:38:28.667" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:38:28.667" starttime="20170805 04:38:28.667"></status>
</kw>
<msg timestamp="20170805 04:38:28.667" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:38:28.667" starttime="20170805 04:38:28.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:38:28.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:38:28.668" starttime="20170805 04:38:28.667"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170805 04:38:38.668" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170805 04:38:38.669" starttime="20170805 04:38:28.668"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:38.669" starttime="20170805 04:38:28.059"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:38:38.672" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170805 04:38:38.672" starttime="20170805 04:38:38.672"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:38:38.678" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:38:41.689" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 04:38:41.689" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.751 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.589 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170805 04:38:41.689" starttime="20170805 04:38:38.673"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:38:41.691" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.751 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.589 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.572 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=6.21 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.572/2.032/6.219/2.418 ms</msg>
<status status="PASS" endtime="20170805 04:38:41.691" starttime="20170805 04:38:41.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:41.692" starttime="20170805 04:38:41.692"></status>
</kw>
<status status="PASS" endtime="20170805 04:38:41.692" starttime="20170805 04:38:38.671"></status>
</kw>
<msg timestamp="20170805 04:38:41.693" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170805 04:38:41.693" starttime="20170805 04:38:38.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 04:38:41.693" starttime="20170805 04:38:41.693"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:38:41.696" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:38:41.697" starttime="20170805 04:38:41.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:38:41.698" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:38:41.698" starttime="20170805 04:38:41.697"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:38:41.698" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:38:41.698" starttime="20170805 04:38:41.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:38:41.699" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:38:41.699" starttime="20170805 04:38:41.699"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:38:42.867" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170805 04:38:42.868" starttime="20170805 04:38:41.700"></status>
</kw>
<msg timestamp="20170805 04:38:42.868" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 04:38:42.868" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170805 04:38:42.868" starttime="20170805 04:38:41.699"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:38:42.869" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:38:42.869" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 04:38:42.869" starttime="20170805 04:38:42.868"></status>
</kw>
<status status="FAIL" endtime="20170805 04:38:42.869" starttime="20170805 04:38:41.695"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:39:02.871" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:39:02.871" starttime="20170805 04:39:02.871"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:39:02.872" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:39:02.872" starttime="20170805 04:39:02.872"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:39:02.873" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:39:02.873" starttime="20170805 04:39:02.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:39:02.873" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:39:02.873" starttime="20170805 04:39:02.873"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:39:22.897" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff988b2910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 04:39:43.119" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff988b2390&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 04:40:10.172" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170805 04:40:10.172" starttime="20170805 04:39:02.874"></status>
</kw>
<msg timestamp="20170805 04:40:10.172" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 04:40:10.172" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170805 04:40:10.172" starttime="20170805 04:39:02.874"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:40:10.173" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:40:10.173" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 04:40:10.173" starttime="20170805 04:40:10.173"></status>
</kw>
<status status="FAIL" endtime="20170805 04:40:10.173" starttime="20170805 04:39:02.869"></status>
</kw>
<msg timestamp="20170805 04:40:10.174" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 04:40:10.174" starttime="20170805 04:38:41.695"></status>
</kw>
<status status="FAIL" endtime="20170805 04:40:10.174" starttime="20170805 04:38:41.694"></status>
</kw>
<msg timestamp="20170805 04:40:10.174" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170805 04:40:10.174" starttime="20170805 04:38:41.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170805 04:40:10.175" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170805 04:40:10.175" starttime="20170805 04:40:10.175"></status>
</kw>
<status status="FAIL" endtime="20170805 04:40:10.175" starttime="20170805 04:40:10.174"></status>
</kw>
<status status="FAIL" endtime="20170805 04:40:10.175" starttime="20170805 04:38:38.670"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:40:20.178" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170805 04:40:20.178" starttime="20170805 04:40:20.178"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:40:20.192" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:40:23.192" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 04:40:23.192" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.737 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.584 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170805 04:40:23.192" starttime="20170805 04:40:20.178"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:40:23.210" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.737 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.584 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.624 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.641 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.584/0.646/0.737/0.061 ms</msg>
<status status="PASS" endtime="20170805 04:40:23.210" starttime="20170805 04:40:23.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:40:23.213" starttime="20170805 04:40:23.211"></status>
</kw>
<status status="PASS" endtime="20170805 04:40:23.213" starttime="20170805 04:40:20.177"></status>
</kw>
<msg timestamp="20170805 04:40:23.213" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170805 04:40:23.213" starttime="20170805 04:40:20.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 04:40:23.216" starttime="20170805 04:40:23.215"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:40:23.222" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:40:23.226" starttime="20170805 04:40:23.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:40:23.227" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:40:23.227" starttime="20170805 04:40:23.226"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:40:23.228" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:40:23.228" starttime="20170805 04:40:23.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:40:23.229" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:40:23.229" starttime="20170805 04:40:23.228"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:40:43.257" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170805 04:40:43.258" starttime="20170805 04:40:23.229"></status>
</kw>
<msg timestamp="20170805 04:40:43.258" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 04:40:43.258" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170805 04:40:43.258" starttime="20170805 04:40:23.229"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:40:43.259" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:40:43.259" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 04:40:43.259" starttime="20170805 04:40:43.258"></status>
</kw>
<status status="FAIL" endtime="20170805 04:40:43.259" starttime="20170805 04:40:23.220"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:41:03.262" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:41:03.262" starttime="20170805 04:41:03.261"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:41:03.263" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:41:03.263" starttime="20170805 04:41:03.263"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:41:03.264" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:41:03.264" starttime="20170805 04:41:03.263"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:41:03.264" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:41:03.264" starttime="20170805 04:41:03.264"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:41:03.455" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:41:03.456" starttime="20170805 04:41:03.265"></status>
</kw>
<msg timestamp="20170805 04:41:03.456" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:41:03.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:03.456" starttime="20170805 04:41:03.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:41:03.457" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:03.457" starttime="20170805 04:41:03.456"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:41:03.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:03.457" starttime="20170805 04:41:03.457"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:03.458" starttime="20170805 04:41:03.260"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:03.458" starttime="20170805 04:40:23.219"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:03.458" starttime="20170805 04:40:23.218"></status>
</kw>
<msg timestamp="20170805 04:41:03.458" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170805 04:41:03.458" starttime="20170805 04:40:23.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:03.459" starttime="20170805 04:41:03.458"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 04:41:03.460" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 04:41:03.460" starttime="20170805 04:41:03.460"></status>
</kw>
<msg timestamp="20170805 04:41:03.460" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 04:41:03.460" starttime="20170805 04:41:03.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:03.462" starttime="20170805 04:41:03.461"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:03.462" starttime="20170805 04:41:03.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:03.462" starttime="20170805 04:41:03.462"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 04:41:03.463" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 04:41:03.464" starttime="20170805 04:41:03.463"></status>
</kw>
<msg timestamp="20170805 04:41:03.464" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 04:41:03.464" starttime="20170805 04:41:03.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:03.466" starttime="20170805 04:41:03.465"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:03.466" starttime="20170805 04:41:03.465"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:03.466" starttime="20170805 04:41:03.464"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 04:41:03.466" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 04:41:05.445" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 04:41:05.445" starttime="20170805 04:41:03.466"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:05.445" starttime="20170805 04:41:03.459"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:41:05.446" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170805 04:41:05.503" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:41:05.503" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170805 04:41:05.503" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:41:05.503" starttime="20170805 04:41:05.446"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:41:05.504" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:41:05.504" starttime="20170805 04:41:05.504"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:05.504" starttime="20170805 04:40:20.176"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:05.504" starttime="20170805 04:38:38.670"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:05.504" starttime="20170805 04:38:38.669"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 04:41:05.507" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 04:41:05.507" starttime="20170805 04:41:05.507"></status>
</kw>
<msg timestamp="20170805 04:41:05.507" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 04:41:05.507" starttime="20170805 04:41:05.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:05.509" starttime="20170805 04:41:05.508"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:05.509" starttime="20170805 04:41:05.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:05.509" starttime="20170805 04:41:05.509"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 04:41:05.510" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 04:41:05.511" starttime="20170805 04:41:05.510"></status>
</kw>
<msg timestamp="20170805 04:41:05.511" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 04:41:05.511" starttime="20170805 04:41:05.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:05.512" starttime="20170805 04:41:05.512"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:05.512" starttime="20170805 04:41:05.512"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:05.513" starttime="20170805 04:41:05.511"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 04:41:05.513" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 04:41:07.219" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 04:41:07.219" starttime="20170805 04:41:05.513"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.220" starttime="20170805 04:41:05.506"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:41:07.220" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170805 04:41:07.297" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:41:07.297" level="INFO">${output} = 1501907954</msg>
<msg timestamp="20170805 04:41:07.297" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:41:07.297" starttime="20170805 04:41:07.220"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:41:07.298" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:41:07.298" starttime="20170805 04:41:07.297"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170805 04:41:07.299" level="INFO">${btime} = 1501907954</msg>
<status status="PASS" endtime="20170805 04:41:07.299" starttime="20170805 04:41:07.298"></status>
</kw>
<msg timestamp="20170805 04:41:07.299" level="INFO">${cur_btime} = 1501907954</msg>
<status status="PASS" endtime="20170805 04:41:07.299" starttime="20170805 04:41:05.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170805 04:41:07.301" level="INFO">${BOOT_TIME} = 1501907954</msg>
<status status="PASS" endtime="20170805 04:41:07.301" starttime="20170805 04:41:07.301"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170805 04:41:07.302" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170805 04:41:07.302" starttime="20170805 04:41:07.302"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.302" starttime="20170805 04:41:07.300"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.303" starttime="20170805 04:41:07.299"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.303" starttime="20170805 04:41:05.505"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:07.303" starttime="20170805 04:41:07.303"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:07.304" starttime="20170805 04:41:07.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:07.305" starttime="20170805 04:41:07.304"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.305" starttime="20170805 04:41:05.504"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:41:07.308" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:41:07.309" starttime="20170805 04:41:07.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:41:07.309" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:41:07.309" starttime="20170805 04:41:07.309"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:41:07.310" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:41:07.310" starttime="20170805 04:41:07.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:41:07.311" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:41:07.311" starttime="20170805 04:41:07.310"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:41:07.547" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:41:07.547" starttime="20170805 04:41:07.312"></status>
</kw>
<msg timestamp="20170805 04:41:07.547" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:41:07.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:07.547" starttime="20170805 04:41:07.311"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:41:07.548" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:07.548" starttime="20170805 04:41:07.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:41:07.549" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:07.549" starttime="20170805 04:41:07.548"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.549" starttime="20170805 04:41:07.308"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.549" starttime="20170805 04:41:07.307"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.549" starttime="20170805 04:41:07.306"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:41:07.550" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170805 04:41:07.550" starttime="20170805 04:41:07.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:07.551" starttime="20170805 04:41:07.550"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:41:07.593" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170805 04:41:07.593" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:07.593" starttime="20170805 04:41:07.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:07.594" starttime="20170805 04:41:07.593"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:41:07.594" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:41:07.594" starttime="20170805 04:41:07.594"></status>
</kw>
<msg timestamp="20170805 04:41:07.595" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:07.595" starttime="20170805 04:41:07.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:41:07.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:41:07.596" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 04:41:07.596" starttime="20170805 04:41:07.595"></status>
</kw>
<status status="FAIL" endtime="20170805 04:41:07.596" starttime="20170805 04:41:07.305"></status>
</kw>
<msg timestamp="20170805 04:41:07.596" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:41:07.596" starttime="20170805 04:41:07.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170805 04:41:07.598" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170805 04:41:07.598" starttime="20170805 04:41:07.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:41:07.603" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:41:07.604" starttime="20170805 04:41:07.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:41:07.604" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:41:07.604" starttime="20170805 04:41:07.604"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:41:07.605" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:41:07.605" starttime="20170805 04:41:07.605"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:41:07.606" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:41:07.606" starttime="20170805 04:41:07.605"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:41:07.785" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:41:07.785" starttime="20170805 04:41:07.607"></status>
</kw>
<msg timestamp="20170805 04:41:07.785" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:41:07.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:07.785" starttime="20170805 04:41:07.606"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:41:07.786" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:07.786" starttime="20170805 04:41:07.786"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:41:07.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:07.787" starttime="20170805 04:41:07.786"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.787" starttime="20170805 04:41:07.602"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.787" starttime="20170805 04:41:07.602"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.787" starttime="20170805 04:41:07.601"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:41:07.788" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170805 04:41:07.788" starttime="20170805 04:41:07.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:07.788" starttime="20170805 04:41:07.788"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:41:07.880" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170805 04:41:07.880" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:07.880" starttime="20170805 04:41:07.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:07.881" starttime="20170805 04:41:07.880"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:41:07.881" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:41:07.881" starttime="20170805 04:41:07.881"></status>
</kw>
<msg timestamp="20170805 04:41:07.881" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:07.881" starttime="20170805 04:41:07.600"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:41:07.882" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:07.882" starttime="20170805 04:41:07.882"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:41:07.883" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:41:07.883" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:41:07.883" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170805 04:41:07.883" starttime="20170805 04:41:07.882"></status>
</kw>
<msg timestamp="20170805 04:41:07.883" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170805 04:41:07.883" starttime="20170805 04:41:07.600"></status>
</kw>
<msg timestamp="20170805 04:41:07.884" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170805 04:41:07.884" starttime="20170805 04:41:07.599"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:07.884" starttime="20170805 04:41:07.884"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.884" starttime="20170805 04:41:07.599"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.884" starttime="20170805 04:41:07.599"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.884" starttime="20170805 04:41:07.598"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.885" starttime="20170805 04:41:07.597"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.885" starttime="20170805 04:41:07.596"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.885" starttime="20170805 04:38:21.982"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:07.885" starttime="20170805 04:38:21.982"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170805 04:41:07.894" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170805 04:41:07.894" starttime="20170805 04:41:07.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170805 04:41:07.895" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170805 04:41:07.895" starttime="20170805 04:41:07.895"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:41:07.897" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170805 04:41:07.897" starttime="20170805 04:41:07.896"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:41:07.902" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:41:07.903" starttime="20170805 04:41:07.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:41:07.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:41:07.904" starttime="20170805 04:41:07.903"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:41:07.905" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:41:07.905" starttime="20170805 04:41:07.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:41:07.905" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:41:07.905" starttime="20170805 04:41:07.905"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:41:08.091" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:41:08.091" starttime="20170805 04:41:07.906"></status>
</kw>
<msg timestamp="20170805 04:41:08.091" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:41:08.091" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:08.091" starttime="20170805 04:41:07.906"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:41:08.092" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:08.092" starttime="20170805 04:41:08.092"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:41:08.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:08.093" starttime="20170805 04:41:08.093"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.093" starttime="20170805 04:41:07.900"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.093" starttime="20170805 04:41:07.900"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.093" starttime="20170805 04:41:07.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:41:08.094" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170805 04:41:08.094" starttime="20170805 04:41:08.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:41:08.095" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:41:08.095" starttime="20170805 04:41:08.094"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:08.095" starttime="20170805 04:41:08.095"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:41:08.097" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:41:08.097" starttime="20170805 04:41:08.096"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:41:08.098" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:41:08.098" starttime="20170805 04:41:08.098"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.098" starttime="20170805 04:41:08.097"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.099" starttime="20170805 04:41:08.095"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:41:08.351" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 04:41:08.351" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:08.351" starttime="20170805 04:41:08.099"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:41:08.352" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:41:08.352" starttime="20170805 04:41:08.352"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:41:08.353" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:41:08.353" starttime="20170805 04:41:08.353"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.354" starttime="20170805 04:41:08.352"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.354" starttime="20170805 04:41:08.351"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:41:08.354" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:41:08.354" starttime="20170805 04:41:08.354"></status>
</kw>
<msg timestamp="20170805 04:41:08.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:08.355" starttime="20170805 04:41:07.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:41:08.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:08.356" starttime="20170805 04:41:08.355"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 04:41:08.356" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:41:08.356" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:41:08.356" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 04:41:08.356" starttime="20170805 04:41:08.356"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.356" starttime="20170805 04:41:07.896"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:41:08.360" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:41:08.361" starttime="20170805 04:41:08.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:41:08.361" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:41:08.361" starttime="20170805 04:41:08.361"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:41:08.362" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:41:08.362" starttime="20170805 04:41:08.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:41:08.363" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:41:08.363" starttime="20170805 04:41:08.362"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:41:08.578" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:41:08.578" starttime="20170805 04:41:08.364"></status>
</kw>
<msg timestamp="20170805 04:41:08.578" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:41:08.578" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:08.578" starttime="20170805 04:41:08.363"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:41:08.579" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:08.579" starttime="20170805 04:41:08.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:41:08.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:08.580" starttime="20170805 04:41:08.580"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.580" starttime="20170805 04:41:08.359"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.580" starttime="20170805 04:41:08.358"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.580" starttime="20170805 04:41:08.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:41:08.581" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170805 04:41:08.581" starttime="20170805 04:41:08.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:08.582" starttime="20170805 04:41:08.581"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:41:08.716" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170805 04:41:08.716" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:08.717" starttime="20170805 04:41:08.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:08.717" starttime="20170805 04:41:08.717"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:41:08.718" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:41:08.718" starttime="20170805 04:41:08.718"></status>
</kw>
<msg timestamp="20170805 04:41:08.718" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:41:08.718" starttime="20170805 04:41:08.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:41:08.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:41:08.719" starttime="20170805 04:41:08.718"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:41:08.719" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:41:08.719" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:41:08.720" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170805 04:41:08.720" starttime="20170805 04:41:08.719"></status>
</kw>
<msg timestamp="20170805 04:41:08.720" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170805 04:41:08.720" starttime="20170805 04:41:08.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:08.721" starttime="20170805 04:41:08.720"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.721" starttime="20170805 04:41:07.893"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:08.721" starttime="20170805 04:41:07.886"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/obmc-phosphor-image-witherspoon-20170805042919.static.mtd.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:08.741" starttime="20170805 04:41:08.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:09.377" starttime="20170805 04:41:08.742"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:09.377" starttime="20170805 04:41:08.742"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:09.377" starttime="20170805 04:41:08.730"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 04:41:09.379" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 04:41:09.379" starttime="20170805 04:41:09.378"></status>
</kw>
<msg timestamp="20170805 04:41:09.379" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 04:41:09.379" starttime="20170805 04:41:09.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:09.380" starttime="20170805 04:41:09.380"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:09.380" starttime="20170805 04:41:09.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:09.381" starttime="20170805 04:41:09.381"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 04:41:09.382" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 04:41:09.382" starttime="20170805 04:41:09.382"></status>
</kw>
<msg timestamp="20170805 04:41:09.382" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 04:41:09.382" starttime="20170805 04:41:09.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:09.384" starttime="20170805 04:41:09.384"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:09.384" starttime="20170805 04:41:09.383"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:09.384" starttime="20170805 04:41:09.383"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 04:41:09.385" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 04:41:11.098" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 04:41:11.098" starttime="20170805 04:41:09.385"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:11.098" starttime="20170805 04:41:09.377"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 04:41:11.100" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:41:11.100" starttime="20170805 04:41:11.100"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:41:11.101" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:41:11.309" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:41:11.309" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 04:41:11.309" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:41:11.309" starttime="20170805 04:41:11.101"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:41:11.310" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:41:11.310" starttime="20170805 04:41:11.310"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:11.310" starttime="20170805 04:41:11.100"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:28.938" starttime="20170805 04:41:11.311"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:41:28.939" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:41:28.996" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:41:28.996" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 04:41 /tmp/flashimg</msg>
<msg timestamp="20170805 04:41:28.996" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:41:28.996" starttime="20170805 04:41:28.939"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:41:28.997" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:41:28.997" starttime="20170805 04:41:28.997"></status>
</kw>
<msg timestamp="20170805 04:41:28.997" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 04:41 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:41:28.997" starttime="20170805 04:41:28.938"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 04:41:28.998" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 04:41 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 04:41:28.999" starttime="20170805 04:41:28.998"></status>
</kw>
<msg timestamp="20170805 04:41:28.999" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:41:28.999" starttime="20170805 04:41:28.998"></status>
</kw>
<msg timestamp="20170805 04:41:28.999" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:41:28.999" starttime="20170805 04:41:11.099"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:29.000" starttime="20170805 04:41:28.999"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:29.000" starttime="20170805 04:41:11.099"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 04:41:29.001" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:41:29.001" starttime="20170805 04:41:29.001"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:41:29.002" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:41:29.127" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:41:29.127" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 04:41:29.127" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:41:29.127" starttime="20170805 04:41:29.002"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:41:29.127" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:41:29.128" starttime="20170805 04:41:29.127"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:29.128" starttime="20170805 04:41:29.001"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:45.750" starttime="20170805 04:41:29.128"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:41:45.751" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:41:45.807" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:41:45.808" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 04:41 /tmp/flashimg</msg>
<msg timestamp="20170805 04:41:45.808" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:41:45.808" starttime="20170805 04:41:45.751"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:41:45.808" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:41:45.808" starttime="20170805 04:41:45.808"></status>
</kw>
<msg timestamp="20170805 04:41:45.809" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 04:41 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:41:45.809" starttime="20170805 04:41:45.750"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 04:41:45.810" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 04:41 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 04:41:45.810" starttime="20170805 04:41:45.810"></status>
</kw>
<msg timestamp="20170805 04:41:45.810" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:41:45.810" starttime="20170805 04:41:45.809"></status>
</kw>
<msg timestamp="20170805 04:41:45.810" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:41:45.810" starttime="20170805 04:41:29.000"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 04:41:45.811" starttime="20170805 04:41:45.811"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:45.811" starttime="20170805 04:41:29.000"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 04:41:45.812" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:41:45.812" starttime="20170805 04:41:45.812"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:41:45.813" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:41:45.938" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:41:45.938" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 04:41:45.938" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:41:45.938" starttime="20170805 04:41:45.813"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:41:45.939" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:41:45.939" starttime="20170805 04:41:45.938"></status>
</kw>
<status status="PASS" endtime="20170805 04:41:45.939" starttime="20170805 04:41:45.812"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:02.470" starttime="20170805 04:41:45.939"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:02.471" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:42:02.528" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:42:02.528" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 04:42 /tmp/flashimg</msg>
<msg timestamp="20170805 04:42:02.528" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:02.528" starttime="20170805 04:42:02.471"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:42:02.529" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:42:02.529" starttime="20170805 04:42:02.528"></status>
</kw>
<msg timestamp="20170805 04:42:02.529" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 04:42 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:42:02.529" starttime="20170805 04:42:02.470"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 04:42:02.530" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 04:42 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 04:42:02.530" starttime="20170805 04:42:02.530"></status>
</kw>
<msg timestamp="20170805 04:42:02.530" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:42:02.530" starttime="20170805 04:42:02.529"></status>
</kw>
<msg timestamp="20170805 04:42:02.531" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:42:02.531" starttime="20170805 04:41:45.811"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:02.531" starttime="20170805 04:42:02.531"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:02.531" starttime="20170805 04:41:45.811"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 04:42:02.532" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:42:02.532" starttime="20170805 04:42:02.532"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:02.533" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:42:02.638" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:42:02.639" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 04:42:02.639" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:02.639" starttime="20170805 04:42:02.533"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:42:02.639" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:42:02.639" starttime="20170805 04:42:02.639"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:02.639" starttime="20170805 04:42:02.533"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:19.130" starttime="20170805 04:42:02.640"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:19.131" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:42:19.208" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:42:19.208" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 04:42 /tmp/flashimg</msg>
<msg timestamp="20170805 04:42:19.208" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:19.208" starttime="20170805 04:42:19.131"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:42:19.209" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:42:19.209" starttime="20170805 04:42:19.208"></status>
</kw>
<msg timestamp="20170805 04:42:19.209" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 04:42 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:42:19.209" starttime="20170805 04:42:19.130"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 04:42:19.211" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 04:42 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 04:42:19.211" starttime="20170805 04:42:19.211"></status>
</kw>
<msg timestamp="20170805 04:42:19.211" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:42:19.211" starttime="20170805 04:42:19.210"></status>
</kw>
<msg timestamp="20170805 04:42:19.212" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:42:19.212" starttime="20170805 04:42:02.532"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:19.213" starttime="20170805 04:42:19.212"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:19.213" starttime="20170805 04:42:02.531"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:19.213" starttime="20170805 04:41:11.099"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:19.213" starttime="20170805 04:41:11.099"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:19.213" starttime="20170805 04:41:08.730"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:19.213" starttime="20170805 04:41:08.722"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170805 04:42:19.226" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170805 04:42:19.226" starttime="20170805 04:42:19.226"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:42:19.227" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170805 04:42:19.227" starttime="20170805 04:42:19.226"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:42:19.230" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:42:19.230" starttime="20170805 04:42:19.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:42:19.231" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:42:19.231" starttime="20170805 04:42:19.231"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:42:19.232" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:42:19.232" starttime="20170805 04:42:19.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:42:19.232" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:42:19.232" starttime="20170805 04:42:19.232"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:42:19.434" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:42:19.434" starttime="20170805 04:42:19.234"></status>
</kw>
<msg timestamp="20170805 04:42:19.434" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:19.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:19.435" starttime="20170805 04:42:19.233"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:42:19.435" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:19.436" starttime="20170805 04:42:19.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:19.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:19.437" starttime="20170805 04:42:19.436"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:19.437" starttime="20170805 04:42:19.229"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:19.437" starttime="20170805 04:42:19.228"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:19.437" starttime="20170805 04:42:19.227"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:42:19.438" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170805 04:42:19.438" starttime="20170805 04:42:19.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:42:19.439" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:42:19.439" starttime="20170805 04:42:19.439"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:19.440" starttime="20170805 04:42:19.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:19.441" starttime="20170805 04:42:19.441"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:42:23.151" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170805 04:42:23.151" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.151" starttime="20170805 04:42:19.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:23.152" starttime="20170805 04:42:23.151"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:42:23.152" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:42:23.152" starttime="20170805 04:42:23.152"></status>
</kw>
<msg timestamp="20170805 04:42:23.153" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.153" starttime="20170805 04:42:19.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:23.153" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.153" starttime="20170805 04:42:23.153"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:42:23.157" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:42:23.157" starttime="20170805 04:42:23.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:42:23.157" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:42:23.158" starttime="20170805 04:42:23.157"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:42:23.158" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:42:23.158" starttime="20170805 04:42:23.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:42:23.159" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:42:23.159" starttime="20170805 04:42:23.159"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:42:23.341" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:42:23.341" starttime="20170805 04:42:23.160"></status>
</kw>
<msg timestamp="20170805 04:42:23.341" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:23.341" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.341" starttime="20170805 04:42:23.159"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:42:23.342" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.342" starttime="20170805 04:42:23.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:23.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.342" starttime="20170805 04:42:23.342"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:23.343" starttime="20170805 04:42:23.156"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:23.343" starttime="20170805 04:42:23.155"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:23.343" starttime="20170805 04:42:23.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:42:23.343" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170805 04:42:23.343" starttime="20170805 04:42:23.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:23.344" starttime="20170805 04:42:23.344"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:42:23.442" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170805 04:42:23.442" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.442" starttime="20170805 04:42:23.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:23.443" starttime="20170805 04:42:23.443"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:42:23.443" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:42:23.444" starttime="20170805 04:42:23.443"></status>
</kw>
<msg timestamp="20170805 04:42:23.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.444" starttime="20170805 04:42:23.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:23.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.445" starttime="20170805 04:42:23.444"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:42:23.445" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:42:23.445" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:42:23.445" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too b...</msg>
<status status="PASS" endtime="20170805 04:42:23.445" starttime="20170805 04:42:23.445"></status>
</kw>
<msg timestamp="20170805 04:42:23.446" level="INFO">${data} = {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n', u'update_kernel_and_apps': 0, u'cl...</msg>
<status status="PASS" endtime="20170805 04:42:23.446" starttime="20170805 04:42:23.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:23.446" starttime="20170805 04:42:23.446"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<msg timestamp="20170805 04:42:23.447" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170805 04:42:23.447" starttime="20170805 04:42:23.447"></status>
</kw>
<status status="FAIL" endtime="20170805 04:42:23.447" starttime="20170805 04:42:19.225"></status>
</kw>
<msg timestamp="20170805 04:42:23.449" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170805 04:42:23.449" starttime="20170805 04:42:19.214"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:42:23.463" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:42:23.463" starttime="20170805 04:42:23.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:42:23.464" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:42:23.464" starttime="20170805 04:42:23.463"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:42:23.464" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:42:23.464" starttime="20170805 04:42:23.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:42:23.465" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:42:23.465" starttime="20170805 04:42:23.465"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:42:23.716" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:42:23.716" starttime="20170805 04:42:23.466"></status>
</kw>
<msg timestamp="20170805 04:42:23.717" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:23.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.717" starttime="20170805 04:42:23.465"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:42:23.717" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.717" starttime="20170805 04:42:23.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:23.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.718" starttime="20170805 04:42:23.718"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:23.718" starttime="20170805 04:42:23.462"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:23.718" starttime="20170805 04:42:23.461"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:23.719" starttime="20170805 04:42:23.461"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:42:23.719" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170805 04:42:23.719" starttime="20170805 04:42:23.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:23.720" starttime="20170805 04:42:23.720"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:42:23.785" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170805 04:42:23.785" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.785" starttime="20170805 04:42:23.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:23.785" starttime="20170805 04:42:23.785"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:42:23.786" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:42:23.786" starttime="20170805 04:42:23.786"></status>
</kw>
<msg timestamp="20170805 04:42:23.786" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.786" starttime="20170805 04:42:23.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:23.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:23.787" starttime="20170805 04:42:23.786"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:42:23.787" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:42:23.787" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:42:23.788" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170805 04:42:23.788" starttime="20170805 04:42:23.787"></status>
</kw>
<msg timestamp="20170805 04:42:23.788" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 04:42:23.788" starttime="20170805 04:42:23.459"></status>
</kw>
<msg timestamp="20170805 04:42:23.788" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170805 04:42:23.788" starttime="20170805 04:42:23.459"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170805 04:42:23.789" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170805 04:42:23.789" starttime="20170805 04:42:23.789"></status>
</kw>
<msg timestamp="20170805 04:42:23.790" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:42:23.790" starttime="20170805 04:42:23.789"></status>
</kw>
<msg timestamp="20170805 04:42:23.790" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:42:23.790" starttime="20170805 04:42:23.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:42:23.806" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170805 04:42:23.806" starttime="20170805 04:42:23.806"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:42:23.814" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:42:26.819" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 04:42:26.821" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.612 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.559 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170805 04:42:26.821" starttime="20170805 04:42:23.807"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:42:26.842" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.612 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.559 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.543 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.664 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.543/0.594/0.664/0.053 ms</msg>
<status status="PASS" endtime="20170805 04:42:26.842" starttime="20170805 04:42:26.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:26.844" starttime="20170805 04:42:26.843"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:26.844" starttime="20170805 04:42:23.805"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 04:42:26.919" level="INFO">${cur_time} = 2017-08-05 04:42:26:918687</msg>
<status status="PASS" endtime="20170805 04:42:26.919" starttime="20170805 04:42:26.918"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 04:42:26.920" level="INFO">${cur_time} = 20170805044226918687</msg>
<status status="PASS" endtime="20170805 04:42:26.920" starttime="20170805 04:42:26.919"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:26.920" starttime="20170805 04:42:26.918"></status>
</kw>
<msg timestamp="20170805 04:42:26.930" level="INFO">${FFDC_TIME} = 20170805044226918687</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170805 04:42:26.932" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170805 04:42:26.932" starttime="20170805 04:42:26.931"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170805 04:42:26.932" level="INFO">${suite_name} = 20170805044226918687_UpdateBmc</msg>
<status status="PASS" endtime="20170805 04:42:26.932" starttime="20170805 04:42:26.932"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170805 04:42:26.933" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170805 04:42:26.933" starttime="20170805 04:42:26.933"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170805 04:42:26.934" level="INFO">${test_name} = 20170805044226918687_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170805 04:42:26.934" starttime="20170805 04:42:26.933"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:26.934" starttime="20170805 04:42:26.931"></status>
</kw>
<msg timestamp="20170805 04:42:26.939" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170805 04:42:26.945" level="INFO">${FFDC_PREFIX} = 20170805044226918687_</msg>
<msg timestamp="20170805 04:42:26.975" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170805 04:42:26.977" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:26.977" starttime="20170805 04:42:26.976"></status>
</kw>
<msg timestamp="20170805 04:42:26.982" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:26.998" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:26.998" starttime="20170805 04:42:26.998"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:26.998" starttime="20170805 04:42:26.997"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:26.999" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:26.999" starttime="20170805 04:42:26.999"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.000" starttime="20170805 04:42:26.998"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.001" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.001" starttime="20170805 04:42:27.001"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.001" starttime="20170805 04:42:27.000"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.002" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.002" starttime="20170805 04:42:27.002"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.003" starttime="20170805 04:42:27.001"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.004" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.004" starttime="20170805 04:42:27.003"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.004" starttime="20170805 04:42:27.003"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.006" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.006" starttime="20170805 04:42:27.006"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.007" starttime="20170805 04:42:27.005"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.008" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.008" starttime="20170805 04:42:27.007"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.008" starttime="20170805 04:42:27.007"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.009" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.009" starttime="20170805 04:42:27.009"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.009" starttime="20170805 04:42:27.008"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.011" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.011" starttime="20170805 04:42:27.010"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.011" starttime="20170805 04:42:27.010"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.012" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.012" starttime="20170805 04:42:27.012"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.012" starttime="20170805 04:42:27.011"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.014" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.014" starttime="20170805 04:42:27.013"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.014" starttime="20170805 04:42:27.013"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.015" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.015" starttime="20170805 04:42:27.015"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.015" starttime="20170805 04:42:27.014"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.017" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.017" starttime="20170805 04:42:27.016"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.017" starttime="20170805 04:42:27.015"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 04:42:27.043" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:27.043" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 04:42:27.844" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170805 04:42:27.844" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170805 04:42:27.961" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:42:27.974" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170805 04:42:27.974" level="INFO">${stderr} = </msg>
<msg timestamp="20170805 04:42:27.974" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170805 04:42:27.975" starttime="20170805 04:42:27.018"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.975" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:42:27.975" starttime="20170805 04:42:27.975"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.976" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170805 04:42:27.976" starttime="20170805 04:42:27.975"></status>
</kw>
<msg timestamp="20170805 04:42:27.976" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170805 04:42:27.976" starttime="20170805 04:42:27.018"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.977" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.977" starttime="20170805 04:42:27.977"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.978" starttime="20170805 04:42:27.976"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.978" starttime="20170805 04:42:27.011"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.979" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.979" starttime="20170805 04:42:27.979"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.979" starttime="20170805 04:42:27.978"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 04:42:27.980" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170805 04:42:27.980" starttime="20170805 04:42:27.979"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.981" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.981" starttime="20170805 04:42:27.981"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.981" starttime="20170805 04:42:27.980"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.982" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.983" starttime="20170805 04:42:27.982"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.983" starttime="20170805 04:42:27.982"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.983" starttime="20170805 04:42:27.980"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.985" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.985" starttime="20170805 04:42:27.984"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.985" starttime="20170805 04:42:27.983"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.987" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.987" starttime="20170805 04:42:27.986"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.987" starttime="20170805 04:42:27.986"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.987" starttime="20170805 04:42:27.983"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.988" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.988" starttime="20170805 04:42:27.988"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.988" starttime="20170805 04:42:27.987"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.990" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.990" starttime="20170805 04:42:27.989"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.990" starttime="20170805 04:42:27.989"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.990" starttime="20170805 04:42:27.987"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.990" starttime="20170805 04:42:27.980"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:27.991" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:27.991" starttime="20170805 04:42:27.991"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.991" starttime="20170805 04:42:27.990"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:27.991" starttime="20170805 04:42:26.996"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 04:42:27.999" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170805 04:42:27.999" starttime="20170805 04:42:27.999"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170805 04:42:28.001" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170805 04:42:28.001" starttime="20170805 04:42:28.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:28.002" starttime="20170805 04:42:28.002"></status>
</kw>
<msg timestamp="20170805 04:42:28.002" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170805 04:42:28.002" starttime="20170805 04:42:28.001"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:28.004" starttime="20170805 04:42:28.004"></status>
</kw>
<msg timestamp="20170805 04:42:28.004" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:28.005" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 04:42:28.005" starttime="20170805 04:42:28.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:28.005" starttime="20170805 04:42:28.005"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 04:42:28.029" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170805 04:42:28.029" starttime="20170805 04:42:28.029"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 04:42:28.031" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170805 04:42:28.031" starttime="20170805 04:42:28.030"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170805 04:42:28.038" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170805 04:42:28.038" starttime="20170805 04:42:28.031"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:28.042" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:28.042" starttime="20170805 04:42:28.041"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:28.042" starttime="20170805 04:42:28.041"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:28.043" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:28.043" starttime="20170805 04:42:28.043"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:28.043" starttime="20170805 04:42:28.042"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:28.046" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:28.046" starttime="20170805 04:42:28.046"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:28.047" starttime="20170805 04:42:28.043"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:28.048" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:28.048" starttime="20170805 04:42:28.047"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:28.048" starttime="20170805 04:42:28.047"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:28.048" starttime="20170805 04:42:28.040"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:28.048" starttime="20170805 04:42:28.040"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:42:28.049" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:42:28.049" starttime="20170805 04:42:28.048"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:42:28.119" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:28.119" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170805 04:42:29.486" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:42:29.487" starttime="20170805 04:42:28.081"></status>
</kw>
<msg timestamp="20170805 04:42:29.487" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:29.487" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170805 04:42:29.487" starttime="20170805 04:42:28.049"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:42:29.488" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 04:42:29.488" starttime="20170805 04:42:29.487"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:29.488" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:29.488" starttime="20170805 04:42:29.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.500" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.500" starttime="20170805 04:42:29.500"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.501" starttime="20170805 04:42:29.499"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.501" starttime="20170805 04:42:29.489"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.501" starttime="20170805 04:42:28.039"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.501" starttime="20170805 04:42:28.038"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.501" starttime="20170805 04:42:28.038"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.501" starttime="20170805 04:42:28.030"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.501" starttime="20170805 04:42:28.029"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 04:42:29.502" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170805 04:42:29.502" starttime="20170805 04:42:29.502"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.503" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170805 04:42:29.503" starttime="20170805 04:42:29.502"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.506" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.507" starttime="20170805 04:42:29.506"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.507" starttime="20170805 04:42:29.505"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.508" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.508" starttime="20170805 04:42:29.508"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.508" starttime="20170805 04:42:29.507"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.509" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.509" starttime="20170805 04:42:29.509"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.510" starttime="20170805 04:42:29.508"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.511" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.511" starttime="20170805 04:42:29.510"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.511" starttime="20170805 04:42:29.510"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.511" starttime="20170805 04:42:29.505"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.511" starttime="20170805 04:42:29.504"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:42:29.512" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:42:29.512" starttime="20170805 04:42:29.511"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:42:29.620" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:29.621" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170805 04:42:29.670" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:42:29.670" starttime="20170805 04:42:29.565"></status>
</kw>
<msg timestamp="20170805 04:42:29.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:29.670" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-139"\nVERSION_ID="v1.99.8-139-gb3dbb28"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170805 04:42:29.671" starttime="20170805 04:42:29.512"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:42:29.671" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-139"
VERSION_ID="v1.99.8-139-gb3dbb28"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170805 04:42:29.672" starttime="20170805 04:42:29.671"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:29.672" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:29.672" starttime="20170805 04:42:29.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.683" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.683" starttime="20170805 04:42:29.683"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.683" starttime="20170805 04:42:29.682"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.684" starttime="20170805 04:42:29.673"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.684" starttime="20170805 04:42:29.503"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.684" starttime="20170805 04:42:29.503"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.684" starttime="20170805 04:42:29.503"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.684" starttime="20170805 04:42:29.501"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.684" starttime="20170805 04:42:29.501"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 04:42:29.685" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170805 04:42:29.685" starttime="20170805 04:42:29.685"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.686" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170805 04:42:29.686" starttime="20170805 04:42:29.685"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.689" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.689" starttime="20170805 04:42:29.689"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.689" starttime="20170805 04:42:29.688"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.690" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.691" starttime="20170805 04:42:29.690"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.691" starttime="20170805 04:42:29.689"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.692" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.692" starttime="20170805 04:42:29.691"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.692" starttime="20170805 04:42:29.691"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.693" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.693" starttime="20170805 04:42:29.693"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.693" starttime="20170805 04:42:29.692"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.693" starttime="20170805 04:42:29.687"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.694" starttime="20170805 04:42:29.687"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:42:29.695" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:42:29.695" starttime="20170805 04:42:29.694"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:42:29.765" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:29.765" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170805 04:42:29.852" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:42:29.852" starttime="20170805 04:42:29.726"></status>
</kw>
<msg timestamp="20170805 04:42:29.852" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:29.853" level="INFO">${ret_values} = (u' 04:42:34 up 3 min,  load average: 1.77, 1.22, 0.51', u'', 0)</msg>
<status status="PASS" endtime="20170805 04:42:29.853" starttime="20170805 04:42:29.695"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:42:29.853" level="INFO">${stdout} =  04:42:34 up 3 min,  load average: 1.77, 1.22, 0.51</msg>
<status status="PASS" endtime="20170805 04:42:29.853" starttime="20170805 04:42:29.853"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:29.854" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:29.854" starttime="20170805 04:42:29.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.861" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.861" starttime="20170805 04:42:29.861"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.861" starttime="20170805 04:42:29.860"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.861" starttime="20170805 04:42:29.854"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.862" starttime="20170805 04:42:29.686"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.862" starttime="20170805 04:42:29.686"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.865" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.865" starttime="20170805 04:42:29.864"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.865" starttime="20170805 04:42:29.864"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.866" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.866" starttime="20170805 04:42:29.866"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.866" starttime="20170805 04:42:29.865"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.867" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.868" starttime="20170805 04:42:29.867"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.868" starttime="20170805 04:42:29.866"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:29.869" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:29.869" starttime="20170805 04:42:29.869"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.870" starttime="20170805 04:42:29.868"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.870" starttime="20170805 04:42:29.863"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:29.870" starttime="20170805 04:42:29.863"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:42:29.870" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:42:29.871" starttime="20170805 04:42:29.870"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:42:29.942" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:29.942" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170805 04:42:30.001" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:42:30.001" starttime="20170805 04:42:29.900"></status>
</kw>
<msg timestamp="20170805 04:42:30.002" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:30.002" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170805 04:42:30.002" starttime="20170805 04:42:29.871"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:42:30.002" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     74.0...</msg>
<status status="PASS" endtime="20170805 04:42:30.002" starttime="20170805 04:42:30.002"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:30.003" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:30.003" starttime="20170805 04:42:30.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.010" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:30.010" starttime="20170805 04:42:30.010"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.010" starttime="20170805 04:42:30.009"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.010" starttime="20170805 04:42:30.003"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.011" starttime="20170805 04:42:29.862"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.011" starttime="20170805 04:42:29.862"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.014" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:30.014" starttime="20170805 04:42:30.014"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.014" starttime="20170805 04:42:30.013"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.016" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:30.016" starttime="20170805 04:42:30.015"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.016" starttime="20170805 04:42:30.014"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.017" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:30.017" starttime="20170805 04:42:30.017"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.017" starttime="20170805 04:42:30.016"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.019" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:30.019" starttime="20170805 04:42:30.018"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.019" starttime="20170805 04:42:30.018"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.019" starttime="20170805 04:42:30.012"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.019" starttime="20170805 04:42:30.012"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:42:30.020" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:42:30.020" starttime="20170805 04:42:30.019"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:42:30.087" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:30.087" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170805 04:42:30.144" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:42:30.144" starttime="20170805 04:42:30.050"></status>
</kw>
<msg timestamp="20170805 04:42:30.144" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:30.144" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170805 04:42:30.144" starttime="20170805 04:42:30.020"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:42:30.145" level="INFO">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170805 04:42:30.145" starttime="20170805 04:42:30.145"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:30.146" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:30.146" starttime="20170805 04:42:30.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.154" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:30.154" starttime="20170805 04:42:30.154"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.154" starttime="20170805 04:42:30.152"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.154" starttime="20170805 04:42:30.147"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.155" starttime="20170805 04:42:30.011"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.155" starttime="20170805 04:42:30.011"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.155" starttime="20170805 04:42:29.686"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.155" starttime="20170805 04:42:29.684"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.155" starttime="20170805 04:42:29.684"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.155" starttime="20170805 04:42:28.029"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.155" starttime="20170805 04:42:28.028"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.155" starttime="20170805 04:42:28.005"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.155" starttime="20170805 04:42:28.002"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.155" starttime="20170805 04:42:28.002"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:30.157" starttime="20170805 04:42:30.157"></status>
</kw>
<msg timestamp="20170805 04:42:30.157" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:30.157" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 04:42:30.157" starttime="20170805 04:42:30.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:30.158" starttime="20170805 04:42:30.158"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 04:42:30.177" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170805 04:42:30.177" starttime="20170805 04:42:30.177"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 04:42:30.178" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170805 04:42:30.178" starttime="20170805 04:42:30.178"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:42:30.180" level="INFO">${logpath} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_elog.txt</msg>
<status status="PASS" endtime="20170805 04:42:30.180" starttime="20170805 04:42:30.179"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:42:30.183" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:42:30.183" starttime="20170805 04:42:30.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:42:30.184" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:42:30.184" starttime="20170805 04:42:30.183"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:42:30.187" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:42:30.187" starttime="20170805 04:42:30.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:42:30.187" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:42:30.187" starttime="20170805 04:42:30.187"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.372" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:42:30.372" starttime="20170805 04:42:30.188"></status>
</kw>
<msg timestamp="20170805 04:42:30.372" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:30.372" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:30.372" starttime="20170805 04:42:30.188"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.373" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:30.373" starttime="20170805 04:42:30.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.374" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:30.374" starttime="20170805 04:42:30.374"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.374" starttime="20170805 04:42:30.182"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.374" starttime="20170805 04:42:30.181"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.375" starttime="20170805 04:42:30.181"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:42:30.376" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170805 04:42:30.376" starttime="20170805 04:42:30.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:30.377" starttime="20170805 04:42:30.376"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:42:30.505" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 04:42:30.505" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:30.505" starttime="20170805 04:42:30.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:30.506" starttime="20170805 04:42:30.506"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:42:30.507" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:42:30.507" starttime="20170805 04:42:30.506"></status>
</kw>
<msg timestamp="20170805 04:42:30.507" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:30.507" starttime="20170805 04:42:30.180"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:30.508" starttime="20170805 04:42:30.508"></status>
</kw>
<msg timestamp="20170805 04:42:30.508" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 04:42:30.508" starttime="20170805 04:42:30.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:30.509" starttime="20170805 04:42:30.509"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170805 04:42:30.510" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501908031944, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:42:30.510" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170805 04:42:30.510" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Common.Error.InternalFailure",
    ...</msg>
<status status="PASS" endtime="20170805 04:42:30.510" starttime="20170805 04:42:30.509"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.512" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_elog.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:30.512" starttime="20170805 04:42:30.511"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.512" starttime="20170805 04:42:30.510"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.512" starttime="20170805 04:42:30.179"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:42:30.513" level="INFO">${logpath} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170805 04:42:30.513" starttime="20170805 04:42:30.512"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:42:30.516" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:42:30.516" starttime="20170805 04:42:30.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:42:30.517" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:42:30.517" starttime="20170805 04:42:30.516"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:42:30.518" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:42:30.518" starttime="20170805 04:42:30.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:42:30.519" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:42:30.519" starttime="20170805 04:42:30.518"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.717" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:42:30.717" starttime="20170805 04:42:30.520"></status>
</kw>
<msg timestamp="20170805 04:42:30.717" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:30.718" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:30.718" starttime="20170805 04:42:30.519"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.718" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:30.718" starttime="20170805 04:42:30.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:30.719" starttime="20170805 04:42:30.719"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.719" starttime="20170805 04:42:30.515"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.719" starttime="20170805 04:42:30.514"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.719" starttime="20170805 04:42:30.514"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:42:30.720" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170805 04:42:30.720" starttime="20170805 04:42:30.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:30.721" starttime="20170805 04:42:30.720"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:42:30.953" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 04:42:30.953" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:30.953" starttime="20170805 04:42:30.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:30.954" starttime="20170805 04:42:30.954"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:42:30.955" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:42:30.955" starttime="20170805 04:42:30.954"></status>
</kw>
<msg timestamp="20170805 04:42:30.955" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:30.955" starttime="20170805 04:42:30.513"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.957" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:30.957" starttime="20170805 04:42:30.956"></status>
</kw>
<msg timestamp="20170805 04:42:30.957" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 04:42:30.957" starttime="20170805 04:42:30.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:30.958" starttime="20170805 04:42:30.958"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170805 04:42:30.959" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:42:30.959" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170805 04:42:30.960" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170805 04:42:30.960" starttime="20170805 04:42:30.959"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:30.962" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:30.962" starttime="20170805 04:42:30.961"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.962" starttime="20170805 04:42:30.960"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:30.962" starttime="20170805 04:42:30.512"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:42:30.963" level="INFO">${logpath} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170805 04:42:30.963" starttime="20170805 04:42:30.962"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:42:30.966" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:42:30.966" starttime="20170805 04:42:30.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:42:30.967" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:42:30.967" starttime="20170805 04:42:30.966"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:42:30.967" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:42:30.967" starttime="20170805 04:42:30.967"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:42:30.968" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:42:30.968" starttime="20170805 04:42:30.968"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.154" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:42:31.155" starttime="20170805 04:42:30.969"></status>
</kw>
<msg timestamp="20170805 04:42:31.155" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:31.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.155" starttime="20170805 04:42:30.968"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.155" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.156" starttime="20170805 04:42:31.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.157" starttime="20170805 04:42:31.156"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.157" starttime="20170805 04:42:30.965"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.157" starttime="20170805 04:42:30.964"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.157" starttime="20170805 04:42:30.964"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:42:31.158" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170805 04:42:31.158" starttime="20170805 04:42:31.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:31.158" starttime="20170805 04:42:31.158"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:42:31.326" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 04:42:31.327" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.327" starttime="20170805 04:42:31.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:31.327" starttime="20170805 04:42:31.327"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:42:31.328" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:42:31.328" starttime="20170805 04:42:31.328"></status>
</kw>
<msg timestamp="20170805 04:42:31.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.328" starttime="20170805 04:42:30.963"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.329" starttime="20170805 04:42:31.329"></status>
</kw>
<msg timestamp="20170805 04:42:31.329" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 04:42:31.329" starttime="20170805 04:42:31.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:31.330" starttime="20170805 04:42:31.330"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170805 04:42:31.331" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:42:31.331" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170805 04:42:31.331" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170805 04:42:31.331" starttime="20170805 04:42:31.330"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.333" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:31.333" starttime="20170805 04:42:31.332"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.333" starttime="20170805 04:42:31.331"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.333" starttime="20170805 04:42:30.962"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:42:31.334" level="INFO">${logpath} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_led.txt</msg>
<status status="PASS" endtime="20170805 04:42:31.334" starttime="20170805 04:42:31.333"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:42:31.336" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:42:31.337" starttime="20170805 04:42:31.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:42:31.338" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:42:31.338" starttime="20170805 04:42:31.337"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:42:31.339" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:42:31.339" starttime="20170805 04:42:31.338"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:42:31.340" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:42:31.340" starttime="20170805 04:42:31.339"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.520" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:42:31.520" starttime="20170805 04:42:31.341"></status>
</kw>
<msg timestamp="20170805 04:42:31.520" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:31.520" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.521" starttime="20170805 04:42:31.340"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.521" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.521" starttime="20170805 04:42:31.521"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.522" starttime="20170805 04:42:31.522"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.522" starttime="20170805 04:42:31.336"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.522" starttime="20170805 04:42:31.335"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.522" starttime="20170805 04:42:31.334"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:42:31.523" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170805 04:42:31.523" starttime="20170805 04:42:31.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:31.524" starttime="20170805 04:42:31.524"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:42:31.579" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 04:42:31.579" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.579" starttime="20170805 04:42:31.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:31.580" starttime="20170805 04:42:31.579"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:42:31.580" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:42:31.580" starttime="20170805 04:42:31.580"></status>
</kw>
<msg timestamp="20170805 04:42:31.581" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.581" starttime="20170805 04:42:31.334"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.582" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:42:31.583" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 04:42:31.583" starttime="20170805 04:42:31.582"></status>
</kw>
<msg timestamp="20170805 04:42:31.583" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:42:31.583" starttime="20170805 04:42:31.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170805 04:42:31.584" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170805 04:42:31.584" starttime="20170805 04:42:31.584"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.584" starttime="20170805 04:42:31.583"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.584" starttime="20170805 04:42:31.333"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:42:31.585" level="INFO">${logpath} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170805 04:42:31.585" starttime="20170805 04:42:31.584"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:42:31.588" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:42:31.588" starttime="20170805 04:42:31.587"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:42:31.589" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:42:31.589" starttime="20170805 04:42:31.588"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:42:31.589" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:42:31.589" starttime="20170805 04:42:31.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:42:31.590" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:42:31.590" starttime="20170805 04:42:31.590"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.776" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:42:31.776" starttime="20170805 04:42:31.591"></status>
</kw>
<msg timestamp="20170805 04:42:31.776" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:31.777" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.777" starttime="20170805 04:42:31.590"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.777" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.777" starttime="20170805 04:42:31.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.778" starttime="20170805 04:42:31.778"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.778" starttime="20170805 04:42:31.587"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.778" starttime="20170805 04:42:31.586"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.778" starttime="20170805 04:42:31.586"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:42:31.779" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170805 04:42:31.779" starttime="20170805 04:42:31.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:31.780" starttime="20170805 04:42:31.779"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:42:31.822" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 04:42:31.822" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.823" starttime="20170805 04:42:31.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:31.823" starttime="20170805 04:42:31.823"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:42:31.824" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:42:31.824" starttime="20170805 04:42:31.823"></status>
</kw>
<msg timestamp="20170805 04:42:31.824" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:31.824" starttime="20170805 04:42:31.585"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:31.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:42:31.825" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 04:42:31.825" starttime="20170805 04:42:31.825"></status>
</kw>
<msg timestamp="20170805 04:42:31.825" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:42:31.825" starttime="20170805 04:42:31.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170805 04:42:31.827" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170805 04:42:31.827" starttime="20170805 04:42:31.827"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.827" starttime="20170805 04:42:31.826"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.827" starttime="20170805 04:42:31.584"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.827" starttime="20170805 04:42:30.178"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.827" starttime="20170805 04:42:30.177"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.827" starttime="20170805 04:42:30.177"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.827" starttime="20170805 04:42:30.177"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.828" starttime="20170805 04:42:30.176"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.828" starttime="20170805 04:42:30.158"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.828" starttime="20170805 04:42:30.155"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:31.828" starttime="20170805 04:42:30.155"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:31.831" starttime="20170805 04:42:31.830"></status>
</kw>
<msg timestamp="20170805 04:42:31.831" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:31.831" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 04:42:31.831" starttime="20170805 04:42:31.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:31.832" starttime="20170805 04:42:31.832"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 04:42:31.881" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:31.881" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170805 04:42:31.958" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170805 04:42:31.973" level="INFO">${core_files} = None</msg>
<msg timestamp="20170805 04:42:31.973" level="INFO">${stderr} = None</msg>
<msg timestamp="20170805 04:42:31.973" level="INFO">${rc} = None</msg>
<msg timestamp="20170805 04:42:31.973" level="FAIL">#(UTC) 2017/08/05 04:42:31.971255 -    3.997321 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170805 04:42:31.973" starttime="20170805 04:42:31.851"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170805 04:42:31.974" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170805 04:42:31.974" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170805 04:42:31.974" starttime="20170805 04:42:31.973"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:31.988" starttime="20170805 04:42:31.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:32.655" starttime="20170805 04:42:31.989"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:32.655" starttime="20170805 04:42:31.988"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:32.655" starttime="20170805 04:42:31.986"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:32.655" starttime="20170805 04:42:31.974"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170805 04:42:32.656" starttime="20170805 04:42:32.655"></status>
</kw>
<status status="FAIL" endtime="20170805 04:42:32.656" starttime="20170805 04:42:31.851"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:32.656" starttime="20170805 04:42:31.832"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:32.656" starttime="20170805 04:42:31.829"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:32.656" starttime="20170805 04:42:31.828"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:32.658" starttime="20170805 04:42:32.658"></status>
</kw>
<msg timestamp="20170805 04:42:32.658" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:32.658" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 04:42:32.659" starttime="20170805 04:42:32.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:32.659" starttime="20170805 04:42:32.659"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 04:42:32.679" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170805 04:42:32.679" starttime="20170805 04:42:32.679"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 04:42:32.680" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170805 04:42:32.680" starttime="20170805 04:42:32.680"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:42:32.681" level="INFO">${logpath} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170805 04:42:32.681" starttime="20170805 04:42:32.681"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:32.683" starttime="20170805 04:42:32.682"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:42:32.684" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:42:32.684" starttime="20170805 04:42:32.683"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:42:32.746" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:32.747" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170805 04:42:33.358" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:42:33.358" starttime="20170805 04:42:32.711"></status>
</kw>
<msg timestamp="20170805 04:42:33.359" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:33.360" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  5 04:42 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  5 04:42 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170805 04:42:33.360" starttime="20170805 04:42:32.685"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:42:33.361" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  5 04:42 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  5 04:42 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170805 04:42:33.361" starttime="20170805 04:42:33.360"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:33.361" level="INFO">${stderr} = ls: /proc/1243/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170805 04:42:33.361" starttime="20170805 04:42:33.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:33.369" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:33.370" starttime="20170805 04:42:33.369"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.370" starttime="20170805 04:42:33.367"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.370" starttime="20170805 04:42:33.362"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.370" starttime="20170805 04:42:32.682"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.370" starttime="20170805 04:42:32.681"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:42:33.371" level="INFO">${logpath} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170805 04:42:33.371" starttime="20170805 04:42:33.370"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:33.373" starttime="20170805 04:42:33.373"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:42:33.374" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:42:33.374" starttime="20170805 04:42:33.373"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:42:33.435" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:33.435" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170805 04:42:33.482" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:42:33.482" starttime="20170805 04:42:33.399"></status>
</kw>
<msg timestamp="20170805 04:42:33.482" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:33.483" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170805 04:42:33.483" starttime="20170805 04:42:33.375"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:42:33.483" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170805 04:42:33.483" starttime="20170805 04:42:33.483"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:33.484" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:33.484" starttime="20170805 04:42:33.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:33.493" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:33.493" starttime="20170805 04:42:33.492"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.493" starttime="20170805 04:42:33.491"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.493" starttime="20170805 04:42:33.484"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.493" starttime="20170805 04:42:33.371"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.493" starttime="20170805 04:42:33.370"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:42:33.494" level="INFO">${logpath} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170805 04:42:33.494" starttime="20170805 04:42:33.494"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:33.495" starttime="20170805 04:42:33.495"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:42:33.496" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:42:33.496" starttime="20170805 04:42:33.496"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:42:33.557" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:33.558" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170805 04:42:33.615" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:42:33.615" starttime="20170805 04:42:33.523"></status>
</kw>
<msg timestamp="20170805 04:42:33.615" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:33.615" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          181444 kB\nMemAvailable:     227424 kB\nBuffers:           11264 kB\nCached:           150272 kB\nSwapCached:            0 kB\nActive:           14592...</msg>
<status status="PASS" endtime="20170805 04:42:33.615" starttime="20170805 04:42:33.496"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:42:33.616" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          181444 kB
MemAvailable:     227424 kB
Buffers:           11264 kB
Cached:           150272 kB
SwapCached:            0 kB
Active:           145928 kB
Inac...</msg>
<status status="PASS" endtime="20170805 04:42:33.616" starttime="20170805 04:42:33.615"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:33.616" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:33.616" starttime="20170805 04:42:33.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:33.623" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:33.624" starttime="20170805 04:42:33.623"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.624" starttime="20170805 04:42:33.622"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.624" starttime="20170805 04:42:33.617"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.624" starttime="20170805 04:42:33.494"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.624" starttime="20170805 04:42:33.493"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:42:33.625" level="INFO">${logpath} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170805 04:42:33.625" starttime="20170805 04:42:33.624"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:33.626" starttime="20170805 04:42:33.626"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:42:33.627" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:42:33.627" starttime="20170805 04:42:33.626"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:42:33.688" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:33.688" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170805 04:42:33.987" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:42:33.987" starttime="20170805 04:42:33.652"></status>
</kw>
<msg timestamp="20170805 04:42:33.987" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:33.987" level="INFO">${ret_values} = (u'Mem: 250824K used, 181444K free, 113136K shrd, 11264K buff, 150276K cached\nCPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 1.77 1.22 0.52 1/153 1246\n  PID  PPI...</msg>
<status status="PASS" endtime="20170805 04:42:33.988" starttime="20170805 04:42:33.627"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:42:33.988" level="INFO">${stdout} = Mem: 250824K used, 181444K free, 113136K shrd, 11264K buff, 150276K cached
CPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 1.77 1.22 0.52 1/153 1246
  PID  PPID USER...</msg>
<status status="PASS" endtime="20170805 04:42:33.988" starttime="20170805 04:42:33.988"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:33.989" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:33.989" starttime="20170805 04:42:33.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:33.997" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:33.997" starttime="20170805 04:42:33.997"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.998" starttime="20170805 04:42:33.996"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.998" starttime="20170805 04:42:33.989"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.998" starttime="20170805 04:42:33.625"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:33.998" starttime="20170805 04:42:33.624"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:42:33.999" level="INFO">${logpath} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170805 04:42:33.999" starttime="20170805 04:42:33.998"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:34.000" starttime="20170805 04:42:34.000"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:42:34.001" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:42:34.001" starttime="20170805 04:42:34.000"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:42:34.061" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:34.061" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170805 04:42:34.118" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:42:34.118" starttime="20170805 04:42:34.027"></status>
</kw>
<msg timestamp="20170805 04:42:34.118" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:34.119" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC...</msg>
<status status="PASS" endtime="20170805 04:42:34.119" starttime="20170805 04:42:34.001"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:42:34.119" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC 201...</msg>
<status status="PASS" endtime="20170805 04:42:34.119" starttime="20170805 04:42:34.119"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:34.120" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:34.120" starttime="20170805 04:42:34.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:34.127" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:34.127" starttime="20170805 04:42:34.126"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:34.127" starttime="20170805 04:42:34.126"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:34.127" starttime="20170805 04:42:34.120"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:34.127" starttime="20170805 04:42:33.999"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:34.127" starttime="20170805 04:42:33.998"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:42:34.128" level="INFO">${logpath} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170805 04:42:34.128" starttime="20170805 04:42:34.128"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:34.130" starttime="20170805 04:42:34.129"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:42:34.131" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:42:34.131" starttime="20170805 04:42:34.130"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:42:34.188" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:42:34.188" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170805 04:42:35.176" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:42:35.176" starttime="20170805 04:42:34.156"></status>
</kw>
<msg timestamp="20170805 04:42:35.176" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:35.177" level="INFO">${ret_values} = (u'-- Logs begin at Sat 2017-08-05 04:39:31 UTC, end at Sat 2017-08-05 04:42:37 UTC. --\nAug 05 04:39:31 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 05 04:39:31 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170805 04:42:35.177" starttime="20170805 04:42:34.131"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:42:35.178" level="INFO">${stdout} = -- Logs begin at Sat 2017-08-05 04:39:31 UTC, end at Sat 2017-08-05 04:42:37 UTC. --
Aug 05 04:39:31 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 05 04:39:31 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170805 04:42:35.179" starttime="20170805 04:42:35.178"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:42:35.179" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:42:35.179" starttime="20170805 04:42:35.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:42:35.191" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:35.191" starttime="20170805 04:42:35.190"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.191" starttime="20170805 04:42:35.189"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.191" starttime="20170805 04:42:35.180"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.191" starttime="20170805 04:42:34.129"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.191" starttime="20170805 04:42:34.128"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.191" starttime="20170805 04:42:32.680"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.192" starttime="20170805 04:42:32.679"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.192" starttime="20170805 04:42:32.679"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.192" starttime="20170805 04:42:32.679"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.192" starttime="20170805 04:42:32.678"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.192" starttime="20170805 04:42:32.659"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.192" starttime="20170805 04:42:32.656"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.192" starttime="20170805 04:42:32.656"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:35.194" starttime="20170805 04:42:35.194"></status>
</kw>
<msg timestamp="20170805 04:42:35.194" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:35.194" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 04:42:35.194" starttime="20170805 04:42:35.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:35.195" starttime="20170805 04:42:35.194"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:42:35.217" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:42:35.218" starttime="20170805 04:42:35.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:42:35.218" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:42:35.218" starttime="20170805 04:42:35.218"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:42:35.219" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:42:35.219" starttime="20170805 04:42:35.219"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:42:35.220" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:42:35.220" starttime="20170805 04:42:35.219"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:42:35.442" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:42:35.442" starttime="20170805 04:42:35.221"></status>
</kw>
<msg timestamp="20170805 04:42:35.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:35.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:35.442" starttime="20170805 04:42:35.220"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:42:35.443" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:35.443" starttime="20170805 04:42:35.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:35.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:35.443" starttime="20170805 04:42:35.443"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.444" starttime="20170805 04:42:35.216"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.444" starttime="20170805 04:42:35.215"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.444" starttime="20170805 04:42:35.215"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:42:35.444" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170805 04:42:35.444" starttime="20170805 04:42:35.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:35.445" starttime="20170805 04:42:35.445"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:42:35.562" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170805 04:42:35.562" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:35.562" starttime="20170805 04:42:35.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:35.563" starttime="20170805 04:42:35.562"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:42:35.563" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:42:35.563" starttime="20170805 04:42:35.563"></status>
</kw>
<msg timestamp="20170805 04:42:35.564" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:35.564" starttime="20170805 04:42:35.214"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:35.565" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:35.565" starttime="20170805 04:42:35.565"></status>
</kw>
<msg timestamp="20170805 04:42:35.565" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 04:42:35.565" starttime="20170805 04:42:35.564"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:35.566" starttime="20170805 04:42:35.565"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:42:35.566" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501908031944, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:42:35.566" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:42:35.566" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170805 04:42:35.566" starttime="20170805 04:42:35.566"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170805 04:42:35.567" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170805 04:42:35.567" starttime="20170805 04:42:35.567"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:42:35.568" level="INFO">${logpath} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_esel</msg>
<status status="PASS" endtime="20170805 04:42:35.568" starttime="20170805 04:42:35.567"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170805 04:42:35.568" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_esel"&gt;/home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/20170805044226918687_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:35.569" starttime="20170805 04:42:35.568"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:35.570" starttime="20170805 04:42:35.569"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:42:35.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:42:35.575" starttime="20170805 04:42:35.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:42:35.576" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:42:35.576" starttime="20170805 04:42:35.576"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:42:35.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:42:35.577" starttime="20170805 04:42:35.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:42:35.579" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:42:35.579" starttime="20170805 04:42:35.578"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:42:35.801" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:42:35.802" starttime="20170805 04:42:35.580"></status>
</kw>
<msg timestamp="20170805 04:42:35.802" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:35.802" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:35.802" starttime="20170805 04:42:35.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:42:35.803" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:35.803" starttime="20170805 04:42:35.802"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:35.803" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:35.803" starttime="20170805 04:42:35.803"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.804" starttime="20170805 04:42:35.574"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.804" starttime="20170805 04:42:35.573"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.804" starttime="20170805 04:42:35.572"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:42:35.805" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170805 04:42:35.805" starttime="20170805 04:42:35.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:35.805" starttime="20170805 04:42:35.805"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:42:35.886" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170805 04:42:35.886" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:35.886" starttime="20170805 04:42:35.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:35.887" starttime="20170805 04:42:35.887"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:42:35.887" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:42:35.888" starttime="20170805 04:42:35.887"></status>
</kw>
<msg timestamp="20170805 04:42:35.888" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:42:35.888" starttime="20170805 04:42:35.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:42:35.888" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:42:35.889" starttime="20170805 04:42:35.888"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:42:35.889" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:42:35.889" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:42:35.889" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170805 04:42:35.889" starttime="20170805 04:42:35.889"></status>
</kw>
<msg timestamp="20170805 04:42:35.890" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170805 04:42:35.890" starttime="20170805 04:42:35.570"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170805 04:42:35.890" level="INFO">Length is 0</msg>
<msg timestamp="20170805 04:42:35.890" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170805 04:42:35.890" starttime="20170805 04:42:35.890"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170805 04:42:35.891" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170805 04:42:35.891" starttime="20170805 04:42:35.891"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.891" starttime="20170805 04:42:35.569"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.891" starttime="20170805 04:42:35.569"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170805 04:42:35.898" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:42:35.909" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170805 04:42:35.909" starttime="20170805 04:42:35.891"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170805 04:42:35.914" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170805 04:42:35.914" starttime="20170805 04:42:35.913"></status>
</kw>
<msg timestamp="20170805 04:42:35.914" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:42:35.914" starttime="20170805 04:42:35.912"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170805 04:42:35.915" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170805 04:42:35.915" starttime="20170805 04:42:35.915"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.915" starttime="20170805 04:42:35.213"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.915" starttime="20170805 04:42:35.195"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.916" starttime="20170805 04:42:35.192"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.916" starttime="20170805 04:42:35.192"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:35.919" starttime="20170805 04:42:35.918"></status>
</kw>
<msg timestamp="20170805 04:42:35.919" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:42:35.919" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 04:42:35.919" starttime="20170805 04:42:35.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:35.920" starttime="20170805 04:42:35.919"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170805 04:42:35.942" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170805 04:42:35.942" starttime="20170805 04:42:35.942"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.942" starttime="20170805 04:42:35.941"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.942" starttime="20170805 04:42:35.920"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.942" starttime="20170805 04:42:35.916"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.943" starttime="20170805 04:42:35.916"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.943" starttime="20170805 04:42:28.002"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.943" starttime="20170805 04:42:28.000"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.943" starttime="20170805 04:42:27.999"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:35.943" starttime="20170805 04:42:27.999"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170805 04:42:36.043" starttime="20170805 04:42:35.952"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:36.043" starttime="20170805 04:42:35.943"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:36.043" starttime="20170805 04:42:27.998"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:36.043" starttime="20170805 04:42:23.791"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:36.043" starttime="20170805 04:42:23.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:36.044" starttime="20170805 04:42:36.044"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170805 04:42:36.046" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170805 04:42:36.046" starttime="20170805 04:42:36.045"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170805 04:42:36.046" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170805044226918687_UpdateBmc/20170805044226918687_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170805 04:42:36.046" starttime="20170805 04:42:36.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:36.048" starttime="20170805 04:42:36.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:36.049" starttime="20170805 04:42:36.049"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170805 04:42:36.051" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170805 04:42:36.051" starttime="20170805 04:42:36.049"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170805 04:42:36.052" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170805 04:42:36.052" starttime="20170805 04:42:36.052"></status>
</kw>
<msg timestamp="20170805 04:42:36.052" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170805 04:42:36.052" starttime="20170805 04:42:36.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:36.053" starttime="20170805 04:42:36.052"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170805 04:42:36.054" starttime="20170805 04:42:36.053"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 04:42:36.056" level="INFO">${cur_time} = 2017-08-05 04:42:36:054959</msg>
<status status="PASS" endtime="20170805 04:42:36.056" starttime="20170805 04:42:36.055"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 04:42:36.056" level="INFO">${cur_time} = 20170805044236054959</msg>
<status status="PASS" endtime="20170805 04:42:36.056" starttime="20170805 04:42:36.056"></status>
</kw>
<msg timestamp="20170805 04:42:36.057" level="INFO">${cur_time} = 20170805044236054959</msg>
<status status="PASS" endtime="20170805 04:42:36.057" starttime="20170805 04:42:36.054"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170805 04:42:36.058" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:42:36.058" starttime="20170805 04:42:36.057"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:36.058" starttime="20170805 04:42:36.045"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:36.058" starttime="20170805 04:42:23.458"></status>
</kw>
<status status="PASS" endtime="20170805 04:42:36.058" starttime="20170805 04:42:23.449"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170805 04:42:36.059" critical="yes" starttime="20170805 04:38:21.978">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170805 04:42:36.060" starttime="20170805 04:38:20.903"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170805 04:39:22.897" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff988b2910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 04:39:43.119" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff988b2390&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
</errors>
</robot>
