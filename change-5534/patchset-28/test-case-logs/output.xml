<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170824 14:41:09.945">
<suite name="Tests" source="/tmp/fspcibld/31355/obmc-robot/tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:41:10.611">Dictionary does not contain key 'host'.</msg>
<status endtime="20170824 14:41:10.611" status="FAIL" starttime="20170824 14:41:10.611"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:10.612">${has_host} = False</msg>
<status endtime="20170824 14:41:10.612" status="PASS" starttime="20170824 14:41:10.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170824 14:41:10.613" status="PASS" starttime="20170824 14:41:10.613"></status>
</kw>
<status endtime="20170824 14:41:10.613" status="PASS" starttime="20170824 14:41:10.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:10.614">${port_num} = 22</msg>
<status endtime="20170824 14:41:10.614" status="PASS" starttime="20170824 14:41:10.614"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:10.615">${SSH_PORT} = 22</msg>
<status endtime="20170824 14:41:10.615" status="PASS" starttime="20170824 14:41:10.615"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:10.616">${https_num} = 443</msg>
<status endtime="20170824 14:41:10.616" status="PASS" starttime="20170824 14:41:10.615"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:10.616">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170824 14:41:10.616" status="PASS" starttime="20170824 14:41:10.616"></status>
</kw>
<status endtime="20170824 14:41:10.617" status="PASS" starttime="20170824 14:41:10.614"></status>
</kw>
<status endtime="20170824 14:41:10.617" status="PASS" starttime="20170824 14:41:10.613"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:41:10.617">Dictionary does not contain key 'port'.</msg>
<status endtime="20170824 14:41:10.618" status="FAIL" starttime="20170824 14:41:10.617"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:10.618">${has_port} = False</msg>
<status endtime="20170824 14:41:10.618" status="PASS" starttime="20170824 14:41:10.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170824 14:41:10.619" status="PASS" starttime="20170824 14:41:10.619"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170824 14:41:10.620" status="PASS" starttime="20170824 14:41:10.620"></status>
</kw>
<status endtime="20170824 14:41:10.620" status="PASS" starttime="20170824 14:41:10.619"></status>
</kw>
<status endtime="20170824 14:41:10.621" status="PASS" starttime="20170824 14:41:10.618"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:10.621">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170824 14:41:12.368">Read output: root@witherspoon:~#</msg>
<status endtime="20170824 14:41:12.368" status="PASS" starttime="20170824 14:41:10.621"></status>
</kw>
<status endtime="20170824 14:41:12.369" status="PASS" starttime="20170824 14:41:10.610"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:12.370">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170824 14:41:12.447">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170824 14:41:12.447">${output} = VERSION_ID="v1.99.9-41-g54e9afc"</msg>
<msg level="INFO" timestamp="20170824 14:41:12.447">${stderr} = </msg>
<status endtime="20170824 14:41:12.447" status="PASS" starttime="20170824 14:41:12.370"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:12.448">Length is 0</msg>
<status endtime="20170824 14:41:12.448" status="PASS" starttime="20170824 14:41:12.448"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:12.448">VERSION_ID="v1.99.9-41-g54e9afc"</msg>
<status endtime="20170824 14:41:12.448" status="PASS" starttime="20170824 14:41:12.448"></status>
</kw>
<status endtime="20170824 14:41:12.449" status="PASS" starttime="20170824 14:41:12.369"></status>
</kw>
<status endtime="20170824 14:41:12.449" status="PASS" starttime="20170824 14:41:12.369"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:12.450">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170824 14:41:12.530">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170824 14:41:12.530">${stdout} = </msg>
<msg level="INFO" timestamp="20170824 14:41:12.530">${stderr} = sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170824 14:41:12.530" status="PASS" starttime="20170824 14:41:12.450"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:12.531">Length is 105</msg>
<msg level="FAIL" timestamp="20170824 14:41:12.531">'sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170824 14:41:12.531" status="FAIL" starttime="20170824 14:41:12.531"></status>
</kw>
<status endtime="20170824 14:41:12.531" status="FAIL" starttime="20170824 14:41:12.449"></status>
</kw>
<status endtime="20170824 14:41:12.532" status="FAIL" starttime="20170824 14:41:12.449"></status>
</kw>
<status endtime="20170824 14:41:12.532" status="PASS" starttime="20170824 14:41:12.449"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:12.963">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:41:12.963">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170824 14:41:13.753">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170824 14:41:13.754">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170824 14:41:13.830">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170824 14:41:13.843">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170824 14:41:13.843">${stderr} = </msg>
<msg level="INFO" timestamp="20170824 14:41:13.843">${rc} = 0</msg>
<status endtime="20170824 14:41:13.843" status="PASS" starttime="20170824 14:41:12.534"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:13.844">Length is 0</msg>
<status endtime="20170824 14:41:13.845" status="PASS" starttime="20170824 14:41:13.843"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:13.845">Length is 11</msg>
<status endtime="20170824 14:41:13.845" status="PASS" starttime="20170824 14:41:13.845"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:13.846">${bmc_model} = Witherspoon</msg>
<status endtime="20170824 14:41:13.846" status="PASS" starttime="20170824 14:41:12.534"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:13.846">BMC Model=Witherspoon</msg>
<status endtime="20170824 14:41:13.847" status="PASS" starttime="20170824 14:41:13.846"></status>
</kw>
<status endtime="20170824 14:41:13.847" status="PASS" starttime="20170824 14:41:12.533"></status>
</kw>
<status endtime="20170824 14:41:13.847" status="PASS" starttime="20170824 14:41:12.532"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:41:13.850">Dictionary does not contain key 'host'.</msg>
<status endtime="20170824 14:41:13.850" status="FAIL" starttime="20170824 14:41:13.850"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:13.850">${has_host} = False</msg>
<status endtime="20170824 14:41:13.850" status="PASS" starttime="20170824 14:41:13.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170824 14:41:13.852" status="PASS" starttime="20170824 14:41:13.851"></status>
</kw>
<status endtime="20170824 14:41:13.854" status="PASS" starttime="20170824 14:41:13.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:13.855">${port_num} = 22</msg>
<status endtime="20170824 14:41:13.855" status="PASS" starttime="20170824 14:41:13.855"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:13.856">${SSH_PORT} = 22</msg>
<status endtime="20170824 14:41:13.856" status="PASS" starttime="20170824 14:41:13.856"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:13.856">${https_num} = 443</msg>
<status endtime="20170824 14:41:13.856" status="PASS" starttime="20170824 14:41:13.856"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:13.857">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170824 14:41:13.857" status="PASS" starttime="20170824 14:41:13.857"></status>
</kw>
<status endtime="20170824 14:41:13.857" status="PASS" starttime="20170824 14:41:13.855"></status>
</kw>
<status endtime="20170824 14:41:13.857" status="PASS" starttime="20170824 14:41:13.854"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:41:13.858">Dictionary does not contain key 'port'.</msg>
<status endtime="20170824 14:41:13.858" status="FAIL" starttime="20170824 14:41:13.858"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:13.858">${has_port} = False</msg>
<status endtime="20170824 14:41:13.858" status="PASS" starttime="20170824 14:41:13.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170824 14:41:13.860" status="PASS" starttime="20170824 14:41:13.860"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170824 14:41:13.861" status="PASS" starttime="20170824 14:41:13.860"></status>
</kw>
<status endtime="20170824 14:41:13.861" status="PASS" starttime="20170824 14:41:13.859"></status>
</kw>
<status endtime="20170824 14:41:13.861" status="PASS" starttime="20170824 14:41:13.859"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:13.861">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170824 14:41:15.548">Read output: root@witherspoon:~#</msg>
<status endtime="20170824 14:41:15.548" status="PASS" starttime="20170824 14:41:13.861"></status>
</kw>
<status endtime="20170824 14:41:15.548" status="PASS" starttime="20170824 14:41:13.848"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:15.549">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170824 14:41:15.627">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170824 14:41:15.627">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170824 14:41:15.627">${stderr} = </msg>
<status endtime="20170824 14:41:15.627" status="PASS" starttime="20170824 14:41:15.549"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:15.628">Length is 0</msg>
<status endtime="20170824 14:41:15.628" status="PASS" starttime="20170824 14:41:15.627"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:15.628">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170824 14:41:15.628" status="PASS" starttime="20170824 14:41:15.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170824 14:41:15.628" status="PASS" starttime="20170824 14:41:15.628"></status>
</kw>
<status endtime="20170824 14:41:15.629" status="PASS" starttime="20170824 14:41:13.848"></status>
</kw>
<status endtime="20170824 14:41:15.629" status="PASS" starttime="20170824 14:41:13.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170824 14:41:15.629" status="PASS" starttime="20170824 14:41:15.629"></status>
</kw>
<status endtime="20170824 14:41:15.629" status="PASS" starttime="20170824 14:41:10.610"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/31355/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/31355/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:15.718">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:15.718" status="PASS" starttime="20170824 14:41:15.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:15.719">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:15.719" status="PASS" starttime="20170824 14:41:15.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:15.720">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:15.720" status="PASS" starttime="20170824 14:41:15.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:15.721">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:15.721" status="PASS" starttime="20170824 14:41:15.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:15.946">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:15.946" status="PASS" starttime="20170824 14:41:15.721"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:15.946">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:15.947">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:15.947" status="PASS" starttime="20170824 14:41:15.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:15.947">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:15.947" status="PASS" starttime="20170824 14:41:15.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:15.948">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:15.948" status="PASS" starttime="20170824 14:41:15.948"></status>
</kw>
<status endtime="20170824 14:41:15.948" status="PASS" starttime="20170824 14:41:15.717"></status>
</kw>
<status endtime="20170824 14:41:15.948" status="PASS" starttime="20170824 14:41:15.717"></status>
</kw>
<status endtime="20170824 14:41:15.948" status="PASS" starttime="20170824 14:41:15.716"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:15.954">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:15.955" status="PASS" starttime="20170824 14:41:15.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:15.955">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:15.955" status="PASS" starttime="20170824 14:41:15.955"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:15.956">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:15.956" status="PASS" starttime="20170824 14:41:15.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:15.956">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:15.956" status="PASS" starttime="20170824 14:41:15.956"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:16.153">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:16.154" status="PASS" starttime="20170824 14:41:15.957"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.154">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:16.154">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:16.154" status="PASS" starttime="20170824 14:41:15.957"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:16.154">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:16.154" status="PASS" starttime="20170824 14:41:16.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:16.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:16.155" status="PASS" starttime="20170824 14:41:16.155"></status>
</kw>
<status endtime="20170824 14:41:16.155" status="PASS" starttime="20170824 14:41:15.953"></status>
</kw>
<status endtime="20170824 14:41:16.155" status="PASS" starttime="20170824 14:41:15.953"></status>
</kw>
<status endtime="20170824 14:41:16.155" status="PASS" starttime="20170824 14:41:15.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.156">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 14:41:16.156" status="PASS" starttime="20170824 14:41:16.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.158">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:16.158" status="PASS" starttime="20170824 14:41:16.157"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:16.159">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:16.159" status="PASS" starttime="20170824 14:41:16.159"></status>
</kw>
<status endtime="20170824 14:41:16.159" status="PASS" starttime="20170824 14:41:16.158"></status>
</kw>
<status endtime="20170824 14:41:16.160" status="PASS" starttime="20170824 14:41:16.157"></status>
</kw>
<status endtime="20170824 14:41:16.160" status="PASS" starttime="20170824 14:41:16.156"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.252">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:41:16.252">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:16.252" status="PASS" starttime="20170824 14:41:16.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.254">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:16.254" status="PASS" starttime="20170824 14:41:16.254"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:16.255">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:16.255" status="PASS" starttime="20170824 14:41:16.255"></status>
</kw>
<status endtime="20170824 14:41:16.255" status="PASS" starttime="20170824 14:41:16.254"></status>
</kw>
<status endtime="20170824 14:41:16.255" status="PASS" starttime="20170824 14:41:16.253"></status>
</kw>
<status endtime="20170824 14:41:16.255" status="PASS" starttime="20170824 14:41:16.252"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:16.256">Delete All Sessions</msg>
<status endtime="20170824 14:41:16.256" status="PASS" starttime="20170824 14:41:16.256"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.256">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:16.256" status="PASS" starttime="20170824 14:41:15.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:16.257">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:16.257" status="PASS" starttime="20170824 14:41:16.257"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.257">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:41:16.258">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:41:16.258">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:41:16.258" status="PASS" starttime="20170824 14:41:16.257"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.258">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170824 14:41:16.258" status="PASS" starttime="20170824 14:41:15.950"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.258">${host_state} = Off</msg>
<status endtime="20170824 14:41:16.259" status="PASS" starttime="20170824 14:41:15.949"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:41:16.260">Off != Quiesced</msg>
<status endtime="20170824 14:41:16.260" status="FAIL" starttime="20170824 14:41:16.259"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.260">${status} = False</msg>
<status endtime="20170824 14:41:16.260" status="PASS" starttime="20170824 14:41:16.259"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.260">${status} = False</msg>
<status endtime="20170824 14:41:16.260" status="PASS" starttime="20170824 14:41:15.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170824 14:41:16.261" status="PASS" starttime="20170824 14:41:16.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170824 14:41:16.261" status="PASS" starttime="20170824 14:41:16.261"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.277">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170824 14:41:16.277" status="PASS" starttime="20170824 14:41:16.262"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.292">${FFDC_DIR_PATH} = </msg>
<status endtime="20170824 14:41:16.292" status="PASS" starttime="20170824 14:41:16.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.295">${cur_time} = 2017-08-24 14:41:16:294563</msg>
<status endtime="20170824 14:41:16.295" status="PASS" starttime="20170824 14:41:16.294"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.296">${cur_time} = 20170824144116294563</msg>
<status endtime="20170824 14:41:16.296" status="PASS" starttime="20170824 14:41:16.295"></status>
</kw>
<status endtime="20170824 14:41:16.296" status="PASS" starttime="20170824 14:41:16.294"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.303">${FFDC_TIME} = 20170824144116294563</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.304">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170824 14:41:16.304" status="PASS" starttime="20170824 14:41:16.304"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.305">${suite_name} = 20170824144116294563_TestsSecurityTestSsl</msg>
<status endtime="20170824 14:41:16.305" status="PASS" starttime="20170824 14:41:16.305"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.306">${test_name} = TestSSLConnection</msg>
<status endtime="20170824 14:41:16.306" status="PASS" starttime="20170824 14:41:16.305"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.306">${test_name} = 20170824144116294563_TestSSLConnection</msg>
<status endtime="20170824 14:41:16.306" status="PASS" starttime="20170824 14:41:16.306"></status>
</kw>
<status endtime="20170824 14:41:16.306" status="PASS" starttime="20170824 14:41:16.304"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.307">${FFDC_DIR_PATH} = /tmp/fspcibld/31355/obmc-robot/logs/20170824144116294563_TestsSecurityTestSsl/20170824144116294563_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170824 14:41:16.311">${FFDC_PREFIX} = 20170824144116294563_</msg>
<status endtime="20170824 14:41:16.312" status="PASS" starttime="20170824 14:41:16.293"></status>
</kw>
<status endtime="20170824 14:41:16.312" status="PASS" starttime="20170824 14:41:16.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170824 14:41:16.312" status="PASS" starttime="20170824 14:41:16.312"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:41:16.313">Created directory '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs"&gt;/tmp/fspcibld/31355/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170824 14:41:16.313" status="PASS" starttime="20170824 14:41:16.313"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:41:16.314">File '/tmp/fspcibld/31355/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170824 14:41:16.314" status="FAIL" starttime="20170824 14:41:16.314"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.314">${exist} = False</msg>
<status endtime="20170824 14:41:16.314" status="PASS" starttime="20170824 14:41:16.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:41:16.316">Created file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:41:16.316" status="PASS" starttime="20170824 14:41:16.315"></status>
</kw>
<status endtime="20170824 14:41:16.316" status="PASS" starttime="20170824 14:41:16.315"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170824 14:41:16.316" status="PASS" starttime="20170824 14:41:16.316"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.317">${cur_time} = 2017-08-24 14:41:16:317057</msg>
<status endtime="20170824 14:41:16.317" status="PASS" starttime="20170824 14:41:16.317"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.318">${cur_time} = 20170824144116317057</msg>
<status endtime="20170824 14:41:16.318" status="PASS" starttime="20170824 14:41:16.317"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.318">${cur_time} = 20170824144116317057</msg>
<status endtime="20170824 14:41:16.318" status="PASS" starttime="20170824 14:41:16.316"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:41:16.319">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:41:16.319" status="PASS" starttime="20170824 14:41:16.318"></status>
</kw>
<status endtime="20170824 14:41:16.319" status="PASS" starttime="20170824 14:41:16.261"></status>
</kw>
<status endtime="20170824 14:41:16.319" status="PASS" starttime="20170824 14:41:15.949"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170824 14:41:16.319" status="PASS" critical="yes" starttime="20170824 14:41:15.715"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:16.321">Delete All Sessions</msg>
<status endtime="20170824 14:41:16.321" status="PASS" starttime="20170824 14:41:16.320"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170824 14:41:16.321" status="PASS" starttime="20170824 14:41:15.632"></status>
</suite>
<status endtime="20170824 14:41:16.323" status="PASS" starttime="20170824 14:41:15.630"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/31355/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.364">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 14:41:16.364" status="PASS" starttime="20170824 14:41:16.363"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.364">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 14:41:16.365" status="PASS" starttime="20170824 14:41:16.364"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.365">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 14:41:16.365" status="PASS" starttime="20170824 14:41:16.363"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.366">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 14:41:16.366" status="PASS" starttime="20170824 14:41:16.366"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.367">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 14:41:16.367" status="PASS" starttime="20170824 14:41:16.367"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.367">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 14:41:16.367" status="PASS" starttime="20170824 14:41:16.366"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.369">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170824 14:41:16.369" status="PASS" starttime="20170824 14:41:16.368"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 14:41:16.369" status="PASS" starttime="20170824 14:41:16.369"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.373">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170824 14:41:16.381">${rc} = 0</msg>
<msg level="INFO" timestamp="20170824 14:41:16.381">${output} = /tmp/fspcibld/31355/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170824 14:41:16.381" status="PASS" starttime="20170824 14:41:16.370"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170824 14:41:16.394" status="PASS" starttime="20170824 14:41:16.391"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170824 14:41:16.397" status="PASS" starttime="20170824 14:41:16.394"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.398">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170824 14:41:16.398" status="PASS" starttime="20170824 14:41:16.397"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.399">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170824 14:41:16.399" status="PASS" starttime="20170824 14:41:16.368"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.400">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170824 14:41:16.400" status="PASS" starttime="20170824 14:41:16.400"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 14:41:16.401" status="PASS" starttime="20170824 14:41:16.400"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.405">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170824 14:41:16.417">${rc} = 0</msg>
<msg level="INFO" timestamp="20170824 14:41:16.417">${os_con_pid} = </msg>
<status endtime="20170824 14:41:16.417" status="PASS" starttime="20170824 14:41:16.401"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170824 14:41:16.420" status="PASS" starttime="20170824 14:41:16.419"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.420">${cmd_buf} = kill -9 </msg>
<status endtime="20170824 14:41:16.421" status="PASS" starttime="20170824 14:41:16.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 14:41:16.422" status="PASS" starttime="20170824 14:41:16.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.422">${rc} = None</msg>
<msg level="INFO" timestamp="20170824 14:41:16.423">${output} = None</msg>
<status endtime="20170824 14:41:16.423" status="PASS" starttime="20170824 14:41:16.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170824 14:41:16.423" status="PASS" starttime="20170824 14:41:16.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:41:16.427">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status endtime="20170824 14:41:16.427" status="FAIL" starttime="20170824 14:41:16.426"></status>
</kw>
<status endtime="20170824 14:41:16.427" status="PASS" starttime="20170824 14:41:16.424"></status>
</kw>
<status endtime="20170824 14:41:16.427" status="PASS" starttime="20170824 14:41:16.424"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.428">${output} = </msg>
<status endtime="20170824 14:41:16.428" status="PASS" starttime="20170824 14:41:16.427"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.429">${loc_quiet} = 1</msg>
<status endtime="20170824 14:41:16.429" status="PASS" starttime="20170824 14:41:16.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170824 14:41:16.490" status="PASS" starttime="20170824 14:41:16.430"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.491">${rc} = 1</msg>
<msg level="INFO" timestamp="20170824 14:41:16.491">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170824 14:41:16.491" status="PASS" starttime="20170824 14:41:16.429"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.492">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170824 14:41:16.492" status="PASS" starttime="20170824 14:41:16.365"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:41:16.494">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170824 14:41:16.494" status="PASS" starttime="20170824 14:41:16.493"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.495">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170824 14:41:16.495" status="PASS" starttime="20170824 14:41:16.495"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 14:41:16.496" status="PASS" starttime="20170824 14:41:16.495"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.508">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170824 14:41:16.521">${rc} = 0</msg>
<msg level="INFO" timestamp="20170824 14:41:16.521">${output} = /tmp/fspcibld/31355/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170824 14:41:16.522" status="PASS" starttime="20170824 14:41:16.496"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170824 14:41:16.533" status="PASS" starttime="20170824 14:41:16.532"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170824 14:41:16.534" status="PASS" starttime="20170824 14:41:16.534"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.536">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170824 14:41:16.536" status="PASS" starttime="20170824 14:41:16.535"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:16.536">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170824 14:41:16.536" status="PASS" starttime="20170824 14:41:16.494"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.537">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170824 14:41:16.537" status="PASS" starttime="20170824 14:41:16.537"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 14:41:16.538" status="PASS" starttime="20170824 14:41:16.538"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.542">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170824 14:41:16.545">${rc} = 0</msg>
<msg level="INFO" timestamp="20170824 14:41:16.545">${output} = </msg>
<status endtime="20170824 14:41:16.545" status="PASS" starttime="20170824 14:41:16.539"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170824 14:41:16.548" status="PASS" starttime="20170824 14:41:16.547"></status>
</kw>
<status endtime="20170824 14:41:16.548" status="PASS" starttime="20170824 14:41:16.362"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:16.549">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.552">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170824 14:41:16.552" status="PASS" starttime="20170824 14:41:16.551"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.553">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170824 14:41:16.553" status="PASS" starttime="20170824 14:41:16.553"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:16.558">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:16.559" status="PASS" starttime="20170824 14:41:16.557"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.559">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:16.559" status="PASS" starttime="20170824 14:41:16.559"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.560">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:16.560" status="PASS" starttime="20170824 14:41:16.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:16.560">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:16.561" status="PASS" starttime="20170824 14:41:16.560"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:17.066">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:17.066" status="PASS" starttime="20170824 14:41:16.561"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:17.067">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:17.067">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:17.067" status="PASS" starttime="20170824 14:41:16.561"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:17.067">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:17.068" status="PASS" starttime="20170824 14:41:17.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:17.068">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:17.068" status="PASS" starttime="20170824 14:41:17.068"></status>
</kw>
<status endtime="20170824 14:41:17.068" status="PASS" starttime="20170824 14:41:16.556"></status>
</kw>
<status endtime="20170824 14:41:17.069" status="PASS" starttime="20170824 14:41:16.555"></status>
</kw>
<status endtime="20170824 14:41:17.069" status="PASS" starttime="20170824 14:41:16.555"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:17.069">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170824 14:41:17.069" status="PASS" starttime="20170824 14:41:17.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:17.070">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:17.070" status="PASS" starttime="20170824 14:41:17.069"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170824 14:41:17.070" status="PASS" starttime="20170824 14:41:17.070"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:17.072">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170824 14:41:17.072" status="PASS" starttime="20170824 14:41:17.071"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:17.073">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170824 14:41:17.073" status="PASS" starttime="20170824 14:41:17.073"></status>
</kw>
<status endtime="20170824 14:41:17.073" status="PASS" starttime="20170824 14:41:17.072"></status>
</kw>
<status endtime="20170824 14:41:17.073" status="PASS" starttime="20170824 14:41:17.071"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:18.154">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170824 14:41:18.155">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:18.155" status="PASS" starttime="20170824 14:41:17.074"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:18.156">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:18.156" status="PASS" starttime="20170824 14:41:18.156"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:18.157">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:18.157" status="PASS" starttime="20170824 14:41:18.157"></status>
</kw>
<status endtime="20170824 14:41:18.157" status="PASS" starttime="20170824 14:41:18.156"></status>
</kw>
<status endtime="20170824 14:41:18.158" status="PASS" starttime="20170824 14:41:18.155"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:18.158">Delete All Sessions</msg>
<status endtime="20170824 14:41:18.158" status="PASS" starttime="20170824 14:41:18.158"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:18.158">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:18.158" status="PASS" starttime="20170824 14:41:16.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:18.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:18.159" status="PASS" starttime="20170824 14:41:18.159"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:18.160">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:41:18.160">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:41:18.160">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status endtime="20170824 14:41:18.160" status="PASS" starttime="20170824 14:41:18.159"></status>
</kw>
<status endtime="20170824 14:41:18.160" status="PASS" starttime="20170824 14:41:16.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170824 14:41:18.161" status="PASS" starttime="20170824 14:41:18.160"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:18.165">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:18.166" status="PASS" starttime="20170824 14:41:18.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:18.166">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:18.166" status="PASS" starttime="20170824 14:41:18.166"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:18.167">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:18.167" status="PASS" starttime="20170824 14:41:18.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:18.168">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:18.168" status="PASS" starttime="20170824 14:41:18.167"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:19.403">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:19.403" status="PASS" starttime="20170824 14:41:18.169"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:19.403">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:19.403">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:19.403" status="PASS" starttime="20170824 14:41:18.168"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:19.404">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:19.404" status="PASS" starttime="20170824 14:41:19.404"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:19.405">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:19.405" status="PASS" starttime="20170824 14:41:19.404"></status>
</kw>
<status endtime="20170824 14:41:19.405" status="PASS" starttime="20170824 14:41:18.165"></status>
</kw>
<status endtime="20170824 14:41:19.405" status="PASS" starttime="20170824 14:41:18.164"></status>
</kw>
<status endtime="20170824 14:41:19.405" status="PASS" starttime="20170824 14:41:18.164"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:19.406">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:41:19.406" status="PASS" starttime="20170824 14:41:19.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:19.408">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:19.408" status="PASS" starttime="20170824 14:41:19.407"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:19.409">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:19.409" status="PASS" starttime="20170824 14:41:19.409"></status>
</kw>
<status endtime="20170824 14:41:19.409" status="PASS" starttime="20170824 14:41:19.408"></status>
</kw>
<status endtime="20170824 14:41:19.409" status="PASS" starttime="20170824 14:41:19.407"></status>
</kw>
<status endtime="20170824 14:41:19.409" status="PASS" starttime="20170824 14:41:19.406"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:23.813">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:41:23.814">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:23.814" status="PASS" starttime="20170824 14:41:19.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:23.816">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:23.816" status="PASS" starttime="20170824 14:41:23.815"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:23.817">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:23.817" status="PASS" starttime="20170824 14:41:23.816"></status>
</kw>
<status endtime="20170824 14:41:23.817" status="PASS" starttime="20170824 14:41:23.816"></status>
</kw>
<status endtime="20170824 14:41:23.817" status="PASS" starttime="20170824 14:41:23.815"></status>
</kw>
<status endtime="20170824 14:41:23.817" status="PASS" starttime="20170824 14:41:23.814"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:23.817">Delete All Sessions</msg>
<status endtime="20170824 14:41:23.818" status="PASS" starttime="20170824 14:41:23.817"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:23.818">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:23.818" status="PASS" starttime="20170824 14:41:18.163"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:23.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:23.818" status="PASS" starttime="20170824 14:41:23.818"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:23.819">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:41:23.819">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:41:23.819">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:41:23.819" status="PASS" starttime="20170824 14:41:23.819"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:23.819">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170824 14:41:23.819" status="PASS" starttime="20170824 14:41:18.162"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:23.820">${power_state} = Off</msg>
<status endtime="20170824 14:41:23.820" status="PASS" starttime="20170824 14:41:18.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 14:41:23.820" status="PASS" starttime="20170824 14:41:23.820"></status>
</kw>
<status endtime="20170824 14:41:23.820" status="PASS" starttime="20170824 14:41:18.162"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:23.824">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:23.825" status="PASS" starttime="20170824 14:41:23.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:23.825">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:23.825" status="PASS" starttime="20170824 14:41:23.825"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:23.826">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:23.826" status="PASS" starttime="20170824 14:41:23.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:23.827">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:23.827" status="PASS" starttime="20170824 14:41:23.826"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:24.256">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:24.256" status="PASS" starttime="20170824 14:41:23.828"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:24.256">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:24.256">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:24.256" status="PASS" starttime="20170824 14:41:23.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:24.257">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:24.257" status="PASS" starttime="20170824 14:41:24.257"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:24.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:24.258" status="PASS" starttime="20170824 14:41:24.257"></status>
</kw>
<status endtime="20170824 14:41:24.258" status="PASS" starttime="20170824 14:41:23.824"></status>
</kw>
<status endtime="20170824 14:41:24.258" status="PASS" starttime="20170824 14:41:23.823"></status>
</kw>
<status endtime="20170824 14:41:24.258" status="PASS" starttime="20170824 14:41:23.822"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.259">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 14:41:24.259" status="PASS" starttime="20170824 14:41:24.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.261">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:24.261" status="PASS" starttime="20170824 14:41:24.260"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:24.262">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:24.262" status="PASS" starttime="20170824 14:41:24.262"></status>
</kw>
<status endtime="20170824 14:41:24.262" status="PASS" starttime="20170824 14:41:24.261"></status>
</kw>
<status endtime="20170824 14:41:24.262" status="PASS" starttime="20170824 14:41:24.259"></status>
</kw>
<status endtime="20170824 14:41:24.262" status="PASS" starttime="20170824 14:41:24.259"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.513">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:41:24.514">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:24.514" status="PASS" starttime="20170824 14:41:24.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.518">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:24.518" status="PASS" starttime="20170824 14:41:24.515"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:24.519">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:24.519" status="PASS" starttime="20170824 14:41:24.519"></status>
</kw>
<status endtime="20170824 14:41:24.519" status="PASS" starttime="20170824 14:41:24.518"></status>
</kw>
<status endtime="20170824 14:41:24.519" status="PASS" starttime="20170824 14:41:24.515"></status>
</kw>
<status endtime="20170824 14:41:24.519" status="PASS" starttime="20170824 14:41:24.514"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:24.520">Delete All Sessions</msg>
<status endtime="20170824 14:41:24.520" status="PASS" starttime="20170824 14:41:24.520"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:24.520">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:24.520" status="PASS" starttime="20170824 14:41:23.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:24.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:24.521" status="PASS" starttime="20170824 14:41:24.520"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.521">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:41:24.521">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:41:24.521">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:41:24.521" status="PASS" starttime="20170824 14:41:24.521"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:24.522">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170824 14:41:24.522" status="PASS" starttime="20170824 14:41:23.821"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:24.522">${host_state} = Off</msg>
<status endtime="20170824 14:41:24.522" status="PASS" starttime="20170824 14:41:23.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 14:41:24.523" status="PASS" starttime="20170824 14:41:24.522"></status>
</kw>
<status endtime="20170824 14:41:24.523" status="PASS" starttime="20170824 14:41:18.161"></status>
</kw>
<status endtime="20170824 14:41:24.523" status="PASS" starttime="20170824 14:41:18.161"></status>
</kw>
<status endtime="20170824 14:41:24.523" status="PASS" starttime="20170824 14:41:16.551"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.524">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170824 14:41:24.524" status="PASS" starttime="20170824 14:41:24.524"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.525">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170824 14:41:24.525" status="PASS" starttime="20170824 14:41:24.525"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:24.528">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:24.528" status="PASS" starttime="20170824 14:41:24.528"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.529">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:24.529" status="PASS" starttime="20170824 14:41:24.529"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.530">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:24.530" status="PASS" starttime="20170824 14:41:24.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.531">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:24.531" status="PASS" starttime="20170824 14:41:24.530"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:24.795">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:24.796" status="PASS" starttime="20170824 14:41:24.531"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:24.796">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:24.796">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:24.796" status="PASS" starttime="20170824 14:41:24.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:24.797">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:24.797" status="PASS" starttime="20170824 14:41:24.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:24.798">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:24.798" status="PASS" starttime="20170824 14:41:24.797"></status>
</kw>
<status endtime="20170824 14:41:24.798" status="PASS" starttime="20170824 14:41:24.527"></status>
</kw>
<status endtime="20170824 14:41:24.798" status="PASS" starttime="20170824 14:41:24.527"></status>
</kw>
<status endtime="20170824 14:41:24.798" status="PASS" starttime="20170824 14:41:24.526"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.799">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170824 14:41:24.799" status="PASS" starttime="20170824 14:41:24.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.799">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:24.799" status="PASS" starttime="20170824 14:41:24.799"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170824 14:41:24.800" status="PASS" starttime="20170824 14:41:24.799"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:24.802">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170824 14:41:24.802" status="PASS" starttime="20170824 14:41:24.801"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:24.803">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170824 14:41:24.803" status="PASS" starttime="20170824 14:41:24.802"></status>
</kw>
<status endtime="20170824 14:41:24.803" status="PASS" starttime="20170824 14:41:24.802"></status>
</kw>
<status endtime="20170824 14:41:24.803" status="PASS" starttime="20170824 14:41:24.800"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:25.544">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170824 14:41:25.544">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:25.544" status="PASS" starttime="20170824 14:41:24.803"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:25.546">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:25.546" status="PASS" starttime="20170824 14:41:25.545"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:25.547">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:25.547" status="PASS" starttime="20170824 14:41:25.547"></status>
</kw>
<status endtime="20170824 14:41:25.547" status="PASS" starttime="20170824 14:41:25.546"></status>
</kw>
<status endtime="20170824 14:41:25.547" status="PASS" starttime="20170824 14:41:25.545"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:25.547">Delete All Sessions</msg>
<status endtime="20170824 14:41:25.548" status="PASS" starttime="20170824 14:41:25.547"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:25.548">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:25.548" status="PASS" starttime="20170824 14:41:24.525"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:25.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:25.549" status="PASS" starttime="20170824 14:41:25.548"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:25.549">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:41:25.549">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:41:25.549">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status endtime="20170824 14:41:25.549" status="PASS" starttime="20170824 14:41:25.549"></status>
</kw>
<status endtime="20170824 14:41:25.549" status="PASS" starttime="20170824 14:41:24.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170824 14:41:25.550" status="PASS" starttime="20170824 14:41:25.550"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:25.557">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:25.558" status="PASS" starttime="20170824 14:41:25.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:25.559">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:25.559" status="PASS" starttime="20170824 14:41:25.558"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:25.560">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:25.560" status="PASS" starttime="20170824 14:41:25.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:25.560">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:25.561" status="PASS" starttime="20170824 14:41:25.560"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:26.314">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:26.314" status="PASS" starttime="20170824 14:41:25.562"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:26.314">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:26.314">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:26.315" status="PASS" starttime="20170824 14:41:25.561"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:26.315">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:26.315" status="PASS" starttime="20170824 14:41:26.315"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:26.316">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:26.316" status="PASS" starttime="20170824 14:41:26.316"></status>
</kw>
<status endtime="20170824 14:41:26.316" status="PASS" starttime="20170824 14:41:25.556"></status>
</kw>
<status endtime="20170824 14:41:26.316" status="PASS" starttime="20170824 14:41:25.555"></status>
</kw>
<status endtime="20170824 14:41:26.316" status="PASS" starttime="20170824 14:41:25.554"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:26.317">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:41:26.317" status="PASS" starttime="20170824 14:41:26.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:26.319">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:26.319" status="PASS" starttime="20170824 14:41:26.318"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:26.320">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:26.320" status="PASS" starttime="20170824 14:41:26.320"></status>
</kw>
<status endtime="20170824 14:41:26.320" status="PASS" starttime="20170824 14:41:26.319"></status>
</kw>
<status endtime="20170824 14:41:26.320" status="PASS" starttime="20170824 14:41:26.318"></status>
</kw>
<status endtime="20170824 14:41:26.320" status="PASS" starttime="20170824 14:41:26.317"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:29.065">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:41:29.066">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:29.066" status="PASS" starttime="20170824 14:41:26.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:29.068">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:29.068" status="PASS" starttime="20170824 14:41:29.067"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:29.069">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:29.070" status="PASS" starttime="20170824 14:41:29.069"></status>
</kw>
<status endtime="20170824 14:41:29.070" status="PASS" starttime="20170824 14:41:29.068"></status>
</kw>
<status endtime="20170824 14:41:29.070" status="PASS" starttime="20170824 14:41:29.067"></status>
</kw>
<status endtime="20170824 14:41:29.070" status="PASS" starttime="20170824 14:41:29.066"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:29.070">Delete All Sessions</msg>
<status endtime="20170824 14:41:29.070" status="PASS" starttime="20170824 14:41:29.070"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:29.071">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:29.071" status="PASS" starttime="20170824 14:41:25.553"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:29.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:29.071" status="PASS" starttime="20170824 14:41:29.071"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:29.072">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:41:29.072">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:41:29.072">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:41:29.072" status="PASS" starttime="20170824 14:41:29.072"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:29.072">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170824 14:41:29.072" status="PASS" starttime="20170824 14:41:25.552"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:29.073">${power_state} = Off</msg>
<status endtime="20170824 14:41:29.073" status="PASS" starttime="20170824 14:41:25.552"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:41:29.073">On != Off</msg>
<status endtime="20170824 14:41:29.073" status="FAIL" starttime="20170824 14:41:29.073"></status>
</kw>
<status endtime="20170824 14:41:29.074" status="FAIL" starttime="20170824 14:41:25.551"></status>
</kw>
<status endtime="20170824 14:41:29.074" status="FAIL" starttime="20170824 14:41:25.551"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:39.079">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:39.080" status="PASS" starttime="20170824 14:41:39.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:39.080">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:39.080" status="PASS" starttime="20170824 14:41:39.080"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:39.081">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:39.081" status="PASS" starttime="20170824 14:41:39.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:39.082">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:39.082" status="PASS" starttime="20170824 14:41:39.081"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:39.285">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:39.286" status="PASS" starttime="20170824 14:41:39.083"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:39.286">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:39.286">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:39.286" status="PASS" starttime="20170824 14:41:39.082"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:39.287">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:39.287" status="PASS" starttime="20170824 14:41:39.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:39.287">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:39.287" status="PASS" starttime="20170824 14:41:39.287"></status>
</kw>
<status endtime="20170824 14:41:39.287" status="PASS" starttime="20170824 14:41:39.078"></status>
</kw>
<status endtime="20170824 14:41:39.288" status="PASS" starttime="20170824 14:41:39.078"></status>
</kw>
<status endtime="20170824 14:41:39.288" status="PASS" starttime="20170824 14:41:39.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:39.288">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:41:39.288" status="PASS" starttime="20170824 14:41:39.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:39.291">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:39.291" status="PASS" starttime="20170824 14:41:39.290"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:39.292">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:39.292" status="PASS" starttime="20170824 14:41:39.291"></status>
</kw>
<status endtime="20170824 14:41:39.292" status="PASS" starttime="20170824 14:41:39.291"></status>
</kw>
<status endtime="20170824 14:41:39.292" status="PASS" starttime="20170824 14:41:39.289"></status>
</kw>
<status endtime="20170824 14:41:39.292" status="PASS" starttime="20170824 14:41:39.289"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:39.355">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:41:39.355">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:39.355" status="PASS" starttime="20170824 14:41:39.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:39.357">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:39.357" status="PASS" starttime="20170824 14:41:39.356"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:39.358">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:39.358" status="PASS" starttime="20170824 14:41:39.358"></status>
</kw>
<status endtime="20170824 14:41:39.358" status="PASS" starttime="20170824 14:41:39.357"></status>
</kw>
<status endtime="20170824 14:41:39.358" status="PASS" starttime="20170824 14:41:39.356"></status>
</kw>
<status endtime="20170824 14:41:39.358" status="PASS" starttime="20170824 14:41:39.355"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:39.359">Delete All Sessions</msg>
<status endtime="20170824 14:41:39.359" status="PASS" starttime="20170824 14:41:39.359"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:39.359">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:39.359" status="PASS" starttime="20170824 14:41:39.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:39.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:39.360" status="PASS" starttime="20170824 14:41:39.359"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:39.360">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:41:39.360">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:41:39.360">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:41:39.360" status="PASS" starttime="20170824 14:41:39.360"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:39.361">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170824 14:41:39.361" status="PASS" starttime="20170824 14:41:39.076"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:39.361">${power_state} = Off</msg>
<status endtime="20170824 14:41:39.361" status="PASS" starttime="20170824 14:41:39.075"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:41:39.362">On != Off</msg>
<status endtime="20170824 14:41:39.362" status="FAIL" starttime="20170824 14:41:39.362"></status>
</kw>
<status endtime="20170824 14:41:39.363" status="FAIL" starttime="20170824 14:41:39.075"></status>
</kw>
<status endtime="20170824 14:41:39.363" status="FAIL" starttime="20170824 14:41:39.074"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.369">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:49.369" status="PASS" starttime="20170824 14:41:49.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.370">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:49.370" status="PASS" starttime="20170824 14:41:49.370"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.371">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:49.371" status="PASS" starttime="20170824 14:41:49.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.371">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:49.371" status="PASS" starttime="20170824 14:41:49.371"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.550">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:49.550" status="PASS" starttime="20170824 14:41:49.372"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:49.550">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:49.550">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:49.550" status="PASS" starttime="20170824 14:41:49.372"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.551">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:49.551" status="PASS" starttime="20170824 14:41:49.551"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.552">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:49.552" status="PASS" starttime="20170824 14:41:49.551"></status>
</kw>
<status endtime="20170824 14:41:49.552" status="PASS" starttime="20170824 14:41:49.368"></status>
</kw>
<status endtime="20170824 14:41:49.552" status="PASS" starttime="20170824 14:41:49.368"></status>
</kw>
<status endtime="20170824 14:41:49.552" status="PASS" starttime="20170824 14:41:49.367"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.553">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:41:49.553" status="PASS" starttime="20170824 14:41:49.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.555">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:49.555" status="PASS" starttime="20170824 14:41:49.554"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.556">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:49.557" status="PASS" starttime="20170824 14:41:49.556"></status>
</kw>
<status endtime="20170824 14:41:49.557" status="PASS" starttime="20170824 14:41:49.556"></status>
</kw>
<status endtime="20170824 14:41:49.557" status="PASS" starttime="20170824 14:41:49.554"></status>
</kw>
<status endtime="20170824 14:41:49.557" status="PASS" starttime="20170824 14:41:49.553"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.621">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:41:49.621">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:49.621" status="PASS" starttime="20170824 14:41:49.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.623">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:49.623" status="PASS" starttime="20170824 14:41:49.622"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.624">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:49.624" status="PASS" starttime="20170824 14:41:49.624"></status>
</kw>
<status endtime="20170824 14:41:49.624" status="PASS" starttime="20170824 14:41:49.623"></status>
</kw>
<status endtime="20170824 14:41:49.624" status="PASS" starttime="20170824 14:41:49.622"></status>
</kw>
<status endtime="20170824 14:41:49.624" status="PASS" starttime="20170824 14:41:49.621"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:49.625">Delete All Sessions</msg>
<status endtime="20170824 14:41:49.625" status="PASS" starttime="20170824 14:41:49.624"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:49.625">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:49.625" status="PASS" starttime="20170824 14:41:49.366"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:49.626" status="PASS" starttime="20170824 14:41:49.625"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.626">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:41:49.626">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:41:49.626">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:41:49.626" status="PASS" starttime="20170824 14:41:49.626"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:49.627">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:41:49.627" status="PASS" starttime="20170824 14:41:49.366"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:49.627">${power_state} = On</msg>
<status endtime="20170824 14:41:49.627" status="PASS" starttime="20170824 14:41:49.365"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 14:41:49.627" status="PASS" starttime="20170824 14:41:49.627"></status>
</kw>
<status endtime="20170824 14:41:49.628" status="PASS" starttime="20170824 14:41:49.365"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.632">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:49.632" status="PASS" starttime="20170824 14:41:49.631"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.632">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:49.633" status="PASS" starttime="20170824 14:41:49.632"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.633">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:49.633" status="PASS" starttime="20170824 14:41:49.633"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.634">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:49.634" status="PASS" starttime="20170824 14:41:49.633"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.852">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:49.852" status="PASS" starttime="20170824 14:41:49.635"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:49.852">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:49.852">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:49.852" status="PASS" starttime="20170824 14:41:49.634"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.853">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:49.853" status="PASS" starttime="20170824 14:41:49.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:49.854" status="PASS" starttime="20170824 14:41:49.853"></status>
</kw>
<status endtime="20170824 14:41:49.854" status="PASS" starttime="20170824 14:41:49.630"></status>
</kw>
<status endtime="20170824 14:41:49.854" status="PASS" starttime="20170824 14:41:49.630"></status>
</kw>
<status endtime="20170824 14:41:49.854" status="PASS" starttime="20170824 14:41:49.629"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.855">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 14:41:49.855" status="PASS" starttime="20170824 14:41:49.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.857">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:49.857" status="PASS" starttime="20170824 14:41:49.856"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.858">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:41:49.858" status="PASS" starttime="20170824 14:41:49.857"></status>
</kw>
<status endtime="20170824 14:41:49.858" status="PASS" starttime="20170824 14:41:49.857"></status>
</kw>
<status endtime="20170824 14:41:49.858" status="PASS" starttime="20170824 14:41:49.855"></status>
</kw>
<status endtime="20170824 14:41:49.858" status="PASS" starttime="20170824 14:41:49.855"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.960">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:41:49.961">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:49.961" status="PASS" starttime="20170824 14:41:49.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.963">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:49.963" status="PASS" starttime="20170824 14:41:49.962"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.965">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:49.965" status="PASS" starttime="20170824 14:41:49.964"></status>
</kw>
<status endtime="20170824 14:41:49.965" status="PASS" starttime="20170824 14:41:49.963"></status>
</kw>
<status endtime="20170824 14:41:49.965" status="PASS" starttime="20170824 14:41:49.962"></status>
</kw>
<status endtime="20170824 14:41:49.965" status="PASS" starttime="20170824 14:41:49.961"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:49.966">Delete All Sessions</msg>
<status endtime="20170824 14:41:49.966" status="PASS" starttime="20170824 14:41:49.966"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:49.966">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:49.966" status="PASS" starttime="20170824 14:41:49.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:49.967" status="PASS" starttime="20170824 14:41:49.966"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.967">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:41:49.967">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:41:49.967">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:41:49.967" status="PASS" starttime="20170824 14:41:49.967"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:49.968">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 14:41:49.968" status="PASS" starttime="20170824 14:41:49.628"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:49.968">${host_state} = Running</msg>
<status endtime="20170824 14:41:49.968" status="PASS" starttime="20170824 14:41:49.628"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 14:41:49.969" status="PASS" starttime="20170824 14:41:49.968"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170824 14:41:49.971" status="PASS" starttime="20170824 14:41:49.971"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>New Get Boot Progress</arg>
</arguments>
<assign>
<var>${new_status}</var>
<var>${new_value}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:49.975">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:49.976" status="PASS" starttime="20170824 14:41:49.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:49.977" status="PASS" starttime="20170824 14:41:49.976"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.978">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:49.978" status="PASS" starttime="20170824 14:41:49.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:49.978">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:49.979" status="PASS" starttime="20170824 14:41:49.978"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.254">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:50.255" status="PASS" starttime="20170824 14:41:49.979"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.255">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:50.255">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:50.255" status="PASS" starttime="20170824 14:41:49.979"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.256">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:50.256" status="PASS" starttime="20170824 14:41:50.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.256">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:50.256" status="PASS" starttime="20170824 14:41:50.256"></status>
</kw>
<status endtime="20170824 14:41:50.257" status="PASS" starttime="20170824 14:41:49.974"></status>
</kw>
<status endtime="20170824 14:41:50.257" status="PASS" starttime="20170824 14:41:49.974"></status>
</kw>
<status endtime="20170824 14:41:50.257" status="PASS" starttime="20170824 14:41:49.973"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.257">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:41:50.257" status="PASS" starttime="20170824 14:41:50.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.259">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:41:50.259" status="PASS" starttime="20170824 14:41:50.259"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.260">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:41:50.260" status="PASS" starttime="20170824 14:41:50.260"></status>
</kw>
<status endtime="20170824 14:41:50.260" status="PASS" starttime="20170824 14:41:50.260"></status>
</kw>
<status endtime="20170824 14:41:50.261" status="PASS" starttime="20170824 14:41:50.258"></status>
</kw>
<status endtime="20170824 14:41:50.261" status="PASS" starttime="20170824 14:41:50.258"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.360">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:41:50.360">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:50.360" status="PASS" starttime="20170824 14:41:50.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.362">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:50.362" status="PASS" starttime="20170824 14:41:50.361"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.363">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:50.363" status="PASS" starttime="20170824 14:41:50.363"></status>
</kw>
<status endtime="20170824 14:41:50.363" status="PASS" starttime="20170824 14:41:50.362"></status>
</kw>
<status endtime="20170824 14:41:50.363" status="PASS" starttime="20170824 14:41:50.361"></status>
</kw>
<status endtime="20170824 14:41:50.363" status="PASS" starttime="20170824 14:41:50.361"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:50.364">Delete All Sessions</msg>
<status endtime="20170824 14:41:50.364" status="PASS" starttime="20170824 14:41:50.364"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.364">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:50.364" status="PASS" starttime="20170824 14:41:49.972"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.365">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:50.365" status="PASS" starttime="20170824 14:41:50.364"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.366">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:41:50.366">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:41:50.366">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:41:50.366" status="PASS" starttime="20170824 14:41:50.365"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.366">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 14:41:50.366" status="PASS" starttime="20170824 14:41:49.972"></status>
</kw>
<status endtime="20170824 14:41:50.367" status="PASS" starttime="20170824 14:41:49.972"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.367">${new_status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:50.367">${new_value} = Unspecified</msg>
<status endtime="20170824 14:41:50.367" status="PASS" starttime="20170824 14:41:49.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${new_status}' == 'PASS'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.369">${boot_prog_method} = New</msg>
<status endtime="20170824 14:41:50.369" status="PASS" starttime="20170824 14:41:50.369"></status>
</kw>
<kw name="Rqpvars" library="gen_robot_print">
<arguments>
<arg>boot_prog_method</arg>
</arguments>
<status endtime="20170824 14:41:50.370" status="PASS" starttime="20170824 14:41:50.369"></status>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170824 14:41:50.371">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 14:41:50.371" status="PASS" starttime="20170824 14:41:50.371"></status>
</kw>
<status endtime="20170824 14:41:50.371" status="PASS" starttime="20170824 14:41:50.368"></status>
</kw>
<status endtime="20170824 14:41:50.371" status="PASS" starttime="20170824 14:41:50.367"></status>
</kw>
<status endtime="20170824 14:41:50.371" status="PASS" starttime="20170824 14:41:49.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.375">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:50.376" status="PASS" starttime="20170824 14:41:50.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.376">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:50.376" status="PASS" starttime="20170824 14:41:50.376"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.377">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:50.377" status="PASS" starttime="20170824 14:41:50.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:50.378" status="PASS" starttime="20170824 14:41:50.377"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.555">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:50.555" status="PASS" starttime="20170824 14:41:50.378"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.555">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:50.555">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:50.555" status="PASS" starttime="20170824 14:41:50.378"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.556">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:50.556" status="PASS" starttime="20170824 14:41:50.555"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.556">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:50.557" status="PASS" starttime="20170824 14:41:50.556"></status>
</kw>
<status endtime="20170824 14:41:50.557" status="PASS" starttime="20170824 14:41:50.374"></status>
</kw>
<status endtime="20170824 14:41:50.557" status="PASS" starttime="20170824 14:41:50.374"></status>
</kw>
<status endtime="20170824 14:41:50.557" status="PASS" starttime="20170824 14:41:50.373"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.557">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:41:50.557" status="PASS" starttime="20170824 14:41:50.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.560">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:41:50.560" status="PASS" starttime="20170824 14:41:50.559"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.561">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:41:50.561" status="PASS" starttime="20170824 14:41:50.560"></status>
</kw>
<status endtime="20170824 14:41:50.561" status="PASS" starttime="20170824 14:41:50.560"></status>
</kw>
<status endtime="20170824 14:41:50.561" status="PASS" starttime="20170824 14:41:50.558"></status>
</kw>
<status endtime="20170824 14:41:50.561" status="PASS" starttime="20170824 14:41:50.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.652">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:41:50.653">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:50.653" status="PASS" starttime="20170824 14:41:50.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.654">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:50.654" status="PASS" starttime="20170824 14:41:50.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.655">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:50.655" status="PASS" starttime="20170824 14:41:50.655"></status>
</kw>
<status endtime="20170824 14:41:50.656" status="PASS" starttime="20170824 14:41:50.655"></status>
</kw>
<status endtime="20170824 14:41:50.656" status="PASS" starttime="20170824 14:41:50.653"></status>
</kw>
<status endtime="20170824 14:41:50.656" status="PASS" starttime="20170824 14:41:50.653"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:50.656">Delete All Sessions</msg>
<status endtime="20170824 14:41:50.656" status="PASS" starttime="20170824 14:41:50.656"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.656">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:50.656" status="PASS" starttime="20170824 14:41:50.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:50.657" status="PASS" starttime="20170824 14:41:50.657"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.658">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:41:50.658">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:41:50.658">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:41:50.658" status="PASS" starttime="20170824 14:41:50.657"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.658">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 14:41:50.658" status="PASS" starttime="20170824 14:41:50.372"></status>
</kw>
<status endtime="20170824 14:41:50.658" status="PASS" starttime="20170824 14:41:50.372"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.658">${state} = Unspecified</msg>
<status endtime="20170824 14:41:50.658" status="PASS" starttime="20170824 14:41:50.371"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.659">${boot_progress} = Unspecified</msg>
<status endtime="20170824 14:41:50.659" status="PASS" starttime="20170824 14:41:49.970"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:41:50.659">Unspecified != OSStart</msg>
<status endtime="20170824 14:41:50.659" status="FAIL" starttime="20170824 14:41:50.659"></status>
</kw>
<status endtime="20170824 14:41:50.660" status="FAIL" starttime="20170824 14:41:49.969"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.660">${status} = False</msg>
<status endtime="20170824 14:41:50.660" status="PASS" starttime="20170824 14:41:49.969"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 14:41:50.660" status="PASS" starttime="20170824 14:41:50.660"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.664">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:41:50.665" status="PASS" starttime="20170824 14:41:50.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.665">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:41:50.665" status="PASS" starttime="20170824 14:41:50.665"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.666">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:41:50.666" status="PASS" starttime="20170824 14:41:50.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:41:50.667" status="PASS" starttime="20170824 14:41:50.666"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.876">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:41:50.877" status="PASS" starttime="20170824 14:41:50.667"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.877">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:41:50.877">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:50.877" status="PASS" starttime="20170824 14:41:50.667"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.877">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:50.878" status="PASS" starttime="20170824 14:41:50.877"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.878">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:50.878" status="PASS" starttime="20170824 14:41:50.878"></status>
</kw>
<status endtime="20170824 14:41:50.878" status="PASS" starttime="20170824 14:41:50.663"></status>
</kw>
<status endtime="20170824 14:41:50.878" status="PASS" starttime="20170824 14:41:50.663"></status>
</kw>
<status endtime="20170824 14:41:50.879" status="PASS" starttime="20170824 14:41:50.662"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.879">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:41:50.879" status="PASS" starttime="20170824 14:41:50.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.882">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:41:50.882" status="PASS" starttime="20170824 14:41:50.881"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.883">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:41:50.883" status="PASS" starttime="20170824 14:41:50.883"></status>
</kw>
<status endtime="20170824 14:41:50.883" status="PASS" starttime="20170824 14:41:50.882"></status>
</kw>
<status endtime="20170824 14:41:50.883" status="PASS" starttime="20170824 14:41:50.880"></status>
</kw>
<status endtime="20170824 14:41:50.883" status="PASS" starttime="20170824 14:41:50.879"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.985">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:41:50.985">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:50.985" status="PASS" starttime="20170824 14:41:50.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.987">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:50.987" status="PASS" starttime="20170824 14:41:50.986"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.988">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:41:50.988" status="PASS" starttime="20170824 14:41:50.987"></status>
</kw>
<status endtime="20170824 14:41:50.988" status="PASS" starttime="20170824 14:41:50.987"></status>
</kw>
<status endtime="20170824 14:41:50.988" status="PASS" starttime="20170824 14:41:50.986"></status>
</kw>
<status endtime="20170824 14:41:50.988" status="PASS" starttime="20170824 14:41:50.985"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:41:50.988">Delete All Sessions</msg>
<status endtime="20170824 14:41:50.988" status="PASS" starttime="20170824 14:41:50.988"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.989">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:41:50.989" status="PASS" starttime="20170824 14:41:50.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.989">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:41:50.989" status="PASS" starttime="20170824 14:41:50.989"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:41:50.990">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:41:50.990">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:41:50.990">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:41:50.990" status="PASS" starttime="20170824 14:41:50.990"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.990">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 14:41:50.990" status="PASS" starttime="20170824 14:41:50.661"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:41:50.991">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 14:41:50.991" status="PASS" starttime="20170824 14:41:50.660"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:41:50.991">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170824 14:41:50.991">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 14:41:50.991" status="FAIL" starttime="20170824 14:41:50.991"></status>
</kw>
<status endtime="20170824 14:41:50.992" status="FAIL" starttime="20170824 14:41:49.969"></status>
</kw>
<status endtime="20170824 14:41:50.992" status="FAIL" starttime="20170824 14:41:49.364"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:01.003">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:01.004" status="PASS" starttime="20170824 14:42:01.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.005">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:01.005" status="PASS" starttime="20170824 14:42:01.004"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.006">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:01.006" status="PASS" starttime="20170824 14:42:01.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.006">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:01.006" status="PASS" starttime="20170824 14:42:01.006"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:01.377">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:01.377" status="PASS" starttime="20170824 14:42:01.007"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:01.377">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:01.377">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:01.377" status="PASS" starttime="20170824 14:42:01.006"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:01.378">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:01.378" status="PASS" starttime="20170824 14:42:01.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:01.379">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:01.379" status="PASS" starttime="20170824 14:42:01.378"></status>
</kw>
<status endtime="20170824 14:42:01.379" status="PASS" starttime="20170824 14:42:00.997"></status>
</kw>
<status endtime="20170824 14:42:01.379" status="PASS" starttime="20170824 14:42:00.997"></status>
</kw>
<status endtime="20170824 14:42:01.379" status="PASS" starttime="20170824 14:42:00.996"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.379">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:42:01.380" status="PASS" starttime="20170824 14:42:01.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.382">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:01.382" status="PASS" starttime="20170824 14:42:01.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:01.382">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:01.383" status="PASS" starttime="20170824 14:42:01.382"></status>
</kw>
<status endtime="20170824 14:42:01.383" status="PASS" starttime="20170824 14:42:01.382"></status>
</kw>
<status endtime="20170824 14:42:01.383" status="PASS" starttime="20170824 14:42:01.380"></status>
</kw>
<status endtime="20170824 14:42:01.383" status="PASS" starttime="20170824 14:42:01.380"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.611">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:01.612">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:01.612" status="PASS" starttime="20170824 14:42:01.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.613">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:01.613" status="PASS" starttime="20170824 14:42:01.613"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:01.615">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:01.615" status="PASS" starttime="20170824 14:42:01.614"></status>
</kw>
<status endtime="20170824 14:42:01.615" status="PASS" starttime="20170824 14:42:01.614"></status>
</kw>
<status endtime="20170824 14:42:01.615" status="PASS" starttime="20170824 14:42:01.612"></status>
</kw>
<status endtime="20170824 14:42:01.615" status="PASS" starttime="20170824 14:42:01.612"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:01.615">Delete All Sessions</msg>
<status endtime="20170824 14:42:01.616" status="PASS" starttime="20170824 14:42:01.615"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:01.616">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:01.616" status="PASS" starttime="20170824 14:42:00.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:01.616">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:01.617" status="PASS" starttime="20170824 14:42:01.616"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.617">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:01.617">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:01.617">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:01.617" status="PASS" starttime="20170824 14:42:01.617"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:01.617">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:42:01.618" status="PASS" starttime="20170824 14:42:00.995"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:01.618">${power_state} = On</msg>
<status endtime="20170824 14:42:01.618" status="PASS" starttime="20170824 14:42:00.994"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 14:42:01.618" status="PASS" starttime="20170824 14:42:01.618"></status>
</kw>
<status endtime="20170824 14:42:01.618" status="PASS" starttime="20170824 14:42:00.994"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:01.623">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:01.624" status="PASS" starttime="20170824 14:42:01.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.625">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:01.625" status="PASS" starttime="20170824 14:42:01.624"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.626">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:01.626" status="PASS" starttime="20170824 14:42:01.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.626">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:01.627" status="PASS" starttime="20170824 14:42:01.626"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:01.983">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:01.983" status="PASS" starttime="20170824 14:42:01.628"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:01.983">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:01.983">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:01.983" status="PASS" starttime="20170824 14:42:01.627"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:01.984">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:01.984" status="PASS" starttime="20170824 14:42:01.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:01.984">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:01.984" status="PASS" starttime="20170824 14:42:01.984"></status>
</kw>
<status endtime="20170824 14:42:01.985" status="PASS" starttime="20170824 14:42:01.622"></status>
</kw>
<status endtime="20170824 14:42:01.985" status="PASS" starttime="20170824 14:42:01.621"></status>
</kw>
<status endtime="20170824 14:42:01.985" status="PASS" starttime="20170824 14:42:01.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.986">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 14:42:01.986" status="PASS" starttime="20170824 14:42:01.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:01.988">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:01.988" status="PASS" starttime="20170824 14:42:01.987"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:01.989">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:01.989" status="PASS" starttime="20170824 14:42:01.989"></status>
</kw>
<status endtime="20170824 14:42:01.989" status="PASS" starttime="20170824 14:42:01.988"></status>
</kw>
<status endtime="20170824 14:42:01.989" status="PASS" starttime="20170824 14:42:01.987"></status>
</kw>
<status endtime="20170824 14:42:01.989" status="PASS" starttime="20170824 14:42:01.986"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:02.630">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:02.630">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:02.630" status="PASS" starttime="20170824 14:42:01.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:02.632">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:02.633" status="PASS" starttime="20170824 14:42:02.632"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:02.634">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:02.634" status="PASS" starttime="20170824 14:42:02.634"></status>
</kw>
<status endtime="20170824 14:42:02.634" status="PASS" starttime="20170824 14:42:02.633"></status>
</kw>
<status endtime="20170824 14:42:02.634" status="PASS" starttime="20170824 14:42:02.631"></status>
</kw>
<status endtime="20170824 14:42:02.634" status="PASS" starttime="20170824 14:42:02.630"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:02.635">Delete All Sessions</msg>
<status endtime="20170824 14:42:02.635" status="PASS" starttime="20170824 14:42:02.635"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:02.635">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:02.635" status="PASS" starttime="20170824 14:42:01.620"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:02.636">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:02.636" status="PASS" starttime="20170824 14:42:02.635"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:02.636">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:02.636">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:02.636">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:02.636" status="PASS" starttime="20170824 14:42:02.636"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:02.637">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 14:42:02.637" status="PASS" starttime="20170824 14:42:01.619"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:02.637">${host_state} = Running</msg>
<status endtime="20170824 14:42:02.637" status="PASS" starttime="20170824 14:42:01.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 14:42:02.638" status="PASS" starttime="20170824 14:42:02.637"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170824 14:42:02.640">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 14:42:02.640" status="PASS" starttime="20170824 14:42:02.640"></status>
</kw>
<status endtime="20170824 14:42:02.640" status="PASS" starttime="20170824 14:42:02.640"></status>
</kw>
<status endtime="20170824 14:42:02.640" status="PASS" starttime="20170824 14:42:02.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:02.645">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:02.645" status="PASS" starttime="20170824 14:42:02.645"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:02.646">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:02.646" status="PASS" starttime="20170824 14:42:02.646"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:02.646">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:02.647" status="PASS" starttime="20170824 14:42:02.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:02.647">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:02.647" status="PASS" starttime="20170824 14:42:02.647"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:03.190">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:03.190" status="PASS" starttime="20170824 14:42:02.648"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:03.190">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:03.190">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:03.190" status="PASS" starttime="20170824 14:42:02.647"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:03.191">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:03.191" status="PASS" starttime="20170824 14:42:03.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:03.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:03.191" status="PASS" starttime="20170824 14:42:03.191"></status>
</kw>
<status endtime="20170824 14:42:03.191" status="PASS" starttime="20170824 14:42:02.644"></status>
</kw>
<status endtime="20170824 14:42:03.192" status="PASS" starttime="20170824 14:42:02.643"></status>
</kw>
<status endtime="20170824 14:42:03.192" status="PASS" starttime="20170824 14:42:02.643"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:03.192">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:42:03.192" status="PASS" starttime="20170824 14:42:03.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:03.194">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:03.194" status="PASS" starttime="20170824 14:42:03.194"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:03.195">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:03.195" status="PASS" starttime="20170824 14:42:03.195"></status>
</kw>
<status endtime="20170824 14:42:03.196" status="PASS" starttime="20170824 14:42:03.195"></status>
</kw>
<status endtime="20170824 14:42:03.196" status="PASS" starttime="20170824 14:42:03.193"></status>
</kw>
<status endtime="20170824 14:42:03.196" status="PASS" starttime="20170824 14:42:03.193"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:03.652">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:03.652">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:03.653" status="PASS" starttime="20170824 14:42:03.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:03.654">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:03.654" status="PASS" starttime="20170824 14:42:03.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:03.656">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:03.656" status="PASS" starttime="20170824 14:42:03.655"></status>
</kw>
<status endtime="20170824 14:42:03.656" status="PASS" starttime="20170824 14:42:03.655"></status>
</kw>
<status endtime="20170824 14:42:03.656" status="PASS" starttime="20170824 14:42:03.653"></status>
</kw>
<status endtime="20170824 14:42:03.656" status="PASS" starttime="20170824 14:42:03.653"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:03.656">Delete All Sessions</msg>
<status endtime="20170824 14:42:03.656" status="PASS" starttime="20170824 14:42:03.656"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:03.657">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:03.657" status="PASS" starttime="20170824 14:42:02.642"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:03.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:03.658" status="PASS" starttime="20170824 14:42:03.657"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:03.658">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:03.658">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:03.658">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:03.658" status="PASS" starttime="20170824 14:42:03.658"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:03.659">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:03.659" status="PASS" starttime="20170824 14:42:02.642"></status>
</kw>
<status endtime="20170824 14:42:03.659" status="PASS" starttime="20170824 14:42:02.641"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:03.659">${state} = MotherboardInit</msg>
<status endtime="20170824 14:42:03.659" status="PASS" starttime="20170824 14:42:02.641"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:03.659">${boot_progress} = MotherboardInit</msg>
<status endtime="20170824 14:42:03.659" status="PASS" starttime="20170824 14:42:02.639"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:42:03.660">MotherboardInit != OSStart</msg>
<status endtime="20170824 14:42:03.660" status="FAIL" starttime="20170824 14:42:03.659"></status>
</kw>
<status endtime="20170824 14:42:03.660" status="FAIL" starttime="20170824 14:42:02.638"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:03.660">${status} = False</msg>
<status endtime="20170824 14:42:03.660" status="PASS" starttime="20170824 14:42:02.638"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 14:42:03.661" status="PASS" starttime="20170824 14:42:03.661"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:03.665">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:03.665" status="PASS" starttime="20170824 14:42:03.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:03.665">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:03.666" status="PASS" starttime="20170824 14:42:03.665"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:03.666">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:03.666" status="PASS" starttime="20170824 14:42:03.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:03.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:03.667" status="PASS" starttime="20170824 14:42:03.666"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:04.061">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:04.062" status="PASS" starttime="20170824 14:42:03.668"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:04.062">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:04.062">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:04.062" status="PASS" starttime="20170824 14:42:03.667"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:04.063">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:04.063" status="PASS" starttime="20170824 14:42:04.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:04.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:04.063" status="PASS" starttime="20170824 14:42:04.063"></status>
</kw>
<status endtime="20170824 14:42:04.064" status="PASS" starttime="20170824 14:42:03.664"></status>
</kw>
<status endtime="20170824 14:42:04.064" status="PASS" starttime="20170824 14:42:03.663"></status>
</kw>
<status endtime="20170824 14:42:04.064" status="PASS" starttime="20170824 14:42:03.663"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:04.064">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:42:04.064" status="PASS" starttime="20170824 14:42:04.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:04.067">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:04.067" status="PASS" starttime="20170824 14:42:04.066"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:04.068">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:04.068" status="PASS" starttime="20170824 14:42:04.067"></status>
</kw>
<status endtime="20170824 14:42:04.068" status="PASS" starttime="20170824 14:42:04.067"></status>
</kw>
<status endtime="20170824 14:42:04.068" status="PASS" starttime="20170824 14:42:04.065"></status>
</kw>
<status endtime="20170824 14:42:04.068" status="PASS" starttime="20170824 14:42:04.065"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:04.739">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:04.739">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:04.739" status="PASS" starttime="20170824 14:42:04.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:04.741">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:04.741" status="PASS" starttime="20170824 14:42:04.741"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:04.742">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:04.742" status="PASS" starttime="20170824 14:42:04.742"></status>
</kw>
<status endtime="20170824 14:42:04.742" status="PASS" starttime="20170824 14:42:04.741"></status>
</kw>
<status endtime="20170824 14:42:04.742" status="PASS" starttime="20170824 14:42:04.740"></status>
</kw>
<status endtime="20170824 14:42:04.743" status="PASS" starttime="20170824 14:42:04.740"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:04.743">Delete All Sessions</msg>
<status endtime="20170824 14:42:04.743" status="PASS" starttime="20170824 14:42:04.743"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:04.743">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:04.743" status="PASS" starttime="20170824 14:42:03.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:04.744">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:04.744" status="PASS" starttime="20170824 14:42:04.744"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:04.745">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:04.745">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:04.745">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:04.745" status="PASS" starttime="20170824 14:42:04.744"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:04.745">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:04.745" status="PASS" starttime="20170824 14:42:03.661"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:04.745">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:04.745" status="PASS" starttime="20170824 14:42:03.661"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:04.747">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170824 14:42:04.747">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:04.747" status="FAIL" starttime="20170824 14:42:04.746"></status>
</kw>
<status endtime="20170824 14:42:04.747" status="FAIL" starttime="20170824 14:42:02.638"></status>
</kw>
<status endtime="20170824 14:42:04.747" status="FAIL" starttime="20170824 14:42:00.993"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:14.754">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:14.754" status="PASS" starttime="20170824 14:42:14.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:14.756">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:14.756" status="PASS" starttime="20170824 14:42:14.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:14.757">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:14.757" status="PASS" starttime="20170824 14:42:14.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:14.758">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:14.758" status="PASS" starttime="20170824 14:42:14.758"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:15.158">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:15.158" status="PASS" starttime="20170824 14:42:14.759"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:15.158">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:15.158">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:15.158" status="PASS" starttime="20170824 14:42:14.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:15.159">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:15.159" status="PASS" starttime="20170824 14:42:15.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:15.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:15.159" status="PASS" starttime="20170824 14:42:15.159"></status>
</kw>
<status endtime="20170824 14:42:15.159" status="PASS" starttime="20170824 14:42:14.753"></status>
</kw>
<status endtime="20170824 14:42:15.160" status="PASS" starttime="20170824 14:42:14.752"></status>
</kw>
<status endtime="20170824 14:42:15.160" status="PASS" starttime="20170824 14:42:14.751"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:15.160">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:42:15.160" status="PASS" starttime="20170824 14:42:15.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:15.163">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:15.163" status="PASS" starttime="20170824 14:42:15.162"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:15.165">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:15.165" status="PASS" starttime="20170824 14:42:15.164"></status>
</kw>
<status endtime="20170824 14:42:15.165" status="PASS" starttime="20170824 14:42:15.164"></status>
</kw>
<status endtime="20170824 14:42:15.165" status="PASS" starttime="20170824 14:42:15.161"></status>
</kw>
<status endtime="20170824 14:42:15.165" status="PASS" starttime="20170824 14:42:15.161"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:15.815">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:15.815">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:15.815" status="PASS" starttime="20170824 14:42:15.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:15.817">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:15.817" status="PASS" starttime="20170824 14:42:15.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:15.818">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:15.818" status="PASS" starttime="20170824 14:42:15.818"></status>
</kw>
<status endtime="20170824 14:42:15.818" status="PASS" starttime="20170824 14:42:15.817"></status>
</kw>
<status endtime="20170824 14:42:15.818" status="PASS" starttime="20170824 14:42:15.816"></status>
</kw>
<status endtime="20170824 14:42:15.818" status="PASS" starttime="20170824 14:42:15.816"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:15.819">Delete All Sessions</msg>
<status endtime="20170824 14:42:15.819" status="PASS" starttime="20170824 14:42:15.819"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:15.819">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:15.819" status="PASS" starttime="20170824 14:42:14.750"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:15.820">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:15.820" status="PASS" starttime="20170824 14:42:15.819"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:15.820">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:15.820">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:15.821">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:15.821" status="PASS" starttime="20170824 14:42:15.820"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:15.821">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:42:15.821" status="PASS" starttime="20170824 14:42:14.749"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:15.821">${power_state} = On</msg>
<status endtime="20170824 14:42:15.821" status="PASS" starttime="20170824 14:42:14.749"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 14:42:15.822" status="PASS" starttime="20170824 14:42:15.821"></status>
</kw>
<status endtime="20170824 14:42:15.822" status="PASS" starttime="20170824 14:42:14.749"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:15.826">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:15.827" status="PASS" starttime="20170824 14:42:15.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:15.828">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:15.828" status="PASS" starttime="20170824 14:42:15.827"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:15.829">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:15.829" status="PASS" starttime="20170824 14:42:15.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:15.830">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:15.830" status="PASS" starttime="20170824 14:42:15.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:16.184">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:16.184" status="PASS" starttime="20170824 14:42:15.831"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:16.184">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:16.184">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:16.184" status="PASS" starttime="20170824 14:42:15.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:16.185">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:16.185" status="PASS" starttime="20170824 14:42:16.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:16.186">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:16.186" status="PASS" starttime="20170824 14:42:16.185"></status>
</kw>
<status endtime="20170824 14:42:16.186" status="PASS" starttime="20170824 14:42:15.825"></status>
</kw>
<status endtime="20170824 14:42:16.186" status="PASS" starttime="20170824 14:42:15.824"></status>
</kw>
<status endtime="20170824 14:42:16.186" status="PASS" starttime="20170824 14:42:15.824"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:16.187">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 14:42:16.187" status="PASS" starttime="20170824 14:42:16.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:16.189">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:16.189" status="PASS" starttime="20170824 14:42:16.188"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:16.190">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:16.190" status="PASS" starttime="20170824 14:42:16.190"></status>
</kw>
<status endtime="20170824 14:42:16.190" status="PASS" starttime="20170824 14:42:16.189"></status>
</kw>
<status endtime="20170824 14:42:16.190" status="PASS" starttime="20170824 14:42:16.188"></status>
</kw>
<status endtime="20170824 14:42:16.190" status="PASS" starttime="20170824 14:42:16.187"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:16.948">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:16.948">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:16.948" status="PASS" starttime="20170824 14:42:16.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:16.950">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:16.950" status="PASS" starttime="20170824 14:42:16.949"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:16.951">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:16.951" status="PASS" starttime="20170824 14:42:16.951"></status>
</kw>
<status endtime="20170824 14:42:16.951" status="PASS" starttime="20170824 14:42:16.950"></status>
</kw>
<status endtime="20170824 14:42:16.951" status="PASS" starttime="20170824 14:42:16.949"></status>
</kw>
<status endtime="20170824 14:42:16.951" status="PASS" starttime="20170824 14:42:16.948"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:16.952">Delete All Sessions</msg>
<status endtime="20170824 14:42:16.952" status="PASS" starttime="20170824 14:42:16.952"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:16.952">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:16.952" status="PASS" starttime="20170824 14:42:15.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:16.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:16.953" status="PASS" starttime="20170824 14:42:16.952"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:16.953">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:16.953">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:16.953">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:16.953" status="PASS" starttime="20170824 14:42:16.953"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:16.954">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 14:42:16.954" status="PASS" starttime="20170824 14:42:15.822"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:16.954">${host_state} = Running</msg>
<status endtime="20170824 14:42:16.954" status="PASS" starttime="20170824 14:42:15.822"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 14:42:16.955" status="PASS" starttime="20170824 14:42:16.954"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170824 14:42:16.958">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 14:42:16.958" status="PASS" starttime="20170824 14:42:16.957"></status>
</kw>
<status endtime="20170824 14:42:16.958" status="PASS" starttime="20170824 14:42:16.957"></status>
</kw>
<status endtime="20170824 14:42:16.958" status="PASS" starttime="20170824 14:42:16.957"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:16.962">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:16.963" status="PASS" starttime="20170824 14:42:16.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:16.963">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:16.963" status="PASS" starttime="20170824 14:42:16.963"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:16.964">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:16.964" status="PASS" starttime="20170824 14:42:16.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:16.965">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:16.965" status="PASS" starttime="20170824 14:42:16.964"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:17.311">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:17.311" status="PASS" starttime="20170824 14:42:16.965"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:17.311">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:17.311">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:17.311" status="PASS" starttime="20170824 14:42:16.965"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:17.312">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:17.312" status="PASS" starttime="20170824 14:42:17.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:17.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:17.313" status="PASS" starttime="20170824 14:42:17.312"></status>
</kw>
<status endtime="20170824 14:42:17.313" status="PASS" starttime="20170824 14:42:16.961"></status>
</kw>
<status endtime="20170824 14:42:17.313" status="PASS" starttime="20170824 14:42:16.961"></status>
</kw>
<status endtime="20170824 14:42:17.313" status="PASS" starttime="20170824 14:42:16.960"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:17.314">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:42:17.314" status="PASS" starttime="20170824 14:42:17.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:17.316">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:17.316" status="PASS" starttime="20170824 14:42:17.315"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:17.317">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:17.317" status="PASS" starttime="20170824 14:42:17.316"></status>
</kw>
<status endtime="20170824 14:42:17.317" status="PASS" starttime="20170824 14:42:17.316"></status>
</kw>
<status endtime="20170824 14:42:17.317" status="PASS" starttime="20170824 14:42:17.314"></status>
</kw>
<status endtime="20170824 14:42:17.317" status="PASS" starttime="20170824 14:42:17.314"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:17.989">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:17.989">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:17.989" status="PASS" starttime="20170824 14:42:17.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:17.991">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:17.991" status="PASS" starttime="20170824 14:42:17.991"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:17.992">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:17.992" status="PASS" starttime="20170824 14:42:17.992"></status>
</kw>
<status endtime="20170824 14:42:17.992" status="PASS" starttime="20170824 14:42:17.991"></status>
</kw>
<status endtime="20170824 14:42:17.992" status="PASS" starttime="20170824 14:42:17.990"></status>
</kw>
<status endtime="20170824 14:42:17.993" status="PASS" starttime="20170824 14:42:17.990"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:17.993">Delete All Sessions</msg>
<status endtime="20170824 14:42:17.993" status="PASS" starttime="20170824 14:42:17.993"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:17.993">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:17.993" status="PASS" starttime="20170824 14:42:16.960"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:17.994">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:17.994" status="PASS" starttime="20170824 14:42:17.994"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:17.995">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:17.995">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:17.995">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:17.995" status="PASS" starttime="20170824 14:42:17.994"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:17.995">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:17.995" status="PASS" starttime="20170824 14:42:16.959"></status>
</kw>
<status endtime="20170824 14:42:17.995" status="PASS" starttime="20170824 14:42:16.959"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:17.995">${state} = MotherboardInit</msg>
<status endtime="20170824 14:42:17.996" status="PASS" starttime="20170824 14:42:16.958"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:17.996">${boot_progress} = MotherboardInit</msg>
<status endtime="20170824 14:42:17.996" status="PASS" starttime="20170824 14:42:16.956"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:42:17.996">MotherboardInit != OSStart</msg>
<status endtime="20170824 14:42:17.996" status="FAIL" starttime="20170824 14:42:17.996"></status>
</kw>
<status endtime="20170824 14:42:17.997" status="FAIL" starttime="20170824 14:42:16.956"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:17.997">${status} = False</msg>
<status endtime="20170824 14:42:17.997" status="PASS" starttime="20170824 14:42:16.955"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 14:42:17.997" status="PASS" starttime="20170824 14:42:17.997"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:18.001">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:18.002" status="PASS" starttime="20170824 14:42:18.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:18.002">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:18.002" status="PASS" starttime="20170824 14:42:18.002"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:18.003">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:18.003" status="PASS" starttime="20170824 14:42:18.003"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:18.004">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:18.004" status="PASS" starttime="20170824 14:42:18.003"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:18.470">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:18.470" status="PASS" starttime="20170824 14:42:18.004"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:18.470">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:18.470">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:18.470" status="PASS" starttime="20170824 14:42:18.004"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:18.471">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:18.471" status="PASS" starttime="20170824 14:42:18.471"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:18.472">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:18.472" status="PASS" starttime="20170824 14:42:18.472"></status>
</kw>
<status endtime="20170824 14:42:18.472" status="PASS" starttime="20170824 14:42:18.000"></status>
</kw>
<status endtime="20170824 14:42:18.472" status="PASS" starttime="20170824 14:42:18.000"></status>
</kw>
<status endtime="20170824 14:42:18.472" status="PASS" starttime="20170824 14:42:17.999"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:18.473">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:42:18.473" status="PASS" starttime="20170824 14:42:18.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:18.475">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:18.475" status="PASS" starttime="20170824 14:42:18.474"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:18.476">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:18.476" status="PASS" starttime="20170824 14:42:18.476"></status>
</kw>
<status endtime="20170824 14:42:18.476" status="PASS" starttime="20170824 14:42:18.475"></status>
</kw>
<status endtime="20170824 14:42:18.476" status="PASS" starttime="20170824 14:42:18.474"></status>
</kw>
<status endtime="20170824 14:42:18.476" status="PASS" starttime="20170824 14:42:18.473"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:19.278">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:19.278">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:19.278" status="PASS" starttime="20170824 14:42:18.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:19.280">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:19.280" status="PASS" starttime="20170824 14:42:19.279"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:19.281">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:19.281" status="PASS" starttime="20170824 14:42:19.281"></status>
</kw>
<status endtime="20170824 14:42:19.281" status="PASS" starttime="20170824 14:42:19.280"></status>
</kw>
<status endtime="20170824 14:42:19.281" status="PASS" starttime="20170824 14:42:19.279"></status>
</kw>
<status endtime="20170824 14:42:19.281" status="PASS" starttime="20170824 14:42:19.278"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:19.282">Delete All Sessions</msg>
<status endtime="20170824 14:42:19.282" status="PASS" starttime="20170824 14:42:19.282"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:19.282">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:19.282" status="PASS" starttime="20170824 14:42:17.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:19.283">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:19.283" status="PASS" starttime="20170824 14:42:19.282"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:19.283">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:19.283">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:19.283">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:19.284" status="PASS" starttime="20170824 14:42:19.283"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:19.284">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:19.284" status="PASS" starttime="20170824 14:42:17.998"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:19.284">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:19.284" status="PASS" starttime="20170824 14:42:17.997"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:19.285">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170824 14:42:19.285">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:19.285" status="FAIL" starttime="20170824 14:42:19.284"></status>
</kw>
<status endtime="20170824 14:42:19.285" status="FAIL" starttime="20170824 14:42:16.955"></status>
</kw>
<status endtime="20170824 14:42:19.285" status="FAIL" starttime="20170824 14:42:14.748"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:29.291">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:29.292" status="PASS" starttime="20170824 14:42:29.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:29.292">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:29.292" status="PASS" starttime="20170824 14:42:29.292"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:29.293">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:29.293" status="PASS" starttime="20170824 14:42:29.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:29.294">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:29.294" status="PASS" starttime="20170824 14:42:29.293"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:30.109">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:30.109" status="PASS" starttime="20170824 14:42:29.294"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:30.109">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:30.109">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:30.109" status="PASS" starttime="20170824 14:42:29.294"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:30.110">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:30.110" status="PASS" starttime="20170824 14:42:30.109"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:30.110">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:30.110" status="PASS" starttime="20170824 14:42:30.110"></status>
</kw>
<status endtime="20170824 14:42:30.111" status="PASS" starttime="20170824 14:42:29.290"></status>
</kw>
<status endtime="20170824 14:42:30.111" status="PASS" starttime="20170824 14:42:29.290"></status>
</kw>
<status endtime="20170824 14:42:30.111" status="PASS" starttime="20170824 14:42:29.289"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:30.111">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:42:30.111" status="PASS" starttime="20170824 14:42:30.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:30.113">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:30.113" status="PASS" starttime="20170824 14:42:30.113"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:30.117">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:30.117" status="PASS" starttime="20170824 14:42:30.114"></status>
</kw>
<status endtime="20170824 14:42:30.117" status="PASS" starttime="20170824 14:42:30.114"></status>
</kw>
<status endtime="20170824 14:42:30.117" status="PASS" starttime="20170824 14:42:30.112"></status>
</kw>
<status endtime="20170824 14:42:30.117" status="PASS" starttime="20170824 14:42:30.112"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:30.747">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:30.747">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:30.747" status="PASS" starttime="20170824 14:42:30.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:30.749">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:30.749" status="PASS" starttime="20170824 14:42:30.748"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:30.750">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:30.750" status="PASS" starttime="20170824 14:42:30.750"></status>
</kw>
<status endtime="20170824 14:42:30.750" status="PASS" starttime="20170824 14:42:30.749"></status>
</kw>
<status endtime="20170824 14:42:30.750" status="PASS" starttime="20170824 14:42:30.748"></status>
</kw>
<status endtime="20170824 14:42:30.750" status="PASS" starttime="20170824 14:42:30.747"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:30.751">Delete All Sessions</msg>
<status endtime="20170824 14:42:30.751" status="PASS" starttime="20170824 14:42:30.751"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:30.751">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:30.751" status="PASS" starttime="20170824 14:42:29.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:30.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:30.752" status="PASS" starttime="20170824 14:42:30.752"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:30.753">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:30.753">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:30.753">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:30.753" status="PASS" starttime="20170824 14:42:30.753"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:30.754">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:42:30.754" status="PASS" starttime="20170824 14:42:29.287"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:30.754">${power_state} = On</msg>
<status endtime="20170824 14:42:30.754" status="PASS" starttime="20170824 14:42:29.287"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 14:42:30.755" status="PASS" starttime="20170824 14:42:30.755"></status>
</kw>
<status endtime="20170824 14:42:30.755" status="PASS" starttime="20170824 14:42:29.287"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:30.760">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:30.761" status="PASS" starttime="20170824 14:42:30.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:30.762">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:30.762" status="PASS" starttime="20170824 14:42:30.761"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:30.763">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:30.763" status="PASS" starttime="20170824 14:42:30.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:30.764">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:30.764" status="PASS" starttime="20170824 14:42:30.763"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:31.231">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:31.231" status="PASS" starttime="20170824 14:42:30.765"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:31.232">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:31.232">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:31.232" status="PASS" starttime="20170824 14:42:30.764"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:31.233">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:31.233" status="PASS" starttime="20170824 14:42:31.232"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:31.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:31.234" status="PASS" starttime="20170824 14:42:31.234"></status>
</kw>
<status endtime="20170824 14:42:31.234" status="PASS" starttime="20170824 14:42:30.759"></status>
</kw>
<status endtime="20170824 14:42:31.234" status="PASS" starttime="20170824 14:42:30.759"></status>
</kw>
<status endtime="20170824 14:42:31.234" status="PASS" starttime="20170824 14:42:30.758"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:31.235">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 14:42:31.235" status="PASS" starttime="20170824 14:42:31.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:31.238">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:31.238" status="PASS" starttime="20170824 14:42:31.237"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:31.239">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:31.239" status="PASS" starttime="20170824 14:42:31.239"></status>
</kw>
<status endtime="20170824 14:42:31.239" status="PASS" starttime="20170824 14:42:31.238"></status>
</kw>
<status endtime="20170824 14:42:31.240" status="PASS" starttime="20170824 14:42:31.236"></status>
</kw>
<status endtime="20170824 14:42:31.240" status="PASS" starttime="20170824 14:42:31.235"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:31.850">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:31.850">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:31.850" status="PASS" starttime="20170824 14:42:31.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:31.852">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:31.852" status="PASS" starttime="20170824 14:42:31.852"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:31.853">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:31.853" status="PASS" starttime="20170824 14:42:31.853"></status>
</kw>
<status endtime="20170824 14:42:31.853" status="PASS" starttime="20170824 14:42:31.852"></status>
</kw>
<status endtime="20170824 14:42:31.854" status="PASS" starttime="20170824 14:42:31.851"></status>
</kw>
<status endtime="20170824 14:42:31.854" status="PASS" starttime="20170824 14:42:31.851"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:31.854">Delete All Sessions</msg>
<status endtime="20170824 14:42:31.854" status="PASS" starttime="20170824 14:42:31.854"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:31.854">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:31.854" status="PASS" starttime="20170824 14:42:30.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:31.855">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:31.855" status="PASS" starttime="20170824 14:42:31.855"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:31.856">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:31.856">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:31.856">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:31.856" status="PASS" starttime="20170824 14:42:31.855"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:31.856">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 14:42:31.856" status="PASS" starttime="20170824 14:42:30.756"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:31.856">${host_state} = Running</msg>
<status endtime="20170824 14:42:31.856" status="PASS" starttime="20170824 14:42:30.756"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 14:42:31.857" status="PASS" starttime="20170824 14:42:31.857"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170824 14:42:31.860">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 14:42:31.860" status="PASS" starttime="20170824 14:42:31.860"></status>
</kw>
<status endtime="20170824 14:42:31.860" status="PASS" starttime="20170824 14:42:31.859"></status>
</kw>
<status endtime="20170824 14:42:31.860" status="PASS" starttime="20170824 14:42:31.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:31.865">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:31.866" status="PASS" starttime="20170824 14:42:31.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:31.866">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:31.866" status="PASS" starttime="20170824 14:42:31.866"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:31.867">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:31.867" status="PASS" starttime="20170824 14:42:31.867"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:31.868">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:31.868" status="PASS" starttime="20170824 14:42:31.867"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:32.237">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:32.238" status="PASS" starttime="20170824 14:42:31.869"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:32.238">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:32.238">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:32.238" status="PASS" starttime="20170824 14:42:31.868"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:32.238">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:32.238" status="PASS" starttime="20170824 14:42:32.238"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:32.239">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:32.239" status="PASS" starttime="20170824 14:42:32.239"></status>
</kw>
<status endtime="20170824 14:42:32.239" status="PASS" starttime="20170824 14:42:31.865"></status>
</kw>
<status endtime="20170824 14:42:32.239" status="PASS" starttime="20170824 14:42:31.864"></status>
</kw>
<status endtime="20170824 14:42:32.240" status="PASS" starttime="20170824 14:42:31.862"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:32.240">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:42:32.240" status="PASS" starttime="20170824 14:42:32.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:32.242">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:32.242" status="PASS" starttime="20170824 14:42:32.242"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:32.243">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:32.243" status="PASS" starttime="20170824 14:42:32.243"></status>
</kw>
<status endtime="20170824 14:42:32.243" status="PASS" starttime="20170824 14:42:32.242"></status>
</kw>
<status endtime="20170824 14:42:32.244" status="PASS" starttime="20170824 14:42:32.241"></status>
</kw>
<status endtime="20170824 14:42:32.244" status="PASS" starttime="20170824 14:42:32.240"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:32.903">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:32.903">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:32.903" status="PASS" starttime="20170824 14:42:32.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:32.905">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:32.905" status="PASS" starttime="20170824 14:42:32.905"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:32.906">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:32.906" status="PASS" starttime="20170824 14:42:32.906"></status>
</kw>
<status endtime="20170824 14:42:32.906" status="PASS" starttime="20170824 14:42:32.905"></status>
</kw>
<status endtime="20170824 14:42:32.906" status="PASS" starttime="20170824 14:42:32.904"></status>
</kw>
<status endtime="20170824 14:42:32.907" status="PASS" starttime="20170824 14:42:32.904"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:32.907">Delete All Sessions</msg>
<status endtime="20170824 14:42:32.907" status="PASS" starttime="20170824 14:42:32.907"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:32.907">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:32.907" status="PASS" starttime="20170824 14:42:31.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:32.908">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:32.908" status="PASS" starttime="20170824 14:42:32.908"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:32.908">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:32.909">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:32.909">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:32.909" status="PASS" starttime="20170824 14:42:32.908"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:32.909">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:32.909" status="PASS" starttime="20170824 14:42:31.861"></status>
</kw>
<status endtime="20170824 14:42:32.909" status="PASS" starttime="20170824 14:42:31.861"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:32.909">${state} = MotherboardInit</msg>
<status endtime="20170824 14:42:32.909" status="PASS" starttime="20170824 14:42:31.861"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:32.910">${boot_progress} = MotherboardInit</msg>
<status endtime="20170824 14:42:32.910" status="PASS" starttime="20170824 14:42:31.858"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:42:32.910">MotherboardInit != OSStart</msg>
<status endtime="20170824 14:42:32.910" status="FAIL" starttime="20170824 14:42:32.910"></status>
</kw>
<status endtime="20170824 14:42:32.910" status="FAIL" starttime="20170824 14:42:31.858"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:32.911">${status} = False</msg>
<status endtime="20170824 14:42:32.911" status="PASS" starttime="20170824 14:42:31.858"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 14:42:32.911" status="PASS" starttime="20170824 14:42:32.911"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:32.915">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:32.916" status="PASS" starttime="20170824 14:42:32.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:32.916">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:32.916" status="PASS" starttime="20170824 14:42:32.916"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:32.917">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:32.917" status="PASS" starttime="20170824 14:42:32.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:32.917">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:32.917" status="PASS" starttime="20170824 14:42:32.917"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:33.360">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:33.360" status="PASS" starttime="20170824 14:42:32.918"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:33.360">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:33.360">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:33.360" status="PASS" starttime="20170824 14:42:32.918"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:33.361">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:33.361" status="PASS" starttime="20170824 14:42:33.360"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:33.361">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:33.361" status="PASS" starttime="20170824 14:42:33.361"></status>
</kw>
<status endtime="20170824 14:42:33.362" status="PASS" starttime="20170824 14:42:32.914"></status>
</kw>
<status endtime="20170824 14:42:33.362" status="PASS" starttime="20170824 14:42:32.913"></status>
</kw>
<status endtime="20170824 14:42:33.362" status="PASS" starttime="20170824 14:42:32.913"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:33.362">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:42:33.362" status="PASS" starttime="20170824 14:42:33.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:33.365">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:33.365" status="PASS" starttime="20170824 14:42:33.364"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:33.366">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:33.366" status="PASS" starttime="20170824 14:42:33.365"></status>
</kw>
<status endtime="20170824 14:42:33.366" status="PASS" starttime="20170824 14:42:33.365"></status>
</kw>
<status endtime="20170824 14:42:33.366" status="PASS" starttime="20170824 14:42:33.363"></status>
</kw>
<status endtime="20170824 14:42:33.366" status="PASS" starttime="20170824 14:42:33.363"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:34.085">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:34.085">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:34.085" status="PASS" starttime="20170824 14:42:33.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:34.087">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:34.087" status="PASS" starttime="20170824 14:42:34.086"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:34.088">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:34.088" status="PASS" starttime="20170824 14:42:34.087"></status>
</kw>
<status endtime="20170824 14:42:34.088" status="PASS" starttime="20170824 14:42:34.087"></status>
</kw>
<status endtime="20170824 14:42:34.088" status="PASS" starttime="20170824 14:42:34.086"></status>
</kw>
<status endtime="20170824 14:42:34.088" status="PASS" starttime="20170824 14:42:34.085"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:34.089">Delete All Sessions</msg>
<status endtime="20170824 14:42:34.089" status="PASS" starttime="20170824 14:42:34.088"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:34.089">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:34.089" status="PASS" starttime="20170824 14:42:32.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:34.089">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:34.090" status="PASS" starttime="20170824 14:42:34.089"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:34.090">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:34.090">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:34.090">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:34.090" status="PASS" starttime="20170824 14:42:34.090"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:34.091">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:34.091" status="PASS" starttime="20170824 14:42:32.912"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:34.091">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:34.091" status="PASS" starttime="20170824 14:42:32.911"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:34.091">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170824 14:42:34.091">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:34.092" status="FAIL" starttime="20170824 14:42:34.091"></status>
</kw>
<status endtime="20170824 14:42:34.092" status="FAIL" starttime="20170824 14:42:31.857"></status>
</kw>
<status endtime="20170824 14:42:34.092" status="FAIL" starttime="20170824 14:42:29.286"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:44.097">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:44.098" status="PASS" starttime="20170824 14:42:44.097"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:44.098">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:44.098" status="PASS" starttime="20170824 14:42:44.098"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:44.099">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:44.099" status="PASS" starttime="20170824 14:42:44.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:44.100">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:44.100" status="PASS" starttime="20170824 14:42:44.099"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:44.458">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:44.458" status="PASS" starttime="20170824 14:42:44.100"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:44.458">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:44.459">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:44.459" status="PASS" starttime="20170824 14:42:44.100"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:44.459">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:44.459" status="PASS" starttime="20170824 14:42:44.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:44.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:44.460" status="PASS" starttime="20170824 14:42:44.460"></status>
</kw>
<status endtime="20170824 14:42:44.460" status="PASS" starttime="20170824 14:42:44.097"></status>
</kw>
<status endtime="20170824 14:42:44.460" status="PASS" starttime="20170824 14:42:44.096"></status>
</kw>
<status endtime="20170824 14:42:44.460" status="PASS" starttime="20170824 14:42:44.096"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:44.461">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:42:44.461" status="PASS" starttime="20170824 14:42:44.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:44.463">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:44.463" status="PASS" starttime="20170824 14:42:44.463"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:44.465">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:44.465" status="PASS" starttime="20170824 14:42:44.464"></status>
</kw>
<status endtime="20170824 14:42:44.465" status="PASS" starttime="20170824 14:42:44.464"></status>
</kw>
<status endtime="20170824 14:42:44.465" status="PASS" starttime="20170824 14:42:44.462"></status>
</kw>
<status endtime="20170824 14:42:44.465" status="PASS" starttime="20170824 14:42:44.461"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:44.999">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:44.999">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:44.999" status="PASS" starttime="20170824 14:42:44.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.001">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:45.001" status="PASS" starttime="20170824 14:42:45.001"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:45.002">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:45.002" status="PASS" starttime="20170824 14:42:45.002"></status>
</kw>
<status endtime="20170824 14:42:45.002" status="PASS" starttime="20170824 14:42:45.001"></status>
</kw>
<status endtime="20170824 14:42:45.002" status="PASS" starttime="20170824 14:42:45.000"></status>
</kw>
<status endtime="20170824 14:42:45.003" status="PASS" starttime="20170824 14:42:45.000"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:45.003">Delete All Sessions</msg>
<status endtime="20170824 14:42:45.003" status="PASS" starttime="20170824 14:42:45.003"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:45.003">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:45.003" status="PASS" starttime="20170824 14:42:44.095"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:45.004">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:45.004" status="PASS" starttime="20170824 14:42:45.003"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.004">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:45.005">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:45.005">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:45.005" status="PASS" starttime="20170824 14:42:45.004"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:45.005">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:42:45.005" status="PASS" starttime="20170824 14:42:44.094"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:45.005">${power_state} = On</msg>
<status endtime="20170824 14:42:45.005" status="PASS" starttime="20170824 14:42:44.093"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 14:42:45.006" status="PASS" starttime="20170824 14:42:45.006"></status>
</kw>
<status endtime="20170824 14:42:45.006" status="PASS" starttime="20170824 14:42:44.093"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:45.010">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:45.010" status="PASS" starttime="20170824 14:42:45.009"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.011">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:45.011" status="PASS" starttime="20170824 14:42:45.010"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.011">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:45.011" status="PASS" starttime="20170824 14:42:45.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.012">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:45.012" status="PASS" starttime="20170824 14:42:45.011"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:45.436">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:45.436" status="PASS" starttime="20170824 14:42:45.013"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:45.437">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:45.437">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:45.437" status="PASS" starttime="20170824 14:42:45.012"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:45.437">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:45.437" status="PASS" starttime="20170824 14:42:45.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:45.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:45.438" status="PASS" starttime="20170824 14:42:45.438"></status>
</kw>
<status endtime="20170824 14:42:45.438" status="PASS" starttime="20170824 14:42:45.009"></status>
</kw>
<status endtime="20170824 14:42:45.438" status="PASS" starttime="20170824 14:42:45.008"></status>
</kw>
<status endtime="20170824 14:42:45.438" status="PASS" starttime="20170824 14:42:45.008"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.439">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 14:42:45.439" status="PASS" starttime="20170824 14:42:45.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.441">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:45.441" status="PASS" starttime="20170824 14:42:45.440"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:45.442">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:45.442" status="PASS" starttime="20170824 14:42:45.442"></status>
</kw>
<status endtime="20170824 14:42:45.442" status="PASS" starttime="20170824 14:42:45.441"></status>
</kw>
<status endtime="20170824 14:42:45.442" status="PASS" starttime="20170824 14:42:45.440"></status>
</kw>
<status endtime="20170824 14:42:45.443" status="PASS" starttime="20170824 14:42:45.439"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.979">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:45.980">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:45.980" status="PASS" starttime="20170824 14:42:45.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.981">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:45.981" status="PASS" starttime="20170824 14:42:45.981"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:45.982">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:45.982" status="PASS" starttime="20170824 14:42:45.982"></status>
</kw>
<status endtime="20170824 14:42:45.982" status="PASS" starttime="20170824 14:42:45.982"></status>
</kw>
<status endtime="20170824 14:42:45.983" status="PASS" starttime="20170824 14:42:45.980"></status>
</kw>
<status endtime="20170824 14:42:45.983" status="PASS" starttime="20170824 14:42:45.980"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:45.983">Delete All Sessions</msg>
<status endtime="20170824 14:42:45.983" status="PASS" starttime="20170824 14:42:45.983"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:45.983">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:45.983" status="PASS" starttime="20170824 14:42:45.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:45.984">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:45.984" status="PASS" starttime="20170824 14:42:45.984"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.985">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:45.985">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:45.985">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:45.985" status="PASS" starttime="20170824 14:42:45.984"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:45.985">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 14:42:45.985" status="PASS" starttime="20170824 14:42:45.007"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:45.985">${host_state} = Running</msg>
<status endtime="20170824 14:42:45.985" status="PASS" starttime="20170824 14:42:45.006"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 14:42:45.986" status="PASS" starttime="20170824 14:42:45.986"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170824 14:42:45.989">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 14:42:45.989" status="PASS" starttime="20170824 14:42:45.989"></status>
</kw>
<status endtime="20170824 14:42:45.989" status="PASS" starttime="20170824 14:42:45.988"></status>
</kw>
<status endtime="20170824 14:42:45.990" status="PASS" starttime="20170824 14:42:45.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:45.996">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:45.996" status="PASS" starttime="20170824 14:42:45.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.997">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:45.997" status="PASS" starttime="20170824 14:42:45.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.998">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:45.998" status="PASS" starttime="20170824 14:42:45.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:45.998">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:45.998" status="PASS" starttime="20170824 14:42:45.998"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:46.528">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:46.529" status="PASS" starttime="20170824 14:42:45.999"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:46.529">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:46.529">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:46.529" status="PASS" starttime="20170824 14:42:45.999"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:46.529">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:46.530" status="PASS" starttime="20170824 14:42:46.529"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:46.530">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:46.530" status="PASS" starttime="20170824 14:42:46.530"></status>
</kw>
<status endtime="20170824 14:42:46.530" status="PASS" starttime="20170824 14:42:45.995"></status>
</kw>
<status endtime="20170824 14:42:46.530" status="PASS" starttime="20170824 14:42:45.994"></status>
</kw>
<status endtime="20170824 14:42:46.531" status="PASS" starttime="20170824 14:42:45.993"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:46.531">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:42:46.531" status="PASS" starttime="20170824 14:42:46.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:46.533">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:46.534" status="PASS" starttime="20170824 14:42:46.533"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:46.534">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:46.535" status="PASS" starttime="20170824 14:42:46.534"></status>
</kw>
<status endtime="20170824 14:42:46.535" status="PASS" starttime="20170824 14:42:46.534"></status>
</kw>
<status endtime="20170824 14:42:46.535" status="PASS" starttime="20170824 14:42:46.532"></status>
</kw>
<status endtime="20170824 14:42:46.535" status="PASS" starttime="20170824 14:42:46.531"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:47.290">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:47.290">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:47.290" status="PASS" starttime="20170824 14:42:46.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:47.292">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:47.292" status="PASS" starttime="20170824 14:42:47.292"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:47.293">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:47.293" status="PASS" starttime="20170824 14:42:47.293"></status>
</kw>
<status endtime="20170824 14:42:47.294" status="PASS" starttime="20170824 14:42:47.292"></status>
</kw>
<status endtime="20170824 14:42:47.294" status="PASS" starttime="20170824 14:42:47.291"></status>
</kw>
<status endtime="20170824 14:42:47.294" status="PASS" starttime="20170824 14:42:47.291"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:47.294">Delete All Sessions</msg>
<status endtime="20170824 14:42:47.294" status="PASS" starttime="20170824 14:42:47.294"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:47.294">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:47.294" status="PASS" starttime="20170824 14:42:45.992"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:47.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:47.295" status="PASS" starttime="20170824 14:42:47.295"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:47.296">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:47.296">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:47.296">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:47.296" status="PASS" starttime="20170824 14:42:47.295"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:47.296">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:47.296" status="PASS" starttime="20170824 14:42:45.991"></status>
</kw>
<status endtime="20170824 14:42:47.296" status="PASS" starttime="20170824 14:42:45.991"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:47.297">${state} = MotherboardInit</msg>
<status endtime="20170824 14:42:47.297" status="PASS" starttime="20170824 14:42:45.990"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:47.297">${boot_progress} = MotherboardInit</msg>
<status endtime="20170824 14:42:47.297" status="PASS" starttime="20170824 14:42:45.987"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:42:47.297">MotherboardInit != OSStart</msg>
<status endtime="20170824 14:42:47.297" status="FAIL" starttime="20170824 14:42:47.297"></status>
</kw>
<status endtime="20170824 14:42:47.298" status="FAIL" starttime="20170824 14:42:45.987"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:47.298">${status} = False</msg>
<status endtime="20170824 14:42:47.298" status="PASS" starttime="20170824 14:42:45.987"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 14:42:47.298" status="PASS" starttime="20170824 14:42:47.298"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:47.304">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:47.304" status="PASS" starttime="20170824 14:42:47.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:47.305">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:47.305" status="PASS" starttime="20170824 14:42:47.305"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:47.306">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:47.306" status="PASS" starttime="20170824 14:42:47.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:47.307">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:47.307" status="PASS" starttime="20170824 14:42:47.306"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:47.852">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:47.852" status="PASS" starttime="20170824 14:42:47.308"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:47.852">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:47.852">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:47.852" status="PASS" starttime="20170824 14:42:47.307"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:47.853">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:47.853" status="PASS" starttime="20170824 14:42:47.853"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:47.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:47.854" status="PASS" starttime="20170824 14:42:47.853"></status>
</kw>
<status endtime="20170824 14:42:47.854" status="PASS" starttime="20170824 14:42:47.302"></status>
</kw>
<status endtime="20170824 14:42:47.854" status="PASS" starttime="20170824 14:42:47.302"></status>
</kw>
<status endtime="20170824 14:42:47.854" status="PASS" starttime="20170824 14:42:47.301"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:47.855">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:42:47.855" status="PASS" starttime="20170824 14:42:47.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:47.857">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:47.857" status="PASS" starttime="20170824 14:42:47.856"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:47.858">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:42:47.858" status="PASS" starttime="20170824 14:42:47.858"></status>
</kw>
<status endtime="20170824 14:42:47.858" status="PASS" starttime="20170824 14:42:47.857"></status>
</kw>
<status endtime="20170824 14:42:47.858" status="PASS" starttime="20170824 14:42:47.856"></status>
</kw>
<status endtime="20170824 14:42:47.858" status="PASS" starttime="20170824 14:42:47.855"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:48.560">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:48.560">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:48.560" status="PASS" starttime="20170824 14:42:47.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:48.562">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:48.562" status="PASS" starttime="20170824 14:42:48.561"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:48.563">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:48.563" status="PASS" starttime="20170824 14:42:48.563"></status>
</kw>
<status endtime="20170824 14:42:48.563" status="PASS" starttime="20170824 14:42:48.562"></status>
</kw>
<status endtime="20170824 14:42:48.563" status="PASS" starttime="20170824 14:42:48.561"></status>
</kw>
<status endtime="20170824 14:42:48.563" status="PASS" starttime="20170824 14:42:48.560"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:48.564">Delete All Sessions</msg>
<status endtime="20170824 14:42:48.564" status="PASS" starttime="20170824 14:42:48.564"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:48.564">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:48.564" status="PASS" starttime="20170824 14:42:47.300"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:48.565">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:48.565" status="PASS" starttime="20170824 14:42:48.564"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:48.565">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:48.565">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:48.566">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:48.566" status="PASS" starttime="20170824 14:42:48.565"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:48.566">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:48.566" status="PASS" starttime="20170824 14:42:47.299"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:48.566">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:48.566" status="PASS" starttime="20170824 14:42:47.299"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:48.567">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170824 14:42:48.567">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:42:48.567" status="FAIL" starttime="20170824 14:42:48.566"></status>
</kw>
<status endtime="20170824 14:42:48.567" status="FAIL" starttime="20170824 14:42:45.986"></status>
</kw>
<status endtime="20170824 14:42:48.567" status="FAIL" starttime="20170824 14:42:44.092"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:58.574">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:58.574" status="PASS" starttime="20170824 14:42:58.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:58.575">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:58.575" status="PASS" starttime="20170824 14:42:58.575"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:58.576">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:58.576" status="PASS" starttime="20170824 14:42:58.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:58.577">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:58.577" status="PASS" starttime="20170824 14:42:58.577"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:58.838">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:58.838" status="PASS" starttime="20170824 14:42:58.578"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:58.838">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:58.838">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:58.838" status="PASS" starttime="20170824 14:42:58.578"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:58.839">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:58.839" status="PASS" starttime="20170824 14:42:58.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:58.839">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:58.840" status="PASS" starttime="20170824 14:42:58.839"></status>
</kw>
<status endtime="20170824 14:42:58.840" status="PASS" starttime="20170824 14:42:58.571"></status>
</kw>
<status endtime="20170824 14:42:58.840" status="PASS" starttime="20170824 14:42:58.571"></status>
</kw>
<status endtime="20170824 14:42:58.840" status="PASS" starttime="20170824 14:42:58.570"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:58.841">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:42:58.841" status="PASS" starttime="20170824 14:42:58.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:58.843">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:58.843" status="PASS" starttime="20170824 14:42:58.842"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:58.844">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:58.844" status="PASS" starttime="20170824 14:42:58.843"></status>
</kw>
<status endtime="20170824 14:42:58.844" status="PASS" starttime="20170824 14:42:58.843"></status>
</kw>
<status endtime="20170824 14:42:58.844" status="PASS" starttime="20170824 14:42:58.841"></status>
</kw>
<status endtime="20170824 14:42:58.844" status="PASS" starttime="20170824 14:42:58.841"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:58.950">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:42:58.950">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:58.950" status="PASS" starttime="20170824 14:42:58.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:58.952">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:58.952" status="PASS" starttime="20170824 14:42:58.951"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:58.953">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:42:58.953" status="PASS" starttime="20170824 14:42:58.952"></status>
</kw>
<status endtime="20170824 14:42:58.953" status="PASS" starttime="20170824 14:42:58.952"></status>
</kw>
<status endtime="20170824 14:42:58.953" status="PASS" starttime="20170824 14:42:58.951"></status>
</kw>
<status endtime="20170824 14:42:58.953" status="PASS" starttime="20170824 14:42:58.950"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:42:58.954">Delete All Sessions</msg>
<status endtime="20170824 14:42:58.954" status="PASS" starttime="20170824 14:42:58.954"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:58.954">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:58.954" status="PASS" starttime="20170824 14:42:58.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:58.955">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:58.955" status="PASS" starttime="20170824 14:42:58.954"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:58.955">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:42:58.955">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:42:58.956">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:42:58.956" status="PASS" starttime="20170824 14:42:58.955"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:58.956">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:42:58.956" status="PASS" starttime="20170824 14:42:58.569"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:58.956">${power_state} = On</msg>
<status endtime="20170824 14:42:58.956" status="PASS" starttime="20170824 14:42:58.569"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 14:42:58.957" status="PASS" starttime="20170824 14:42:58.956"></status>
</kw>
<status endtime="20170824 14:42:58.957" status="PASS" starttime="20170824 14:42:58.568"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:58.960">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:42:58.961" status="PASS" starttime="20170824 14:42:58.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:58.961">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:42:58.962" status="PASS" starttime="20170824 14:42:58.961"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:58.962">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:42:58.962" status="PASS" starttime="20170824 14:42:58.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:58.963">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:42:58.963" status="PASS" starttime="20170824 14:42:58.962"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:59.934">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:42:59.934" status="PASS" starttime="20170824 14:42:58.964"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:42:59.934">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:42:59.934">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:42:59.935" status="PASS" starttime="20170824 14:42:58.963"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:59.935">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:59.935" status="PASS" starttime="20170824 14:42:59.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:59.936">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:42:59.936" status="PASS" starttime="20170824 14:42:59.936"></status>
</kw>
<status endtime="20170824 14:42:59.936" status="PASS" starttime="20170824 14:42:58.959"></status>
</kw>
<status endtime="20170824 14:42:59.936" status="PASS" starttime="20170824 14:42:58.959"></status>
</kw>
<status endtime="20170824 14:42:59.936" status="PASS" starttime="20170824 14:42:58.959"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:59.937">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 14:42:59.937" status="PASS" starttime="20170824 14:42:59.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:42:59.943">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:59.943" status="PASS" starttime="20170824 14:42:59.938"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:42:59.944">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:42:59.944" status="PASS" starttime="20170824 14:42:59.944"></status>
</kw>
<status endtime="20170824 14:42:59.944" status="PASS" starttime="20170824 14:42:59.943"></status>
</kw>
<status endtime="20170824 14:42:59.945" status="PASS" starttime="20170824 14:42:59.938"></status>
</kw>
<status endtime="20170824 14:42:59.945" status="PASS" starttime="20170824 14:42:59.937"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:00.406">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:43:00.407">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:00.407" status="PASS" starttime="20170824 14:42:59.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:00.408">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:00.408" status="PASS" starttime="20170824 14:43:00.408"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:00.409">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:00.409" status="PASS" starttime="20170824 14:43:00.409"></status>
</kw>
<status endtime="20170824 14:43:00.410" status="PASS" starttime="20170824 14:43:00.409"></status>
</kw>
<status endtime="20170824 14:43:00.410" status="PASS" starttime="20170824 14:43:00.407"></status>
</kw>
<status endtime="20170824 14:43:00.410" status="PASS" starttime="20170824 14:43:00.407"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:43:00.410">Delete All Sessions</msg>
<status endtime="20170824 14:43:00.410" status="PASS" starttime="20170824 14:43:00.410"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:00.410">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:00.410" status="PASS" starttime="20170824 14:42:58.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:00.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:00.411" status="PASS" starttime="20170824 14:43:00.411"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:00.412">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:43:00.412">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:43:00.412">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:43:00.412" status="PASS" starttime="20170824 14:43:00.411"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:00.412">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 14:43:00.412" status="PASS" starttime="20170824 14:42:58.957"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:00.413">${host_state} = Running</msg>
<status endtime="20170824 14:43:00.413" status="PASS" starttime="20170824 14:42:58.957"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 14:43:00.413" status="PASS" starttime="20170824 14:43:00.413"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170824 14:43:00.416">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 14:43:00.416" status="PASS" starttime="20170824 14:43:00.416"></status>
</kw>
<status endtime="20170824 14:43:00.416" status="PASS" starttime="20170824 14:43:00.415"></status>
</kw>
<status endtime="20170824 14:43:00.416" status="PASS" starttime="20170824 14:43:00.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:00.421">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:43:00.421" status="PASS" starttime="20170824 14:43:00.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:00.422">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:43:00.422" status="PASS" starttime="20170824 14:43:00.421"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:00.422">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:43:00.422" status="PASS" starttime="20170824 14:43:00.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:00.423">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:43:00.423" status="PASS" starttime="20170824 14:43:00.423"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:01.072">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:43:01.072" status="PASS" starttime="20170824 14:43:00.424"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:01.072">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:43:01.072">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:01.072" status="PASS" starttime="20170824 14:43:00.423"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:01.073">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:01.073" status="PASS" starttime="20170824 14:43:01.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:01.074">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:01.074" status="PASS" starttime="20170824 14:43:01.073"></status>
</kw>
<status endtime="20170824 14:43:01.074" status="PASS" starttime="20170824 14:43:00.420"></status>
</kw>
<status endtime="20170824 14:43:01.074" status="PASS" starttime="20170824 14:43:00.419"></status>
</kw>
<status endtime="20170824 14:43:01.074" status="PASS" starttime="20170824 14:43:00.419"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:01.075">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:43:01.075" status="PASS" starttime="20170824 14:43:01.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:01.077">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:43:01.077" status="PASS" starttime="20170824 14:43:01.076"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:01.078">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:43:01.078" status="PASS" starttime="20170824 14:43:01.078"></status>
</kw>
<status endtime="20170824 14:43:01.078" status="PASS" starttime="20170824 14:43:01.077"></status>
</kw>
<status endtime="20170824 14:43:01.078" status="PASS" starttime="20170824 14:43:01.076"></status>
</kw>
<status endtime="20170824 14:43:01.078" status="PASS" starttime="20170824 14:43:01.075"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:01.412">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:43:01.412">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:01.412" status="PASS" starttime="20170824 14:43:01.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:01.414">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:01.414" status="PASS" starttime="20170824 14:43:01.413"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:01.415">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:01.415" status="PASS" starttime="20170824 14:43:01.415"></status>
</kw>
<status endtime="20170824 14:43:01.415" status="PASS" starttime="20170824 14:43:01.414"></status>
</kw>
<status endtime="20170824 14:43:01.415" status="PASS" starttime="20170824 14:43:01.413"></status>
</kw>
<status endtime="20170824 14:43:01.416" status="PASS" starttime="20170824 14:43:01.412"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:43:01.416">Delete All Sessions</msg>
<status endtime="20170824 14:43:01.416" status="PASS" starttime="20170824 14:43:01.416"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:01.416">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:01.416" status="PASS" starttime="20170824 14:43:00.418"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:01.417">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:01.417" status="PASS" starttime="20170824 14:43:01.416"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:01.417">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:43:01.417">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:43:01.418">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:43:01.418" status="PASS" starttime="20170824 14:43:01.417"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:01.418">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:43:01.418" status="PASS" starttime="20170824 14:43:00.417"></status>
</kw>
<status endtime="20170824 14:43:01.418" status="PASS" starttime="20170824 14:43:00.417"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:01.418">${state} = MotherboardInit</msg>
<status endtime="20170824 14:43:01.418" status="PASS" starttime="20170824 14:43:00.417"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:01.418">${boot_progress} = MotherboardInit</msg>
<status endtime="20170824 14:43:01.419" status="PASS" starttime="20170824 14:43:00.414"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:43:01.419">MotherboardInit != OSStart</msg>
<status endtime="20170824 14:43:01.419" status="FAIL" starttime="20170824 14:43:01.419"></status>
</kw>
<status endtime="20170824 14:43:01.419" status="FAIL" starttime="20170824 14:43:00.414"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:01.419">${status} = False</msg>
<status endtime="20170824 14:43:01.420" status="PASS" starttime="20170824 14:43:00.414"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 14:43:01.420" status="PASS" starttime="20170824 14:43:01.420"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:01.424">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:43:01.425" status="PASS" starttime="20170824 14:43:01.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:01.425">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:43:01.425" status="PASS" starttime="20170824 14:43:01.425"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:01.426">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:43:01.426" status="PASS" starttime="20170824 14:43:01.425"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:01.426">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:43:01.426" status="PASS" starttime="20170824 14:43:01.426"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:01.952">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:43:01.952" status="PASS" starttime="20170824 14:43:01.427"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:01.952">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:43:01.953">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:01.953" status="PASS" starttime="20170824 14:43:01.427"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:01.953">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:01.953" status="PASS" starttime="20170824 14:43:01.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:01.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:01.954" status="PASS" starttime="20170824 14:43:01.954"></status>
</kw>
<status endtime="20170824 14:43:01.954" status="PASS" starttime="20170824 14:43:01.423"></status>
</kw>
<status endtime="20170824 14:43:01.954" status="PASS" starttime="20170824 14:43:01.423"></status>
</kw>
<status endtime="20170824 14:43:01.954" status="PASS" starttime="20170824 14:43:01.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:01.955">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:43:01.955" status="PASS" starttime="20170824 14:43:01.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:01.957">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:43:01.958" status="PASS" starttime="20170824 14:43:01.956"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:01.958">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:43:01.959" status="PASS" starttime="20170824 14:43:01.958"></status>
</kw>
<status endtime="20170824 14:43:01.959" status="PASS" starttime="20170824 14:43:01.958"></status>
</kw>
<status endtime="20170824 14:43:01.959" status="PASS" starttime="20170824 14:43:01.956"></status>
</kw>
<status endtime="20170824 14:43:01.959" status="PASS" starttime="20170824 14:43:01.955"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:02.083">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:43:02.084">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:02.084" status="PASS" starttime="20170824 14:43:01.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:02.086">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:02.087" status="PASS" starttime="20170824 14:43:02.086"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:02.088">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:02.088" status="PASS" starttime="20170824 14:43:02.087"></status>
</kw>
<status endtime="20170824 14:43:02.088" status="PASS" starttime="20170824 14:43:02.087"></status>
</kw>
<status endtime="20170824 14:43:02.088" status="PASS" starttime="20170824 14:43:02.085"></status>
</kw>
<status endtime="20170824 14:43:02.088" status="PASS" starttime="20170824 14:43:02.084"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:43:02.089">Delete All Sessions</msg>
<status endtime="20170824 14:43:02.089" status="PASS" starttime="20170824 14:43:02.089"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:02.089">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:02.089" status="PASS" starttime="20170824 14:43:01.421"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:02.090">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:02.090" status="PASS" starttime="20170824 14:43:02.089"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:02.090">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:43:02.090">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:43:02.090">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:43:02.090" status="PASS" starttime="20170824 14:43:02.090"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:02.091">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:43:02.091" status="PASS" starttime="20170824 14:43:01.421"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:02.091">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:43:02.091" status="PASS" starttime="20170824 14:43:01.420"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:02.091">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170824 14:43:02.092">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170824 14:43:02.092" status="FAIL" starttime="20170824 14:43:02.091"></status>
</kw>
<status endtime="20170824 14:43:02.092" status="FAIL" starttime="20170824 14:43:00.413"></status>
</kw>
<status endtime="20170824 14:43:02.092" status="FAIL" starttime="20170824 14:42:58.568"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:12.097">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:43:12.097" status="PASS" starttime="20170824 14:43:12.097"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:12.098">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:43:12.098" status="PASS" starttime="20170824 14:43:12.098"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:12.099">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:43:12.099" status="PASS" starttime="20170824 14:43:12.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:12.099">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:43:12.099" status="PASS" starttime="20170824 14:43:12.099"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:12.641">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:43:12.641" status="PASS" starttime="20170824 14:43:12.100"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:12.641">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:43:12.641">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:12.641" status="PASS" starttime="20170824 14:43:12.100"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:12.642">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:12.642" status="PASS" starttime="20170824 14:43:12.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:12.643">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:12.643" status="PASS" starttime="20170824 14:43:12.642"></status>
</kw>
<status endtime="20170824 14:43:12.643" status="PASS" starttime="20170824 14:43:12.096"></status>
</kw>
<status endtime="20170824 14:43:12.643" status="PASS" starttime="20170824 14:43:12.096"></status>
</kw>
<status endtime="20170824 14:43:12.643" status="PASS" starttime="20170824 14:43:12.095"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:12.644">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:43:12.644" status="PASS" starttime="20170824 14:43:12.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:12.647">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:43:12.647" status="PASS" starttime="20170824 14:43:12.646"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:12.648">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:43:12.649" status="PASS" starttime="20170824 14:43:12.648"></status>
</kw>
<status endtime="20170824 14:43:12.649" status="PASS" starttime="20170824 14:43:12.647"></status>
</kw>
<status endtime="20170824 14:43:12.649" status="PASS" starttime="20170824 14:43:12.645"></status>
</kw>
<status endtime="20170824 14:43:12.649" status="PASS" starttime="20170824 14:43:12.644"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:13.491">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:43:13.491">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:13.491" status="PASS" starttime="20170824 14:43:12.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:13.493">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:13.493" status="PASS" starttime="20170824 14:43:13.493"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:13.494">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:13.494" status="PASS" starttime="20170824 14:43:13.494"></status>
</kw>
<status endtime="20170824 14:43:13.494" status="PASS" starttime="20170824 14:43:13.493"></status>
</kw>
<status endtime="20170824 14:43:13.494" status="PASS" starttime="20170824 14:43:13.492"></status>
</kw>
<status endtime="20170824 14:43:13.495" status="PASS" starttime="20170824 14:43:13.492"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:43:13.495">Delete All Sessions</msg>
<status endtime="20170824 14:43:13.495" status="PASS" starttime="20170824 14:43:13.495"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:13.495">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:13.495" status="PASS" starttime="20170824 14:43:12.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:13.496">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:13.496" status="PASS" starttime="20170824 14:43:13.496"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:13.497">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:43:13.497">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:43:13.497">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:43:13.497" status="PASS" starttime="20170824 14:43:13.496"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:13.497">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:43:13.497" status="PASS" starttime="20170824 14:43:12.094"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:13.497">${power_state} = On</msg>
<status endtime="20170824 14:43:13.497" status="PASS" starttime="20170824 14:43:12.093"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 14:43:13.498" status="PASS" starttime="20170824 14:43:13.498"></status>
</kw>
<status endtime="20170824 14:43:13.498" status="PASS" starttime="20170824 14:43:12.093"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:13.502">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:43:13.502" status="PASS" starttime="20170824 14:43:13.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:13.503">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:43:13.503" status="PASS" starttime="20170824 14:43:13.503"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:13.504">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:43:13.504" status="PASS" starttime="20170824 14:43:13.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:13.505">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:43:13.505" status="PASS" starttime="20170824 14:43:13.504"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.085">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:43:15.085" status="PASS" starttime="20170824 14:43:13.506"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:15.085">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:43:15.086">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:15.086" status="PASS" starttime="20170824 14:43:13.505"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.086">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:15.086" status="PASS" starttime="20170824 14:43:15.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.087">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:15.087" status="PASS" starttime="20170824 14:43:15.087"></status>
</kw>
<status endtime="20170824 14:43:15.087" status="PASS" starttime="20170824 14:43:13.501"></status>
</kw>
<status endtime="20170824 14:43:15.087" status="PASS" starttime="20170824 14:43:13.500"></status>
</kw>
<status endtime="20170824 14:43:15.087" status="PASS" starttime="20170824 14:43:13.500"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.088">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 14:43:15.088" status="PASS" starttime="20170824 14:43:15.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.090">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:43:15.090" status="PASS" starttime="20170824 14:43:15.089"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.091">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:43:15.091" status="PASS" starttime="20170824 14:43:15.091"></status>
</kw>
<status endtime="20170824 14:43:15.091" status="PASS" starttime="20170824 14:43:15.090"></status>
</kw>
<status endtime="20170824 14:43:15.091" status="PASS" starttime="20170824 14:43:15.089"></status>
</kw>
<status endtime="20170824 14:43:15.091" status="PASS" starttime="20170824 14:43:15.088"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.201">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:43:15.201">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:15.201" status="PASS" starttime="20170824 14:43:15.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.203">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:15.203" status="PASS" starttime="20170824 14:43:15.202"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.204">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:15.204" status="PASS" starttime="20170824 14:43:15.204"></status>
</kw>
<status endtime="20170824 14:43:15.204" status="PASS" starttime="20170824 14:43:15.203"></status>
</kw>
<status endtime="20170824 14:43:15.204" status="PASS" starttime="20170824 14:43:15.202"></status>
</kw>
<status endtime="20170824 14:43:15.204" status="PASS" starttime="20170824 14:43:15.201"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:43:15.205">Delete All Sessions</msg>
<status endtime="20170824 14:43:15.205" status="PASS" starttime="20170824 14:43:15.205"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:15.205">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:15.205" status="PASS" starttime="20170824 14:43:13.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.206">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:15.206" status="PASS" starttime="20170824 14:43:15.206"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.207">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:43:15.207">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:43:15.207">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:43:15.207" status="PASS" starttime="20170824 14:43:15.206"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:15.207">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 14:43:15.207" status="PASS" starttime="20170824 14:43:13.499"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:15.207">${host_state} = Running</msg>
<status endtime="20170824 14:43:15.207" status="PASS" starttime="20170824 14:43:13.498"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 14:43:15.208" status="PASS" starttime="20170824 14:43:15.208"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170824 14:43:15.212">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 14:43:15.212" status="PASS" starttime="20170824 14:43:15.212"></status>
</kw>
<status endtime="20170824 14:43:15.212" status="PASS" starttime="20170824 14:43:15.211"></status>
</kw>
<status endtime="20170824 14:43:15.212" status="PASS" starttime="20170824 14:43:15.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.217">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:43:15.217" status="PASS" starttime="20170824 14:43:15.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.218">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:43:15.218" status="PASS" starttime="20170824 14:43:15.218"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.219">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:43:15.219" status="PASS" starttime="20170824 14:43:15.218"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.219">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:43:15.219" status="PASS" starttime="20170824 14:43:15.219"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.592">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:43:15.592" status="PASS" starttime="20170824 14:43:15.220"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:15.592">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:43:15.592">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:15.592" status="PASS" starttime="20170824 14:43:15.219"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.593">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:15.593" status="PASS" starttime="20170824 14:43:15.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.594">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:15.594" status="PASS" starttime="20170824 14:43:15.593"></status>
</kw>
<status endtime="20170824 14:43:15.594" status="PASS" starttime="20170824 14:43:15.216"></status>
</kw>
<status endtime="20170824 14:43:15.594" status="PASS" starttime="20170824 14:43:15.216"></status>
</kw>
<status endtime="20170824 14:43:15.594" status="PASS" starttime="20170824 14:43:15.215"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.595">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 14:43:15.595" status="PASS" starttime="20170824 14:43:15.594"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.597">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:43:15.597" status="PASS" starttime="20170824 14:43:15.596"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.598">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 14:43:15.598" status="PASS" starttime="20170824 14:43:15.597"></status>
</kw>
<status endtime="20170824 14:43:15.598" status="PASS" starttime="20170824 14:43:15.597"></status>
</kw>
<status endtime="20170824 14:43:15.598" status="PASS" starttime="20170824 14:43:15.595"></status>
</kw>
<status endtime="20170824 14:43:15.598" status="PASS" starttime="20170824 14:43:15.595"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.734">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:43:15.734">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:15.734" status="PASS" starttime="20170824 14:43:15.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.736">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:15.736" status="PASS" starttime="20170824 14:43:15.736"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.737">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:15.737" status="PASS" starttime="20170824 14:43:15.737"></status>
</kw>
<status endtime="20170824 14:43:15.737" status="PASS" starttime="20170824 14:43:15.736"></status>
</kw>
<status endtime="20170824 14:43:15.737" status="PASS" starttime="20170824 14:43:15.735"></status>
</kw>
<status endtime="20170824 14:43:15.738" status="PASS" starttime="20170824 14:43:15.735"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:43:15.738">Delete All Sessions</msg>
<status endtime="20170824 14:43:15.738" status="PASS" starttime="20170824 14:43:15.738"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:15.738">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:15.738" status="PASS" starttime="20170824 14:43:15.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:15.739" status="PASS" starttime="20170824 14:43:15.739"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:15.739">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:43:15.739">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:43:15.740">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:43:15.740" status="PASS" starttime="20170824 14:43:15.739"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:15.740">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170824 14:43:15.740" status="PASS" starttime="20170824 14:43:15.214"></status>
</kw>
<status endtime="20170824 14:43:15.740" status="PASS" starttime="20170824 14:43:15.213"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:15.740">${state} = OSStart</msg>
<status endtime="20170824 14:43:15.740" status="PASS" starttime="20170824 14:43:15.213"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:15.741">${boot_progress} = OSStart</msg>
<status endtime="20170824 14:43:15.741" status="PASS" starttime="20170824 14:43:15.210"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<status endtime="20170824 14:43:15.741" status="PASS" starttime="20170824 14:43:15.741"></status>
</kw>
<status endtime="20170824 14:43:15.741" status="PASS" starttime="20170824 14:43:15.209"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:15.741">${status} = True</msg>
<status endtime="20170824 14:43:15.741" status="PASS" starttime="20170824 14:43:15.209"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:15.742">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 14:43:15.742" status="PASS" starttime="20170824 14:43:15.742"></status>
</kw>
<status endtime="20170824 14:43:15.742" status="PASS" starttime="20170824 14:43:15.208"></status>
</kw>
<status endtime="20170824 14:43:15.742" status="PASS" starttime="20170824 14:43:12.092"></status>
</kw>
<status endtime="20170824 14:43:15.742" status="PASS" starttime="20170824 14:41:25.550"></status>
</kw>
<status endtime="20170824 14:43:15.742" status="PASS" starttime="20170824 14:41:24.523"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:45.743">Slept 30 seconds</msg>
<status endtime="20170824 14:43:45.744" status="PASS" starttime="20170824 14:43:15.743"></status>
</kw>
<kw name="Flush REST Sessions" library="utils">
<doc>Removes all the active session objects</doc>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:43:45.745">Delete All Sessions</msg>
<status endtime="20170824 14:43:45.745" status="PASS" starttime="20170824 14:43:45.745"></status>
</kw>
<status endtime="20170824 14:43:45.745" status="PASS" starttime="20170824 14:43:45.744"></status>
</kw>
<status endtime="20170824 14:43:45.745" status="PASS" starttime="20170824 14:41:16.550"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:45.745">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:45.747">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170824 14:43:45.747" status="PASS" starttime="20170824 14:43:45.746"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:45.748">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170824 14:43:45.748" status="PASS" starttime="20170824 14:43:45.748"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:45.752">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:43:45.753" status="PASS" starttime="20170824 14:43:45.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:45.754">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:43:45.754" status="PASS" starttime="20170824 14:43:45.753"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:45.755">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:43:45.755" status="PASS" starttime="20170824 14:43:45.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:45.756">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:43:45.756" status="PASS" starttime="20170824 14:43:45.755"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:47.624">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:43:47.624" status="PASS" starttime="20170824 14:43:45.757"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:47.624">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:43:47.624">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:47.624" status="PASS" starttime="20170824 14:43:45.756"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:47.625">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:47.625" status="PASS" starttime="20170824 14:43:47.625"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:47.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:47.626" status="PASS" starttime="20170824 14:43:47.625"></status>
</kw>
<status endtime="20170824 14:43:47.626" status="PASS" starttime="20170824 14:43:45.751"></status>
</kw>
<status endtime="20170824 14:43:47.626" status="PASS" starttime="20170824 14:43:45.750"></status>
</kw>
<status endtime="20170824 14:43:47.626" status="PASS" starttime="20170824 14:43:45.750"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:47.627">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170824 14:43:47.627" status="PASS" starttime="20170824 14:43:47.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:47.627">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:43:47.627" status="PASS" starttime="20170824 14:43:47.627"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170824 14:43:47.628" status="PASS" starttime="20170824 14:43:47.628"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:47.629">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170824 14:43:47.629" status="PASS" starttime="20170824 14:43:47.629"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:47.630">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170824 14:43:47.630" status="PASS" starttime="20170824 14:43:47.630"></status>
</kw>
<status endtime="20170824 14:43:47.630" status="PASS" starttime="20170824 14:43:47.630"></status>
</kw>
<status endtime="20170824 14:43:47.631" status="PASS" starttime="20170824 14:43:47.628"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:49.382">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170824 14:43:49.382">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:49.382" status="PASS" starttime="20170824 14:43:47.631"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:49.384">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:49.384" status="PASS" starttime="20170824 14:43:49.383"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:49.385">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:49.385" status="PASS" starttime="20170824 14:43:49.385"></status>
</kw>
<status endtime="20170824 14:43:49.385" status="PASS" starttime="20170824 14:43:49.384"></status>
</kw>
<status endtime="20170824 14:43:49.385" status="PASS" starttime="20170824 14:43:49.383"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:43:49.386">Delete All Sessions</msg>
<status endtime="20170824 14:43:49.386" status="PASS" starttime="20170824 14:43:49.385"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:49.386">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:49.386" status="PASS" starttime="20170824 14:43:45.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:49.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:49.387" status="PASS" starttime="20170824 14:43:49.386"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:49.387">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:43:49.387">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:43:49.387">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status endtime="20170824 14:43:49.387" status="PASS" starttime="20170824 14:43:49.387"></status>
</kw>
<status endtime="20170824 14:43:49.387" status="PASS" starttime="20170824 14:43:45.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170824 14:43:49.388" status="PASS" starttime="20170824 14:43:49.388"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:49.393">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:43:49.394" status="PASS" starttime="20170824 14:43:49.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:49.394">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:43:49.394" status="PASS" starttime="20170824 14:43:49.394"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:49.395">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:43:49.395" status="PASS" starttime="20170824 14:43:49.395"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:49.396">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:43:49.396" status="PASS" starttime="20170824 14:43:49.396"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:52.430">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:43:52.430" status="PASS" starttime="20170824 14:43:49.397"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:52.430">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:43:52.430">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:52.430" status="PASS" starttime="20170824 14:43:49.397"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:52.431">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:52.431" status="PASS" starttime="20170824 14:43:52.431"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:52.432">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:52.432" status="PASS" starttime="20170824 14:43:52.431"></status>
</kw>
<status endtime="20170824 14:43:52.432" status="PASS" starttime="20170824 14:43:49.392"></status>
</kw>
<status endtime="20170824 14:43:52.432" status="PASS" starttime="20170824 14:43:49.392"></status>
</kw>
<status endtime="20170824 14:43:52.432" status="PASS" starttime="20170824 14:43:49.391"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:52.433">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:43:52.433" status="PASS" starttime="20170824 14:43:52.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:52.435">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:43:52.435" status="PASS" starttime="20170824 14:43:52.434"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:52.436">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:43:52.436" status="PASS" starttime="20170824 14:43:52.436"></status>
</kw>
<status endtime="20170824 14:43:52.436" status="PASS" starttime="20170824 14:43:52.435"></status>
</kw>
<status endtime="20170824 14:43:52.436" status="PASS" starttime="20170824 14:43:52.434"></status>
</kw>
<status endtime="20170824 14:43:52.436" status="PASS" starttime="20170824 14:43:52.433"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:57.480">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:43:57.480">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:57.480" status="PASS" starttime="20170824 14:43:52.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:57.482">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:57.482" status="PASS" starttime="20170824 14:43:57.482"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:57.483">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:43:57.483" status="PASS" starttime="20170824 14:43:57.483"></status>
</kw>
<status endtime="20170824 14:43:57.483" status="PASS" starttime="20170824 14:43:57.482"></status>
</kw>
<status endtime="20170824 14:43:57.483" status="PASS" starttime="20170824 14:43:57.481"></status>
</kw>
<status endtime="20170824 14:43:57.483" status="PASS" starttime="20170824 14:43:57.481"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:43:57.484">Delete All Sessions</msg>
<status endtime="20170824 14:43:57.484" status="PASS" starttime="20170824 14:43:57.484"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:57.484">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:43:57.484" status="PASS" starttime="20170824 14:43:49.391"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:43:57.485">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:43:57.485" status="PASS" starttime="20170824 14:43:57.484"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:43:57.485">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:43:57.485">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:43:57.486">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:43:57.486" status="PASS" starttime="20170824 14:43:57.485"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:57.486">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:43:57.486" status="PASS" starttime="20170824 14:43:49.390"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:43:57.486">${power_state} = On</msg>
<status endtime="20170824 14:43:57.486" status="PASS" starttime="20170824 14:43:49.390"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:43:57.487">Off != On</msg>
<status endtime="20170824 14:43:57.487" status="FAIL" starttime="20170824 14:43:57.486"></status>
</kw>
<status endtime="20170824 14:43:57.487" status="FAIL" starttime="20170824 14:43:49.389"></status>
</kw>
<status endtime="20170824 14:43:57.487" status="FAIL" starttime="20170824 14:43:49.389"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:07.493">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:44:07.493" status="PASS" starttime="20170824 14:44:07.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:07.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:44:07.494" status="PASS" starttime="20170824 14:44:07.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:07.495">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:44:07.495" status="PASS" starttime="20170824 14:44:07.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:07.495">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:44:07.495" status="PASS" starttime="20170824 14:44:07.495"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:07.831">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:44:07.832" status="PASS" starttime="20170824 14:44:07.496"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:07.832">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:44:07.832">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:07.832" status="PASS" starttime="20170824 14:44:07.496"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:07.832">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:07.833" status="PASS" starttime="20170824 14:44:07.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:07.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:07.833" status="PASS" starttime="20170824 14:44:07.833"></status>
</kw>
<status endtime="20170824 14:44:07.833" status="PASS" starttime="20170824 14:44:07.492"></status>
</kw>
<status endtime="20170824 14:44:07.833" status="PASS" starttime="20170824 14:44:07.491"></status>
</kw>
<status endtime="20170824 14:44:07.834" status="PASS" starttime="20170824 14:44:07.490"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:07.834">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:44:07.834" status="PASS" starttime="20170824 14:44:07.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:07.836">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:44:07.836" status="PASS" starttime="20170824 14:44:07.836"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:07.837">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:44:07.837" status="PASS" starttime="20170824 14:44:07.837"></status>
</kw>
<status endtime="20170824 14:44:07.837" status="PASS" starttime="20170824 14:44:07.836"></status>
</kw>
<status endtime="20170824 14:44:07.838" status="PASS" starttime="20170824 14:44:07.835"></status>
</kw>
<status endtime="20170824 14:44:07.838" status="PASS" starttime="20170824 14:44:07.834"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:08.093">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:44:08.094">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:08.094" status="PASS" starttime="20170824 14:44:07.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:08.095">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:44:08.096" status="PASS" starttime="20170824 14:44:08.095"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:08.099">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:44:08.099" status="PASS" starttime="20170824 14:44:08.099"></status>
</kw>
<status endtime="20170824 14:44:08.100" status="PASS" starttime="20170824 14:44:08.096"></status>
</kw>
<status endtime="20170824 14:44:08.100" status="PASS" starttime="20170824 14:44:08.094"></status>
</kw>
<status endtime="20170824 14:44:08.100" status="PASS" starttime="20170824 14:44:08.094"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:44:08.100">Delete All Sessions</msg>
<status endtime="20170824 14:44:08.100" status="PASS" starttime="20170824 14:44:08.100"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:08.100">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:08.100" status="PASS" starttime="20170824 14:44:07.490"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:08.101">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:08.101" status="PASS" starttime="20170824 14:44:08.101"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:08.102">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:44:08.102">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:44:08.102">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:44:08.102" status="PASS" starttime="20170824 14:44:08.101"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:08.102">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:44:08.102" status="PASS" starttime="20170824 14:44:07.489"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:08.102">${power_state} = On</msg>
<status endtime="20170824 14:44:08.103" status="PASS" starttime="20170824 14:44:07.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:44:08.103">Off != On</msg>
<status endtime="20170824 14:44:08.103" status="FAIL" starttime="20170824 14:44:08.103"></status>
</kw>
<status endtime="20170824 14:44:08.104" status="FAIL" starttime="20170824 14:44:07.489"></status>
</kw>
<status endtime="20170824 14:44:08.104" status="FAIL" starttime="20170824 14:44:07.488"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:18.109">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:44:18.109" status="PASS" starttime="20170824 14:44:18.108"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:18.110">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:44:18.110" status="PASS" starttime="20170824 14:44:18.109"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:18.110">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:44:18.110" status="PASS" starttime="20170824 14:44:18.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:18.111">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:44:18.111" status="PASS" starttime="20170824 14:44:18.111"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:18.298">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:44:18.298" status="PASS" starttime="20170824 14:44:18.112"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:18.299">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:44:18.299">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:18.299" status="PASS" starttime="20170824 14:44:18.111"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:18.299">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:18.299" status="PASS" starttime="20170824 14:44:18.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:18.300">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:18.300" status="PASS" starttime="20170824 14:44:18.300"></status>
</kw>
<status endtime="20170824 14:44:18.300" status="PASS" starttime="20170824 14:44:18.108"></status>
</kw>
<status endtime="20170824 14:44:18.300" status="PASS" starttime="20170824 14:44:18.107"></status>
</kw>
<status endtime="20170824 14:44:18.301" status="PASS" starttime="20170824 14:44:18.107"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:18.301">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:44:18.302" status="PASS" starttime="20170824 14:44:18.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:18.304">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:44:18.305" status="PASS" starttime="20170824 14:44:18.304"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:18.306">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:44:18.306" status="PASS" starttime="20170824 14:44:18.306"></status>
</kw>
<status endtime="20170824 14:44:18.306" status="PASS" starttime="20170824 14:44:18.305"></status>
</kw>
<status endtime="20170824 14:44:18.306" status="PASS" starttime="20170824 14:44:18.303"></status>
</kw>
<status endtime="20170824 14:44:18.306" status="PASS" starttime="20170824 14:44:18.302"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:18.397">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:44:18.397">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:18.397" status="PASS" starttime="20170824 14:44:18.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:18.399">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:44:18.399" status="PASS" starttime="20170824 14:44:18.398"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:18.400">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:44:18.400" status="PASS" starttime="20170824 14:44:18.399"></status>
</kw>
<status endtime="20170824 14:44:18.400" status="PASS" starttime="20170824 14:44:18.399"></status>
</kw>
<status endtime="20170824 14:44:18.400" status="PASS" starttime="20170824 14:44:18.398"></status>
</kw>
<status endtime="20170824 14:44:18.400" status="PASS" starttime="20170824 14:44:18.397"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:44:18.401">Delete All Sessions</msg>
<status endtime="20170824 14:44:18.401" status="PASS" starttime="20170824 14:44:18.400"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:18.401">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:18.401" status="PASS" starttime="20170824 14:44:18.106"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:18.401">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:18.402" status="PASS" starttime="20170824 14:44:18.401"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:18.402">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:44:18.402">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:44:18.402">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:44:18.402" status="PASS" starttime="20170824 14:44:18.402"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:18.403">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:44:18.403" status="PASS" starttime="20170824 14:44:18.105"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:18.403">${power_state} = On</msg>
<status endtime="20170824 14:44:18.403" status="PASS" starttime="20170824 14:44:18.105"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:44:18.404">Off != On</msg>
<status endtime="20170824 14:44:18.404" status="FAIL" starttime="20170824 14:44:18.403"></status>
</kw>
<status endtime="20170824 14:44:18.404" status="FAIL" starttime="20170824 14:44:18.105"></status>
</kw>
<status endtime="20170824 14:44:18.404" status="FAIL" starttime="20170824 14:44:18.104"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:28.409">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:44:28.410" status="PASS" starttime="20170824 14:44:28.409"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:28.410">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:44:28.410" status="PASS" starttime="20170824 14:44:28.410"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:28.411">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:44:28.411" status="PASS" starttime="20170824 14:44:28.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:28.412">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:44:28.412" status="PASS" starttime="20170824 14:44:28.411"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:28.768">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:44:28.768" status="PASS" starttime="20170824 14:44:28.412"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:28.768">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:44:28.769">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:28.769" status="PASS" starttime="20170824 14:44:28.412"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:28.769">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:28.769" status="PASS" starttime="20170824 14:44:28.769"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:28.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:28.770" status="PASS" starttime="20170824 14:44:28.770"></status>
</kw>
<status endtime="20170824 14:44:28.770" status="PASS" starttime="20170824 14:44:28.408"></status>
</kw>
<status endtime="20170824 14:44:28.770" status="PASS" starttime="20170824 14:44:28.408"></status>
</kw>
<status endtime="20170824 14:44:28.770" status="PASS" starttime="20170824 14:44:28.407"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:28.771">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:44:28.771" status="PASS" starttime="20170824 14:44:28.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:28.773">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:44:28.773" status="PASS" starttime="20170824 14:44:28.772"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:28.774">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:44:28.774" status="PASS" starttime="20170824 14:44:28.774"></status>
</kw>
<status endtime="20170824 14:44:28.774" status="PASS" starttime="20170824 14:44:28.773"></status>
</kw>
<status endtime="20170824 14:44:28.774" status="PASS" starttime="20170824 14:44:28.772"></status>
</kw>
<status endtime="20170824 14:44:28.774" status="PASS" starttime="20170824 14:44:28.771"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:28.918">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:44:28.918">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:28.918" status="PASS" starttime="20170824 14:44:28.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:28.920">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:44:28.920" status="PASS" starttime="20170824 14:44:28.919"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:28.922">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:44:28.922" status="PASS" starttime="20170824 14:44:28.921"></status>
</kw>
<status endtime="20170824 14:44:28.922" status="PASS" starttime="20170824 14:44:28.920"></status>
</kw>
<status endtime="20170824 14:44:28.922" status="PASS" starttime="20170824 14:44:28.919"></status>
</kw>
<status endtime="20170824 14:44:28.922" status="PASS" starttime="20170824 14:44:28.918"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:44:28.922">Delete All Sessions</msg>
<status endtime="20170824 14:44:28.923" status="PASS" starttime="20170824 14:44:28.922"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:28.923">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:28.923" status="PASS" starttime="20170824 14:44:28.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:28.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:28.923" status="PASS" starttime="20170824 14:44:28.923"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:28.924">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:44:28.924">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:44:28.924">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:44:28.924" status="PASS" starttime="20170824 14:44:28.924"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:28.924">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:44:28.925" status="PASS" starttime="20170824 14:44:28.406"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:28.925">${power_state} = On</msg>
<status endtime="20170824 14:44:28.925" status="PASS" starttime="20170824 14:44:28.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:44:28.925">Off != On</msg>
<status endtime="20170824 14:44:28.926" status="FAIL" starttime="20170824 14:44:28.925"></status>
</kw>
<status endtime="20170824 14:44:28.926" status="FAIL" starttime="20170824 14:44:28.405"></status>
</kw>
<status endtime="20170824 14:44:28.926" status="FAIL" starttime="20170824 14:44:28.404"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:38.931">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:44:38.931" status="PASS" starttime="20170824 14:44:38.931"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:38.932">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:44:38.932" status="PASS" starttime="20170824 14:44:38.932"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:38.933">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:44:38.933" status="PASS" starttime="20170824 14:44:38.932"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:38.933">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:44:38.933" status="PASS" starttime="20170824 14:44:38.933"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:39.192">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:44:39.192" status="PASS" starttime="20170824 14:44:38.934"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:39.192">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:44:39.192">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:39.192" status="PASS" starttime="20170824 14:44:38.934"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:39.193">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:39.193" status="PASS" starttime="20170824 14:44:39.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:39.194">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:39.194" status="PASS" starttime="20170824 14:44:39.193"></status>
</kw>
<status endtime="20170824 14:44:39.194" status="PASS" starttime="20170824 14:44:38.930"></status>
</kw>
<status endtime="20170824 14:44:39.194" status="PASS" starttime="20170824 14:44:38.930"></status>
</kw>
<status endtime="20170824 14:44:39.194" status="PASS" starttime="20170824 14:44:38.929"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:39.195">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:44:39.195" status="PASS" starttime="20170824 14:44:39.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:39.197">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:44:39.197" status="PASS" starttime="20170824 14:44:39.196"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:39.198">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:44:39.198" status="PASS" starttime="20170824 14:44:39.197"></status>
</kw>
<status endtime="20170824 14:44:39.198" status="PASS" starttime="20170824 14:44:39.197"></status>
</kw>
<status endtime="20170824 14:44:39.198" status="PASS" starttime="20170824 14:44:39.195"></status>
</kw>
<status endtime="20170824 14:44:39.198" status="PASS" starttime="20170824 14:44:39.195"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:39.269">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:44:39.269">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:39.269" status="PASS" starttime="20170824 14:44:39.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:39.271">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:44:39.271" status="PASS" starttime="20170824 14:44:39.270"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:39.272">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:44:39.272" status="PASS" starttime="20170824 14:44:39.272"></status>
</kw>
<status endtime="20170824 14:44:39.272" status="PASS" starttime="20170824 14:44:39.271"></status>
</kw>
<status endtime="20170824 14:44:39.272" status="PASS" starttime="20170824 14:44:39.270"></status>
</kw>
<status endtime="20170824 14:44:39.272" status="PASS" starttime="20170824 14:44:39.269"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:44:39.273">Delete All Sessions</msg>
<status endtime="20170824 14:44:39.273" status="PASS" starttime="20170824 14:44:39.273"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:39.273">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:39.273" status="PASS" starttime="20170824 14:44:38.928"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:39.274">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:39.274" status="PASS" starttime="20170824 14:44:39.273"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:39.274">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:44:39.274">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:44:39.274">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:44:39.274" status="PASS" starttime="20170824 14:44:39.274"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:39.275">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:44:39.275" status="PASS" starttime="20170824 14:44:38.928"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:39.275">${power_state} = On</msg>
<status endtime="20170824 14:44:39.275" status="PASS" starttime="20170824 14:44:38.927"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:44:39.276">Off != On</msg>
<status endtime="20170824 14:44:39.276" status="FAIL" starttime="20170824 14:44:39.275"></status>
</kw>
<status endtime="20170824 14:44:39.276" status="FAIL" starttime="20170824 14:44:38.927"></status>
</kw>
<status endtime="20170824 14:44:39.276" status="FAIL" starttime="20170824 14:44:38.926"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:49.282">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:44:49.282" status="PASS" starttime="20170824 14:44:49.281"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:49.283">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:44:49.283" status="PASS" starttime="20170824 14:44:49.282"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:49.283">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:44:49.283" status="PASS" starttime="20170824 14:44:49.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:49.284">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:44:49.284" status="PASS" starttime="20170824 14:44:49.284"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:49.464">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:44:49.464" status="PASS" starttime="20170824 14:44:49.285"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:49.464">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:44:49.464">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:49.464" status="PASS" starttime="20170824 14:44:49.284"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:49.465">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:49.465" status="PASS" starttime="20170824 14:44:49.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:49.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:49.466" status="PASS" starttime="20170824 14:44:49.465"></status>
</kw>
<status endtime="20170824 14:44:49.466" status="PASS" starttime="20170824 14:44:49.280"></status>
</kw>
<status endtime="20170824 14:44:49.466" status="PASS" starttime="20170824 14:44:49.280"></status>
</kw>
<status endtime="20170824 14:44:49.466" status="PASS" starttime="20170824 14:44:49.279"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:49.467">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:44:49.467" status="PASS" starttime="20170824 14:44:49.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:49.469">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:44:49.469" status="PASS" starttime="20170824 14:44:49.468"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:49.470">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:44:49.470" status="PASS" starttime="20170824 14:44:49.469"></status>
</kw>
<status endtime="20170824 14:44:49.470" status="PASS" starttime="20170824 14:44:49.469"></status>
</kw>
<status endtime="20170824 14:44:49.470" status="PASS" starttime="20170824 14:44:49.467"></status>
</kw>
<status endtime="20170824 14:44:49.470" status="PASS" starttime="20170824 14:44:49.467"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:49.536">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:44:49.536">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:49.536" status="PASS" starttime="20170824 14:44:49.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:49.538">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:44:49.538" status="PASS" starttime="20170824 14:44:49.538"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:49.539">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:44:49.540" status="PASS" starttime="20170824 14:44:49.539"></status>
</kw>
<status endtime="20170824 14:44:49.540" status="PASS" starttime="20170824 14:44:49.538"></status>
</kw>
<status endtime="20170824 14:44:49.540" status="PASS" starttime="20170824 14:44:49.537"></status>
</kw>
<status endtime="20170824 14:44:49.540" status="PASS" starttime="20170824 14:44:49.537"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:44:49.540">Delete All Sessions</msg>
<status endtime="20170824 14:44:49.540" status="PASS" starttime="20170824 14:44:49.540"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:49.541">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:49.541" status="PASS" starttime="20170824 14:44:49.279"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:49.541">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:49.541" status="PASS" starttime="20170824 14:44:49.541"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:49.542">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:44:49.542">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:44:49.542">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:44:49.542" status="PASS" starttime="20170824 14:44:49.541"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:49.542">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:44:49.542" status="PASS" starttime="20170824 14:44:49.278"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:49.543">${power_state} = On</msg>
<status endtime="20170824 14:44:49.543" status="PASS" starttime="20170824 14:44:49.278"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:44:49.543">Off != On</msg>
<status endtime="20170824 14:44:49.543" status="FAIL" starttime="20170824 14:44:49.543"></status>
</kw>
<status endtime="20170824 14:44:49.544" status="FAIL" starttime="20170824 14:44:49.277"></status>
</kw>
<status endtime="20170824 14:44:49.544" status="FAIL" starttime="20170824 14:44:49.277"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:59.549">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:44:59.550" status="PASS" starttime="20170824 14:44:59.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:59.550">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:44:59.550" status="PASS" starttime="20170824 14:44:59.550"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:59.551">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:44:59.551" status="PASS" starttime="20170824 14:44:59.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:59.552">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:44:59.552" status="PASS" starttime="20170824 14:44:59.551"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:59.731">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:44:59.731" status="PASS" starttime="20170824 14:44:59.552"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:59.732">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:44:59.732">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:59.732" status="PASS" starttime="20170824 14:44:59.552"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:59.732">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:59.732" status="PASS" starttime="20170824 14:44:59.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:59.733">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:59.733" status="PASS" starttime="20170824 14:44:59.733"></status>
</kw>
<status endtime="20170824 14:44:59.733" status="PASS" starttime="20170824 14:44:59.548"></status>
</kw>
<status endtime="20170824 14:44:59.733" status="PASS" starttime="20170824 14:44:59.548"></status>
</kw>
<status endtime="20170824 14:44:59.733" status="PASS" starttime="20170824 14:44:59.547"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:59.734">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:44:59.734" status="PASS" starttime="20170824 14:44:59.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:59.736">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:44:59.736" status="PASS" starttime="20170824 14:44:59.736"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:59.737">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:44:59.737" status="PASS" starttime="20170824 14:44:59.737"></status>
</kw>
<status endtime="20170824 14:44:59.738" status="PASS" starttime="20170824 14:44:59.737"></status>
</kw>
<status endtime="20170824 14:44:59.738" status="PASS" starttime="20170824 14:44:59.735"></status>
</kw>
<status endtime="20170824 14:44:59.738" status="PASS" starttime="20170824 14:44:59.734"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:59.815">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:44:59.815">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:59.815" status="PASS" starttime="20170824 14:44:59.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:59.817">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:44:59.817" status="PASS" starttime="20170824 14:44:59.816"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:59.818">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:44:59.818" status="PASS" starttime="20170824 14:44:59.818"></status>
</kw>
<status endtime="20170824 14:44:59.818" status="PASS" starttime="20170824 14:44:59.817"></status>
</kw>
<status endtime="20170824 14:44:59.818" status="PASS" starttime="20170824 14:44:59.816"></status>
</kw>
<status endtime="20170824 14:44:59.818" status="PASS" starttime="20170824 14:44:59.815"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:44:59.819">Delete All Sessions</msg>
<status endtime="20170824 14:44:59.819" status="PASS" starttime="20170824 14:44:59.819"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:59.819">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:44:59.819" status="PASS" starttime="20170824 14:44:59.547"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:44:59.820">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:44:59.820" status="PASS" starttime="20170824 14:44:59.819"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:44:59.820">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:44:59.820">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:44:59.820">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:44:59.820" status="PASS" starttime="20170824 14:44:59.820"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:59.821">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:44:59.821" status="PASS" starttime="20170824 14:44:59.546"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:44:59.821">${power_state} = On</msg>
<status endtime="20170824 14:44:59.821" status="PASS" starttime="20170824 14:44:59.546"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:44:59.822">Off != On</msg>
<status endtime="20170824 14:44:59.822" status="FAIL" starttime="20170824 14:44:59.821"></status>
</kw>
<status endtime="20170824 14:44:59.822" status="FAIL" starttime="20170824 14:44:59.545"></status>
</kw>
<status endtime="20170824 14:44:59.822" status="FAIL" starttime="20170824 14:44:59.544"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:09.828">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:45:09.828" status="PASS" starttime="20170824 14:45:09.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:09.829">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:45:09.829" status="PASS" starttime="20170824 14:45:09.828"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:09.829">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:45:09.829" status="PASS" starttime="20170824 14:45:09.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:09.830">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:45:09.830" status="PASS" starttime="20170824 14:45:09.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:10.023">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:45:10.023" status="PASS" starttime="20170824 14:45:09.831"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:10.023">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:45:10.023">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:10.023" status="PASS" starttime="20170824 14:45:09.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:10.024">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:10.024" status="PASS" starttime="20170824 14:45:10.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:10.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:10.024" status="PASS" starttime="20170824 14:45:10.024"></status>
</kw>
<status endtime="20170824 14:45:10.024" status="PASS" starttime="20170824 14:45:09.826"></status>
</kw>
<status endtime="20170824 14:45:10.025" status="PASS" starttime="20170824 14:45:09.826"></status>
</kw>
<status endtime="20170824 14:45:10.025" status="PASS" starttime="20170824 14:45:09.825"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:10.025">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:45:10.025" status="PASS" starttime="20170824 14:45:10.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:10.027">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:45:10.027" status="PASS" starttime="20170824 14:45:10.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:10.028">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:45:10.028" status="PASS" starttime="20170824 14:45:10.028"></status>
</kw>
<status endtime="20170824 14:45:10.029" status="PASS" starttime="20170824 14:45:10.028"></status>
</kw>
<status endtime="20170824 14:45:10.029" status="PASS" starttime="20170824 14:45:10.026"></status>
</kw>
<status endtime="20170824 14:45:10.029" status="PASS" starttime="20170824 14:45:10.026"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:10.107">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:45:10.107">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:10.107" status="PASS" starttime="20170824 14:45:10.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:10.109">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:45:10.109" status="PASS" starttime="20170824 14:45:10.109"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:10.110">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:45:10.111" status="PASS" starttime="20170824 14:45:10.110"></status>
</kw>
<status endtime="20170824 14:45:10.111" status="PASS" starttime="20170824 14:45:10.109"></status>
</kw>
<status endtime="20170824 14:45:10.111" status="PASS" starttime="20170824 14:45:10.108"></status>
</kw>
<status endtime="20170824 14:45:10.111" status="PASS" starttime="20170824 14:45:10.108"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:45:10.111">Delete All Sessions</msg>
<status endtime="20170824 14:45:10.111" status="PASS" starttime="20170824 14:45:10.111"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:10.111">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:10.112" status="PASS" starttime="20170824 14:45:09.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:10.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:10.112" status="PASS" starttime="20170824 14:45:10.112"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:10.113">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:45:10.113">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:45:10.113">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:45:10.113" status="PASS" starttime="20170824 14:45:10.112"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:10.113">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:45:10.113" status="PASS" starttime="20170824 14:45:09.824"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:10.114">${power_state} = On</msg>
<status endtime="20170824 14:45:10.114" status="PASS" starttime="20170824 14:45:09.823"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:45:10.114">Off != On</msg>
<status endtime="20170824 14:45:10.114" status="FAIL" starttime="20170824 14:45:10.114"></status>
</kw>
<status endtime="20170824 14:45:10.115" status="FAIL" starttime="20170824 14:45:09.823"></status>
</kw>
<status endtime="20170824 14:45:10.115" status="FAIL" starttime="20170824 14:45:09.823"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:20.121">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:45:20.122" status="PASS" starttime="20170824 14:45:20.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:20.123">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:45:20.123" status="PASS" starttime="20170824 14:45:20.122"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:20.124">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:45:20.124" status="PASS" starttime="20170824 14:45:20.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:20.125">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:45:20.125" status="PASS" starttime="20170824 14:45:20.124"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:20.309">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:45:20.309" status="PASS" starttime="20170824 14:45:20.126"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:20.309">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:45:20.309">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:20.309" status="PASS" starttime="20170824 14:45:20.125"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:20.310">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:20.310" status="PASS" starttime="20170824 14:45:20.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:20.310">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:20.310" status="PASS" starttime="20170824 14:45:20.310"></status>
</kw>
<status endtime="20170824 14:45:20.310" status="PASS" starttime="20170824 14:45:20.120"></status>
</kw>
<status endtime="20170824 14:45:20.310" status="PASS" starttime="20170824 14:45:20.119"></status>
</kw>
<status endtime="20170824 14:45:20.311" status="PASS" starttime="20170824 14:45:20.118"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:20.311">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:45:20.311" status="PASS" starttime="20170824 14:45:20.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:20.313">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:45:20.313" status="PASS" starttime="20170824 14:45:20.313"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:20.314">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:45:20.314" status="PASS" starttime="20170824 14:45:20.314"></status>
</kw>
<status endtime="20170824 14:45:20.315" status="PASS" starttime="20170824 14:45:20.314"></status>
</kw>
<status endtime="20170824 14:45:20.315" status="PASS" starttime="20170824 14:45:20.312"></status>
</kw>
<status endtime="20170824 14:45:20.315" status="PASS" starttime="20170824 14:45:20.311"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:20.388">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:45:20.388">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:20.389" status="PASS" starttime="20170824 14:45:20.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:20.390">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:45:20.390" status="PASS" starttime="20170824 14:45:20.390"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:20.391">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:45:20.391" status="PASS" starttime="20170824 14:45:20.391"></status>
</kw>
<status endtime="20170824 14:45:20.391" status="PASS" starttime="20170824 14:45:20.391"></status>
</kw>
<status endtime="20170824 14:45:20.392" status="PASS" starttime="20170824 14:45:20.389"></status>
</kw>
<status endtime="20170824 14:45:20.392" status="PASS" starttime="20170824 14:45:20.389"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:45:20.392">Delete All Sessions</msg>
<status endtime="20170824 14:45:20.392" status="PASS" starttime="20170824 14:45:20.392"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:20.392">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:20.392" status="PASS" starttime="20170824 14:45:20.118"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:20.393">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:20.393" status="PASS" starttime="20170824 14:45:20.393"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:20.394">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:45:20.394">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:45:20.394">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:45:20.394" status="PASS" starttime="20170824 14:45:20.393"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:20.394">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:45:20.394" status="PASS" starttime="20170824 14:45:20.117"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:20.394">${power_state} = On</msg>
<status endtime="20170824 14:45:20.394" status="PASS" starttime="20170824 14:45:20.116"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:45:20.395">Off != On</msg>
<status endtime="20170824 14:45:20.395" status="FAIL" starttime="20170824 14:45:20.395"></status>
</kw>
<status endtime="20170824 14:45:20.395" status="FAIL" starttime="20170824 14:45:20.116"></status>
</kw>
<status endtime="20170824 14:45:20.395" status="FAIL" starttime="20170824 14:45:20.115"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:30.401">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:45:30.402" status="PASS" starttime="20170824 14:45:30.401"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:30.403">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:45:30.403" status="PASS" starttime="20170824 14:45:30.402"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:30.404">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:45:30.404" status="PASS" starttime="20170824 14:45:30.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:30.404">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:45:30.404" status="PASS" starttime="20170824 14:45:30.404"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:30.663">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:45:30.663" status="PASS" starttime="20170824 14:45:30.405"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:30.663">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:45:30.663">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:30.663" status="PASS" starttime="20170824 14:45:30.404"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:30.664">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:30.664" status="PASS" starttime="20170824 14:45:30.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:30.665">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:30.665" status="PASS" starttime="20170824 14:45:30.664"></status>
</kw>
<status endtime="20170824 14:45:30.665" status="PASS" starttime="20170824 14:45:30.400"></status>
</kw>
<status endtime="20170824 14:45:30.665" status="PASS" starttime="20170824 14:45:30.399"></status>
</kw>
<status endtime="20170824 14:45:30.665" status="PASS" starttime="20170824 14:45:30.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:30.666">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:45:30.666" status="PASS" starttime="20170824 14:45:30.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:30.668">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:45:30.668" status="PASS" starttime="20170824 14:45:30.667"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:30.669">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:45:30.669" status="PASS" starttime="20170824 14:45:30.668"></status>
</kw>
<status endtime="20170824 14:45:30.669" status="PASS" starttime="20170824 14:45:30.668"></status>
</kw>
<status endtime="20170824 14:45:30.669" status="PASS" starttime="20170824 14:45:30.666"></status>
</kw>
<status endtime="20170824 14:45:30.669" status="PASS" starttime="20170824 14:45:30.666"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:30.735">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:45:30.735">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:30.735" status="PASS" starttime="20170824 14:45:30.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:30.737">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:45:30.737" status="PASS" starttime="20170824 14:45:30.737"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:30.742">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:45:30.742" status="PASS" starttime="20170824 14:45:30.741"></status>
</kw>
<status endtime="20170824 14:45:30.742" status="PASS" starttime="20170824 14:45:30.737"></status>
</kw>
<status endtime="20170824 14:45:30.742" status="PASS" starttime="20170824 14:45:30.736"></status>
</kw>
<status endtime="20170824 14:45:30.742" status="PASS" starttime="20170824 14:45:30.736"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:45:30.743">Delete All Sessions</msg>
<status endtime="20170824 14:45:30.743" status="PASS" starttime="20170824 14:45:30.742"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:30.743">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:30.743" status="PASS" starttime="20170824 14:45:30.398"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:30.744">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:30.744" status="PASS" starttime="20170824 14:45:30.743"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:30.744">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:45:30.744">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:45:30.744">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:45:30.744" status="PASS" starttime="20170824 14:45:30.744"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:30.745">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:45:30.745" status="PASS" starttime="20170824 14:45:30.398"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:30.745">${power_state} = On</msg>
<status endtime="20170824 14:45:30.745" status="PASS" starttime="20170824 14:45:30.397"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:45:30.746">Off != On</msg>
<status endtime="20170824 14:45:30.746" status="FAIL" starttime="20170824 14:45:30.745"></status>
</kw>
<status endtime="20170824 14:45:30.746" status="FAIL" starttime="20170824 14:45:30.397"></status>
</kw>
<status endtime="20170824 14:45:30.746" status="FAIL" starttime="20170824 14:45:30.396"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:40.751">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:45:40.752" status="PASS" starttime="20170824 14:45:40.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:40.752">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:45:40.752" status="PASS" starttime="20170824 14:45:40.752"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:40.753">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:45:40.753" status="PASS" starttime="20170824 14:45:40.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:40.753">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:45:40.753" status="PASS" starttime="20170824 14:45:40.753"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:40.951">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:45:40.951" status="PASS" starttime="20170824 14:45:40.754"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:40.951">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:45:40.951">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:40.951" status="PASS" starttime="20170824 14:45:40.754"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:40.952">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:40.952" status="PASS" starttime="20170824 14:45:40.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:40.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:40.953" status="PASS" starttime="20170824 14:45:40.952"></status>
</kw>
<status endtime="20170824 14:45:40.953" status="PASS" starttime="20170824 14:45:40.750"></status>
</kw>
<status endtime="20170824 14:45:40.953" status="PASS" starttime="20170824 14:45:40.750"></status>
</kw>
<status endtime="20170824 14:45:40.953" status="PASS" starttime="20170824 14:45:40.749"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:40.954">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:45:40.954" status="PASS" starttime="20170824 14:45:40.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:40.956">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:45:40.956" status="PASS" starttime="20170824 14:45:40.955"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:40.957">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:45:40.957" status="PASS" starttime="20170824 14:45:40.957"></status>
</kw>
<status endtime="20170824 14:45:40.958" status="PASS" starttime="20170824 14:45:40.956"></status>
</kw>
<status endtime="20170824 14:45:40.958" status="PASS" starttime="20170824 14:45:40.955"></status>
</kw>
<status endtime="20170824 14:45:40.958" status="PASS" starttime="20170824 14:45:40.954"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:41.026">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:45:41.026">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:41.026" status="PASS" starttime="20170824 14:45:40.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:41.028">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:45:41.028" status="PASS" starttime="20170824 14:45:41.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:41.029">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:45:41.029" status="PASS" starttime="20170824 14:45:41.029"></status>
</kw>
<status endtime="20170824 14:45:41.029" status="PASS" starttime="20170824 14:45:41.028"></status>
</kw>
<status endtime="20170824 14:45:41.029" status="PASS" starttime="20170824 14:45:41.027"></status>
</kw>
<status endtime="20170824 14:45:41.029" status="PASS" starttime="20170824 14:45:41.026"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:45:41.030">Delete All Sessions</msg>
<status endtime="20170824 14:45:41.030" status="PASS" starttime="20170824 14:45:41.029"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:41.030">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:41.030" status="PASS" starttime="20170824 14:45:40.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:41.030">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:41.031" status="PASS" starttime="20170824 14:45:41.030"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:41.031">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:45:41.031">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:45:41.031">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:45:41.031" status="PASS" starttime="20170824 14:45:41.031"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:41.032">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:45:41.032" status="PASS" starttime="20170824 14:45:40.748"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:41.032">${power_state} = On</msg>
<status endtime="20170824 14:45:41.032" status="PASS" starttime="20170824 14:45:40.748"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:45:41.033">Off != On</msg>
<status endtime="20170824 14:45:41.033" status="FAIL" starttime="20170824 14:45:41.032"></status>
</kw>
<status endtime="20170824 14:45:41.033" status="FAIL" starttime="20170824 14:45:40.747"></status>
</kw>
<status endtime="20170824 14:45:41.033" status="FAIL" starttime="20170824 14:45:40.747"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:51.038">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:45:51.039" status="PASS" starttime="20170824 14:45:51.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:51.039">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:45:51.039" status="PASS" starttime="20170824 14:45:51.039"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:51.040">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:45:51.040" status="PASS" starttime="20170824 14:45:51.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:51.041">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:45:51.041" status="PASS" starttime="20170824 14:45:51.040"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:51.227">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:45:51.227" status="PASS" starttime="20170824 14:45:51.041"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:51.228">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:45:51.228">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:51.228" status="PASS" starttime="20170824 14:45:51.041"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:51.228">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:51.229" status="PASS" starttime="20170824 14:45:51.228"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:51.229">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:51.230" status="PASS" starttime="20170824 14:45:51.229"></status>
</kw>
<status endtime="20170824 14:45:51.230" status="PASS" starttime="20170824 14:45:51.037"></status>
</kw>
<status endtime="20170824 14:45:51.230" status="PASS" starttime="20170824 14:45:51.037"></status>
</kw>
<status endtime="20170824 14:45:51.230" status="PASS" starttime="20170824 14:45:51.036"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:51.231">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:45:51.231" status="PASS" starttime="20170824 14:45:51.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:51.234">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:45:51.234" status="PASS" starttime="20170824 14:45:51.233"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:51.235">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:45:51.235" status="PASS" starttime="20170824 14:45:51.235"></status>
</kw>
<status endtime="20170824 14:45:51.236" status="PASS" starttime="20170824 14:45:51.234"></status>
</kw>
<status endtime="20170824 14:45:51.236" status="PASS" starttime="20170824 14:45:51.232"></status>
</kw>
<status endtime="20170824 14:45:51.236" status="PASS" starttime="20170824 14:45:51.231"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:51.301">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:45:51.302">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:51.302" status="PASS" starttime="20170824 14:45:51.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:51.303">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:45:51.303" status="PASS" starttime="20170824 14:45:51.303"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:51.305">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:45:51.305" status="PASS" starttime="20170824 14:45:51.304"></status>
</kw>
<status endtime="20170824 14:45:51.305" status="PASS" starttime="20170824 14:45:51.304"></status>
</kw>
<status endtime="20170824 14:45:51.305" status="PASS" starttime="20170824 14:45:51.302"></status>
</kw>
<status endtime="20170824 14:45:51.305" status="PASS" starttime="20170824 14:45:51.302"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:45:51.306">Delete All Sessions</msg>
<status endtime="20170824 14:45:51.306" status="PASS" starttime="20170824 14:45:51.305"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:51.306">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:45:51.306" status="PASS" starttime="20170824 14:45:51.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:45:51.306">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:45:51.307" status="PASS" starttime="20170824 14:45:51.306"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:45:51.307">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:45:51.307">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:45:51.307">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:45:51.307" status="PASS" starttime="20170824 14:45:51.307"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:51.308">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:45:51.308" status="PASS" starttime="20170824 14:45:51.035"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:45:51.308">${power_state} = On</msg>
<status endtime="20170824 14:45:51.308" status="PASS" starttime="20170824 14:45:51.034"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:45:51.309">Off != On</msg>
<status endtime="20170824 14:45:51.309" status="FAIL" starttime="20170824 14:45:51.308"></status>
</kw>
<status endtime="20170824 14:45:51.309" status="FAIL" starttime="20170824 14:45:51.034"></status>
</kw>
<status endtime="20170824 14:45:51.310" status="FAIL" starttime="20170824 14:45:51.033"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:01.314">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:46:01.315" status="PASS" starttime="20170824 14:46:01.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:01.315">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:46:01.315" status="PASS" starttime="20170824 14:46:01.315"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:01.316">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:46:01.316" status="PASS" starttime="20170824 14:46:01.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:01.317">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:46:01.317" status="PASS" starttime="20170824 14:46:01.316"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:01.498">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:46:01.498" status="PASS" starttime="20170824 14:46:01.317"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:01.498">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:46:01.498">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:01.498" status="PASS" starttime="20170824 14:46:01.317"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:01.499">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:01.499" status="PASS" starttime="20170824 14:46:01.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:01.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:01.500" status="PASS" starttime="20170824 14:46:01.499"></status>
</kw>
<status endtime="20170824 14:46:01.500" status="PASS" starttime="20170824 14:46:01.314"></status>
</kw>
<status endtime="20170824 14:46:01.500" status="PASS" starttime="20170824 14:46:01.313"></status>
</kw>
<status endtime="20170824 14:46:01.500" status="PASS" starttime="20170824 14:46:01.312"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:01.500">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:46:01.500" status="PASS" starttime="20170824 14:46:01.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:01.503">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:46:01.503" status="PASS" starttime="20170824 14:46:01.502"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:01.503">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:46:01.504" status="PASS" starttime="20170824 14:46:01.503"></status>
</kw>
<status endtime="20170824 14:46:01.504" status="PASS" starttime="20170824 14:46:01.503"></status>
</kw>
<status endtime="20170824 14:46:01.504" status="PASS" starttime="20170824 14:46:01.501"></status>
</kw>
<status endtime="20170824 14:46:01.504" status="PASS" starttime="20170824 14:46:01.501"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:01.572">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:46:01.572">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:01.572" status="PASS" starttime="20170824 14:46:01.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:01.574">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:46:01.574" status="PASS" starttime="20170824 14:46:01.573"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:01.575">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:46:01.575" status="PASS" starttime="20170824 14:46:01.574"></status>
</kw>
<status endtime="20170824 14:46:01.575" status="PASS" starttime="20170824 14:46:01.574"></status>
</kw>
<status endtime="20170824 14:46:01.575" status="PASS" starttime="20170824 14:46:01.573"></status>
</kw>
<status endtime="20170824 14:46:01.575" status="PASS" starttime="20170824 14:46:01.572"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:46:01.575">Delete All Sessions</msg>
<status endtime="20170824 14:46:01.575" status="PASS" starttime="20170824 14:46:01.575"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:01.576">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:01.576" status="PASS" starttime="20170824 14:46:01.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:01.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:01.576" status="PASS" starttime="20170824 14:46:01.576"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:01.577">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:46:01.577">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:46:01.577">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:46:01.577" status="PASS" starttime="20170824 14:46:01.577"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:01.578">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:46:01.578" status="PASS" starttime="20170824 14:46:01.311"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:01.578">${power_state} = On</msg>
<status endtime="20170824 14:46:01.578" status="PASS" starttime="20170824 14:46:01.311"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:46:01.579">Off != On</msg>
<status endtime="20170824 14:46:01.579" status="FAIL" starttime="20170824 14:46:01.578"></status>
</kw>
<status endtime="20170824 14:46:01.579" status="FAIL" starttime="20170824 14:46:01.311"></status>
</kw>
<status endtime="20170824 14:46:01.579" status="FAIL" starttime="20170824 14:46:01.310"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:11.585">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:46:11.585" status="PASS" starttime="20170824 14:46:11.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:11.586">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:46:11.586" status="PASS" starttime="20170824 14:46:11.585"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:11.586">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:46:11.586" status="PASS" starttime="20170824 14:46:11.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:11.587">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:46:11.587" status="PASS" starttime="20170824 14:46:11.587"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:11.772">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:46:11.772" status="PASS" starttime="20170824 14:46:11.588"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:11.772">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:46:11.772">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:11.772" status="PASS" starttime="20170824 14:46:11.587"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:11.773">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:11.773" status="PASS" starttime="20170824 14:46:11.773"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:11.774">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:11.774" status="PASS" starttime="20170824 14:46:11.773"></status>
</kw>
<status endtime="20170824 14:46:11.774" status="PASS" starttime="20170824 14:46:11.583"></status>
</kw>
<status endtime="20170824 14:46:11.774" status="PASS" starttime="20170824 14:46:11.583"></status>
</kw>
<status endtime="20170824 14:46:11.774" status="PASS" starttime="20170824 14:46:11.582"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:11.775">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:46:11.775" status="PASS" starttime="20170824 14:46:11.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:11.777">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:46:11.777" status="PASS" starttime="20170824 14:46:11.776"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:11.778">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:46:11.778" status="PASS" starttime="20170824 14:46:11.777"></status>
</kw>
<status endtime="20170824 14:46:11.778" status="PASS" starttime="20170824 14:46:11.777"></status>
</kw>
<status endtime="20170824 14:46:11.778" status="PASS" starttime="20170824 14:46:11.775"></status>
</kw>
<status endtime="20170824 14:46:11.778" status="PASS" starttime="20170824 14:46:11.775"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:11.856">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:46:11.856">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:11.856" status="PASS" starttime="20170824 14:46:11.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:11.858">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:46:11.858" status="PASS" starttime="20170824 14:46:11.858"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:11.859">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:46:11.860" status="PASS" starttime="20170824 14:46:11.859"></status>
</kw>
<status endtime="20170824 14:46:11.860" status="PASS" starttime="20170824 14:46:11.858"></status>
</kw>
<status endtime="20170824 14:46:11.860" status="PASS" starttime="20170824 14:46:11.857"></status>
</kw>
<status endtime="20170824 14:46:11.860" status="PASS" starttime="20170824 14:46:11.857"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:46:11.860">Delete All Sessions</msg>
<status endtime="20170824 14:46:11.860" status="PASS" starttime="20170824 14:46:11.860"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:11.861">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:11.861" status="PASS" starttime="20170824 14:46:11.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:11.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:11.861" status="PASS" starttime="20170824 14:46:11.861"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:11.862">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:46:11.862">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:46:11.862">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:46:11.862" status="PASS" starttime="20170824 14:46:11.862"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:11.863">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:46:11.863" status="PASS" starttime="20170824 14:46:11.581"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:11.863">${power_state} = On</msg>
<status endtime="20170824 14:46:11.863" status="PASS" starttime="20170824 14:46:11.581"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:46:11.864">Off != On</msg>
<status endtime="20170824 14:46:11.864" status="FAIL" starttime="20170824 14:46:11.864"></status>
</kw>
<status endtime="20170824 14:46:11.865" status="FAIL" starttime="20170824 14:46:11.580"></status>
</kw>
<status endtime="20170824 14:46:11.865" status="FAIL" starttime="20170824 14:46:11.580"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:21.870">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:46:21.870" status="PASS" starttime="20170824 14:46:21.869"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:21.871">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:46:21.871" status="PASS" starttime="20170824 14:46:21.870"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:21.871">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:46:21.871" status="PASS" starttime="20170824 14:46:21.871"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:21.872">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:46:21.872" status="PASS" starttime="20170824 14:46:21.872"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:22.070">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:46:22.070" status="PASS" starttime="20170824 14:46:21.873"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:22.070">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:46:22.070">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:22.070" status="PASS" starttime="20170824 14:46:21.872"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:22.071">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:22.071" status="PASS" starttime="20170824 14:46:22.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:22.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:22.071" status="PASS" starttime="20170824 14:46:22.071"></status>
</kw>
<status endtime="20170824 14:46:22.071" status="PASS" starttime="20170824 14:46:21.869"></status>
</kw>
<status endtime="20170824 14:46:22.072" status="PASS" starttime="20170824 14:46:21.868"></status>
</kw>
<status endtime="20170824 14:46:22.072" status="PASS" starttime="20170824 14:46:21.868"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:22.072">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:46:22.072" status="PASS" starttime="20170824 14:46:22.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:22.074">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:46:22.074" status="PASS" starttime="20170824 14:46:22.074"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:22.075">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:46:22.075" status="PASS" starttime="20170824 14:46:22.075"></status>
</kw>
<status endtime="20170824 14:46:22.075" status="PASS" starttime="20170824 14:46:22.074"></status>
</kw>
<status endtime="20170824 14:46:22.076" status="PASS" starttime="20170824 14:46:22.073"></status>
</kw>
<status endtime="20170824 14:46:22.076" status="PASS" starttime="20170824 14:46:22.073"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:22.146">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:46:22.146">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:22.146" status="PASS" starttime="20170824 14:46:22.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:22.148">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:46:22.148" status="PASS" starttime="20170824 14:46:22.147"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:22.149">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:46:22.149" status="PASS" starttime="20170824 14:46:22.149"></status>
</kw>
<status endtime="20170824 14:46:22.150" status="PASS" starttime="20170824 14:46:22.148"></status>
</kw>
<status endtime="20170824 14:46:22.150" status="PASS" starttime="20170824 14:46:22.147"></status>
</kw>
<status endtime="20170824 14:46:22.150" status="PASS" starttime="20170824 14:46:22.146"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:46:22.150">Delete All Sessions</msg>
<status endtime="20170824 14:46:22.150" status="PASS" starttime="20170824 14:46:22.150"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:22.150">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:22.150" status="PASS" starttime="20170824 14:46:21.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:22.151">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:22.151" status="PASS" starttime="20170824 14:46:22.151"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:22.152">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:46:22.152">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:46:22.152">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:46:22.152" status="PASS" starttime="20170824 14:46:22.152"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:22.152">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:46:22.152" status="PASS" starttime="20170824 14:46:21.867"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:22.153">${power_state} = On</msg>
<status endtime="20170824 14:46:22.153" status="PASS" starttime="20170824 14:46:21.866"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:46:22.153">Off != On</msg>
<status endtime="20170824 14:46:22.153" status="FAIL" starttime="20170824 14:46:22.153"></status>
</kw>
<status endtime="20170824 14:46:22.154" status="FAIL" starttime="20170824 14:46:21.866"></status>
</kw>
<status endtime="20170824 14:46:22.154" status="FAIL" starttime="20170824 14:46:21.865"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:32.159">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:46:32.159" status="PASS" starttime="20170824 14:46:32.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:32.160">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:46:32.160" status="PASS" starttime="20170824 14:46:32.160"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:32.161">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:46:32.161" status="PASS" starttime="20170824 14:46:32.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:32.161">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:46:32.161" status="PASS" starttime="20170824 14:46:32.161"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:32.352">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:46:32.352" status="PASS" starttime="20170824 14:46:32.162"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:32.352">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:46:32.352">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:32.352" status="PASS" starttime="20170824 14:46:32.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:32.353">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:32.353" status="PASS" starttime="20170824 14:46:32.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:32.353">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:32.353" status="PASS" starttime="20170824 14:46:32.353"></status>
</kw>
<status endtime="20170824 14:46:32.354" status="PASS" starttime="20170824 14:46:32.158"></status>
</kw>
<status endtime="20170824 14:46:32.354" status="PASS" starttime="20170824 14:46:32.157"></status>
</kw>
<status endtime="20170824 14:46:32.354" status="PASS" starttime="20170824 14:46:32.157"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:32.354">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:46:32.354" status="PASS" starttime="20170824 14:46:32.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:32.357">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:46:32.357" status="PASS" starttime="20170824 14:46:32.356"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:32.357">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:46:32.358" status="PASS" starttime="20170824 14:46:32.357"></status>
</kw>
<status endtime="20170824 14:46:32.358" status="PASS" starttime="20170824 14:46:32.357"></status>
</kw>
<status endtime="20170824 14:46:32.358" status="PASS" starttime="20170824 14:46:32.355"></status>
</kw>
<status endtime="20170824 14:46:32.358" status="PASS" starttime="20170824 14:46:32.355"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:32.423">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:46:32.423">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:32.423" status="PASS" starttime="20170824 14:46:32.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:32.425">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:46:32.425" status="PASS" starttime="20170824 14:46:32.425"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:32.426">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:46:32.426" status="PASS" starttime="20170824 14:46:32.426"></status>
</kw>
<status endtime="20170824 14:46:32.427" status="PASS" starttime="20170824 14:46:32.425"></status>
</kw>
<status endtime="20170824 14:46:32.427" status="PASS" starttime="20170824 14:46:32.424"></status>
</kw>
<status endtime="20170824 14:46:32.427" status="PASS" starttime="20170824 14:46:32.424"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:46:32.427">Delete All Sessions</msg>
<status endtime="20170824 14:46:32.427" status="PASS" starttime="20170824 14:46:32.427"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:32.427">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:32.427" status="PASS" starttime="20170824 14:46:32.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:32.428">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:32.428" status="PASS" starttime="20170824 14:46:32.428"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:32.429">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:46:32.429">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:46:32.429">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:46:32.429" status="PASS" starttime="20170824 14:46:32.428"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:32.429">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:46:32.429" status="PASS" starttime="20170824 14:46:32.155"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:32.429">${power_state} = On</msg>
<status endtime="20170824 14:46:32.430" status="PASS" starttime="20170824 14:46:32.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:46:32.430">Off != On</msg>
<status endtime="20170824 14:46:32.430" status="FAIL" starttime="20170824 14:46:32.430"></status>
</kw>
<status endtime="20170824 14:46:32.430" status="FAIL" starttime="20170824 14:46:32.155"></status>
</kw>
<status endtime="20170824 14:46:32.431" status="FAIL" starttime="20170824 14:46:32.154"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:42.437">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:46:42.437" status="PASS" starttime="20170824 14:46:42.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:42.438">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:46:42.438" status="PASS" starttime="20170824 14:46:42.437"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:42.438">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:46:42.438" status="PASS" starttime="20170824 14:46:42.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:42.439">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:46:42.439" status="PASS" starttime="20170824 14:46:42.439"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:42.702">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:46:42.702" status="PASS" starttime="20170824 14:46:42.440"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:42.702">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:46:42.702">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:42.702" status="PASS" starttime="20170824 14:46:42.439"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:42.703">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:42.703" status="PASS" starttime="20170824 14:46:42.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:42.704">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:42.704" status="PASS" starttime="20170824 14:46:42.703"></status>
</kw>
<status endtime="20170824 14:46:42.704" status="PASS" starttime="20170824 14:46:42.435"></status>
</kw>
<status endtime="20170824 14:46:42.704" status="PASS" starttime="20170824 14:46:42.435"></status>
</kw>
<status endtime="20170824 14:46:42.704" status="PASS" starttime="20170824 14:46:42.434"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:42.705">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:46:42.705" status="PASS" starttime="20170824 14:46:42.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:42.708">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:46:42.708" status="PASS" starttime="20170824 14:46:42.707"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:42.709">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:46:42.709" status="PASS" starttime="20170824 14:46:42.709"></status>
</kw>
<status endtime="20170824 14:46:42.710" status="PASS" starttime="20170824 14:46:42.708"></status>
</kw>
<status endtime="20170824 14:46:42.710" status="PASS" starttime="20170824 14:46:42.706"></status>
</kw>
<status endtime="20170824 14:46:42.710" status="PASS" starttime="20170824 14:46:42.706"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:42.808">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:46:42.808">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:42.808" status="PASS" starttime="20170824 14:46:42.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:42.810">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:46:42.811" status="PASS" starttime="20170824 14:46:42.810"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:42.812">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:46:42.812" status="PASS" starttime="20170824 14:46:42.811"></status>
</kw>
<status endtime="20170824 14:46:42.812" status="PASS" starttime="20170824 14:46:42.811"></status>
</kw>
<status endtime="20170824 14:46:42.812" status="PASS" starttime="20170824 14:46:42.809"></status>
</kw>
<status endtime="20170824 14:46:42.812" status="PASS" starttime="20170824 14:46:42.808"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:46:42.812">Delete All Sessions</msg>
<status endtime="20170824 14:46:42.812" status="PASS" starttime="20170824 14:46:42.812"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:42.813">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:42.813" status="PASS" starttime="20170824 14:46:42.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:42.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:42.813" status="PASS" starttime="20170824 14:46:42.813"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:42.814">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:46:42.814">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:46:42.814">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:46:42.814" status="PASS" starttime="20170824 14:46:42.814"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:42.814">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:46:42.814" status="PASS" starttime="20170824 14:46:42.433"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:42.815">${power_state} = On</msg>
<status endtime="20170824 14:46:42.815" status="PASS" starttime="20170824 14:46:42.432"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:46:42.815">Off != On</msg>
<status endtime="20170824 14:46:42.815" status="FAIL" starttime="20170824 14:46:42.815"></status>
</kw>
<status endtime="20170824 14:46:42.816" status="FAIL" starttime="20170824 14:46:42.432"></status>
</kw>
<status endtime="20170824 14:46:42.816" status="FAIL" starttime="20170824 14:46:42.431"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:52.821">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:46:52.821" status="PASS" starttime="20170824 14:46:52.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:52.822">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:46:52.822" status="PASS" starttime="20170824 14:46:52.822"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:52.823">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:46:52.823" status="PASS" starttime="20170824 14:46:52.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:52.823">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:46:52.823" status="PASS" starttime="20170824 14:46:52.823"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:53.018">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:46:53.018" status="PASS" starttime="20170824 14:46:52.824"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:53.018">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:46:53.018">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:53.018" status="PASS" starttime="20170824 14:46:52.824"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:53.019">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:53.019" status="PASS" starttime="20170824 14:46:53.018"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:53.019">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:53.020" status="PASS" starttime="20170824 14:46:53.019"></status>
</kw>
<status endtime="20170824 14:46:53.020" status="PASS" starttime="20170824 14:46:52.820"></status>
</kw>
<status endtime="20170824 14:46:53.020" status="PASS" starttime="20170824 14:46:52.819"></status>
</kw>
<status endtime="20170824 14:46:53.020" status="PASS" starttime="20170824 14:46:52.819"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:53.020">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:46:53.020" status="PASS" starttime="20170824 14:46:53.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:53.022">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:46:53.023" status="PASS" starttime="20170824 14:46:53.022"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:53.023">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:46:53.024" status="PASS" starttime="20170824 14:46:53.023"></status>
</kw>
<status endtime="20170824 14:46:53.024" status="PASS" starttime="20170824 14:46:53.023"></status>
</kw>
<status endtime="20170824 14:46:53.024" status="PASS" starttime="20170824 14:46:53.021"></status>
</kw>
<status endtime="20170824 14:46:53.024" status="PASS" starttime="20170824 14:46:53.021"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:53.128">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:46:53.128">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:53.128" status="PASS" starttime="20170824 14:46:53.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:53.130">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:46:53.130" status="PASS" starttime="20170824 14:46:53.129"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:53.135">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:46:53.136" status="PASS" starttime="20170824 14:46:53.135"></status>
</kw>
<status endtime="20170824 14:46:53.136" status="PASS" starttime="20170824 14:46:53.130"></status>
</kw>
<status endtime="20170824 14:46:53.136" status="PASS" starttime="20170824 14:46:53.129"></status>
</kw>
<status endtime="20170824 14:46:53.136" status="PASS" starttime="20170824 14:46:53.128"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:46:53.136">Delete All Sessions</msg>
<status endtime="20170824 14:46:53.136" status="PASS" starttime="20170824 14:46:53.136"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:53.137">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:46:53.137" status="PASS" starttime="20170824 14:46:52.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:46:53.137">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:46:53.137" status="PASS" starttime="20170824 14:46:53.137"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:46:53.138">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:46:53.138">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:46:53.138">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:46:53.138" status="PASS" starttime="20170824 14:46:53.137"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:53.138">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:46:53.138" status="PASS" starttime="20170824 14:46:52.817"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:46:53.139">${power_state} = On</msg>
<status endtime="20170824 14:46:53.139" status="PASS" starttime="20170824 14:46:52.817"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:46:53.139">Off != On</msg>
<status endtime="20170824 14:46:53.139" status="FAIL" starttime="20170824 14:46:53.139"></status>
</kw>
<status endtime="20170824 14:46:53.140" status="FAIL" starttime="20170824 14:46:52.817"></status>
</kw>
<status endtime="20170824 14:46:53.140" status="FAIL" starttime="20170824 14:46:52.816"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:03.145">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:47:03.145" status="PASS" starttime="20170824 14:47:03.144"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:03.146">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:47:03.146" status="PASS" starttime="20170824 14:47:03.145"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:03.146">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:47:03.146" status="PASS" starttime="20170824 14:47:03.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:03.147">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:47:03.147" status="PASS" starttime="20170824 14:47:03.146"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:03.406">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:47:03.406" status="PASS" starttime="20170824 14:47:03.148"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:03.406">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:47:03.406">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:03.406" status="PASS" starttime="20170824 14:47:03.147"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:03.407">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:03.407" status="PASS" starttime="20170824 14:47:03.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:03.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:03.408" status="PASS" starttime="20170824 14:47:03.407"></status>
</kw>
<status endtime="20170824 14:47:03.408" status="PASS" starttime="20170824 14:47:03.144"></status>
</kw>
<status endtime="20170824 14:47:03.408" status="PASS" starttime="20170824 14:47:03.143"></status>
</kw>
<status endtime="20170824 14:47:03.408" status="PASS" starttime="20170824 14:47:03.143"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:03.408">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:47:03.408" status="PASS" starttime="20170824 14:47:03.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:03.411">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:47:03.411" status="PASS" starttime="20170824 14:47:03.410"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:03.412">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:47:03.412" status="PASS" starttime="20170824 14:47:03.411"></status>
</kw>
<status endtime="20170824 14:47:03.412" status="PASS" starttime="20170824 14:47:03.411"></status>
</kw>
<status endtime="20170824 14:47:03.412" status="PASS" starttime="20170824 14:47:03.409"></status>
</kw>
<status endtime="20170824 14:47:03.412" status="PASS" starttime="20170824 14:47:03.409"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:03.479">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:47:03.480">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:03.480" status="PASS" starttime="20170824 14:47:03.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:03.481">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:47:03.481" status="PASS" starttime="20170824 14:47:03.481"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:03.482">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:47:03.482" status="PASS" starttime="20170824 14:47:03.482"></status>
</kw>
<status endtime="20170824 14:47:03.482" status="PASS" starttime="20170824 14:47:03.481"></status>
</kw>
<status endtime="20170824 14:47:03.483" status="PASS" starttime="20170824 14:47:03.480"></status>
</kw>
<status endtime="20170824 14:47:03.483" status="PASS" starttime="20170824 14:47:03.480"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:47:03.483">Delete All Sessions</msg>
<status endtime="20170824 14:47:03.483" status="PASS" starttime="20170824 14:47:03.483"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:03.483">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:03.483" status="PASS" starttime="20170824 14:47:03.142"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:03.484">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:03.484" status="PASS" starttime="20170824 14:47:03.484"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:03.485">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:47:03.485">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:47:03.485">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:47:03.485" status="PASS" starttime="20170824 14:47:03.484"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:03.485">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:47:03.485" status="PASS" starttime="20170824 14:47:03.141"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:03.485">${power_state} = On</msg>
<status endtime="20170824 14:47:03.485" status="PASS" starttime="20170824 14:47:03.141"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:47:03.486">Off != On</msg>
<status endtime="20170824 14:47:03.486" status="FAIL" starttime="20170824 14:47:03.486"></status>
</kw>
<status endtime="20170824 14:47:03.486" status="FAIL" starttime="20170824 14:47:03.141"></status>
</kw>
<status endtime="20170824 14:47:03.486" status="FAIL" starttime="20170824 14:47:03.140"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:13.492">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:47:13.492" status="PASS" starttime="20170824 14:47:13.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:13.493">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:47:13.493" status="PASS" starttime="20170824 14:47:13.492"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:13.493">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:47:13.493" status="PASS" starttime="20170824 14:47:13.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:13.494">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:47:13.494" status="PASS" starttime="20170824 14:47:13.493"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:13.734">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:47:13.734" status="PASS" starttime="20170824 14:47:13.495"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:13.734">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:47:13.734">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:13.734" status="PASS" starttime="20170824 14:47:13.494"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:13.735">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:13.735" status="PASS" starttime="20170824 14:47:13.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:13.735">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:13.735" status="PASS" starttime="20170824 14:47:13.735"></status>
</kw>
<status endtime="20170824 14:47:13.736" status="PASS" starttime="20170824 14:47:13.490"></status>
</kw>
<status endtime="20170824 14:47:13.736" status="PASS" starttime="20170824 14:47:13.490"></status>
</kw>
<status endtime="20170824 14:47:13.736" status="PASS" starttime="20170824 14:47:13.489"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:13.736">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:47:13.736" status="PASS" starttime="20170824 14:47:13.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:13.738">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:47:13.738" status="PASS" starttime="20170824 14:47:13.738"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:13.739">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:47:13.739" status="PASS" starttime="20170824 14:47:13.739"></status>
</kw>
<status endtime="20170824 14:47:13.740" status="PASS" starttime="20170824 14:47:13.739"></status>
</kw>
<status endtime="20170824 14:47:13.740" status="PASS" starttime="20170824 14:47:13.737"></status>
</kw>
<status endtime="20170824 14:47:13.740" status="PASS" starttime="20170824 14:47:13.737"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:13.836">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:47:13.836">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:13.836" status="PASS" starttime="20170824 14:47:13.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:13.838">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:47:13.838" status="PASS" starttime="20170824 14:47:13.837"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:13.839">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:47:13.839" status="PASS" starttime="20170824 14:47:13.838"></status>
</kw>
<status endtime="20170824 14:47:13.839" status="PASS" starttime="20170824 14:47:13.838"></status>
</kw>
<status endtime="20170824 14:47:13.839" status="PASS" starttime="20170824 14:47:13.837"></status>
</kw>
<status endtime="20170824 14:47:13.839" status="PASS" starttime="20170824 14:47:13.836"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:47:13.840">Delete All Sessions</msg>
<status endtime="20170824 14:47:13.840" status="PASS" starttime="20170824 14:47:13.840"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:13.840">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:13.840" status="PASS" starttime="20170824 14:47:13.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:13.841">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:13.841" status="PASS" starttime="20170824 14:47:13.840"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:13.841">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:47:13.841">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:47:13.842">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:47:13.842" status="PASS" starttime="20170824 14:47:13.841"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:13.842">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:47:13.842" status="PASS" starttime="20170824 14:47:13.488"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:13.842">${power_state} = On</msg>
<status endtime="20170824 14:47:13.842" status="PASS" starttime="20170824 14:47:13.488"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:47:13.843">Off != On</msg>
<status endtime="20170824 14:47:13.843" status="FAIL" starttime="20170824 14:47:13.842"></status>
</kw>
<status endtime="20170824 14:47:13.843" status="FAIL" starttime="20170824 14:47:13.487"></status>
</kw>
<status endtime="20170824 14:47:13.843" status="FAIL" starttime="20170824 14:47:13.487"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:23.848">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:47:23.849" status="PASS" starttime="20170824 14:47:23.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:23.849">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:47:23.849" status="PASS" starttime="20170824 14:47:23.849"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:23.850">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:47:23.850" status="PASS" starttime="20170824 14:47:23.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:23.850">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:47:23.851" status="PASS" starttime="20170824 14:47:23.850"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:24.055">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:47:24.055" status="PASS" starttime="20170824 14:47:23.851"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:24.055">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:47:24.055">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:24.055" status="PASS" starttime="20170824 14:47:23.851"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:24.056">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:24.056" status="PASS" starttime="20170824 14:47:24.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:24.056">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:24.057" status="PASS" starttime="20170824 14:47:24.056"></status>
</kw>
<status endtime="20170824 14:47:24.057" status="PASS" starttime="20170824 14:47:23.847"></status>
</kw>
<status endtime="20170824 14:47:24.057" status="PASS" starttime="20170824 14:47:23.847"></status>
</kw>
<status endtime="20170824 14:47:24.057" status="PASS" starttime="20170824 14:47:23.846"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:24.057">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:47:24.057" status="PASS" starttime="20170824 14:47:24.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:24.060">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:47:24.060" status="PASS" starttime="20170824 14:47:24.059"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:24.060">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:47:24.061" status="PASS" starttime="20170824 14:47:24.060"></status>
</kw>
<status endtime="20170824 14:47:24.061" status="PASS" starttime="20170824 14:47:24.060"></status>
</kw>
<status endtime="20170824 14:47:24.061" status="PASS" starttime="20170824 14:47:24.058"></status>
</kw>
<status endtime="20170824 14:47:24.061" status="PASS" starttime="20170824 14:47:24.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:24.128">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:47:24.128">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:24.129" status="PASS" starttime="20170824 14:47:24.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:24.130">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:47:24.130" status="PASS" starttime="20170824 14:47:24.130"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:24.131">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:47:24.131" status="PASS" starttime="20170824 14:47:24.131"></status>
</kw>
<status endtime="20170824 14:47:24.131" status="PASS" starttime="20170824 14:47:24.131"></status>
</kw>
<status endtime="20170824 14:47:24.132" status="PASS" starttime="20170824 14:47:24.129"></status>
</kw>
<status endtime="20170824 14:47:24.132" status="PASS" starttime="20170824 14:47:24.129"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:47:24.132">Delete All Sessions</msg>
<status endtime="20170824 14:47:24.132" status="PASS" starttime="20170824 14:47:24.132"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:24.132">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:24.132" status="PASS" starttime="20170824 14:47:23.846"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:24.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:24.133" status="PASS" starttime="20170824 14:47:24.133"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:24.134">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:47:24.134">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:47:24.134">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:47:24.134" status="PASS" starttime="20170824 14:47:24.133"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:24.134">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:47:24.134" status="PASS" starttime="20170824 14:47:23.845"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:24.134">${power_state} = On</msg>
<status endtime="20170824 14:47:24.134" status="PASS" starttime="20170824 14:47:23.845"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:47:24.135">Off != On</msg>
<status endtime="20170824 14:47:24.135" status="FAIL" starttime="20170824 14:47:24.135"></status>
</kw>
<status endtime="20170824 14:47:24.135" status="FAIL" starttime="20170824 14:47:23.844"></status>
</kw>
<status endtime="20170824 14:47:24.135" status="FAIL" starttime="20170824 14:47:23.844"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:34.141">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:47:34.142" status="PASS" starttime="20170824 14:47:34.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:34.142">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:47:34.142" status="PASS" starttime="20170824 14:47:34.142"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:34.143">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:47:34.143" status="PASS" starttime="20170824 14:47:34.143"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:34.144">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:47:34.144" status="PASS" starttime="20170824 14:47:34.144"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:34.432">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:47:34.432" status="PASS" starttime="20170824 14:47:34.145"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:34.432">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:47:34.432">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:34.432" status="PASS" starttime="20170824 14:47:34.145"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:34.433">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:34.433" status="PASS" starttime="20170824 14:47:34.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:34.434">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:34.434" status="PASS" starttime="20170824 14:47:34.433"></status>
</kw>
<status endtime="20170824 14:47:34.434" status="PASS" starttime="20170824 14:47:34.140"></status>
</kw>
<status endtime="20170824 14:47:34.434" status="PASS" starttime="20170824 14:47:34.139"></status>
</kw>
<status endtime="20170824 14:47:34.434" status="PASS" starttime="20170824 14:47:34.139"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:34.434">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:47:34.435" status="PASS" starttime="20170824 14:47:34.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:34.437">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:47:34.437" status="PASS" starttime="20170824 14:47:34.436"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:34.438">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:47:34.438" status="PASS" starttime="20170824 14:47:34.437"></status>
</kw>
<status endtime="20170824 14:47:34.438" status="PASS" starttime="20170824 14:47:34.437"></status>
</kw>
<status endtime="20170824 14:47:34.438" status="PASS" starttime="20170824 14:47:34.435"></status>
</kw>
<status endtime="20170824 14:47:34.438" status="PASS" starttime="20170824 14:47:34.435"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:34.529">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:47:34.529">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:34.529" status="PASS" starttime="20170824 14:47:34.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:34.531">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:47:34.531" status="PASS" starttime="20170824 14:47:34.530"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:34.532">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:47:34.532" status="PASS" starttime="20170824 14:47:34.532"></status>
</kw>
<status endtime="20170824 14:47:34.533" status="PASS" starttime="20170824 14:47:34.531"></status>
</kw>
<status endtime="20170824 14:47:34.533" status="PASS" starttime="20170824 14:47:34.530"></status>
</kw>
<status endtime="20170824 14:47:34.533" status="PASS" starttime="20170824 14:47:34.529"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:47:34.533">Delete All Sessions</msg>
<status endtime="20170824 14:47:34.533" status="PASS" starttime="20170824 14:47:34.533"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:34.533">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:34.533" status="PASS" starttime="20170824 14:47:34.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:34.534">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:34.534" status="PASS" starttime="20170824 14:47:34.534"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:34.535">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:47:34.535">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:47:34.535">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:47:34.535" status="PASS" starttime="20170824 14:47:34.534"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:34.535">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:47:34.535" status="PASS" starttime="20170824 14:47:34.137"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:34.535">${power_state} = On</msg>
<status endtime="20170824 14:47:34.535" status="PASS" starttime="20170824 14:47:34.137"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:47:34.536">Off != On</msg>
<status endtime="20170824 14:47:34.536" status="FAIL" starttime="20170824 14:47:34.536"></status>
</kw>
<status endtime="20170824 14:47:34.536" status="FAIL" starttime="20170824 14:47:34.137"></status>
</kw>
<status endtime="20170824 14:47:34.536" status="FAIL" starttime="20170824 14:47:34.136"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:44.542">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:47:44.542" status="PASS" starttime="20170824 14:47:44.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:44.543">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:47:44.543" status="PASS" starttime="20170824 14:47:44.542"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:44.543">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:47:44.543" status="PASS" starttime="20170824 14:47:44.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:44.544">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:47:44.544" status="PASS" starttime="20170824 14:47:44.544"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:44.741">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:47:44.741" status="PASS" starttime="20170824 14:47:44.545"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:44.741">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:47:44.741">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:44.741" status="PASS" starttime="20170824 14:47:44.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:44.742">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:44.742" status="PASS" starttime="20170824 14:47:44.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:44.743">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:44.743" status="PASS" starttime="20170824 14:47:44.742"></status>
</kw>
<status endtime="20170824 14:47:44.743" status="PASS" starttime="20170824 14:47:44.541"></status>
</kw>
<status endtime="20170824 14:47:44.743" status="PASS" starttime="20170824 14:47:44.540"></status>
</kw>
<status endtime="20170824 14:47:44.743" status="PASS" starttime="20170824 14:47:44.540"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:44.744">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:47:44.744" status="PASS" starttime="20170824 14:47:44.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:44.746">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:47:44.746" status="PASS" starttime="20170824 14:47:44.745"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:44.747">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:47:44.747" status="PASS" starttime="20170824 14:47:44.746"></status>
</kw>
<status endtime="20170824 14:47:44.747" status="PASS" starttime="20170824 14:47:44.746"></status>
</kw>
<status endtime="20170824 14:47:44.747" status="PASS" starttime="20170824 14:47:44.744"></status>
</kw>
<status endtime="20170824 14:47:44.747" status="PASS" starttime="20170824 14:47:44.744"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:44.813">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:47:44.813">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:44.813" status="PASS" starttime="20170824 14:47:44.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:44.815">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:47:44.815" status="PASS" starttime="20170824 14:47:44.815"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:44.816">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:47:44.817" status="PASS" starttime="20170824 14:47:44.816"></status>
</kw>
<status endtime="20170824 14:47:44.817" status="PASS" starttime="20170824 14:47:44.815"></status>
</kw>
<status endtime="20170824 14:47:44.817" status="PASS" starttime="20170824 14:47:44.814"></status>
</kw>
<status endtime="20170824 14:47:44.817" status="PASS" starttime="20170824 14:47:44.814"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:47:44.817">Delete All Sessions</msg>
<status endtime="20170824 14:47:44.817" status="PASS" starttime="20170824 14:47:44.817"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:44.818">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:44.818" status="PASS" starttime="20170824 14:47:44.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:44.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:44.818" status="PASS" starttime="20170824 14:47:44.818"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:44.819">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:47:44.819">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:47:44.819">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:47:44.819" status="PASS" starttime="20170824 14:47:44.818"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:44.819">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:47:44.819" status="PASS" starttime="20170824 14:47:44.538"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:44.820">${power_state} = On</msg>
<status endtime="20170824 14:47:44.820" status="PASS" starttime="20170824 14:47:44.538"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:47:44.820">Off != On</msg>
<status endtime="20170824 14:47:44.820" status="FAIL" starttime="20170824 14:47:44.820"></status>
</kw>
<status endtime="20170824 14:47:44.821" status="FAIL" starttime="20170824 14:47:44.538"></status>
</kw>
<status endtime="20170824 14:47:44.821" status="FAIL" starttime="20170824 14:47:44.537"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:54.826">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:47:54.826" status="PASS" starttime="20170824 14:47:54.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:54.827">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:47:54.827" status="PASS" starttime="20170824 14:47:54.827"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:54.828">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:47:54.828" status="PASS" starttime="20170824 14:47:54.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:54.828">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:47:54.828" status="PASS" starttime="20170824 14:47:54.828"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:55.078">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:47:55.078" status="PASS" starttime="20170824 14:47:54.829"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:55.079">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:47:55.079">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:55.079" status="PASS" starttime="20170824 14:47:54.829"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:55.079">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:55.079" status="PASS" starttime="20170824 14:47:55.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:55.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:55.081" status="PASS" starttime="20170824 14:47:55.080"></status>
</kw>
<status endtime="20170824 14:47:55.081" status="PASS" starttime="20170824 14:47:54.825"></status>
</kw>
<status endtime="20170824 14:47:55.081" status="PASS" starttime="20170824 14:47:54.824"></status>
</kw>
<status endtime="20170824 14:47:55.081" status="PASS" starttime="20170824 14:47:54.824"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:55.082">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:47:55.082" status="PASS" starttime="20170824 14:47:55.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:55.085">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:47:55.085" status="PASS" starttime="20170824 14:47:55.084"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:55.086">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:47:55.086" status="PASS" starttime="20170824 14:47:55.086"></status>
</kw>
<status endtime="20170824 14:47:55.087" status="PASS" starttime="20170824 14:47:55.085"></status>
</kw>
<status endtime="20170824 14:47:55.087" status="PASS" starttime="20170824 14:47:55.083"></status>
</kw>
<status endtime="20170824 14:47:55.087" status="PASS" starttime="20170824 14:47:55.082"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:55.158">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:47:55.158">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:55.158" status="PASS" starttime="20170824 14:47:55.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:55.159">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:47:55.160" status="PASS" starttime="20170824 14:47:55.159"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:55.161">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:47:55.161" status="PASS" starttime="20170824 14:47:55.160"></status>
</kw>
<status endtime="20170824 14:47:55.161" status="PASS" starttime="20170824 14:47:55.160"></status>
</kw>
<status endtime="20170824 14:47:55.161" status="PASS" starttime="20170824 14:47:55.159"></status>
</kw>
<status endtime="20170824 14:47:55.161" status="PASS" starttime="20170824 14:47:55.158"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:47:55.162">Delete All Sessions</msg>
<status endtime="20170824 14:47:55.162" status="PASS" starttime="20170824 14:47:55.161"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:55.162">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:47:55.162" status="PASS" starttime="20170824 14:47:54.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:47:55.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:47:55.163" status="PASS" starttime="20170824 14:47:55.162"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:47:55.163">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:47:55.163">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:47:55.163">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:47:55.163" status="PASS" starttime="20170824 14:47:55.163"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:55.164">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:47:55.164" status="PASS" starttime="20170824 14:47:54.822"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:47:55.164">${power_state} = On</msg>
<status endtime="20170824 14:47:55.164" status="PASS" starttime="20170824 14:47:54.822"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:47:55.165">Off != On</msg>
<status endtime="20170824 14:47:55.165" status="FAIL" starttime="20170824 14:47:55.164"></status>
</kw>
<status endtime="20170824 14:47:55.165" status="FAIL" starttime="20170824 14:47:54.822"></status>
</kw>
<status endtime="20170824 14:47:55.165" status="FAIL" starttime="20170824 14:47:54.821"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:05.171">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:48:05.171" status="PASS" starttime="20170824 14:48:05.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:05.172">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:48:05.172" status="PASS" starttime="20170824 14:48:05.171"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:05.172">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:48:05.172" status="PASS" starttime="20170824 14:48:05.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:05.173">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:48:05.173" status="PASS" starttime="20170824 14:48:05.172"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:05.365">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:48:05.365" status="PASS" starttime="20170824 14:48:05.174"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:05.365">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:48:05.365">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:05.365" status="PASS" starttime="20170824 14:48:05.173"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:05.366">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:05.366" status="PASS" starttime="20170824 14:48:05.366"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:05.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:05.367" status="PASS" starttime="20170824 14:48:05.366"></status>
</kw>
<status endtime="20170824 14:48:05.367" status="PASS" starttime="20170824 14:48:05.170"></status>
</kw>
<status endtime="20170824 14:48:05.367" status="PASS" starttime="20170824 14:48:05.169"></status>
</kw>
<status endtime="20170824 14:48:05.367" status="PASS" starttime="20170824 14:48:05.168"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:05.368">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:48:05.368" status="PASS" starttime="20170824 14:48:05.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:05.370">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:48:05.370" status="PASS" starttime="20170824 14:48:05.369"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:05.371">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:48:05.371" status="PASS" starttime="20170824 14:48:05.371"></status>
</kw>
<status endtime="20170824 14:48:05.371" status="PASS" starttime="20170824 14:48:05.370"></status>
</kw>
<status endtime="20170824 14:48:05.371" status="PASS" starttime="20170824 14:48:05.369"></status>
</kw>
<status endtime="20170824 14:48:05.371" status="PASS" starttime="20170824 14:48:05.368"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:05.442">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:48:05.442">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:05.442" status="PASS" starttime="20170824 14:48:05.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:05.444">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:48:05.444" status="PASS" starttime="20170824 14:48:05.443"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:05.445">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:48:05.445" status="PASS" starttime="20170824 14:48:05.445"></status>
</kw>
<status endtime="20170824 14:48:05.445" status="PASS" starttime="20170824 14:48:05.444"></status>
</kw>
<status endtime="20170824 14:48:05.445" status="PASS" starttime="20170824 14:48:05.443"></status>
</kw>
<status endtime="20170824 14:48:05.445" status="PASS" starttime="20170824 14:48:05.442"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:48:05.446">Delete All Sessions</msg>
<status endtime="20170824 14:48:05.446" status="PASS" starttime="20170824 14:48:05.446"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:05.446">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:05.446" status="PASS" starttime="20170824 14:48:05.168"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:05.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:05.447" status="PASS" starttime="20170824 14:48:05.446"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:05.447">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:48:05.447">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:48:05.448">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:48:05.448" status="PASS" starttime="20170824 14:48:05.447"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:05.448">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:48:05.448" status="PASS" starttime="20170824 14:48:05.167"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:05.448">${power_state} = On</msg>
<status endtime="20170824 14:48:05.448" status="PASS" starttime="20170824 14:48:05.167"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:48:05.449">Off != On</msg>
<status endtime="20170824 14:48:05.449" status="FAIL" starttime="20170824 14:48:05.449"></status>
</kw>
<status endtime="20170824 14:48:05.449" status="FAIL" starttime="20170824 14:48:05.166"></status>
</kw>
<status endtime="20170824 14:48:05.449" status="FAIL" starttime="20170824 14:48:05.166"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:15.455">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:48:15.455" status="PASS" starttime="20170824 14:48:15.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:15.456">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:48:15.456" status="PASS" starttime="20170824 14:48:15.455"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:15.456">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:48:15.456" status="PASS" starttime="20170824 14:48:15.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:15.457">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:48:15.457" status="PASS" starttime="20170824 14:48:15.457"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:15.643">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:48:15.644" status="PASS" starttime="20170824 14:48:15.458"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:15.644">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:48:15.644">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:15.644" status="PASS" starttime="20170824 14:48:15.457"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:15.645">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:15.645" status="PASS" starttime="20170824 14:48:15.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:15.645">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:15.645" status="PASS" starttime="20170824 14:48:15.645"></status>
</kw>
<status endtime="20170824 14:48:15.646" status="PASS" starttime="20170824 14:48:15.453"></status>
</kw>
<status endtime="20170824 14:48:15.646" status="PASS" starttime="20170824 14:48:15.453"></status>
</kw>
<status endtime="20170824 14:48:15.646" status="PASS" starttime="20170824 14:48:15.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:15.646">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:48:15.646" status="PASS" starttime="20170824 14:48:15.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:15.648">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:48:15.648" status="PASS" starttime="20170824 14:48:15.648"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:15.649">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:48:15.649" status="PASS" starttime="20170824 14:48:15.649"></status>
</kw>
<status endtime="20170824 14:48:15.650" status="PASS" starttime="20170824 14:48:15.649"></status>
</kw>
<status endtime="20170824 14:48:15.650" status="PASS" starttime="20170824 14:48:15.647"></status>
</kw>
<status endtime="20170824 14:48:15.650" status="PASS" starttime="20170824 14:48:15.647"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:15.724">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:48:15.724">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:15.724" status="PASS" starttime="20170824 14:48:15.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:15.726">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:48:15.726" status="PASS" starttime="20170824 14:48:15.726"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:15.730">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:48:15.730" status="PASS" starttime="20170824 14:48:15.727"></status>
</kw>
<status endtime="20170824 14:48:15.731" status="PASS" starttime="20170824 14:48:15.726"></status>
</kw>
<status endtime="20170824 14:48:15.731" status="PASS" starttime="20170824 14:48:15.725"></status>
</kw>
<status endtime="20170824 14:48:15.731" status="PASS" starttime="20170824 14:48:15.725"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:48:15.731">Delete All Sessions</msg>
<status endtime="20170824 14:48:15.731" status="PASS" starttime="20170824 14:48:15.731"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:15.731">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:15.731" status="PASS" starttime="20170824 14:48:15.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:15.732">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:15.732" status="PASS" starttime="20170824 14:48:15.732"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:15.733">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:48:15.733">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:48:15.733">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:48:15.733" status="PASS" starttime="20170824 14:48:15.732"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:15.733">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:48:15.733" status="PASS" starttime="20170824 14:48:15.451"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:15.734">${power_state} = On</msg>
<status endtime="20170824 14:48:15.734" status="PASS" starttime="20170824 14:48:15.451"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:48:15.734">Off != On</msg>
<status endtime="20170824 14:48:15.734" status="FAIL" starttime="20170824 14:48:15.734"></status>
</kw>
<status endtime="20170824 14:48:15.734" status="FAIL" starttime="20170824 14:48:15.450"></status>
</kw>
<status endtime="20170824 14:48:15.735" status="FAIL" starttime="20170824 14:48:15.450"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:25.740">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:48:25.741" status="PASS" starttime="20170824 14:48:25.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:25.742">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:48:25.742" status="PASS" starttime="20170824 14:48:25.741"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:25.742">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:48:25.743" status="PASS" starttime="20170824 14:48:25.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:25.743">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:48:25.743" status="PASS" starttime="20170824 14:48:25.743"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:25.949">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:48:25.949" status="PASS" starttime="20170824 14:48:25.744"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:25.949">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:48:25.949">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:25.949" status="PASS" starttime="20170824 14:48:25.744"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:25.950">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:25.950" status="PASS" starttime="20170824 14:48:25.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:25.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:25.951" status="PASS" starttime="20170824 14:48:25.950"></status>
</kw>
<status endtime="20170824 14:48:25.951" status="PASS" starttime="20170824 14:48:25.739"></status>
</kw>
<status endtime="20170824 14:48:25.951" status="PASS" starttime="20170824 14:48:25.738"></status>
</kw>
<status endtime="20170824 14:48:25.951" status="PASS" starttime="20170824 14:48:25.738"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:25.952">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:48:25.952" status="PASS" starttime="20170824 14:48:25.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:25.954">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:48:25.954" status="PASS" starttime="20170824 14:48:25.953"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:25.955">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:48:25.955" status="PASS" starttime="20170824 14:48:25.955"></status>
</kw>
<status endtime="20170824 14:48:25.955" status="PASS" starttime="20170824 14:48:25.954"></status>
</kw>
<status endtime="20170824 14:48:25.955" status="PASS" starttime="20170824 14:48:25.953"></status>
</kw>
<status endtime="20170824 14:48:25.955" status="PASS" starttime="20170824 14:48:25.952"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:26.078">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:48:26.078">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:26.078" status="PASS" starttime="20170824 14:48:25.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:26.080">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:48:26.080" status="PASS" starttime="20170824 14:48:26.079"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:26.081">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:48:26.081" status="PASS" starttime="20170824 14:48:26.081"></status>
</kw>
<status endtime="20170824 14:48:26.081" status="PASS" starttime="20170824 14:48:26.080"></status>
</kw>
<status endtime="20170824 14:48:26.081" status="PASS" starttime="20170824 14:48:26.079"></status>
</kw>
<status endtime="20170824 14:48:26.081" status="PASS" starttime="20170824 14:48:26.078"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:48:26.082">Delete All Sessions</msg>
<status endtime="20170824 14:48:26.082" status="PASS" starttime="20170824 14:48:26.082"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:26.082">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:26.082" status="PASS" starttime="20170824 14:48:25.737"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:26.083">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:26.083" status="PASS" starttime="20170824 14:48:26.083"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:26.083">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:48:26.083">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:48:26.084">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:48:26.084" status="PASS" starttime="20170824 14:48:26.083"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:26.084">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:48:26.084" status="PASS" starttime="20170824 14:48:25.737"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:26.084">${power_state} = On</msg>
<status endtime="20170824 14:48:26.084" status="PASS" starttime="20170824 14:48:25.736"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:48:26.085">Off != On</msg>
<status endtime="20170824 14:48:26.085" status="FAIL" starttime="20170824 14:48:26.085"></status>
</kw>
<status endtime="20170824 14:48:26.085" status="FAIL" starttime="20170824 14:48:25.736"></status>
</kw>
<status endtime="20170824 14:48:26.085" status="FAIL" starttime="20170824 14:48:25.735"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:36.092">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:48:36.092" status="PASS" starttime="20170824 14:48:36.091"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:36.093">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:48:36.093" status="PASS" starttime="20170824 14:48:36.092"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:36.093">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:48:36.093" status="PASS" starttime="20170824 14:48:36.093"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:36.094">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:48:36.094" status="PASS" starttime="20170824 14:48:36.093"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:36.279">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:48:36.280" status="PASS" starttime="20170824 14:48:36.095"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:36.280">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:48:36.280">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:36.280" status="PASS" starttime="20170824 14:48:36.094"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:36.281">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:36.281" status="PASS" starttime="20170824 14:48:36.280"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:36.281">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:36.281" status="PASS" starttime="20170824 14:48:36.281"></status>
</kw>
<status endtime="20170824 14:48:36.281" status="PASS" starttime="20170824 14:48:36.090"></status>
</kw>
<status endtime="20170824 14:48:36.282" status="PASS" starttime="20170824 14:48:36.090"></status>
</kw>
<status endtime="20170824 14:48:36.282" status="PASS" starttime="20170824 14:48:36.089"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:36.282">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:48:36.282" status="PASS" starttime="20170824 14:48:36.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:36.285">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:48:36.285" status="PASS" starttime="20170824 14:48:36.284"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:36.286">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:48:36.286" status="PASS" starttime="20170824 14:48:36.286"></status>
</kw>
<status endtime="20170824 14:48:36.286" status="PASS" starttime="20170824 14:48:36.285"></status>
</kw>
<status endtime="20170824 14:48:36.286" status="PASS" starttime="20170824 14:48:36.283"></status>
</kw>
<status endtime="20170824 14:48:36.287" status="PASS" starttime="20170824 14:48:36.283"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:36.363">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:48:36.363">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:36.363" status="PASS" starttime="20170824 14:48:36.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:36.365">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:48:36.365" status="PASS" starttime="20170824 14:48:36.364"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:36.366">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:48:36.366" status="PASS" starttime="20170824 14:48:36.365"></status>
</kw>
<status endtime="20170824 14:48:36.366" status="PASS" starttime="20170824 14:48:36.365"></status>
</kw>
<status endtime="20170824 14:48:36.367" status="PASS" starttime="20170824 14:48:36.364"></status>
</kw>
<status endtime="20170824 14:48:36.367" status="PASS" starttime="20170824 14:48:36.363"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:48:36.367">Delete All Sessions</msg>
<status endtime="20170824 14:48:36.367" status="PASS" starttime="20170824 14:48:36.367"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:36.367">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:36.367" status="PASS" starttime="20170824 14:48:36.088"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:36.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:36.368" status="PASS" starttime="20170824 14:48:36.368"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:36.369">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:48:36.369">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:48:36.369">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:48:36.369" status="PASS" starttime="20170824 14:48:36.369"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:36.369">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:48:36.369" status="PASS" starttime="20170824 14:48:36.088"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:36.370">${power_state} = On</msg>
<status endtime="20170824 14:48:36.370" status="PASS" starttime="20170824 14:48:36.087"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:48:36.370">Off != On</msg>
<status endtime="20170824 14:48:36.370" status="FAIL" starttime="20170824 14:48:36.370"></status>
</kw>
<status endtime="20170824 14:48:36.371" status="FAIL" starttime="20170824 14:48:36.087"></status>
</kw>
<status endtime="20170824 14:48:36.371" status="FAIL" starttime="20170824 14:48:36.086"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:46.380">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:48:46.381" status="PASS" starttime="20170824 14:48:46.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:46.382">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:48:46.382" status="PASS" starttime="20170824 14:48:46.381"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:46.383">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:48:46.383" status="PASS" starttime="20170824 14:48:46.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:46.384">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:48:46.384" status="PASS" starttime="20170824 14:48:46.383"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:46.651">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:48:46.652" status="PASS" starttime="20170824 14:48:46.385"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:46.652">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:48:46.652">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:46.652" status="PASS" starttime="20170824 14:48:46.384"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:46.652">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:46.653" status="PASS" starttime="20170824 14:48:46.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:46.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:46.653" status="PASS" starttime="20170824 14:48:46.653"></status>
</kw>
<status endtime="20170824 14:48:46.653" status="PASS" starttime="20170824 14:48:46.379"></status>
</kw>
<status endtime="20170824 14:48:46.653" status="PASS" starttime="20170824 14:48:46.378"></status>
</kw>
<status endtime="20170824 14:48:46.654" status="PASS" starttime="20170824 14:48:46.377"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:46.654">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:48:46.654" status="PASS" starttime="20170824 14:48:46.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:46.656">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:48:46.656" status="PASS" starttime="20170824 14:48:46.656"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:46.657">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:48:46.657" status="PASS" starttime="20170824 14:48:46.657"></status>
</kw>
<status endtime="20170824 14:48:46.657" status="PASS" starttime="20170824 14:48:46.656"></status>
</kw>
<status endtime="20170824 14:48:46.658" status="PASS" starttime="20170824 14:48:46.655"></status>
</kw>
<status endtime="20170824 14:48:46.658" status="PASS" starttime="20170824 14:48:46.654"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:46.732">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:48:46.732">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:46.732" status="PASS" starttime="20170824 14:48:46.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:46.734">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:48:46.734" status="PASS" starttime="20170824 14:48:46.734"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:46.735">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:48:46.735" status="PASS" starttime="20170824 14:48:46.735"></status>
</kw>
<status endtime="20170824 14:48:46.736" status="PASS" starttime="20170824 14:48:46.735"></status>
</kw>
<status endtime="20170824 14:48:46.736" status="PASS" starttime="20170824 14:48:46.733"></status>
</kw>
<status endtime="20170824 14:48:46.736" status="PASS" starttime="20170824 14:48:46.733"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:48:46.736">Delete All Sessions</msg>
<status endtime="20170824 14:48:46.736" status="PASS" starttime="20170824 14:48:46.736"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:46.736">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:46.736" status="PASS" starttime="20170824 14:48:46.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:46.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:46.737" status="PASS" starttime="20170824 14:48:46.737"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:46.738">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:48:46.738">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:48:46.738">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:48:46.738" status="PASS" starttime="20170824 14:48:46.737"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:46.738">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:48:46.738" status="PASS" starttime="20170824 14:48:46.376"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:46.738">${power_state} = On</msg>
<status endtime="20170824 14:48:46.738" status="PASS" starttime="20170824 14:48:46.376"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:48:46.739">Off != On</msg>
<status endtime="20170824 14:48:46.739" status="FAIL" starttime="20170824 14:48:46.739"></status>
</kw>
<status endtime="20170824 14:48:46.739" status="FAIL" starttime="20170824 14:48:46.375"></status>
</kw>
<status endtime="20170824 14:48:46.739" status="FAIL" starttime="20170824 14:48:46.375"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:56.745">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:48:56.745" status="PASS" starttime="20170824 14:48:56.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:56.746">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:48:56.746" status="PASS" starttime="20170824 14:48:56.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:56.747">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:48:56.747" status="PASS" starttime="20170824 14:48:56.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:56.747">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:48:56.747" status="PASS" starttime="20170824 14:48:56.747"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:56.977">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:48:56.977" status="PASS" starttime="20170824 14:48:56.748"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:56.977">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:48:56.977">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:56.978" status="PASS" starttime="20170824 14:48:56.747"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:56.978">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:56.978" status="PASS" starttime="20170824 14:48:56.978"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:56.979">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:56.979" status="PASS" starttime="20170824 14:48:56.979"></status>
</kw>
<status endtime="20170824 14:48:56.979" status="PASS" starttime="20170824 14:48:56.744"></status>
</kw>
<status endtime="20170824 14:48:56.979" status="PASS" starttime="20170824 14:48:56.743"></status>
</kw>
<status endtime="20170824 14:48:56.979" status="PASS" starttime="20170824 14:48:56.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:56.980">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:48:56.980" status="PASS" starttime="20170824 14:48:56.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:56.982">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:48:56.982" status="PASS" starttime="20170824 14:48:56.982"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:56.984">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:48:56.984" status="PASS" starttime="20170824 14:48:56.983"></status>
</kw>
<status endtime="20170824 14:48:56.984" status="PASS" starttime="20170824 14:48:56.983"></status>
</kw>
<status endtime="20170824 14:48:56.984" status="PASS" starttime="20170824 14:48:56.981"></status>
</kw>
<status endtime="20170824 14:48:56.984" status="PASS" starttime="20170824 14:48:56.980"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:57.097">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:48:57.098">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:57.098" status="PASS" starttime="20170824 14:48:56.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:57.099">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:48:57.099" status="PASS" starttime="20170824 14:48:57.099"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:57.101">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:48:57.101" status="PASS" starttime="20170824 14:48:57.100"></status>
</kw>
<status endtime="20170824 14:48:57.101" status="PASS" starttime="20170824 14:48:57.100"></status>
</kw>
<status endtime="20170824 14:48:57.101" status="PASS" starttime="20170824 14:48:57.098"></status>
</kw>
<status endtime="20170824 14:48:57.101" status="PASS" starttime="20170824 14:48:57.098"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:48:57.102">Delete All Sessions</msg>
<status endtime="20170824 14:48:57.102" status="PASS" starttime="20170824 14:48:57.102"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:57.102">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:48:57.102" status="PASS" starttime="20170824 14:48:56.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:48:57.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:48:57.103" status="PASS" starttime="20170824 14:48:57.103"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:48:57.104">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:48:57.104">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:48:57.104">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:48:57.104" status="PASS" starttime="20170824 14:48:57.104"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:57.104">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:48:57.104" status="PASS" starttime="20170824 14:48:56.741"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:48:57.105">${power_state} = On</msg>
<status endtime="20170824 14:48:57.105" status="PASS" starttime="20170824 14:48:56.741"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:48:57.105">Off != On</msg>
<status endtime="20170824 14:48:57.105" status="FAIL" starttime="20170824 14:48:57.105"></status>
</kw>
<status endtime="20170824 14:48:57.106" status="FAIL" starttime="20170824 14:48:56.740"></status>
</kw>
<status endtime="20170824 14:48:57.106" status="FAIL" starttime="20170824 14:48:56.740"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:07.111">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:49:07.112" status="PASS" starttime="20170824 14:49:07.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:07.112">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:49:07.112" status="PASS" starttime="20170824 14:49:07.112"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:07.113">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:49:07.113" status="PASS" starttime="20170824 14:49:07.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:07.114">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:49:07.114" status="PASS" starttime="20170824 14:49:07.113"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:07.311">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:49:07.311" status="PASS" starttime="20170824 14:49:07.114"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:07.311">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:49:07.311">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:07.311" status="PASS" starttime="20170824 14:49:07.114"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:07.312">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:07.312" status="PASS" starttime="20170824 14:49:07.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:07.312">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:07.313" status="PASS" starttime="20170824 14:49:07.312"></status>
</kw>
<status endtime="20170824 14:49:07.313" status="PASS" starttime="20170824 14:49:07.110"></status>
</kw>
<status endtime="20170824 14:49:07.313" status="PASS" starttime="20170824 14:49:07.110"></status>
</kw>
<status endtime="20170824 14:49:07.313" status="PASS" starttime="20170824 14:49:07.109"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:07.313">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:49:07.313" status="PASS" starttime="20170824 14:49:07.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:07.315">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:07.315" status="PASS" starttime="20170824 14:49:07.315"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:07.316">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:07.317" status="PASS" starttime="20170824 14:49:07.316"></status>
</kw>
<status endtime="20170824 14:49:07.317" status="PASS" starttime="20170824 14:49:07.316"></status>
</kw>
<status endtime="20170824 14:49:07.317" status="PASS" starttime="20170824 14:49:07.314"></status>
</kw>
<status endtime="20170824 14:49:07.317" status="PASS" starttime="20170824 14:49:07.314"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:07.384">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:49:07.384">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:07.384" status="PASS" starttime="20170824 14:49:07.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:07.386">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:07.386" status="PASS" starttime="20170824 14:49:07.386"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:07.387">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:07.387" status="PASS" starttime="20170824 14:49:07.387"></status>
</kw>
<status endtime="20170824 14:49:07.387" status="PASS" starttime="20170824 14:49:07.386"></status>
</kw>
<status endtime="20170824 14:49:07.387" status="PASS" starttime="20170824 14:49:07.385"></status>
</kw>
<status endtime="20170824 14:49:07.387" status="PASS" starttime="20170824 14:49:07.385"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:49:07.388">Delete All Sessions</msg>
<status endtime="20170824 14:49:07.388" status="PASS" starttime="20170824 14:49:07.388"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:07.388">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:07.388" status="PASS" starttime="20170824 14:49:07.109"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:07.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:07.389" status="PASS" starttime="20170824 14:49:07.388"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:07.389">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:49:07.389">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:49:07.389">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:49:07.390" status="PASS" starttime="20170824 14:49:07.389"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:07.390">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:49:07.390" status="PASS" starttime="20170824 14:49:07.108"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:07.390">${power_state} = On</msg>
<status endtime="20170824 14:49:07.390" status="PASS" starttime="20170824 14:49:07.108"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:49:07.391">Off != On</msg>
<status endtime="20170824 14:49:07.391" status="FAIL" starttime="20170824 14:49:07.390"></status>
</kw>
<status endtime="20170824 14:49:07.391" status="FAIL" starttime="20170824 14:49:07.107"></status>
</kw>
<status endtime="20170824 14:49:07.391" status="FAIL" starttime="20170824 14:49:07.106"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:17.397">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:49:17.397" status="PASS" starttime="20170824 14:49:17.396"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:17.398">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:49:17.398" status="PASS" starttime="20170824 14:49:17.397"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:17.398">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:49:17.398" status="PASS" starttime="20170824 14:49:17.398"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:17.399">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:49:17.399" status="PASS" starttime="20170824 14:49:17.398"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:17.667">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:49:17.667" status="PASS" starttime="20170824 14:49:17.400"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:17.667">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:49:17.667">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:17.667" status="PASS" starttime="20170824 14:49:17.399"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:17.668">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:17.668" status="PASS" starttime="20170824 14:49:17.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:17.668">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:17.668" status="PASS" starttime="20170824 14:49:17.668"></status>
</kw>
<status endtime="20170824 14:49:17.669" status="PASS" starttime="20170824 14:49:17.395"></status>
</kw>
<status endtime="20170824 14:49:17.669" status="PASS" starttime="20170824 14:49:17.395"></status>
</kw>
<status endtime="20170824 14:49:17.669" status="PASS" starttime="20170824 14:49:17.394"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:17.669">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:49:17.669" status="PASS" starttime="20170824 14:49:17.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:17.671">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:17.671" status="PASS" starttime="20170824 14:49:17.671"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:17.672">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:17.672" status="PASS" starttime="20170824 14:49:17.672"></status>
</kw>
<status endtime="20170824 14:49:17.673" status="PASS" starttime="20170824 14:49:17.672"></status>
</kw>
<status endtime="20170824 14:49:17.673" status="PASS" starttime="20170824 14:49:17.670"></status>
</kw>
<status endtime="20170824 14:49:17.673" status="PASS" starttime="20170824 14:49:17.670"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:17.757">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:49:17.757">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:17.757" status="PASS" starttime="20170824 14:49:17.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:17.759">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:17.759" status="PASS" starttime="20170824 14:49:17.758"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:17.760">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:17.760" status="PASS" starttime="20170824 14:49:17.759"></status>
</kw>
<status endtime="20170824 14:49:17.760" status="PASS" starttime="20170824 14:49:17.759"></status>
</kw>
<status endtime="20170824 14:49:17.760" status="PASS" starttime="20170824 14:49:17.758"></status>
</kw>
<status endtime="20170824 14:49:17.760" status="PASS" starttime="20170824 14:49:17.757"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:49:17.761">Delete All Sessions</msg>
<status endtime="20170824 14:49:17.761" status="PASS" starttime="20170824 14:49:17.761"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:17.761">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:17.761" status="PASS" starttime="20170824 14:49:17.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:17.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:17.762" status="PASS" starttime="20170824 14:49:17.761"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:17.762">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:49:17.762">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:49:17.763">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:49:17.763" status="PASS" starttime="20170824 14:49:17.762"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:17.763">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:49:17.763" status="PASS" starttime="20170824 14:49:17.393"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:17.763">${power_state} = On</msg>
<status endtime="20170824 14:49:17.763" status="PASS" starttime="20170824 14:49:17.393"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:49:17.764">Off != On</msg>
<status endtime="20170824 14:49:17.764" status="FAIL" starttime="20170824 14:49:17.763"></status>
</kw>
<status endtime="20170824 14:49:17.764" status="FAIL" starttime="20170824 14:49:17.392"></status>
</kw>
<status endtime="20170824 14:49:17.764" status="FAIL" starttime="20170824 14:49:17.392"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:27.769">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:49:27.769" status="PASS" starttime="20170824 14:49:27.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:27.770">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:49:27.770" status="PASS" starttime="20170824 14:49:27.770"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:27.771">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:49:27.771" status="PASS" starttime="20170824 14:49:27.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:27.771">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:49:27.771" status="PASS" starttime="20170824 14:49:27.771"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:27.952">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:49:27.952" status="PASS" starttime="20170824 14:49:27.772"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:27.952">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:49:27.952">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:27.952" status="PASS" starttime="20170824 14:49:27.772"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:27.953">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:27.953" status="PASS" starttime="20170824 14:49:27.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:27.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:27.954" status="PASS" starttime="20170824 14:49:27.953"></status>
</kw>
<status endtime="20170824 14:49:27.954" status="PASS" starttime="20170824 14:49:27.768"></status>
</kw>
<status endtime="20170824 14:49:27.954" status="PASS" starttime="20170824 14:49:27.768"></status>
</kw>
<status endtime="20170824 14:49:27.954" status="PASS" starttime="20170824 14:49:27.767"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:27.955">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:49:27.955" status="PASS" starttime="20170824 14:49:27.954"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:27.957">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:27.957" status="PASS" starttime="20170824 14:49:27.956"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:27.958">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:27.958" status="PASS" starttime="20170824 14:49:27.957"></status>
</kw>
<status endtime="20170824 14:49:27.958" status="PASS" starttime="20170824 14:49:27.957"></status>
</kw>
<status endtime="20170824 14:49:27.958" status="PASS" starttime="20170824 14:49:27.955"></status>
</kw>
<status endtime="20170824 14:49:27.958" status="PASS" starttime="20170824 14:49:27.955"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:28.062">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:49:28.062">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:28.062" status="PASS" starttime="20170824 14:49:27.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:28.064">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:28.064" status="PASS" starttime="20170824 14:49:28.063"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:28.065">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:28.065" status="PASS" starttime="20170824 14:49:28.065"></status>
</kw>
<status endtime="20170824 14:49:28.065" status="PASS" starttime="20170824 14:49:28.064"></status>
</kw>
<status endtime="20170824 14:49:28.066" status="PASS" starttime="20170824 14:49:28.063"></status>
</kw>
<status endtime="20170824 14:49:28.066" status="PASS" starttime="20170824 14:49:28.062"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:49:28.066">Delete All Sessions</msg>
<status endtime="20170824 14:49:28.066" status="PASS" starttime="20170824 14:49:28.066"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:28.066">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:28.066" status="PASS" starttime="20170824 14:49:27.766"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:28.067">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:28.067" status="PASS" starttime="20170824 14:49:28.067"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:28.068">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:49:28.068">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:49:28.068">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:49:28.068" status="PASS" starttime="20170824 14:49:28.067"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:28.068">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:49:28.068" status="PASS" starttime="20170824 14:49:27.766"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:28.068">${power_state} = On</msg>
<status endtime="20170824 14:49:28.068" status="PASS" starttime="20170824 14:49:27.766"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:49:28.069">Off != On</msg>
<status endtime="20170824 14:49:28.069" status="FAIL" starttime="20170824 14:49:28.069"></status>
</kw>
<status endtime="20170824 14:49:28.069" status="FAIL" starttime="20170824 14:49:27.765"></status>
</kw>
<status endtime="20170824 14:49:28.069" status="FAIL" starttime="20170824 14:49:27.765"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:38.076">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:49:38.076" status="PASS" starttime="20170824 14:49:38.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:38.077">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:49:38.077" status="PASS" starttime="20170824 14:49:38.077"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:38.078">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:49:38.078" status="PASS" starttime="20170824 14:49:38.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:38.079">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:49:38.079" status="PASS" starttime="20170824 14:49:38.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:38.267">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:49:38.267" status="PASS" starttime="20170824 14:49:38.079"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:38.267">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:49:38.268">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:38.268" status="PASS" starttime="20170824 14:49:38.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:38.268">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:38.268" status="PASS" starttime="20170824 14:49:38.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:38.269">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:38.269" status="PASS" starttime="20170824 14:49:38.269"></status>
</kw>
<status endtime="20170824 14:49:38.269" status="PASS" starttime="20170824 14:49:38.074"></status>
</kw>
<status endtime="20170824 14:49:38.269" status="PASS" starttime="20170824 14:49:38.073"></status>
</kw>
<status endtime="20170824 14:49:38.269" status="PASS" starttime="20170824 14:49:38.073"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:38.270">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:49:38.270" status="PASS" starttime="20170824 14:49:38.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:38.272">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:38.272" status="PASS" starttime="20170824 14:49:38.271"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:38.273">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:38.273" status="PASS" starttime="20170824 14:49:38.273"></status>
</kw>
<status endtime="20170824 14:49:38.273" status="PASS" starttime="20170824 14:49:38.272"></status>
</kw>
<status endtime="20170824 14:49:38.273" status="PASS" starttime="20170824 14:49:38.271"></status>
</kw>
<status endtime="20170824 14:49:38.273" status="PASS" starttime="20170824 14:49:38.270"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:38.340">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:49:38.340">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:38.340" status="PASS" starttime="20170824 14:49:38.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:38.343">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:38.343" status="PASS" starttime="20170824 14:49:38.342"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:38.347">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:38.348" status="PASS" starttime="20170824 14:49:38.344"></status>
</kw>
<status endtime="20170824 14:49:38.348" status="PASS" starttime="20170824 14:49:38.343"></status>
</kw>
<status endtime="20170824 14:49:38.348" status="PASS" starttime="20170824 14:49:38.341"></status>
</kw>
<status endtime="20170824 14:49:38.348" status="PASS" starttime="20170824 14:49:38.341"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:49:38.348">Delete All Sessions</msg>
<status endtime="20170824 14:49:38.349" status="PASS" starttime="20170824 14:49:38.348"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:38.349">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:38.349" status="PASS" starttime="20170824 14:49:38.072"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:38.349">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:38.349" status="PASS" starttime="20170824 14:49:38.349"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:38.350">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:49:38.350">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:49:38.350">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:49:38.350" status="PASS" starttime="20170824 14:49:38.350"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:38.350">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:49:38.351" status="PASS" starttime="20170824 14:49:38.071"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:38.351">${power_state} = On</msg>
<status endtime="20170824 14:49:38.351" status="PASS" starttime="20170824 14:49:38.071"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:49:38.352">Off != On</msg>
<status endtime="20170824 14:49:38.352" status="FAIL" starttime="20170824 14:49:38.351"></status>
</kw>
<status endtime="20170824 14:49:38.352" status="FAIL" starttime="20170824 14:49:38.071"></status>
</kw>
<status endtime="20170824 14:49:38.352" status="FAIL" starttime="20170824 14:49:38.070"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:48.357">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:49:48.357" status="PASS" starttime="20170824 14:49:48.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:48.358">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:49:48.358" status="PASS" starttime="20170824 14:49:48.358"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:48.359">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:49:48.359" status="PASS" starttime="20170824 14:49:48.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:48.359">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:49:48.359" status="PASS" starttime="20170824 14:49:48.359"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:48.574">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:49:48.574" status="PASS" starttime="20170824 14:49:48.360"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:48.574">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:49:48.574">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:48.574" status="PASS" starttime="20170824 14:49:48.360"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:48.575">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:48.575" status="PASS" starttime="20170824 14:49:48.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:48.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:48.576" status="PASS" starttime="20170824 14:49:48.575"></status>
</kw>
<status endtime="20170824 14:49:48.576" status="PASS" starttime="20170824 14:49:48.356"></status>
</kw>
<status endtime="20170824 14:49:48.576" status="PASS" starttime="20170824 14:49:48.356"></status>
</kw>
<status endtime="20170824 14:49:48.576" status="PASS" starttime="20170824 14:49:48.355"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:48.577">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:49:48.577" status="PASS" starttime="20170824 14:49:48.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:48.579">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:48.579" status="PASS" starttime="20170824 14:49:48.578"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:48.580">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:48.580" status="PASS" starttime="20170824 14:49:48.579"></status>
</kw>
<status endtime="20170824 14:49:48.580" status="PASS" starttime="20170824 14:49:48.579"></status>
</kw>
<status endtime="20170824 14:49:48.580" status="PASS" starttime="20170824 14:49:48.577"></status>
</kw>
<status endtime="20170824 14:49:48.580" status="PASS" starttime="20170824 14:49:48.577"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:48.652">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:49:48.652">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:48.652" status="PASS" starttime="20170824 14:49:48.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:48.654">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:48.654" status="PASS" starttime="20170824 14:49:48.653"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:48.655">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:48.655" status="PASS" starttime="20170824 14:49:48.655"></status>
</kw>
<status endtime="20170824 14:49:48.655" status="PASS" starttime="20170824 14:49:48.654"></status>
</kw>
<status endtime="20170824 14:49:48.655" status="PASS" starttime="20170824 14:49:48.653"></status>
</kw>
<status endtime="20170824 14:49:48.655" status="PASS" starttime="20170824 14:49:48.653"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:49:48.656">Delete All Sessions</msg>
<status endtime="20170824 14:49:48.656" status="PASS" starttime="20170824 14:49:48.656"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:48.656">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:48.656" status="PASS" starttime="20170824 14:49:48.354"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:48.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:48.657" status="PASS" starttime="20170824 14:49:48.656"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:48.657">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:49:48.657">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:49:48.657">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:49:48.657" status="PASS" starttime="20170824 14:49:48.657"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:48.658">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:49:48.658" status="PASS" starttime="20170824 14:49:48.354"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:48.658">${power_state} = On</msg>
<status endtime="20170824 14:49:48.658" status="PASS" starttime="20170824 14:49:48.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:49:48.659">Off != On</msg>
<status endtime="20170824 14:49:48.659" status="FAIL" starttime="20170824 14:49:48.658"></status>
</kw>
<status endtime="20170824 14:49:48.659" status="FAIL" starttime="20170824 14:49:48.353"></status>
</kw>
<status endtime="20170824 14:49:48.659" status="FAIL" starttime="20170824 14:49:48.353"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:58.665">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:49:58.665" status="PASS" starttime="20170824 14:49:58.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:58.666">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:49:58.666" status="PASS" starttime="20170824 14:49:58.665"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:58.666">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:49:58.666" status="PASS" starttime="20170824 14:49:58.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:58.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:49:58.667" status="PASS" starttime="20170824 14:49:58.667"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:58.868">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:49:58.868" status="PASS" starttime="20170824 14:49:58.668"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:58.869">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:49:58.869">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:58.869" status="PASS" starttime="20170824 14:49:58.667"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:58.869">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:58.869" status="PASS" starttime="20170824 14:49:58.869"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:58.870">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:58.870" status="PASS" starttime="20170824 14:49:58.870"></status>
</kw>
<status endtime="20170824 14:49:58.870" status="PASS" starttime="20170824 14:49:58.663"></status>
</kw>
<status endtime="20170824 14:49:58.870" status="PASS" starttime="20170824 14:49:58.663"></status>
</kw>
<status endtime="20170824 14:49:58.871" status="PASS" starttime="20170824 14:49:58.662"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:58.871">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 14:49:58.871" status="PASS" starttime="20170824 14:49:58.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:58.873">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:58.873" status="PASS" starttime="20170824 14:49:58.873"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:58.874">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:58.874" status="PASS" starttime="20170824 14:49:58.874"></status>
</kw>
<status endtime="20170824 14:49:58.874" status="PASS" starttime="20170824 14:49:58.873"></status>
</kw>
<status endtime="20170824 14:49:58.875" status="PASS" starttime="20170824 14:49:58.872"></status>
</kw>
<status endtime="20170824 14:49:58.875" status="PASS" starttime="20170824 14:49:58.871"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:58.965">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:49:58.965">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:58.965" status="PASS" starttime="20170824 14:49:58.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:58.967">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:58.967" status="PASS" starttime="20170824 14:49:58.967"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:58.968">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:58.968" status="PASS" starttime="20170824 14:49:58.968"></status>
</kw>
<status endtime="20170824 14:49:58.969" status="PASS" starttime="20170824 14:49:58.967"></status>
</kw>
<status endtime="20170824 14:49:58.969" status="PASS" starttime="20170824 14:49:58.966"></status>
</kw>
<status endtime="20170824 14:49:58.969" status="PASS" starttime="20170824 14:49:58.966"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:49:58.969">Delete All Sessions</msg>
<status endtime="20170824 14:49:58.969" status="PASS" starttime="20170824 14:49:58.969"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:58.969">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:58.969" status="PASS" starttime="20170824 14:49:58.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:58.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:58.970" status="PASS" starttime="20170824 14:49:58.970"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:58.971">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:49:58.971">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:49:58.971">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:49:58.971" status="PASS" starttime="20170824 14:49:58.970"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:58.971">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 14:49:58.971" status="PASS" starttime="20170824 14:49:58.661"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:58.971">${power_state} = On</msg>
<status endtime="20170824 14:49:58.972" status="PASS" starttime="20170824 14:49:58.660"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:49:58.972">Off != On</msg>
<status endtime="20170824 14:49:58.972" status="FAIL" starttime="20170824 14:49:58.972"></status>
</kw>
<status endtime="20170824 14:49:58.972" status="FAIL" starttime="20170824 14:49:58.660"></status>
</kw>
<status endtime="20170824 14:49:58.973" status="FAIL" starttime="20170824 14:49:58.659"></status>
</kw>
<msg level="FAIL" timestamp="20170824 14:49:58.973">Keyword 'Is Host Off' failed after retrying for 6 minutes. The last error was: Off != On</msg>
<status endtime="20170824 14:49:58.973" status="FAIL" starttime="20170824 14:43:49.388"></status>
</kw>
<status endtime="20170824 14:49:58.973" status="FAIL" starttime="20170824 14:43:45.746"></status>
</kw>
<status endtime="20170824 14:49:58.973" status="FAIL" starttime="20170824 14:43:45.745"></status>
</kw>
<status endtime="20170824 14:49:58.973" status="FAIL" starttime="20170824 14:41:16.549"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:58.978">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:49:58.979" status="PASS" starttime="20170824 14:49:58.978"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:58.979">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:49:58.979" status="PASS" starttime="20170824 14:49:58.979"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:58.980">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:49:58.980" status="PASS" starttime="20170824 14:49:58.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:58.980">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:49:58.981" status="PASS" starttime="20170824 14:49:58.980"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:59.184">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:49:59.184" status="PASS" starttime="20170824 14:49:58.981"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:59.184">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:49:59.184">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:59.184" status="PASS" starttime="20170824 14:49:58.981"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:59.185">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:59.185" status="PASS" starttime="20170824 14:49:59.184"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:59.185">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:59.186" status="PASS" starttime="20170824 14:49:59.185"></status>
</kw>
<status endtime="20170824 14:49:59.186" status="PASS" starttime="20170824 14:49:58.977"></status>
</kw>
<status endtime="20170824 14:49:59.186" status="PASS" starttime="20170824 14:49:58.977"></status>
</kw>
<status endtime="20170824 14:49:59.186" status="PASS" starttime="20170824 14:49:58.976"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:59.186">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 14:49:59.187" status="PASS" starttime="20170824 14:49:59.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:59.189">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:59.189" status="PASS" starttime="20170824 14:49:59.188"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:59.190">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 14:49:59.190" status="PASS" starttime="20170824 14:49:59.189"></status>
</kw>
<status endtime="20170824 14:49:59.190" status="PASS" starttime="20170824 14:49:59.189"></status>
</kw>
<status endtime="20170824 14:49:59.190" status="PASS" starttime="20170824 14:49:59.187"></status>
</kw>
<status endtime="20170824 14:49:59.190" status="PASS" starttime="20170824 14:49:59.187"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:59.292">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:49:59.292">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:59.292" status="PASS" starttime="20170824 14:49:59.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:59.294">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:59.294" status="PASS" starttime="20170824 14:49:59.293"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:59.295">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 14:49:59.295" status="PASS" starttime="20170824 14:49:59.295"></status>
</kw>
<status endtime="20170824 14:49:59.295" status="PASS" starttime="20170824 14:49:59.294"></status>
</kw>
<status endtime="20170824 14:49:59.295" status="PASS" starttime="20170824 14:49:59.293"></status>
</kw>
<status endtime="20170824 14:49:59.295" status="PASS" starttime="20170824 14:49:59.293"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:49:59.296">Delete All Sessions</msg>
<status endtime="20170824 14:49:59.296" status="PASS" starttime="20170824 14:49:59.296"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:59.296">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:49:59.296" status="PASS" starttime="20170824 14:49:58.976"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:59.297">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:49:59.297" status="PASS" starttime="20170824 14:49:59.296"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:59.297">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:49:59.297">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170824 14:49:59.297">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170824 14:49:59.297" status="PASS" starttime="20170824 14:49:59.297"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:59.298">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 14:49:59.298" status="PASS" starttime="20170824 14:49:58.975"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:59.298">${host_state} = Running</msg>
<status endtime="20170824 14:49:59.298" status="PASS" starttime="20170824 14:49:58.975"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170824 14:49:59.299">Running != Quiesced</msg>
<status endtime="20170824 14:49:59.299" status="FAIL" starttime="20170824 14:49:59.299"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:59.299">${status} = False</msg>
<status endtime="20170824 14:49:59.299" status="PASS" starttime="20170824 14:49:59.298"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:49:59.300">${status} = False</msg>
<status endtime="20170824 14:49:59.300" status="PASS" starttime="20170824 14:49:58.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:49:59.341">Length is 10</msg>
<status endtime="20170824 14:49:59.341" status="PASS" starttime="20170824 14:49:59.341"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:49:59.349">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170824 14:50:02.351">${RC} = 0</msg>
<msg level="INFO" timestamp="20170824 14:50:02.351">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.844 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.613 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status endtime="20170824 14:50:02.351" status="PASS" starttime="20170824 14:49:59.341"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:02.354">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.844 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.613 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.583 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.796 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.583/0.709/0.844/0.112 ms</msg>
<status endtime="20170824 14:50:02.354" status="PASS" starttime="20170824 14:50:02.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170824 14:50:02.355" status="PASS" starttime="20170824 14:50:02.355"></status>
</kw>
<status endtime="20170824 14:50:02.355" status="PASS" starttime="20170824 14:49:59.340"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.376">${cur_time} = 2017-08-24 14:50:02:376194</msg>
<status endtime="20170824 14:50:02.376" status="PASS" starttime="20170824 14:50:02.376"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.377">${cur_time} = 20170824145002376194</msg>
<status endtime="20170824 14:50:02.377" status="PASS" starttime="20170824 14:50:02.377"></status>
</kw>
<status endtime="20170824 14:50:02.377" status="PASS" starttime="20170824 14:50:02.375"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:02.378">${FFDC_TIME} = 20170824145002376194</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.402">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170824 14:50:02.402" status="PASS" starttime="20170824 14:50:02.401"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.402">${suite_name} = 20170824145002376194_TestsTestBasicPoweron</msg>
<status endtime="20170824 14:50:02.402" status="PASS" starttime="20170824 14:50:02.402"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.403">${test_name} = PowerOnTest</msg>
<status endtime="20170824 14:50:02.403" status="PASS" starttime="20170824 14:50:02.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.404">${test_name} = 20170824145002376194_PowerOnTest</msg>
<status endtime="20170824 14:50:02.404" status="PASS" starttime="20170824 14:50:02.403"></status>
</kw>
<status endtime="20170824 14:50:02.404" status="PASS" starttime="20170824 14:50:02.401"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:02.404">${FFDC_DIR_PATH} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170824 14:50:02.404">${FFDC_PREFIX} = 20170824145002376194_</msg>
<msg level="INFO" timestamp="20170824 14:50:02.432">${LOG_PREFIX} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.434">Created directory '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.434" status="PASS" starttime="20170824 14:50:02.433"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:02.438">${FFDC_FILE_PATH} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.470">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.471" status="PASS" starttime="20170824 14:50:02.470"></status>
</kw>
<status endtime="20170824 14:50:02.471" status="PASS" starttime="20170824 14:50:02.469"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.472">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.472" status="PASS" starttime="20170824 14:50:02.471"></status>
</kw>
<status endtime="20170824 14:50:02.474" status="PASS" starttime="20170824 14:50:02.471"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.476">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.476" status="PASS" starttime="20170824 14:50:02.475"></status>
</kw>
<status endtime="20170824 14:50:02.476" status="PASS" starttime="20170824 14:50:02.474"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.477">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.477" status="PASS" starttime="20170824 14:50:02.477"></status>
</kw>
<status endtime="20170824 14:50:02.478" status="PASS" starttime="20170824 14:50:02.476"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.479">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.479" status="PASS" starttime="20170824 14:50:02.478"></status>
</kw>
<status endtime="20170824 14:50:02.479" status="PASS" starttime="20170824 14:50:02.478"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.480">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.480" status="PASS" starttime="20170824 14:50:02.480"></status>
</kw>
<status endtime="20170824 14:50:02.480" status="PASS" starttime="20170824 14:50:02.479"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.481">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.482" status="PASS" starttime="20170824 14:50:02.481"></status>
</kw>
<status endtime="20170824 14:50:02.482" status="PASS" starttime="20170824 14:50:02.480"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.483">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.483" status="PASS" starttime="20170824 14:50:02.483"></status>
</kw>
<status endtime="20170824 14:50:02.483" status="PASS" starttime="20170824 14:50:02.482"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.484">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.484" status="PASS" starttime="20170824 14:50:02.484"></status>
</kw>
<status endtime="20170824 14:50:02.484" status="PASS" starttime="20170824 14:50:02.483"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.486">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.486" status="PASS" starttime="20170824 14:50:02.485"></status>
</kw>
<status endtime="20170824 14:50:02.486" status="PASS" starttime="20170824 14:50:02.485"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.487">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.487" status="PASS" starttime="20170824 14:50:02.487"></status>
</kw>
<status endtime="20170824 14:50:02.487" status="PASS" starttime="20170824 14:50:02.486"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.489">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.489" status="PASS" starttime="20170824 14:50:02.488"></status>
</kw>
<status endtime="20170824 14:50:02.489" status="PASS" starttime="20170824 14:50:02.487"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.490">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.490" status="PASS" starttime="20170824 14:50:02.490"></status>
</kw>
<status endtime="20170824 14:50:02.490" status="PASS" starttime="20170824 14:50:02.489"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.529">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:02.530">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170824 14:50:02.608">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170824 14:50:02.622">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170824 14:50:02.622">${stderr} = </msg>
<msg level="INFO" timestamp="20170824 14:50:02.622">${rc} = 0</msg>
<status endtime="20170824 14:50:02.622" status="PASS" starttime="20170824 14:50:02.491"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:02.623">Length is 0</msg>
<status endtime="20170824 14:50:02.623" status="PASS" starttime="20170824 14:50:02.623"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:02.623">Length is 11</msg>
<status endtime="20170824 14:50:02.623" status="PASS" starttime="20170824 14:50:02.623"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:02.624">${model_name} = Witherspoon</msg>
<status endtime="20170824 14:50:02.624" status="PASS" starttime="20170824 14:50:02.490"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.626">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.626" status="PASS" starttime="20170824 14:50:02.626"></status>
</kw>
<status endtime="20170824 14:50:02.626" status="PASS" starttime="20170824 14:50:02.624"></status>
</kw>
<status endtime="20170824 14:50:02.626" status="PASS" starttime="20170824 14:50:02.485"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.628">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.628" status="PASS" starttime="20170824 14:50:02.627"></status>
</kw>
<status endtime="20170824 14:50:02.628" status="PASS" starttime="20170824 14:50:02.627"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.628">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170824 14:50:02.628" status="PASS" starttime="20170824 14:50:02.628"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.630">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.630" status="PASS" starttime="20170824 14:50:02.629"></status>
</kw>
<status endtime="20170824 14:50:02.630" status="PASS" starttime="20170824 14:50:02.629"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.631">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.631" status="PASS" starttime="20170824 14:50:02.631"></status>
</kw>
<status endtime="20170824 14:50:02.631" status="PASS" starttime="20170824 14:50:02.630"></status>
</kw>
<status endtime="20170824 14:50:02.631" status="PASS" starttime="20170824 14:50:02.629"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.634">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.634" status="PASS" starttime="20170824 14:50:02.634"></status>
</kw>
<status endtime="20170824 14:50:02.634" status="PASS" starttime="20170824 14:50:02.632"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.636">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.636" status="PASS" starttime="20170824 14:50:02.635"></status>
</kw>
<status endtime="20170824 14:50:02.636" status="PASS" starttime="20170824 14:50:02.635"></status>
</kw>
<status endtime="20170824 14:50:02.636" status="PASS" starttime="20170824 14:50:02.631"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.637">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.637" status="PASS" starttime="20170824 14:50:02.637"></status>
</kw>
<status endtime="20170824 14:50:02.637" status="PASS" starttime="20170824 14:50:02.636"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.638">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.639" status="PASS" starttime="20170824 14:50:02.638"></status>
</kw>
<status endtime="20170824 14:50:02.639" status="PASS" starttime="20170824 14:50:02.637"></status>
</kw>
<status endtime="20170824 14:50:02.639" status="PASS" starttime="20170824 14:50:02.636"></status>
</kw>
<status endtime="20170824 14:50:02.639" status="PASS" starttime="20170824 14:50:02.628"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.640">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.640" status="PASS" starttime="20170824 14:50:02.639"></status>
</kw>
<status endtime="20170824 14:50:02.640" status="PASS" starttime="20170824 14:50:02.639"></status>
</kw>
<status endtime="20170824 14:50:02.640" status="PASS" starttime="20170824 14:50:02.469"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.650">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170824 14:50:02.650" status="PASS" starttime="20170824 14:50:02.649"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.651">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('SEL Log', 'Collect eSEL Log') | ('Ge...</msg>
<status endtime="20170824 14:50:02.651" status="PASS" starttime="20170824 14:50:02.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170824 14:50:02.653" status="PASS" starttime="20170824 14:50:02.652"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:02.653">@{ffdc_function_list} = [ BMC Specific Files | FFDC Generic Report | OS FFDC | Core Files | SEL Log | Get Request FFDC | Sys Inventory Files ]</msg>
<status endtime="20170824 14:50:02.653" status="PASS" starttime="20170824 14:50:02.652"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 14:50:02.655" status="PASS" starttime="20170824 14:50:02.654"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:02.655">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:02.655">${ret_values} = None</msg>
<status endtime="20170824 14:50:02.655" status="PASS" starttime="20170824 14:50:02.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 14:50:02.655" status="PASS" starttime="20170824 14:50:02.655"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.698">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170824 14:50:02.698" status="PASS" starttime="20170824 14:50:02.698"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.700">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | (...</msg>
<status endtime="20170824 14:50:02.700" status="PASS" starttime="20170824 14:50:02.699"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.701">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_dmesg.txt</msg>
<status endtime="20170824 14:50:02.701" status="PASS" starttime="20170824 14:50:02.700"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170824 14:50:02.703" status="PASS" starttime="20170824 14:50:02.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.703">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170824 14:50:02.703" status="PASS" starttime="20170824 14:50:02.703"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:02.820">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:02.821">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170824 14:50:02.888">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:02.888" status="PASS" starttime="20170824 14:50:02.753"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:02.888">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:02.888">${ret_values} = (u'[    2.640000] aspeed-smc 1e620000.flash-controller: CE0 window [ 0x20000000 - 0x22000000 ] 32MB\n[    2.660000] aspeed-smc 1e620000.flash-controller: CE1 window [ 0x22000000 - 0x2a000000 ] 128MB\n...</msg>
<status endtime="20170824 14:50:02.888" status="PASS" starttime="20170824 14:50:02.704"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.889">${stdout} = [    2.640000] aspeed-smc 1e620000.flash-controller: CE0 window [ 0x20000000 - 0x22000000 ] 32MB
[    2.660000] aspeed-smc 1e620000.flash-controller: CE1 window [ 0x22000000 - 0x2a000000 ] 128MB
[    ...</msg>
<status endtime="20170824 14:50:02.889" status="PASS" starttime="20170824 14:50:02.889"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.890">${stderr} = </msg>
<status endtime="20170824 14:50:02.890" status="PASS" starttime="20170824 14:50:02.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:02.897">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_dmesg.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:02.897" status="PASS" starttime="20170824 14:50:02.896"></status>
</kw>
<status endtime="20170824 14:50:02.897" status="PASS" starttime="20170824 14:50:02.895"></status>
</kw>
<status endtime="20170824 14:50:02.897" status="PASS" starttime="20170824 14:50:02.890"></status>
</kw>
<status endtime="20170824 14:50:02.897" status="PASS" starttime="20170824 14:50:02.701"></status>
</kw>
<status endtime="20170824 14:50:02.897" status="PASS" starttime="20170824 14:50:02.700"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.898">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170824 14:50:02.898" status="PASS" starttime="20170824 14:50:02.898"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170824 14:50:02.899" status="PASS" starttime="20170824 14:50:02.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:02.900">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170824 14:50:02.900" status="PASS" starttime="20170824 14:50:02.900"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:03.026">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:03.027">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170824 14:50:03.699">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:03.699" status="PASS" starttime="20170824 14:50:02.949"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:03.700">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:03.701">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 24 14:50 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 24 14:50 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170824 14:50:03.701" status="PASS" starttime="20170824 14:50:02.900"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:03.702">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 24 14:50 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 24 14:50 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170824 14:50:03.702" status="PASS" starttime="20170824 14:50:03.701"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:03.702">${stderr} = ls: /proc/1794/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170824 14:50:03.702" status="PASS" starttime="20170824 14:50:03.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:03.710">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:03.710" status="PASS" starttime="20170824 14:50:03.709"></status>
</kw>
<status endtime="20170824 14:50:03.710" status="PASS" starttime="20170824 14:50:03.708"></status>
</kw>
<status endtime="20170824 14:50:03.710" status="PASS" starttime="20170824 14:50:03.703"></status>
</kw>
<status endtime="20170824 14:50:03.710" status="PASS" starttime="20170824 14:50:02.898"></status>
</kw>
<status endtime="20170824 14:50:03.710" status="PASS" starttime="20170824 14:50:02.897"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:03.711">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_journalctl.txt</msg>
<status endtime="20170824 14:50:03.711" status="PASS" starttime="20170824 14:50:03.710"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170824 14:50:03.712" status="PASS" starttime="20170824 14:50:03.712"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:03.713">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170824 14:50:03.713" status="PASS" starttime="20170824 14:50:03.712"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:03.816">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:03.816">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170824 14:50:05.802">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:05.802" status="PASS" starttime="20170824 14:50:03.759"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:05.802">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:05.805">${ret_values} = (u'-- Logs begin at Thu 2017-08-24 14:37:59 UTC, end at Thu 2017-08-24 14:50:07 UTC. --\nAug 24 14:37:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 24 14:37:59 witherspoon kernel: Linu...</msg>
<status endtime="20170824 14:50:05.805" status="PASS" starttime="20170824 14:50:03.713"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:05.806">${stdout} = -- Logs begin at Thu 2017-08-24 14:37:59 UTC, end at Thu 2017-08-24 14:50:07 UTC. --
Aug 24 14:37:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 24 14:37:59 witherspoon kernel: Linux ver...</msg>
<status endtime="20170824 14:50:05.806" status="PASS" starttime="20170824 14:50:05.805"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:05.807">${stderr} = </msg>
<status endtime="20170824 14:50:05.807" status="PASS" starttime="20170824 14:50:05.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:05.815">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_journalctl.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:05.815" status="PASS" starttime="20170824 14:50:05.814"></status>
</kw>
<status endtime="20170824 14:50:05.815" status="PASS" starttime="20170824 14:50:05.813"></status>
</kw>
<status endtime="20170824 14:50:05.815" status="PASS" starttime="20170824 14:50:05.807"></status>
</kw>
<status endtime="20170824 14:50:05.816" status="PASS" starttime="20170824 14:50:03.711"></status>
</kw>
<status endtime="20170824 14:50:05.816" status="PASS" starttime="20170824 14:50:03.710"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:05.816">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_proc_list.txt</msg>
<status endtime="20170824 14:50:05.816" status="PASS" starttime="20170824 14:50:05.816"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170824 14:50:05.818" status="PASS" starttime="20170824 14:50:05.817"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:05.818">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170824 14:50:05.819" status="PASS" starttime="20170824 14:50:05.818"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:05.928">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:05.929">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170824 14:50:06.218">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:06.218" status="PASS" starttime="20170824 14:50:05.868"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:06.218">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:06.219">${ret_values} = (u'Mem: 218332K used, 213916K free, 14660K shrd, 31252K buff, 91788K cached\nCPU:  15% usr   7% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.30 1.12 1.07 1/148 1796\n  PID  PPID ...</msg>
<status endtime="20170824 14:50:06.219" status="PASS" starttime="20170824 14:50:05.819"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.219">${stdout} = Mem: 218332K used, 213916K free, 14660K shrd, 31252K buff, 91788K cached
CPU:  15% usr   7% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.30 1.12 1.07 1/148 1796
  PID  PPID USER  ...</msg>
<status endtime="20170824 14:50:06.219" status="PASS" starttime="20170824 14:50:06.219"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.220">${stderr} = </msg>
<status endtime="20170824 14:50:06.220" status="PASS" starttime="20170824 14:50:06.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:06.227">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_proc_list.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:06.227" status="PASS" starttime="20170824 14:50:06.226"></status>
</kw>
<status endtime="20170824 14:50:06.227" status="PASS" starttime="20170824 14:50:06.225"></status>
</kw>
<status endtime="20170824 14:50:06.227" status="PASS" starttime="20170824 14:50:06.220"></status>
</kw>
<status endtime="20170824 14:50:06.227" status="PASS" starttime="20170824 14:50:05.817"></status>
</kw>
<status endtime="20170824 14:50:06.227" status="PASS" starttime="20170824 14:50:05.816"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.228">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_meminfo.txt</msg>
<status endtime="20170824 14:50:06.228" status="PASS" starttime="20170824 14:50:06.228"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170824 14:50:06.229" status="PASS" starttime="20170824 14:50:06.229"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.230">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170824 14:50:06.230" status="PASS" starttime="20170824 14:50:06.230"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:06.353">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:06.354">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170824 14:50:06.402">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:06.402" status="PASS" starttime="20170824 14:50:06.286"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:06.402">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:06.402">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          213916 kB\nMemAvailable:     321612 kB\nBuffers:           31252 kB\nCached:            91788 kB\nSwapCached:            0 kB\nActive:           12707...</msg>
<status endtime="20170824 14:50:06.402" status="PASS" starttime="20170824 14:50:06.231"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.403">${stdout} = MemTotal:         432248 kB
MemFree:          213916 kB
MemAvailable:     321612 kB
Buffers:           31252 kB
Cached:            91788 kB
SwapCached:            0 kB
Active:           127072 kB
Inac...</msg>
<status endtime="20170824 14:50:06.403" status="PASS" starttime="20170824 14:50:06.403"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.404">${stderr} = </msg>
<status endtime="20170824 14:50:06.404" status="PASS" starttime="20170824 14:50:06.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:06.411">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_meminfo.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:06.411" status="PASS" starttime="20170824 14:50:06.410"></status>
</kw>
<status endtime="20170824 14:50:06.411" status="PASS" starttime="20170824 14:50:06.409"></status>
</kw>
<status endtime="20170824 14:50:06.411" status="PASS" starttime="20170824 14:50:06.404"></status>
</kw>
<status endtime="20170824 14:50:06.411" status="PASS" starttime="20170824 14:50:06.228"></status>
</kw>
<status endtime="20170824 14:50:06.411" status="PASS" starttime="20170824 14:50:06.227"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.412">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_procinfo.txt</msg>
<status endtime="20170824 14:50:06.412" status="PASS" starttime="20170824 14:50:06.411"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170824 14:50:06.413" status="PASS" starttime="20170824 14:50:06.413"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.414">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170824 14:50:06.414" status="PASS" starttime="20170824 14:50:06.413"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:06.518">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:06.519">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170824 14:50:06.579">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:06.579" status="PASS" starttime="20170824 14:50:06.463"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:06.579">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:06.579">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170824 14:50:06.579" status="PASS" starttime="20170824 14:50:06.414"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.580">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170824 14:50:06.580" status="PASS" starttime="20170824 14:50:06.579"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.580">${stderr} = </msg>
<status endtime="20170824 14:50:06.580" status="PASS" starttime="20170824 14:50:06.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:06.589">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_procinfo.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:06.589" status="PASS" starttime="20170824 14:50:06.587"></status>
</kw>
<status endtime="20170824 14:50:06.589" status="PASS" starttime="20170824 14:50:06.586"></status>
</kw>
<status endtime="20170824 14:50:06.589" status="PASS" starttime="20170824 14:50:06.581"></status>
</kw>
<status endtime="20170824 14:50:06.589" status="PASS" starttime="20170824 14:50:06.412"></status>
</kw>
<status endtime="20170824 14:50:06.589" status="PASS" starttime="20170824 14:50:06.411"></status>
</kw>
<status endtime="20170824 14:50:06.589" status="PASS" starttime="20170824 14:50:02.700"></status>
</kw>
<status endtime="20170824 14:50:06.589" status="PASS" starttime="20170824 14:50:02.699"></status>
</kw>
<status endtime="20170824 14:50:06.589" status="PASS" starttime="20170824 14:50:02.699"></status>
</kw>
<status endtime="20170824 14:50:06.589" status="PASS" starttime="20170824 14:50:02.698"></status>
</kw>
<status endtime="20170824 14:50:06.590" status="PASS" starttime="20170824 14:50:02.697"></status>
</kw>
<status endtime="20170824 14:50:06.590" status="PASS" starttime="20170824 14:50:02.656"></status>
</kw>
<status endtime="20170824 14:50:06.590" status="PASS" starttime="20170824 14:50:02.653"></status>
</kw>
<status endtime="20170824 14:50:06.590" status="PASS" starttime="20170824 14:50:02.653"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 14:50:06.592" status="PASS" starttime="20170824 14:50:06.591"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:06.592">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:06.592">${ret_values} = None</msg>
<status endtime="20170824 14:50:06.592" status="PASS" starttime="20170824 14:50:06.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 14:50:06.592" status="PASS" starttime="20170824 14:50:06.592"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.634">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170824 14:50:06.634" status="PASS" starttime="20170824 14:50:06.634"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.635">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170824 14:50:06.635" status="PASS" starttime="20170824 14:50:06.635"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:06.640">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170824 14:50:06.640" status="PASS" starttime="20170824 14:50:06.635"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:06.644">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:06.644" status="PASS" starttime="20170824 14:50:06.643"></status>
</kw>
<status endtime="20170824 14:50:06.644" status="PASS" starttime="20170824 14:50:06.642"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:06.645">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:06.645" status="PASS" starttime="20170824 14:50:06.645"></status>
</kw>
<status endtime="20170824 14:50:06.645" status="PASS" starttime="20170824 14:50:06.644"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:06.646">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:06.646" status="PASS" starttime="20170824 14:50:06.646"></status>
</kw>
<status endtime="20170824 14:50:06.646" status="PASS" starttime="20170824 14:50:06.645"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:06.648">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:06.648" status="PASS" starttime="20170824 14:50:06.647"></status>
</kw>
<status endtime="20170824 14:50:06.648" status="PASS" starttime="20170824 14:50:06.647"></status>
</kw>
<status endtime="20170824 14:50:06.648" status="PASS" starttime="20170824 14:50:06.642"></status>
</kw>
<status endtime="20170824 14:50:06.648" status="PASS" starttime="20170824 14:50:06.642"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.649">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status endtime="20170824 14:50:06.649" status="PASS" starttime="20170824 14:50:06.648"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:06.763">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:06.763">Executing command 'cat /etc/timestamp'.</msg>
<msg level="INFO" timestamp="20170824 14:50:06.841">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:06.841" status="PASS" starttime="20170824 14:50:06.702"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:06.842">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:06.842">${ret_values} = (u'20170824133258', u'', 0)</msg>
<status endtime="20170824 14:50:06.842" status="PASS" starttime="20170824 14:50:06.649"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.842">${stdout} = 20170824133258</msg>
<status endtime="20170824 14:50:06.842" status="PASS" starttime="20170824 14:50:06.842"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.843">${stderr} = </msg>
<status endtime="20170824 14:50:06.843" status="PASS" starttime="20170824 14:50:06.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:06.850">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:06.850" status="PASS" starttime="20170824 14:50:06.849"></status>
</kw>
<status endtime="20170824 14:50:06.850" status="PASS" starttime="20170824 14:50:06.848"></status>
</kw>
<status endtime="20170824 14:50:06.850" status="PASS" starttime="20170824 14:50:06.843"></status>
</kw>
<status endtime="20170824 14:50:06.850" status="PASS" starttime="20170824 14:50:06.641"></status>
</kw>
<status endtime="20170824 14:50:06.850" status="PASS" starttime="20170824 14:50:06.641"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:06.853">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:06.853" status="PASS" starttime="20170824 14:50:06.853"></status>
</kw>
<status endtime="20170824 14:50:06.853" status="PASS" starttime="20170824 14:50:06.852"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:06.854">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:06.855" status="PASS" starttime="20170824 14:50:06.854"></status>
</kw>
<status endtime="20170824 14:50:06.855" status="PASS" starttime="20170824 14:50:06.853"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:06.856">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:06.856" status="PASS" starttime="20170824 14:50:06.855"></status>
</kw>
<status endtime="20170824 14:50:06.856" status="PASS" starttime="20170824 14:50:06.855"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:06.857">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:06.857" status="PASS" starttime="20170824 14:50:06.857"></status>
</kw>
<status endtime="20170824 14:50:06.857" status="PASS" starttime="20170824 14:50:06.856"></status>
</kw>
<status endtime="20170824 14:50:06.857" status="PASS" starttime="20170824 14:50:06.851"></status>
</kw>
<status endtime="20170824 14:50:06.857" status="PASS" starttime="20170824 14:50:06.851"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:06.858">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170824 14:50:06.858" status="PASS" starttime="20170824 14:50:06.858"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:06.969">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:06.969">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170824 14:50:07.036">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:07.036" status="PASS" starttime="20170824 14:50:06.907"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:07.036">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:07.036">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.9-41"\nVERSION_ID="v1.99.9-41-g54e9afc"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status endtime="20170824 14:50:07.036" status="PASS" starttime="20170824 14:50:06.858"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:07.037">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.9-41"
VERSION_ID="v1.99.9-41-g54e9afc"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status endtime="20170824 14:50:07.037" status="PASS" starttime="20170824 14:50:07.037"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:07.038">${stderr} = </msg>
<status endtime="20170824 14:50:07.038" status="PASS" starttime="20170824 14:50:07.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:07.044">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:07.044" status="PASS" starttime="20170824 14:50:07.044"></status>
</kw>
<status endtime="20170824 14:50:07.045" status="PASS" starttime="20170824 14:50:07.043"></status>
</kw>
<status endtime="20170824 14:50:07.045" status="PASS" starttime="20170824 14:50:07.038"></status>
</kw>
<status endtime="20170824 14:50:07.045" status="PASS" starttime="20170824 14:50:06.850"></status>
</kw>
<status endtime="20170824 14:50:07.045" status="PASS" starttime="20170824 14:50:06.850"></status>
</kw>
<status endtime="20170824 14:50:07.045" status="PASS" starttime="20170824 14:50:06.640"></status>
</kw>
<status endtime="20170824 14:50:07.045" status="PASS" starttime="20170824 14:50:06.634"></status>
</kw>
<status endtime="20170824 14:50:07.045" status="PASS" starttime="20170824 14:50:06.634"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:07.046">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170824 14:50:07.046" status="PASS" starttime="20170824 14:50:07.046"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:07.047">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170824 14:50:07.047" status="PASS" starttime="20170824 14:50:07.046"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:07.050">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:07.050" status="PASS" starttime="20170824 14:50:07.049"></status>
</kw>
<status endtime="20170824 14:50:07.050" status="PASS" starttime="20170824 14:50:07.049"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:07.051">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:07.051" status="PASS" starttime="20170824 14:50:07.051"></status>
</kw>
<status endtime="20170824 14:50:07.051" status="PASS" starttime="20170824 14:50:07.050"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:07.053">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:07.053" status="PASS" starttime="20170824 14:50:07.052"></status>
</kw>
<status endtime="20170824 14:50:07.053" status="PASS" starttime="20170824 14:50:07.052"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:07.054">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:07.054" status="PASS" starttime="20170824 14:50:07.053"></status>
</kw>
<status endtime="20170824 14:50:07.054" status="PASS" starttime="20170824 14:50:07.053"></status>
</kw>
<status endtime="20170824 14:50:07.054" status="PASS" starttime="20170824 14:50:07.048"></status>
</kw>
<status endtime="20170824 14:50:07.054" status="PASS" starttime="20170824 14:50:07.048"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:07.055">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170824 14:50:07.055" status="PASS" starttime="20170824 14:50:07.054"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:07.167">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:07.168">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170824 14:50:08.631">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:08.631" status="PASS" starttime="20170824 14:50:07.104"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:08.632">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:08.632">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status endtime="20170824 14:50:08.632" status="PASS" starttime="20170824 14:50:07.055"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:08.632">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status endtime="20170824 14:50:08.633" status="PASS" starttime="20170824 14:50:08.632"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:08.633">${stderr} = </msg>
<status endtime="20170824 14:50:08.633" status="PASS" starttime="20170824 14:50:08.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:08.642">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:08.642" status="PASS" starttime="20170824 14:50:08.641"></status>
</kw>
<status endtime="20170824 14:50:08.642" status="PASS" starttime="20170824 14:50:08.640"></status>
</kw>
<status endtime="20170824 14:50:08.642" status="PASS" starttime="20170824 14:50:08.633"></status>
</kw>
<status endtime="20170824 14:50:08.642" status="PASS" starttime="20170824 14:50:07.047"></status>
</kw>
<status endtime="20170824 14:50:08.642" status="PASS" starttime="20170824 14:50:07.047"></status>
</kw>
<status endtime="20170824 14:50:08.642" status="PASS" starttime="20170824 14:50:07.047"></status>
</kw>
<status endtime="20170824 14:50:08.642" status="PASS" starttime="20170824 14:50:07.045"></status>
</kw>
<status endtime="20170824 14:50:08.642" status="PASS" starttime="20170824 14:50:07.045"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:08.644">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status endtime="20170824 14:50:08.644" status="PASS" starttime="20170824 14:50:08.643"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:08.644">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170824 14:50:08.644" status="PASS" starttime="20170824 14:50:08.644"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:08.647">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:08.647" status="PASS" starttime="20170824 14:50:08.647"></status>
</kw>
<status endtime="20170824 14:50:08.648" status="PASS" starttime="20170824 14:50:08.646"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:08.649">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:08.649" status="PASS" starttime="20170824 14:50:08.648"></status>
</kw>
<status endtime="20170824 14:50:08.649" status="PASS" starttime="20170824 14:50:08.648"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:08.650">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:08.650" status="PASS" starttime="20170824 14:50:08.650"></status>
</kw>
<status endtime="20170824 14:50:08.650" status="PASS" starttime="20170824 14:50:08.649"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:08.651">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:08.651" status="PASS" starttime="20170824 14:50:08.651"></status>
</kw>
<status endtime="20170824 14:50:08.652" status="PASS" starttime="20170824 14:50:08.650"></status>
</kw>
<status endtime="20170824 14:50:08.652" status="PASS" starttime="20170824 14:50:08.646"></status>
</kw>
<status endtime="20170824 14:50:08.652" status="PASS" starttime="20170824 14:50:08.645"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:08.652">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170824 14:50:08.653" status="PASS" starttime="20170824 14:50:08.652"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:08.761">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:08.762">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170824 14:50:08.823">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:08.823" status="PASS" starttime="20170824 14:50:08.701"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:08.823">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:08.823">${ret_values} = (u' 14:50:16 up 12 min,  load average: 0.35, 1.12, 1.06', u'', 0)</msg>
<status endtime="20170824 14:50:08.823" status="PASS" starttime="20170824 14:50:08.653"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:08.824">${stdout} =  14:50:16 up 12 min,  load average: 0.35, 1.12, 1.06</msg>
<status endtime="20170824 14:50:08.824" status="PASS" starttime="20170824 14:50:08.824"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:08.824">${stderr} = </msg>
<status endtime="20170824 14:50:08.824" status="PASS" starttime="20170824 14:50:08.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:08.831">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:08.831" status="PASS" starttime="20170824 14:50:08.831"></status>
</kw>
<status endtime="20170824 14:50:08.831" status="PASS" starttime="20170824 14:50:08.830"></status>
</kw>
<status endtime="20170824 14:50:08.831" status="PASS" starttime="20170824 14:50:08.825"></status>
</kw>
<status endtime="20170824 14:50:08.832" status="PASS" starttime="20170824 14:50:08.645"></status>
</kw>
<status endtime="20170824 14:50:08.832" status="PASS" starttime="20170824 14:50:08.645"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:08.835">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:08.835" status="PASS" starttime="20170824 14:50:08.834"></status>
</kw>
<status endtime="20170824 14:50:08.835" status="PASS" starttime="20170824 14:50:08.834"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:08.836">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:08.836" status="PASS" starttime="20170824 14:50:08.836"></status>
</kw>
<status endtime="20170824 14:50:08.836" status="PASS" starttime="20170824 14:50:08.835"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:08.837">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:08.838" status="PASS" starttime="20170824 14:50:08.837"></status>
</kw>
<status endtime="20170824 14:50:08.838" status="PASS" starttime="20170824 14:50:08.836"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:08.839">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:08.839" status="PASS" starttime="20170824 14:50:08.838"></status>
</kw>
<status endtime="20170824 14:50:08.839" status="PASS" starttime="20170824 14:50:08.838"></status>
</kw>
<status endtime="20170824 14:50:08.839" status="PASS" starttime="20170824 14:50:08.833"></status>
</kw>
<status endtime="20170824 14:50:08.839" status="PASS" starttime="20170824 14:50:08.833"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:08.840">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170824 14:50:08.840" status="PASS" starttime="20170824 14:50:08.839"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:08.943">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:08.943">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170824 14:50:09.002">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:09.002" status="PASS" starttime="20170824 14:50:08.886"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:09.002">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:09.002">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170824 14:50:09.002" status="PASS" starttime="20170824 14:50:08.840"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:09.003">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status endtime="20170824 14:50:09.003" status="PASS" starttime="20170824 14:50:09.002"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:09.003">${stderr} = </msg>
<status endtime="20170824 14:50:09.003" status="PASS" starttime="20170824 14:50:09.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:09.010">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:09.010" status="PASS" starttime="20170824 14:50:09.009"></status>
</kw>
<status endtime="20170824 14:50:09.010" status="PASS" starttime="20170824 14:50:09.009"></status>
</kw>
<status endtime="20170824 14:50:09.010" status="PASS" starttime="20170824 14:50:09.004"></status>
</kw>
<status endtime="20170824 14:50:09.010" status="PASS" starttime="20170824 14:50:08.832"></status>
</kw>
<status endtime="20170824 14:50:09.010" status="PASS" starttime="20170824 14:50:08.832"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:09.013">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:09.013" status="PASS" starttime="20170824 14:50:09.013"></status>
</kw>
<status endtime="20170824 14:50:09.013" status="PASS" starttime="20170824 14:50:09.012"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:09.015">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:09.015" status="PASS" starttime="20170824 14:50:09.014"></status>
</kw>
<status endtime="20170824 14:50:09.015" status="PASS" starttime="20170824 14:50:09.014"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:09.016">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:09.016" status="PASS" starttime="20170824 14:50:09.016"></status>
</kw>
<status endtime="20170824 14:50:09.016" status="PASS" starttime="20170824 14:50:09.015"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:09.017">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:09.017" status="PASS" starttime="20170824 14:50:09.017"></status>
</kw>
<status endtime="20170824 14:50:09.018" status="PASS" starttime="20170824 14:50:09.016"></status>
</kw>
<status endtime="20170824 14:50:09.018" status="PASS" starttime="20170824 14:50:09.012"></status>
</kw>
<status endtime="20170824 14:50:09.018" status="PASS" starttime="20170824 14:50:09.011"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:09.018">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170824 14:50:09.018" status="PASS" starttime="20170824 14:50:09.018"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:09.125">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:09.126">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170824 14:50:09.186">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:09.186" status="PASS" starttime="20170824 14:50:09.069"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:09.186">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:09.186">${ret_values} = (u'Linux witherspoon 4.10.17-ba30e9ed152bab62f72da24986ee5ca22d6c9b07 #1 Thu Aug 24 13:31:40 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170824 14:50:09.186" status="PASS" starttime="20170824 14:50:09.019"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:09.187">${stdout} = Linux witherspoon 4.10.17-ba30e9ed152bab62f72da24986ee5ca22d6c9b07 #1 Thu Aug 24 13:31:40 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170824 14:50:09.187" status="PASS" starttime="20170824 14:50:09.187"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:09.188">${stderr} = </msg>
<status endtime="20170824 14:50:09.188" status="PASS" starttime="20170824 14:50:09.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:09.194">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:09.194" status="PASS" starttime="20170824 14:50:09.194"></status>
</kw>
<status endtime="20170824 14:50:09.194" status="PASS" starttime="20170824 14:50:09.193"></status>
</kw>
<status endtime="20170824 14:50:09.195" status="PASS" starttime="20170824 14:50:09.188"></status>
</kw>
<status endtime="20170824 14:50:09.195" status="PASS" starttime="20170824 14:50:09.011"></status>
</kw>
<status endtime="20170824 14:50:09.195" status="PASS" starttime="20170824 14:50:09.010"></status>
</kw>
<status endtime="20170824 14:50:09.195" status="PASS" starttime="20170824 14:50:08.644"></status>
</kw>
<status endtime="20170824 14:50:09.195" status="PASS" starttime="20170824 14:50:08.643"></status>
</kw>
<status endtime="20170824 14:50:09.195" status="PASS" starttime="20170824 14:50:08.643"></status>
</kw>
<status endtime="20170824 14:50:09.195" status="PASS" starttime="20170824 14:50:06.634"></status>
</kw>
<status endtime="20170824 14:50:09.195" status="PASS" starttime="20170824 14:50:06.633"></status>
</kw>
<status endtime="20170824 14:50:09.195" status="PASS" starttime="20170824 14:50:06.593"></status>
</kw>
<status endtime="20170824 14:50:09.195" status="PASS" starttime="20170824 14:50:06.590"></status>
</kw>
<status endtime="20170824 14:50:09.195" status="PASS" starttime="20170824 14:50:06.590"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 14:50:09.197" status="PASS" starttime="20170824 14:50:09.197"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:09.197">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:09.197">${ret_values} = None</msg>
<status endtime="20170824 14:50:09.197" status="PASS" starttime="20170824 14:50:09.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 14:50:09.198" status="PASS" starttime="20170824 14:50:09.198"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:09.235">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 14:50:09.235" status="PASS" starttime="20170824 14:50:09.235"></status>
</kw>
<status endtime="20170824 14:50:09.236" status="PASS" starttime="20170824 14:50:09.234"></status>
</kw>
<status endtime="20170824 14:50:09.236" status="PASS" starttime="20170824 14:50:09.198"></status>
</kw>
<status endtime="20170824 14:50:09.236" status="PASS" starttime="20170824 14:50:09.196"></status>
</kw>
<status endtime="20170824 14:50:09.236" status="PASS" starttime="20170824 14:50:09.195"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 14:50:09.242" status="PASS" starttime="20170824 14:50:09.242"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:09.242">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:09.242">${ret_values} = None</msg>
<status endtime="20170824 14:50:09.242" status="PASS" starttime="20170824 14:50:09.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 14:50:09.243" status="PASS" starttime="20170824 14:50:09.242"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:09.327">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:09.327">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170824 14:50:09.413">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170824 14:50:09.430">${core_files} = /tmp/core_xargs.1310</msg>
<msg level="INFO" timestamp="20170824 14:50:09.430">${stderr} = </msg>
<msg level="INFO" timestamp="20170824 14:50:09.430">${rc} = 0</msg>
<status endtime="20170824 14:50:09.430" status="PASS" starttime="20170824 14:50:09.278"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:09.431">@{core_list} = [ /tmp/core_xargs.1310 ]</msg>
<status endtime="20170824 14:50:09.431" status="PASS" starttime="20170824 14:50:09.431"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170824 14:50:09.461" status="PASS" starttime="20170824 14:50:09.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170824 14:50:10.202" status="PASS" starttime="20170824 14:50:09.462"></status>
</kw>
<status endtime="20170824 14:50:10.202" status="PASS" starttime="20170824 14:50:09.461"></status>
</kw>
<status endtime="20170824 14:50:10.202" status="PASS" starttime="20170824 14:50:09.461"></status>
</kw>
<status endtime="20170824 14:50:10.202" status="PASS" starttime="20170824 14:50:09.448"></status>
</kw>
<status endtime="20170824 14:50:10.202" status="PASS" starttime="20170824 14:50:09.431"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_xargs.1310" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170824 14:50:10.441" status="PASS" starttime="20170824 14:50:10.202"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:10.488">port=22
timeout=25 seconds
height=24
alias=bmc_connection
encoding=UTF-8
newline=

prompt=# 
path_separator=/
term_type=vt100
index=1
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170824 14:50:10.489">Executing command 'rm /tmp/core_xargs.1310'.</msg>
<msg level="INFO" timestamp="20170824 14:50:10.537">Command exited with return code 0.</msg>
<status endtime="20170824 14:50:10.555" status="PASS" starttime="20170824 14:50:10.441"></status>
</kw>
<status endtime="20170824 14:50:10.555" status="PASS" starttime="20170824 14:50:10.202"></status>
</kw>
<status endtime="20170824 14:50:10.555" status="PASS" starttime="20170824 14:50:10.202"></status>
</kw>
<status endtime="20170824 14:50:10.555" status="PASS" starttime="20170824 14:50:09.278"></status>
</kw>
<status endtime="20170824 14:50:10.555" status="PASS" starttime="20170824 14:50:09.243"></status>
</kw>
<status endtime="20170824 14:50:10.555" status="PASS" starttime="20170824 14:50:09.240"></status>
</kw>
<status endtime="20170824 14:50:10.555" status="PASS" starttime="20170824 14:50:09.236"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 14:50:10.557" status="PASS" starttime="20170824 14:50:10.557"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:10.557">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:10.557">${ret_values} = None</msg>
<status endtime="20170824 14:50:10.557" status="PASS" starttime="20170824 14:50:10.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 14:50:10.558" status="PASS" starttime="20170824 14:50:10.558"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:10.603">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:50:10.603" status="PASS" starttime="20170824 14:50:10.602"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:10.604">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:50:10.604" status="PASS" starttime="20170824 14:50:10.603"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:10.605">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:50:10.605" status="PASS" starttime="20170824 14:50:10.605"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:10.606">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:50:10.606" status="PASS" starttime="20170824 14:50:10.606"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:10.842">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:50:10.842" status="PASS" starttime="20170824 14:50:10.607"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:10.842">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:10.842">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:10.842" status="PASS" starttime="20170824 14:50:10.606"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:10.843">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:10.843" status="PASS" starttime="20170824 14:50:10.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:10.844">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:10.844" status="PASS" starttime="20170824 14:50:10.843"></status>
</kw>
<status endtime="20170824 14:50:10.844" status="PASS" starttime="20170824 14:50:10.602"></status>
</kw>
<status endtime="20170824 14:50:10.844" status="PASS" starttime="20170824 14:50:10.601"></status>
</kw>
<status endtime="20170824 14:50:10.844" status="PASS" starttime="20170824 14:50:10.600"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:10.845">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170824 14:50:10.845" status="PASS" starttime="20170824 14:50:10.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 14:50:10.845" status="PASS" starttime="20170824 14:50:10.845"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:10.932">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:50:10.933">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170824 14:50:10.933" status="PASS" starttime="20170824 14:50:10.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 14:50:10.933" status="PASS" starttime="20170824 14:50:10.933"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:50:10.934">Delete All Sessions</msg>
<status endtime="20170824 14:50:10.934" status="PASS" starttime="20170824 14:50:10.934"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:10.934">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170824 14:50:10.934" status="PASS" starttime="20170824 14:50:10.600"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:10.935">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170824 14:50:10.935">404 != 200</msg>
<status endtime="20170824 14:50:10.935" status="FAIL" starttime="20170824 14:50:10.935"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:10.935">${status} = False</msg>
<status endtime="20170824 14:50:10.935" status="PASS" starttime="20170824 14:50:10.934"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:10.936">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 14:50:10.936" status="PASS" starttime="20170824 14:50:10.936"></status>
</kw>
<status endtime="20170824 14:50:10.936" status="PASS" starttime="20170824 14:50:10.599"></status>
</kw>
<status endtime="20170824 14:50:10.936" status="PASS" starttime="20170824 14:50:10.558"></status>
</kw>
<status endtime="20170824 14:50:10.936" status="PASS" starttime="20170824 14:50:10.556"></status>
</kw>
<status endtime="20170824 14:50:10.937" status="PASS" starttime="20170824 14:50:10.555"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 14:50:10.939" status="PASS" starttime="20170824 14:50:10.939"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:10.939">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:10.939">${ret_values} = None</msg>
<status endtime="20170824 14:50:10.939" status="PASS" starttime="20170824 14:50:10.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 14:50:10.940" status="PASS" starttime="20170824 14:50:10.940"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:10.981">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170824 14:50:10.981" status="PASS" starttime="20170824 14:50:10.981"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:10.982">@{cmd_list} = [ ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_xyz_lis...</msg>
<status endtime="20170824 14:50:10.983" status="PASS" starttime="20170824 14:50:10.982"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:10.983">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_led.txt</msg>
<status endtime="20170824 14:50:10.983" status="PASS" starttime="20170824 14:50:10.983"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:10.986">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:50:10.987" status="PASS" starttime="20170824 14:50:10.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:10.987">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:50:10.987" status="PASS" starttime="20170824 14:50:10.987"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:10.988">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:50:10.988" status="PASS" starttime="20170824 14:50:10.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:10.988">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:50:10.989" status="PASS" starttime="20170824 14:50:10.988"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.180">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:50:11.180" status="PASS" starttime="20170824 14:50:10.989"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:11.180">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:11.180">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:11.180" status="PASS" starttime="20170824 14:50:10.989"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.181">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:11.181" status="PASS" starttime="20170824 14:50:11.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.181">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:11.181" status="PASS" starttime="20170824 14:50:11.181"></status>
</kw>
<status endtime="20170824 14:50:11.182" status="PASS" starttime="20170824 14:50:10.985"></status>
</kw>
<status endtime="20170824 14:50:11.182" status="PASS" starttime="20170824 14:50:10.985"></status>
</kw>
<status endtime="20170824 14:50:11.182" status="PASS" starttime="20170824 14:50:10.984"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.182">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170824 14:50:11.182" status="PASS" starttime="20170824 14:50:11.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 14:50:11.183" status="PASS" starttime="20170824 14:50:11.183"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.227">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:50:11.227">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170824 14:50:11.227" status="PASS" starttime="20170824 14:50:11.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 14:50:11.228" status="PASS" starttime="20170824 14:50:11.227"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:50:11.228">Delete All Sessions</msg>
<status endtime="20170824 14:50:11.228" status="PASS" starttime="20170824 14:50:11.228"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:11.228">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170824 14:50:11.228" status="PASS" starttime="20170824 14:50:10.984"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.229">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170824 14:50:11.230">404 != 200</msg>
<status endtime="20170824 14:50:11.230" status="FAIL" starttime="20170824 14:50:11.229"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:11.230">${status} = False</msg>
<status endtime="20170824 14:50:11.230" status="PASS" starttime="20170824 14:50:11.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170824 14:50:11.231">Continuing for loop from the next iteration.</msg>
<status endtime="20170824 14:50:11.231" status="PASS" starttime="20170824 14:50:11.231"></status>
</kw>
<status endtime="20170824 14:50:11.231" status="PASS" starttime="20170824 14:50:11.230"></status>
</kw>
<status endtime="20170824 14:50:11.231" status="PASS" starttime="20170824 14:50:10.983"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.232">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_record_log.txt</msg>
<status endtime="20170824 14:50:11.232" status="PASS" starttime="20170824 14:50:11.231"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.235">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:50:11.235" status="PASS" starttime="20170824 14:50:11.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.236">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:50:11.236" status="PASS" starttime="20170824 14:50:11.235"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.236">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:50:11.236" status="PASS" starttime="20170824 14:50:11.236"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.237">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:50:11.237" status="PASS" starttime="20170824 14:50:11.236"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.422">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:50:11.422" status="PASS" starttime="20170824 14:50:11.238"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:11.422">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:11.422">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:11.422" status="PASS" starttime="20170824 14:50:11.237"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.423">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:11.423" status="PASS" starttime="20170824 14:50:11.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:11.424" status="PASS" starttime="20170824 14:50:11.423"></status>
</kw>
<status endtime="20170824 14:50:11.424" status="PASS" starttime="20170824 14:50:11.234"></status>
</kw>
<status endtime="20170824 14:50:11.424" status="PASS" starttime="20170824 14:50:11.233"></status>
</kw>
<status endtime="20170824 14:50:11.424" status="PASS" starttime="20170824 14:50:11.233"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.425">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170824 14:50:11.425" status="PASS" starttime="20170824 14:50:11.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 14:50:11.425" status="PASS" starttime="20170824 14:50:11.425"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.489">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:50:11.489">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170824 14:50:11.490" status="PASS" starttime="20170824 14:50:11.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 14:50:11.490" status="PASS" starttime="20170824 14:50:11.490"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:50:11.491">Delete All Sessions</msg>
<status endtime="20170824 14:50:11.491" status="PASS" starttime="20170824 14:50:11.490"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:11.491">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170824 14:50:11.491" status="PASS" starttime="20170824 14:50:11.232"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.492">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170824 14:50:11.493">404 != 200</msg>
<status endtime="20170824 14:50:11.493" status="FAIL" starttime="20170824 14:50:11.492"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:11.493">${status} = False</msg>
<status endtime="20170824 14:50:11.493" status="PASS" starttime="20170824 14:50:11.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170824 14:50:11.494">Continuing for loop from the next iteration.</msg>
<status endtime="20170824 14:50:11.494" status="PASS" starttime="20170824 14:50:11.494"></status>
</kw>
<status endtime="20170824 14:50:11.494" status="PASS" starttime="20170824 14:50:11.493"></status>
</kw>
<status endtime="20170824 14:50:11.494" status="PASS" starttime="20170824 14:50:11.231"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.495">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_inventory.txt</msg>
<status endtime="20170824 14:50:11.495" status="PASS" starttime="20170824 14:50:11.494"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.497">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:50:11.498" status="PASS" starttime="20170824 14:50:11.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.499">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:50:11.499" status="PASS" starttime="20170824 14:50:11.498"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.499">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:50:11.499" status="PASS" starttime="20170824 14:50:11.499"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.500">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:50:11.500" status="PASS" starttime="20170824 14:50:11.499"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.686">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:50:11.686" status="PASS" starttime="20170824 14:50:11.501"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:11.686">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:11.686">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:11.686" status="PASS" starttime="20170824 14:50:11.500"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.686">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:11.687" status="PASS" starttime="20170824 14:50:11.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:11.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:11.687" status="PASS" starttime="20170824 14:50:11.687"></status>
</kw>
<status endtime="20170824 14:50:11.687" status="PASS" starttime="20170824 14:50:11.497"></status>
</kw>
<status endtime="20170824 14:50:11.687" status="PASS" starttime="20170824 14:50:11.496"></status>
</kw>
<status endtime="20170824 14:50:11.688" status="PASS" starttime="20170824 14:50:11.496"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:11.688">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170824 14:50:11.688" status="PASS" starttime="20170824 14:50:11.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 14:50:11.689" status="PASS" starttime="20170824 14:50:11.688"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:13.683">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:50:13.683">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:13.683" status="PASS" starttime="20170824 14:50:11.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 14:50:13.684" status="PASS" starttime="20170824 14:50:13.683"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:50:13.684">Delete All Sessions</msg>
<status endtime="20170824 14:50:13.684" status="PASS" starttime="20170824 14:50:13.684"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:13.684">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:13.684" status="PASS" starttime="20170824 14:50:11.495"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:13.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:13.685" status="PASS" starttime="20170824 14:50:13.685"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:13.685">${status} = True</msg>
<status endtime="20170824 14:50:13.685" status="PASS" starttime="20170824 14:50:13.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170824 14:50:13.686" status="PASS" starttime="20170824 14:50:13.686"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:13.689">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:50:13.689">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170824 14:50:13.689">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170824 14:50:13.689" status="PASS" starttime="20170824 14:50:13.686"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:13.691">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_inventory.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:13.691" status="PASS" starttime="20170824 14:50:13.690"></status>
</kw>
<status endtime="20170824 14:50:13.691" status="PASS" starttime="20170824 14:50:13.689"></status>
</kw>
<status endtime="20170824 14:50:13.691" status="PASS" starttime="20170824 14:50:11.494"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:13.692">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_sensor_xyz_list.txt</msg>
<status endtime="20170824 14:50:13.692" status="PASS" starttime="20170824 14:50:13.692"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:13.695">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:50:13.695" status="PASS" starttime="20170824 14:50:13.695"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:13.696">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:50:13.696" status="PASS" starttime="20170824 14:50:13.695"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:13.696">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:50:13.696" status="PASS" starttime="20170824 14:50:13.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:13.697">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:50:13.697" status="PASS" starttime="20170824 14:50:13.697"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:13.892">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:50:13.892" status="PASS" starttime="20170824 14:50:13.698"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:13.892">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:13.892">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:13.892" status="PASS" starttime="20170824 14:50:13.697"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:13.893">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:13.893" status="PASS" starttime="20170824 14:50:13.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:13.893">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:13.893" status="PASS" starttime="20170824 14:50:13.893"></status>
</kw>
<status endtime="20170824 14:50:13.893" status="PASS" starttime="20170824 14:50:13.694"></status>
</kw>
<status endtime="20170824 14:50:13.894" status="PASS" starttime="20170824 14:50:13.694"></status>
</kw>
<status endtime="20170824 14:50:13.894" status="PASS" starttime="20170824 14:50:13.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:13.894">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status endtime="20170824 14:50:13.894" status="PASS" starttime="20170824 14:50:13.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 14:50:13.895" status="PASS" starttime="20170824 14:50:13.895"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.306">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:50:14.306">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:14.306" status="PASS" starttime="20170824 14:50:13.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 14:50:14.307" status="PASS" starttime="20170824 14:50:14.307"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:50:14.307">Delete All Sessions</msg>
<status endtime="20170824 14:50:14.307" status="PASS" starttime="20170824 14:50:14.307"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:14.308">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:14.308" status="PASS" starttime="20170824 14:50:13.692"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:14.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:14.309" status="PASS" starttime="20170824 14:50:14.308"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:14.309">${status} = True</msg>
<status endtime="20170824 14:50:14.309" status="PASS" starttime="20170824 14:50:14.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170824 14:50:14.310" status="PASS" starttime="20170824 14:50:14.309"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.311">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 49125
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 1625
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10230, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9816
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10330
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10230, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9791
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10330
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10230, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9791
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10330
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10230, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9816
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10359
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 648000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28170
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 203500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 12250
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 250
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:50:14.311">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170824 14:50:14.311">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status endtime="20170824 14:50:14.311" status="PASS" starttime="20170824 14:50:14.310"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:14.313">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_sensor_xyz_list.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_sensor_xyz_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:14.313" status="PASS" starttime="20170824 14:50:14.312"></status>
</kw>
<status endtime="20170824 14:50:14.313" status="PASS" starttime="20170824 14:50:14.311"></status>
</kw>
<status endtime="20170824 14:50:14.313" status="PASS" starttime="20170824 14:50:13.692"></status>
</kw>
<kw name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.314">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_control_list.txt</msg>
<status endtime="20170824 14:50:14.314" status="PASS" starttime="20170824 14:50:14.313"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:14.317">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:50:14.317" status="PASS" starttime="20170824 14:50:14.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.317">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:50:14.318" status="PASS" starttime="20170824 14:50:14.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.318">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:50:14.318" status="PASS" starttime="20170824 14:50:14.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.319">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:50:14.319" status="PASS" starttime="20170824 14:50:14.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:14.507">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:50:14.507" status="PASS" starttime="20170824 14:50:14.320"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:14.507">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:14.507">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:14.507" status="PASS" starttime="20170824 14:50:14.319"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:14.508">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:14.508" status="PASS" starttime="20170824 14:50:14.508"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:14.509">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:14.509" status="PASS" starttime="20170824 14:50:14.508"></status>
</kw>
<status endtime="20170824 14:50:14.509" status="PASS" starttime="20170824 14:50:14.316"></status>
</kw>
<status endtime="20170824 14:50:14.509" status="PASS" starttime="20170824 14:50:14.315"></status>
</kw>
<status endtime="20170824 14:50:14.509" status="PASS" starttime="20170824 14:50:14.315"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.510">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status endtime="20170824 14:50:14.510" status="PASS" starttime="20170824 14:50:14.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 14:50:14.510" status="PASS" starttime="20170824 14:50:14.510"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.745">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:50:14.745">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:14.745" status="PASS" starttime="20170824 14:50:14.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 14:50:14.746" status="PASS" starttime="20170824 14:50:14.745"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:50:14.746">Delete All Sessions</msg>
<status endtime="20170824 14:50:14.746" status="PASS" starttime="20170824 14:50:14.746"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:14.746">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:14.746" status="PASS" starttime="20170824 14:50:14.314"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:14.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:14.748" status="PASS" starttime="20170824 14:50:14.747"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:14.748">${status} = True</msg>
<status endtime="20170824 14:50:14.748" status="PASS" starttime="20170824 14:50:14.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170824 14:50:14.749" status="PASS" starttime="20170824 14:50:14.749"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.750">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot_mode": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"
    }, 
    "/xyz/openbmc_project/control/host0/boot_source": {
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.AlwaysOff"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:50:14.750">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170824 14:50:14.750">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status endtime="20170824 14:50:14.750" status="PASS" starttime="20170824 14:50:14.749"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:14.751">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_control_list.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:14.751" status="PASS" starttime="20170824 14:50:14.751"></status>
</kw>
<status endtime="20170824 14:50:14.752" status="PASS" starttime="20170824 14:50:14.750"></status>
</kw>
<status endtime="20170824 14:50:14.752" status="PASS" starttime="20170824 14:50:14.313"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.752">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_sensor_list.txt</msg>
<status endtime="20170824 14:50:14.752" status="PASS" starttime="20170824 14:50:14.752"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:14.755">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:50:14.755" status="PASS" starttime="20170824 14:50:14.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.756">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:50:14.756" status="PASS" starttime="20170824 14:50:14.756"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.757">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:50:14.757" status="PASS" starttime="20170824 14:50:14.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.757">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:50:14.757" status="PASS" starttime="20170824 14:50:14.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:14.945">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:50:14.945" status="PASS" starttime="20170824 14:50:14.758"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:14.945">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:14.945">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:14.945" status="PASS" starttime="20170824 14:50:14.758"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:14.946">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:14.946" status="PASS" starttime="20170824 14:50:14.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:14.947">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:14.947" status="PASS" starttime="20170824 14:50:14.946"></status>
</kw>
<status endtime="20170824 14:50:14.947" status="PASS" starttime="20170824 14:50:14.754"></status>
</kw>
<status endtime="20170824 14:50:14.947" status="PASS" starttime="20170824 14:50:14.754"></status>
</kw>
<status endtime="20170824 14:50:14.947" status="PASS" starttime="20170824 14:50:14.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:14.948">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170824 14:50:14.948" status="PASS" starttime="20170824 14:50:14.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 14:50:14.948" status="PASS" starttime="20170824 14:50:14.948"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.145">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:50:15.146">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:15.146" status="PASS" starttime="20170824 14:50:14.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 14:50:15.146" status="PASS" starttime="20170824 14:50:15.146"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:50:15.147">Delete All Sessions</msg>
<status endtime="20170824 14:50:15.147" status="PASS" starttime="20170824 14:50:15.147"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:15.147">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:15.147" status="PASS" starttime="20170824 14:50:14.753"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:15.148">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:15.148" status="PASS" starttime="20170824 14:50:15.148"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:15.148">${status} = True</msg>
<status endtime="20170824 14:50:15.148" status="PASS" starttime="20170824 14:50:15.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170824 14:50:15.149" status="PASS" starttime="20170824 14:50:15.149"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.150">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170824 14:50:15.150">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170824 14:50:15.150">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170824 14:50:15.150" status="PASS" starttime="20170824 14:50:15.149"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:15.152">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_sensor_list.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:15.153" status="PASS" starttime="20170824 14:50:15.152"></status>
</kw>
<status endtime="20170824 14:50:15.153" status="PASS" starttime="20170824 14:50:15.151"></status>
</kw>
<status endtime="20170824 14:50:15.153" status="PASS" starttime="20170824 14:50:14.752"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.154">${logpath} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/20170824145002376194_BMC_elog.txt</msg>
<status endtime="20170824 14:50:15.154" status="PASS" starttime="20170824 14:50:15.153"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:15.156">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 14:50:15.157" status="PASS" starttime="20170824 14:50:15.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.157">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 14:50:15.157" status="PASS" starttime="20170824 14:50:15.157"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.158">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 14:50:15.158" status="PASS" starttime="20170824 14:50:15.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.159">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 14:50:15.159" status="PASS" starttime="20170824 14:50:15.158"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:15.443">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 14:50:15.443" status="PASS" starttime="20170824 14:50:15.159"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:15.443">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:15.443">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 14:50:15.443" status="PASS" starttime="20170824 14:50:15.159"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:15.443">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:15.444" status="PASS" starttime="20170824 14:50:15.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:15.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 14:50:15.444" status="PASS" starttime="20170824 14:50:15.444"></status>
</kw>
<status endtime="20170824 14:50:15.444" status="PASS" starttime="20170824 14:50:15.155"></status>
</kw>
<status endtime="20170824 14:50:15.444" status="PASS" starttime="20170824 14:50:15.155"></status>
</kw>
<status endtime="20170824 14:50:15.445" status="PASS" starttime="20170824 14:50:15.154"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.445">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170824 14:50:15.445" status="PASS" starttime="20170824 14:50:15.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 14:50:15.446" status="PASS" starttime="20170824 14:50:15.445"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.491">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170824 14:50:15.491">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170824 14:50:15.491" status="PASS" starttime="20170824 14:50:15.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 14:50:15.492" status="PASS" starttime="20170824 14:50:15.491"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170824 14:50:15.492">Delete All Sessions</msg>
<status endtime="20170824 14:50:15.492" status="PASS" starttime="20170824 14:50:15.492"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:15.492">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170824 14:50:15.492" status="PASS" starttime="20170824 14:50:15.154"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:15.493">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170824 14:50:15.494">404 != 200</msg>
<status endtime="20170824 14:50:15.494" status="FAIL" starttime="20170824 14:50:15.493"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:15.494">${status} = False</msg>
<status endtime="20170824 14:50:15.494" status="PASS" starttime="20170824 14:50:15.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170824 14:50:15.495">Continuing for loop from the next iteration.</msg>
<status endtime="20170824 14:50:15.495" status="PASS" starttime="20170824 14:50:15.495"></status>
</kw>
<status endtime="20170824 14:50:15.495" status="PASS" starttime="20170824 14:50:15.494"></status>
</kw>
<status endtime="20170824 14:50:15.495" status="PASS" starttime="20170824 14:50:15.153"></status>
</kw>
<status endtime="20170824 14:50:15.495" status="PASS" starttime="20170824 14:50:10.983"></status>
</kw>
<status endtime="20170824 14:50:15.495" status="PASS" starttime="20170824 14:50:10.982"></status>
</kw>
<status endtime="20170824 14:50:15.495" status="PASS" starttime="20170824 14:50:10.981"></status>
</kw>
<status endtime="20170824 14:50:15.495" status="PASS" starttime="20170824 14:50:10.981"></status>
</kw>
<status endtime="20170824 14:50:15.495" status="PASS" starttime="20170824 14:50:10.980"></status>
</kw>
<status endtime="20170824 14:50:15.495" status="PASS" starttime="20170824 14:50:10.941"></status>
</kw>
<status endtime="20170824 14:50:15.496" status="PASS" starttime="20170824 14:50:10.937"></status>
</kw>
<status endtime="20170824 14:50:15.496" status="PASS" starttime="20170824 14:50:10.937"></status>
</kw>
<kw name="${method} = ('Sys Inventory Files', 'System Inventory Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 14:50:15.497" status="PASS" starttime="20170824 14:50:15.497"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:15.497">${status} = PASS</msg>
<msg level="INFO" timestamp="20170824 14:50:15.498">${ret_values} = None</msg>
<status endtime="20170824 14:50:15.498" status="PASS" starttime="20170824 14:50:15.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 14:50:15.498" status="PASS" starttime="20170824 14:50:15.498"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status endtime="20170824 14:50:15.535" status="PASS" starttime="20170824 14:50:15.534"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:15.535">File '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/31355/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status endtime="20170824 14:50:15.535" status="PASS" starttime="20170824 14:50:15.535"></status>
</kw>
<status endtime="20170824 14:50:15.535" status="PASS" starttime="20170824 14:50:15.533"></status>
</kw>
<status endtime="20170824 14:50:15.535" status="PASS" starttime="20170824 14:50:15.498"></status>
</kw>
<status endtime="20170824 14:50:15.536" status="PASS" starttime="20170824 14:50:15.496"></status>
</kw>
<status endtime="20170824 14:50:15.536" status="PASS" starttime="20170824 14:50:15.496"></status>
</kw>
<status endtime="20170824 14:50:15.536" status="PASS" starttime="20170824 14:50:02.653"></status>
</kw>
<status endtime="20170824 14:50:15.536" status="PASS" starttime="20170824 14:50:02.650"></status>
</kw>
<status endtime="20170824 14:50:15.536" status="PASS" starttime="20170824 14:50:02.650"></status>
</kw>
<status endtime="20170824 14:50:15.536" status="PASS" starttime="20170824 14:50:02.650"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170824 14:50:15.552" status="PASS" starttime="20170824 14:50:15.552"></status>
</kw>
<status endtime="20170824 14:50:15.552" status="PASS" starttime="20170824 14:50:15.541"></status>
</kw>
<status endtime="20170824 14:50:15.553" status="PASS" starttime="20170824 14:50:02.649"></status>
</kw>
<status endtime="20170824 14:50:15.553" status="PASS" starttime="20170824 14:49:59.301"></status>
</kw>
<status endtime="20170824 14:50:15.553" status="PASS" starttime="20170824 14:49:59.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170824 14:50:15.554" status="PASS" starttime="20170824 14:50:15.553"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.565">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170824 14:50:15.565" status="PASS" starttime="20170824 14:50:15.554"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.565">${FFDC_DIR_PATH} = /tmp/fspcibld/31355/obmc-robot/logs/20170824145002376194_TestsTestBasicPoweron/20170824145002376194_PowerOnTest/</msg>
<status endtime="20170824 14:50:15.565" status="PASS" starttime="20170824 14:50:15.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170824 14:50:15.566" status="PASS" starttime="20170824 14:50:15.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170824 14:50:15.566" status="PASS" starttime="20170824 14:50:15.566"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:15.567">Directory '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs"&gt;/tmp/fspcibld/31355/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170824 14:50:15.567" status="PASS" starttime="20170824 14:50:15.567"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:15.569">File '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170824 14:50:15.570" status="PASS" starttime="20170824 14:50:15.568"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:15.570">${exist} = True</msg>
<status endtime="20170824 14:50:15.570" status="PASS" starttime="20170824 14:50:15.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170824 14:50:15.570" status="PASS" starttime="20170824 14:50:15.570"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170824 14:50:15.571" status="PASS" starttime="20170824 14:50:15.571"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.572">${cur_time} = 2017-08-24 14:50:15:571731</msg>
<status endtime="20170824 14:50:15.572" status="PASS" starttime="20170824 14:50:15.572"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.572">${cur_time} = 20170824145015571731</msg>
<status endtime="20170824 14:50:15.573" status="PASS" starttime="20170824 14:50:15.572"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:15.573">${cur_time} = 20170824145015571731</msg>
<status endtime="20170824 14:50:15.573" status="PASS" starttime="20170824 14:50:15.571"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:15.574">Appended to file '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/31355/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:15.574" status="PASS" starttime="20170824 14:50:15.573"></status>
</kw>
<status endtime="20170824 14:50:15.574" status="PASS" starttime="20170824 14:50:15.554"></status>
</kw>
<status endtime="20170824 14:50:15.574" status="PASS" starttime="20170824 14:49:58.974"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.576">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 14:50:15.576" status="PASS" starttime="20170824 14:50:15.575"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.577">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 14:50:15.577" status="PASS" starttime="20170824 14:50:15.576"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:15.577">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 14:50:15.577" status="PASS" starttime="20170824 14:50:15.575"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.578">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170824 14:50:15.578" status="PASS" starttime="20170824 14:50:15.578"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 14:50:15.579" status="PASS" starttime="20170824 14:50:15.578"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.593">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170824 14:50:15.609">${rc} = 0</msg>
<msg level="INFO" timestamp="20170824 14:50:15.610">${output} = /tmp/fspcibld/31355/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170824 14:50:15.610" status="PASS" starttime="20170824 14:50:15.579"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170824 14:50:15.623" status="PASS" starttime="20170824 14:50:15.620"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170824 14:50:15.626" status="PASS" starttime="20170824 14:50:15.623"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.628">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170824 14:50:15.628" status="PASS" starttime="20170824 14:50:15.626"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:15.629">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170824 14:50:15.629" status="PASS" starttime="20170824 14:50:15.577"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.631">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170824 14:50:15.631" status="PASS" starttime="20170824 14:50:15.629"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 14:50:15.631" status="PASS" starttime="20170824 14:50:15.631"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.646">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170824 14:50:15.662">${rc} = 0</msg>
<msg level="INFO" timestamp="20170824 14:50:15.662">${os_con_pid} = </msg>
<status endtime="20170824 14:50:15.664" status="PASS" starttime="20170824 14:50:15.632"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170824 14:50:15.677" status="PASS" starttime="20170824 14:50:15.674"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.679">${cmd_buf} = kill -9 </msg>
<status endtime="20170824 14:50:15.679" status="PASS" starttime="20170824 14:50:15.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 14:50:15.683" status="PASS" starttime="20170824 14:50:15.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.685">${rc} = None</msg>
<msg level="INFO" timestamp="20170824 14:50:15.686">${output} = None</msg>
<status endtime="20170824 14:50:15.686" status="PASS" starttime="20170824 14:50:15.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170824 14:50:15.687" status="PASS" starttime="20170824 14:50:15.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170824 14:50:15.696">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/31355/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/31355/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170824 14:50:15.696" status="PASS" starttime="20170824 14:50:15.690"></status>
</kw>
<status endtime="20170824 14:50:15.696" status="PASS" starttime="20170824 14:50:15.690"></status>
</kw>
<status endtime="20170824 14:50:15.696" status="PASS" starttime="20170824 14:50:15.688"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.697">${output} = </msg>
<status endtime="20170824 14:50:15.697" status="PASS" starttime="20170824 14:50:15.696"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170824 14:50:15.698">${loc_quiet} = 1</msg>
<status endtime="20170824 14:50:15.698" status="PASS" starttime="20170824 14:50:15.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170824 14:50:15.761" status="PASS" starttime="20170824 14:50:15.699"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:15.766">${rc} = 0</msg>
<msg level="INFO" timestamp="20170824 14:50:15.802">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170824 14:50:15.802" status="PASS" starttime="20170824 14:50:15.698"></status>
</kw>
<msg level="INFO" timestamp="20170824 14:50:15.837">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170824 14:50:15.837" status="PASS" starttime="20170824 14:50:15.574"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170824 14:50:15.880">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-be278ac/hbicore.bin ==--

  3.92490|secure|Booting in non-secure mode.
  3.92491|secure|SecureROM valid - enabling functionality
  7.40564|ISTEP  6. 5 - host_init_fsi
  7.50829|ISTEP  6. 6 - host_set_ipl_parms
  7.53563|ISTEP  6. 7 - host_discover_targets
 13.02760|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.02761|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.04833|ISTEP  6. 8 - host_update_master_tpm
 13.05622|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.05623|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.05634|ISTEP  6. 9 - host_gard
 13.08165|ISTEP  6.10 - host_revert_sbe_mcs_setup
 13.08617|ISTEP  6.11 - host_start_occ_xstop_handler
 13.08741|ISTEP  6.12 - host_voltage_config
 13.11993|ISTEP  7. 2 - mss_volt
 13.89179|ISTEP  7. 3 - mss_freq
 14.00921|ISTEP  7. 4 - mss_eff_config
 16.95239|ISTEP  7. 5 - mss_attr_update
 16.96170|ISTEP  8. 1 - host_slave_sbe_config
 17.01811|ISTEP  8. 2 - host_setup_sbe
 17.02316|ISTEP  8. 3 - host_cbs_start
 17.04478|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 24.26054|ISTEP  8. 5 - host_attnlisten_proc
 24.26166|ISTEP  8. 6 - host_p9_fbc_eff_config
 24.26593|ISTEP  8. 7 - host_p9_eff_config_links
 24.27592|ISTEP  8. 8 - proc_attr_update
 24.27708|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 24.30559|ISTEP  8.10 - proc_xbus_scominit
 25.86906|ISTEP  8.11 - proc_xbus_enable_ridi
 25.87229|ISTEP  9. 1 - fabric_erepair
 25.88162|ISTEP  9. 2 - fabric_io_dccal
 26.55129|ISTEP  9. 3 - fabric_pre_trainadv
 26.56063|ISTEP  9. 4 - fabric_io_run_training
 26.68579|ISTEP  9. 5 - fabric_post_trainadv
 26.69078|ISTEP  9. 6 - proc_smp_link_layer
 26.69478|ISTEP  9. 7 - proc_fab_iovalid
 26.71321|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 26.71873|ISTEP 10. 1 - proc_build_smp
 27.03632|ISTEP 10. 2 - host_slave_sbe_update
 27.79614|ISTEP 10. 3 - host_set_voltages
 27.90589|ISTEP 10. 4 - proc_cen_ref_clk_enable
 27.91116|ISTEP 10. 5 - proc_enable_osclite
 27.91207|ISTEP 10. 6 - proc_chiplet_scominit
 27.96786|ISTEP 10. 7 - proc_abus_scominit
 27.99180|ISTEP 10. 8 - proc_obus_scominit
 28.05190|ISTEP 10. 9 - proc_npu_scominit
 28.07619|ISTEP 10.10 - proc_pcie_scominit
 28.12027|ISTEP 10.11 - proc_scomoverride_chiplets
 28.12158|ISTEP 10.12 - proc_chiplet_enable_ridi
 28.12416|ISTEP 10.13 - host_rng_bist
 28.12610|ISTEP 10.14 - host_update_redundant_tpm
 28.19524|ISTEP 11. 1 - host_prd_hwreconfig
 28.20203|ISTEP 11. 2 - cen_tp_chiplet_init1
 28.20326|ISTEP 11. 3 - cen_pll_initf
 28.20476|ISTEP 11. 4 - cen_pll_setup
 28.20586|ISTEP 11. 5 - cen_tp_chiplet_init2
 28.20712|ISTEP 11. 6 - cen_tp_arrayinit
 28.20975|ISTEP 11. 7 - cen_tp_chiplet_init3
 28.21092|ISTEP 11. 8 - cen_chiplet_init
 28.21227|ISTEP 11. 9 - cen_arrayinit
 28.21333|ISTEP 11.10 - cen_initf
 28.21478|ISTEP 11.11 - cen_do_manual_inits
 28.21593|ISTEP 11.12 - cen_startclocks
 28.21724|ISTEP 11.13 - cen_scominits
 28.21887|ISTEP 12. 1 - mss_getecid
 28.22369|ISTEP 12. 2 - dmi_attr_update
 28.22498|ISTEP 12. 3 - proc_dmi_scominit
 28.22629|ISTEP 12. 4 - cen_dmi_scominit
 28.23784|ISTEP 12. 5 - dmi_erepair
 28.23925|ISTEP 12. 6 - dmi_io_dccal
 28.24084|ISTEP 12. 7 - dmi_pre_trainadv
 28.24226|ISTEP 12. 8 - dmi_io_run_training
 28.24384|ISTEP 12. 9 - dmi_post_trainadv
 28.24536|ISTEP 12.10 - proc_cen_framelock
 28.24690|ISTEP 12.11 - host_startprd_dmi
 28.24846|ISTEP 12.12 - host_attnlisten_memb
 28.24995|ISTEP 12.13 - cen_set_inband_addr
 28.25259|ISTEP 13. 1 - host_disable_memvolt
 28.38513|ISTEP 13. 2 - mem_pll_reset
 28.39945|ISTEP 13. 3 - mem_pll_initf
 28.47655|ISTEP 13. 4 - mem_pll_setup
 28.50481|ISTEP 13. 6 - mem_startclocks
 28.52148|ISTEP 13. 7 - host_enable_memvolt
 28.52282|ISTEP 13. 8 - mss_scominit
 28.84171|ISTEP 13. 9 - mss_ddr_phy_reset
 28.91978|ISTEP 13.10 - mss_draminit
 29.10174|ISTEP 13.11 - mss_draminit_training
 29.49928|ISTEP 13.12 - mss_draminit_trainadv
 29.50096|ISTEP 13.13 - mss_draminit_mc
 29.52303|ISTEP 14. 1 - mss_memdiag
 40.39728|ISTEP 14. 2 - mss_thermal_init
 40.41400|ISTEP 14. 3 - proc_pcie_config
 40.42958|ISTEP 14. 4 - mss_power_cleanup
 40.43149|ISTEP 14. 5 - proc_setup_bars
 40.47018|ISTEP 14. 6 - proc_htm_setup
 40.47927|ISTEP 14. 7 - proc_exit_cache_contained
 40.49384|ISTEP 15. 1 - host_build_stop_image
 41.44572|ISTEP 15. 2 - proc_set_pba_homer_bar
 41.45893|ISTEP 15. 3 - host_establish_ex_chiplet
 41.46578|ISTEP 15. 4 - host_start_stop_engine
 41.56979|ISTEP 16. 1 - host_activate_master
  0.00719|ISTEP 16. 2 - host_activate_slave_cores
 43.17101|ISTEP 16. 3 - host_secure_rng
 43.19254|ISTEP 16. 4 - mss_scrub
 43.19741|ISTEP 16. 5 - host_ipl_complete
 43.21362|ISTEP 16. 6 - host_load_io_ppe
 43.25438|ISTEP 18.11 - proc_tod_setup
 43.30969|ISTEP 18.12 - proc_tod_init
 43.31955|ISTEP 20. 1 - host_load_payload
 43.56613|ISTEP 20. 2 - host_load_hdat
 47.37541|ISTEP 21. 1 - host_runtime_setup
102.67729|htmgt|OCCs are now running in ACTIVE state
102.67824|ISTEP 21. 2 - host_verify_hdat
102.66740|ISTEP 21. 3 - host_start_payload
[  120.179618366,5] OPAL skiboot-v5.7-92-g0818df625e35 starting...
[  120.179623012,7] initial console log level: memory 7, driver 5
[  120.179625212,6] CPU: P9 generation processor (max 4 threads/core)
[  120.179627163,7] CPU: Boot CPU PIR is 0x0824 PVR is 0x004e1200
[  120.179629224,7] CPU: Initial max PIR set to 0x7fff
[  120.181055705,7] OPAL table: 0x300e3640 .. 0x300e3b80, branch table: 0x30002000
[  120.181059514,7] Assigning physical memory map table for nimbus
[  120.181062830,7] Parsing HDAT...
[  120.181064287,5] SPIRA-S found.
[  120.181068076,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[  120.181417587,6] SP Family is openbmc
[  120.181423328,7] LPC: IOPATH chip id = 0
[  120.181424758,7] LPC: FW BAR       = f0000000
[  120.181426428,7] LPC: MEM BAR      = e0000000
[  120.181428030,7] LPC: IO BAR       = d0010000
[  120.181429567,7] LPC: Internal BAR = c0012000
[  120.181443051,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[  120.181445964,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[  120.182156757,5] UART: Using UART at 0x60300d00103f8
[  120.184706996,3] I2C: v2 found, but not supported. Parsing as v1
[  120.185025605,3] I2C: v2 found, but not supported. Parsing as v1
[  120.185709432,5] CHIP: Chip ID 0000 type: P9N DD2.0
[  120.185795581,5] CHIP: Chip ID 0008 type: P9N DD2.0
[  120.186155425,5] SLW: Enabling: stop0_lite
[  120.186214754,5] SLW: Enabling: stop0
[  120.186371638,5] PLAT: Using virtual UART
[  120.186580174,7] LPC: Routing irq 9, policy: 0 (r=1)
[  120.186582163,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[  120.186787688,5] PLAT: Detected Witherspoon platform
[  120.186848237,5] PLAT: Detected BMC platform OpenBMC
[  120.225926178,5] CPU: All 176 processors called in...
[    2.397244292,5] FLASH: Found system flash:  id:0
[    2.397369277,5] BT: Interface initialized, IO 0x00e4
[    2.399807496,7] LPC: Routing irq 10, policy: 0 (r=1)
[    2.399809276,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    4.454792372,5] NVRAM: Size is 576 KB
[    5.162437259,5] STB: secure and trusted boot not supported
[    5.162437534,7] LPC-MBOX: Sending BMC interrupt
[    5.162569070,5] OPAL: Using OPAL UART console
[    5.162612938,7] LPC: Routing irq 4, policy: 0 (r=1)
[    5.162614679,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[    5.165297267,5] VAS: Initialized
[    5.165509089,3] NX0: Unknown NX type!
[    5.165562633,3] NX0: ERROR: Unknown NX type!
[    5.165601827,5] Found ibm,power9-nx
[    5.165629337,3] NX0: DMA VAS MMIO BAR, 0x0006019100000000, xcfg 0x201105e
[    5.165765811,3] NX8: Unknown NX type!
[    5.165812206,3] NX8: ERROR: Unknown NX type!
[    5.165854353,5] Found ibm,power9-nx
[    5.165888052,3] NX8: DMA VAS MMIO BAR, 0x0006219100000000, xcfg 0x201105e
[    6.294312952,3] FLASH: flash subpartition not found.
[    6.294380454,3] FLASH: Failed to parse subpart info for CAPP
[    6.296682242,3] CAPP: Error loading ucode lid. index=200d1
[    6.322120915,5] PCI: Resetting PHBs and training links...
[    7.416695035,5] PCI: Probing slots...
[    7.473088876,3] PCI: built-in device not found:  (loc: 100)
[    7.473618334,3] PCI: built-in device not found: GPU0 down (loc: 250)
[    7.475066713,3] PCI: built-in device not found: GPU0 (loc: 400)
[    7.476503493,3] PCI: built-in device not found: GPU1 down (loc: 258)
[    7.477957836,3] PCI: built-in device not found: GPU1 (loc: 500)
[    7.478015536,3] PCI: built-in device not found: GPU2 down (loc: 260)
[    7.478074724,3] PCI: built-in device not found: GPU2 (loc: 600)
[    7.478136066,3] PCI: built-in device not found:  (loc: 100)
[    7.478185272,3] PCI: built-in device not found: GPU3 down (loc: 220)
[    7.478231585,3] PCI: built-in device not found: GPU3 (loc: 300)
[    7.478269620,3] PCI: built-in device not found: GPU4 down (loc: 228)
[    7.478319036,3] PCI: built-in device not found: GPU4 (loc: 400)
[    7.478372684,3] PCI: built-in device not found: GPU5 down (loc: 268)
[    7.478434704,3] PCI: built-in device not found: GPU5 (loc: 500)
[    7.478497871,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.478559183,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    7.478622562,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[    7.478684130,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[    7.478753015,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[    7.478833813,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[    7.478904770,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.478958905,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[    7.479027578,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[    7.479102786,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[    7.479194076,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[    7.479283437,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[    7.479375462,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[    7.479467324,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 SLOT=GPU2 down 
[    7.479546935,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    7.479621892,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    7.479693941,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    7.479773118,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    7.479835691,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    7.479889370,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    7.479946763,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    7.480011661,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    7.480095617,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    7.480179369,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    7.480250967,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    7.480320026,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    7.480394752,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    7.480481789,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    7.480565685,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    7.480655921,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    7.480730367,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    7.480802091,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    7.480886111,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    7.480963521,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.481030184,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.481104033,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.481158152,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..08 
[    7.481223208,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..08 
[    7.481321484,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[    7.481402966,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..08 SLOT=GPU5 down 
[   19.341430491,5] IPMI: Resetting boot count on successful boot
[   19.341779683,5] INIT: Waiting for kernel...
[   19.343043521,5] INIT: 64-bit LE kernel discovered
[   19.344283816,5] OCC: All Chip Rdy after 0 ms
[   19.391387792,5] INIT: Starting kernel at 0x20011000, fdt at 0x30958b58 351459 bytes)
[   20.419262408,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000201fff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x202000000000 with 0x40000000
[    0.000000] Process table c000201ffe800000 and radix root for kernel: c000000001440000
[    0.000000] Linux version 4.12.5-openpower1 (fspbld@gfwa125.aus.stglabs.ibm.com) (gcc version 6.3.0 (Buildroot 2017.05.2-00163-g8035745) ) #2 SMP Thu Aug 17 10:19:52 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x4000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x075c7afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6700-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x201fff6e1700-0x201fff6eafff]
[    0.000000] numa:   NODE_DATA [mem 0x201fff6a6700-0x201fff6affff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff69ce00-0x201fff6a66ff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff693500-0x201fff69cdff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff689c00-0x201fff6934ff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff680300-0x201fff689bff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff676a00-0x201fff6802ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000201fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000001ff84b0000 s67992 r0 d63080 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 4190720
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1033932(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 267910976K/268435456K available (6208K kernel code, 1088K rwdata, 1968K rodata, 11456K init, 1693K bss, 524480K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: VP block alloc, for max VCPUs 176 use order 8
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000004] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.004263] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.011549] clocksource: timebase mult[1f40000] shift[24] registered
[    0.014372] Console: colour dummy device 80x25
[    0.017285] console [tty0] enabled
[    0.017457] console [hvc0] enabled
[    0.017457] console [hvc0] enabled
[    0.017663] bootconsole [udbg0] disabled
[    0.017663] bootconsole [udbg0] disabled
[    0.018404] pid_max: default: 180224 minimum: 1408
[    0.020024] Security Framework initialized
[    0.023908] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.125991] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.200404] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.200665] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.206977] EEH: PowerNV platform initialized
[    0.207123] POWER9 performance monitor hardware support registered
[    0.208781] smp: Bringing up secondary CPUs ...
[    0.768269] smp: Brought up 8 nodes, 176 CPUs
[    0.768456] numa: Node 0 CPUs: 0-87
[    0.768538] numa: Node 8 CPUs: 88-175
[    0.768620] numa: Node 250 CPUs:
[    0.768691] numa: Node 251 CPUs:
[    0.768768] numa: Node 252 CPUs:
[    0.768876] numa: Node 253 CPUs:
[    0.768972] numa: Node 254 CPUs:
[    0.769061] numa: Node 255 CPUs:
[    0.790011] devtmpfs: initialized
[    0.806527] evm: security.capability
[    0.807362] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.807704] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.809564] NET: Registered protocol family 16
[    0.810342] cpuidle: using governor menu
[    0.877943] PCI: Probing PCI hardware
[    0.878075] PCI host bridge to bus 0000:00
[    0.878162] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.878320] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.878411] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.878608] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.878695] pci 0000:00:00.0: disabling bridge mem windows
[    0.878936] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.879106] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.879234] PCI host bridge to bus 0001:00
[    0.879280] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.879380] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.879470] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.879630] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.879765] pci 0001:00:00.0: disabling bridge mem windows
[    0.880231] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.880320] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    0.880615] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.880836] PCI host bridge to bus 0002:00
[    0.880883] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.880984] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.881073] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.881267] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.881491] pci 0002:00:00.0: disabling bridge mem windows
[    0.881985] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.882182] pci 0002:01:00.0: disabling bridge mem windows
[    0.882515] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.882951] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    0.883263] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.883494] PCI host bridge to bus 0003:00
[    0.883596] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.883796] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.883994] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.884225] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.884385] pci 0003:00:00.0: disabling bridge mem windows
[    0.884660] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.884884] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.885015] PCI host bridge to bus 0004:00
[    0.885097] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.885295] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.885435] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.885657] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.885801] pci 0004:00:00.0: disabling bridge mem windows
[    0.886305] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.886408] pci 0004:01:00.0: disabling bridge mem windows
[    0.887003] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.887140] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.887652] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.887774] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.888295] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.888412] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.888580] random: fast init done
[    0.889026] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    0.889154] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.889497] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.890031] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    0.890153] pci 0004:02:02.0: disabling bridge mem windows
[    0.890677] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    0.890780] pci 0004:02:0a.0: disabling bridge mem windows
[    0.891287] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    0.891429] pci 0004:02:0b.0: disabling bridge mem windows
[    0.891926] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    0.892083] pci 0004:02:0c.0: disabling bridge mem windows
[    0.892426] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.894294] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.894401] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    0.894752] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.894979] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.895168] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.895381] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.895595] PCI host bridge to bus 0005:00
[    0.895668] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.895873] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.896039] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.896228] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.896356] pci 0005:00:00.0: disabling bridge mem windows
[    0.896897] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.897492] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.897857] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.898087] PCI host bridge to bus 0030:00
[    0.898166] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.898367] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.898536] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.898723] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.898883] pci 0030:00:00.0: disabling bridge mem windows
[    0.899131] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.899345] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.899489] PCI host bridge to bus 0033:00
[    0.899566] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.899764] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.899929] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.900113] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.900241] pci 0033:00:00.0: disabling bridge mem windows
[    0.900470] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.900659] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.900807] PCI host bridge to bus 0034:00
[    0.900888] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.901081] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.901249] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.901428] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.901577] pci 0034:00:00.0: disabling bridge mem windows
[    0.901827] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.902051] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.902212] PCI host bridge to bus 0035:00
[    0.902288] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.902481] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.902644] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.902836] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.902993] pci 0035:00:00.0: disabling bridge mem windows
[    0.903425] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.903566] pci 0035:01:00.0: disabling bridge mem windows
[    0.903903] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.904239] pci 0035:02:08.0: Disabling memory decoding and releasing memory resources.
[    0.904383] pci 0035:02:08.0: disabling bridge mem windows
[    0.904800] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    0.904938] pci 0035:02:0d.0: disabling bridge mem windows
[    0.905232] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.906266] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.906442] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.906639] PCI host bridge to bus 0006:00
[    0.906718] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.906865] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.907075] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.907415] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.907744] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.908047] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.908363] pci 0006:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.908696] pci 0006:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.909113] PCI host bridge to bus 0007:00
[    0.909176] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.909331] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.909524] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.909849] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.910169] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.910467] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.910782] pci 0007:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.911117] pci 0007:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.911493] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.911858] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.911978] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.912132] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.912299] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.912470] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.912835] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.913185] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.920433] IOMMU table initialized, virtual merging enabled
[    0.920521] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.920760] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.920857] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.920968] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.921169] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.921317] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.921468] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.921544] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.921689] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.921823] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.921974] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.922084] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.922207] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.922584] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.922947] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.930160] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.930275] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.930380] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.930476] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.930647] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.931023] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.931099] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.931231] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.931422] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.931814] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.932016] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.932166] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.932325] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.932486] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.932629] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.932780] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.932933] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200850000-0x600c200851fff]
[    0.933082] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200860000-0x600c200861fff]
[    0.933232] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200870000-0x600c200871fff]
[    0.933385] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.933497] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.933615] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.933730] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.933856] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.934016] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.934159] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.934275] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.934379] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.934499] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.934619] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200000000-0x600c2000007ff]
[    0.934773] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200010000-0x600c20001ffff pref]
[    0.934929] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.935044] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.935162] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.935276] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.935393] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.935505] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.935623] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.935743] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.935862] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.935975] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.936093] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.936474] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.936823] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.944047] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.944162] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.944279] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.944375] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.944526] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.944669] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.944788] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.944893] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.945011] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.945386] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.945466] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.945625] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.945774] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.946145] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.953383] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.953503] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.953638] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.953736] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.953883] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.954042] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.954271] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.954428] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.954599] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.954777] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.954964] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.955128] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.955307] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.955481] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.955844] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.956188] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.963396] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.963526] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.963641] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.963741] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.963937] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.964292] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.964397] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.964781] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.964900] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.965277] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.965414] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.965558] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.965711] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.966089] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.966170] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.966292] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.966666] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.966768] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.967143] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.967235] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.967406] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.967616] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.967819] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.968020] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.968209] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.968404] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.968597] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.968793] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.968986] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.969188] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.969379] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.969580] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.969790] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.969956] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.970147] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.970315] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.970511] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.970683] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.970886] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.971073] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.971259] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.971448] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.971646] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.971844] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.972003] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.972126] pci 0006:00:00.1: Associating to existing PE d
[    0.972227] pci 0006:00:01.0: Associating to existing PE d
[    0.972334] pci 0006:00:01.1: Associating to existing PE d
[    0.972436] pci 0006:00:02.0: Associating to existing PE d
[    0.972542] pci 0006:00:02.1: Associating to existing PE d
[    0.972690] NPU6: Found 1 MMIO ATSD registers
[    0.972695] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.972898] pci 0007:00:00.1: Associating to existing PE d
[    0.972997] pci 0007:00:01.0: Associating to existing PE d
[    0.973097] pci 0007:00:01.1: Associating to existing PE d
[    0.973202] pci 0007:00:02.0: Associating to existing PE d
[    0.973309] pci 0007:00:02.1: Associating to existing PE d
[    0.973421] NPU7: Found 1 MMIO ATSD registers
[    0.977771] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.987177] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.987338] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.987455] vgaarb: loaded
[    0.987670] SCSI subsystem initialized
[    0.987876] usbcore: registered new interface driver usbfs
[    0.987975] usbcore: registered new interface driver hub
[    0.988602] usbcore: registered new device driver usb
[    0.988730] pps_core: LinuxPPS API ver. 1 registered
[    0.988826] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.988964] PTP clock support registered
[    0.989858] clocksource: Switched to clocksource timebase
[    0.993342] NET: Registered protocol family 2
[    0.993728] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.996542] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.996965] TCP: Hash tables configured (established 524288 bind 65536)
[    0.997305] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.998276] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.999806] NET: Registered protocol family 1
[    0.999916] pci 0001:00:00.0: enabling device (0105 -&gt; 0107)
[    1.000031] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    3.642275] Initialise system trusted keyrings
[    3.642477] workingset: timestamp_bits=54 max_order=22 bucket_order=0
[    3.648062] Key type asymmetric registered
[    3.648116] Asymmetric key parser 'x509' registered
[    3.648207] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    3.648367] io scheduler noop registered
[    3.648871] io scheduler cfq registered (default)
[    3.648933] io scheduler mq-deadline registered
[    3.649024] io scheduler kyber registered
[    3.651809] ipmi message handler version 39.2
[    3.651885] ipmi device interface
[    3.652018] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[   12.590000] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[   12.605389] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[   12.605473] hvc0: No interrupts property, using OPAL event
[   12.606047] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[   12.606658] [drm] radeon kernel modesetting enabled.
[   12.617531] brd: module loaded
[   12.640687] loop: module loaded
[   12.640918] pci 0004:00:00.0: enabling device (0105 -&gt; 0107)
[   12.641014] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[   12.641115] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[   12.641214] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[   12.641505] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[   12.651678] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[   12.651768] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[   12.652678] scsi host0: ahci
[   12.652959] scsi host1: ahci
[   12.653213] scsi host2: ahci
[   12.653461] scsi host3: ahci
[   12.653571] ata1: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000100 irq 88
[   12.653698] ata2: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000180 irq 88
[   12.653826] ata3: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000200 irq 88
[   12.653951] ata4: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000280 irq 88
[   12.654240] libphy: Fixed MDIO Bus: probed
[   12.654335] tg3.c:v3.137 (May 11, 2014)
[   12.654391] pci 0005:00:00.0: enabling device (0105 -&gt; 0107)
[   12.654479] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[   12.685149] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[   12.685645] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[   12.685764] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   12.685881] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[   12.686009] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[   12.686214] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[   12.716609] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[   12.717088] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[   12.717195] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   12.717341] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[   12.717477] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[   12.717791] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[   12.717895] ehci-pci: EHCI PCI platform driver
[   12.718013] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[   12.718125] ohci-pci: OHCI PCI platform driver
[   12.718293] xhci_hcd 0001:01:00.0: xHCI Host Controller
[   12.718447] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[   12.718654] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[   12.718792] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[   12.719680] hub 1-0:1.0: USB hub found
[   12.719749] hub 1-0:1.0: 4 ports detected
[   12.719960] xhci_hcd 0001:01:00.0: xHCI Host Controller
[   12.720081] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[   12.720229] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[   12.720567] hub 2-0:1.0: USB hub found
[   12.720632] hub 2-0:1.0: 4 ports detected
[   12.720931] usbcore: registered new interface driver usb-storage
[   12.981001] ata4: SATA link down (SStatus 0 SControl 300)
[   12.990979] ata3: SATA link down (SStatus 0 SControl 300)
[   13.149754] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[   13.151123] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[   13.151231] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[   13.152011] ata2.00: configured for UDMA/133
[   13.159755] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[   13.160776] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[   13.160905] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[   13.161679] ata1.00: configured for UDMA/133
[   13.162385] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   16.756242] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   16.809958] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[   16.810052] i2c /dev entries driver
[   16.810463] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   16.810825] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   16.811223] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   16.811591] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   16.811981] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   40.251612108,3] I2C: Request timeout !
[   40.251678149,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   40.251770282,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   40.251858537,3] I2C:  start_time=00000004d31657b4 end_time=00000004d354151e (duration=00000000003dbd6a)
[   40.251960962,3] I2C: Register dump--
    cmd:0x103b000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   40.262434101,5] IPMI: Soft shutdown requested
[   16.853554] opal-power: Poweroff requested
[   17.133302] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   17.133658] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   17.134011] at24 9-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   17.134368] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   40.503473174,3] I2C: Request timeout !
[   40.503528758,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=3	bytes_sent=0
[   40.503632322,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   40.503719715,3] I2C:  start_time=00000004e2289598 end_time=00000004e2b662c4 (duration=00000000008dcd2c)
[   40.503826607,3] I2C: Register dump--
    cmd:0xd1a5000102000000	mode:0x0177040002000000	stat:0x02018c0102040000
  estat:0x0800de1802000000	intm:0x0000ff8002000000	intc:0x0000022a02000000
[   17.478589] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[   17.478669] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[   17.489627] usbcore: registered new interface driver usbhid
[   17.489699] usbhid: USB HID core driver
[   17.490162] ipip: IPv4 and MPLS over IPv4 tunneling driver
[   17.490527] NET: Registered protocol family 17
[   17.490605] Key type dns_resolver registered
[   17.490927] registered taskstats version 1
[   17.490991] Loading compiled-in X.509 certificates
[   17.497109] Loaded X.509 cert 'Build time autogenerated kernel key: da4020956e1f248135a55f7cfd8b760beb27dea8'
[   17.501409] Key type encrypted registered
[   17.501476] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[   17.501669] evm: HMAC attrs: 0x1
[   17.629877] rtc-opal opal-rtc: setting system clock to 2017-08-24 14:44:15 UTC (1503585855)
[   17.631954] Freeing unused kernel memory: 11456K
[   17.632012] This architecture does not have kernel memory protection.
[   17.648606] udevd[2950]: starting version 3.2.2
[   17.653108] udevd[2951]: starting eudev-3.2.2
[   17.713330] pci 0002:00:00.0: enabling device (0105 -&gt; 0107)
[   17.713400] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[   17.713473] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[   17.713703] [drm] platform has no IO space, trying MMIO
[   17.713795] [drm] VGA not enabled on entry, requesting chip POST
[   17.713895] [drm] Using P2A bridge for configuration
[   17.713976] [drm] AST 2500 detected
[   17.714020] [drm] Analog VGA only
[   17.714128] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[   17.714314] [TTM] Zone  kernel: Available graphics memory: 133961216 kiB
[   17.714336] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[   17.714477] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[   17.714568] [TTM] Initializing pool allocator
[   17.714678] scsi 0:0:0:0: Attached scsi generic sg0 type 0
[   17.714835] scsi 1:0:0:0: Attached scsi generic sg1 type 0
[   17.719382] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[   17.719435] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[   17.719438] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[   17.719463] sd 1:0:0:0: [sdb] Write Protect is off
[   17.719500] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[   17.720034] sd 0:0:0:0: [sda] 4096-byte physical blocks
[   17.720144] sd 0:0:0:0: [sda] Write Protect is off
[   17.720271] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.5.1-p641e963)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[J[1;47H0000000000000000 0000000000000000[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / 728d2189-0c67-4551-8857-40e2845ba17b][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic (recovery mode)[14;54H[0;7m   [10B[55D[m[enP5p1s0f0] Configuring with DHCP Booting in 9 sec: [sda2] Ubuntu   [24;13H8[24;33H[24;13H7[24;33H[24;13H6[24;33H[24;13H5[24;33H[24;13H4[24;33H[24;13H3[24;33H[24;13H2[24;33H[24;13H1[24;33H[24;10HUbuntu                 [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   41.090573] kexec_core: Starting new kernel
[   64.460318068,5] OPAL: Switch to big-endian OS
[   67.078411797,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000201fff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x202000000000 with 0x40000000
[    0.000000] Process table c000201ffe800000 and radix root for kernel: c0000000014a0000
[    0.000000] Linux version 4.10.0-26-generic (buildd@bos01-ppc64el-012) (gcc version 6.3.0 20170406 (Ubuntu 6.3.0-12ubuntu2) ) #30-Ubuntu SMP Tue Jun 27 09:29:34 UTC 2017 (Ubuntu 4.10.0-26.30-generic 4.10.17)
[    0.000000] Found initrd at 0xc000000002d90000:0xc00000000533e9f2
[    0.000000] OPAL: Power8 LPC bus found, chip ID 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x4000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x077c7afd18500249
[    0.000000]   possible        = 0x7fffffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000110000000
[    0.000000] -----------------------------------------------------
[    0.000000] cma: Reserved 13120 MiB at 0x0000201cc9000000
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6300-0x1fffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x201fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x201fff6e3600-0x201fff6ed2ff]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x201fff6b9900-0x201fff6c35ff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x201fff6afc00-0x201fff6b98ff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x201fff6a5f00-0x201fff6afbff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x201fff69c200-0x201fff6a5eff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x201fff692500-0x201fff69c1ff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x201fff688800-0x201fff6924ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000201fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 3 pages/cpu @c000001ff5eb0000 s149272 r0 d47336 u196608
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 4190208
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: root=UUID=728d2189-0c67-4551-8857-40e2845ba17b ro powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 131072 bytes
[    0.000000] log_buf_len: 1048576 bytes
[    0.000000] early log buf free: 115384(88%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 254328448K/268435456K available (11712K kernel code, 1600K rwdata, 3352K rodata, 4416K init, 3045K bss, 672128K reserved, 13434880K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000004] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000471] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.001287] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001986] Console: colour dummy device 80x25
[    0.002608] console [hvc0] enabled
[    0.002608] console [hvc0] enabled
[    0.002934] bootconsole [udbg0] disabled
[    0.002934] bootconsole [udbg0] disabled
[    0.003631] mempolicy: Enabling automatic NUMA balancing. Configure with numa_balancing= or the kernel.numa_balancing sysctl
[    0.003748] pid_max: default: 180224 minimum: 1408
[    0.006128] Security Framework initialized
[    0.006166] Yama: becoming mindful.
[    0.006281] AppArmor: AppArmor initialized
[    0.010171] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.112468] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.173093] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.173242] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.177513] ftrace: allocating 30684 entries in 12 pages
[    0.198518] EEH: PowerNV platform initialized
[    0.198568] POWER9 performance monitor hardware support registered
[    0.201185] smp: Bringing up secondary CPUs ...
[    0.747159] smp: Brought up 8 nodes, 176 CPUs
[    0.747238] numa: Node 0 CPUs: 0-87
[    0.747291] numa: Node 8 CPUs: 88-175
[    0.747333] numa: Node 250 CPUs:
[    0.747392] numa: Node 251 CPUs:
[    0.747431] numa: Node 252 CPUs:
[    0.747480] numa: Node 253 CPUs:
[    0.747529] numa: Node 254 CPUs:
[    0.747587] numa: Node 255 CPUs:
[    0.762668] devtmpfs: initialized
[    0.838599] evm: security.selinux
[    0.838649] evm: security.SMACK64
[    0.838686] evm: security.SMACK64EXEC
[    0.838733] evm: security.SMACK64TRANSMUTE
[    0.838780] evm: security.SMACK64MMAP
[    0.838836] evm: security.ima
[    0.838891] evm: security.capability
[    0.840035] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.840235] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.847739] NET: Registered protocol family 16
[    0.867165] cpuidle: using governor ladder
[    0.887177] cpuidle: using governor menu
[    0.887460] pstore: using zlib compression
[    0.887500] pstore: Registered nvram as persistent store backend
[    0.968722] PCI: Probing PCI hardware
[    0.968864] PCI host bridge to bus 0000:00
[    0.968944] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.969072] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.969185] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.969626] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.969771] PCI host bridge to bus 0001:00
[    0.969820] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.969952] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.970108] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.970848] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.971174] PCI host bridge to bus 0002:00
[    0.971208] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.971339] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.971470] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.972195] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.972731] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.972934] PCI host bridge to bus 0003:00
[    0.972983] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.973095] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.973198] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.973602] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.973747] PCI host bridge to bus 0004:00
[    0.973793] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.973923] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.974056] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.976060] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.977797] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.980034] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.980225] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.980386] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.980572] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.980782] PCI host bridge to bus 0005:00
[    0.980828] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.980978] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.981119] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.982320] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.982564] PCI host bridge to bus 0030:00
[    0.982613] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.982774] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.982906] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.982968] random: fast init done
[    0.983393] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.983538] PCI host bridge to bus 0033:00
[    0.983597] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.983728] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.983875] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.984329] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.984478] PCI host bridge to bus 0034:00
[    0.984531] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.984645] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.984775] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.985227] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.985380] PCI host bridge to bus 0035:00
[    0.985425] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.985586] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.985714] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.986614] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.987671] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.988863] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.989049] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.989241] PCI host bridge to bus 0006:00
[    0.989295] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.989389] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.990776] PCI host bridge to bus 0007:00
[    0.990810] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.990925] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.992255] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.992561] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.992654] pci 0001:00:00.0: BAR 14: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.992769] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.992898] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.993026] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.993372] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.993739] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.999064] IOMMU table initialized, virtual merging enabled
[    0.999114] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.999202] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.999276] iommu: Adding device 0001:01:00.0 to group 0
[    0.999345] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.999398] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.999568] pci 0002:00:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.999695] pci 0002:01:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.999795] pci 0002:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.999870] pci 0002:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.999980] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    1.000109] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    1.000235] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    1.000341] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    1.000446] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.000793] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    1.001136] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    1.006491] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    1.006561] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    1.006633] iommu: Adding device 0002:02:00.0 to group 1
[    1.006701] pci 0002:01:00.0: PCI bridge to [bus 02]
[    1.006785] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    1.006898] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    1.007245] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    1.007323] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    1.007436] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    1.007589] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    1.007931] pci 0003:00:00.0: PCI bridge to [bus 01]
[    1.008125] pci 0004:00:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    1.008231] pci 0004:00:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c200ffffff]
[    1.008366] pci 0004:01:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    1.008491] pci 0004:01:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    1.008601] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    1.008713] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    1.008814] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200842000-0x600c200843fff]
[    1.008924] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200844000-0x600c200845fff]
[    1.009041] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200846000-0x600c200847fff]
[    1.009167] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    1.009257] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    1.009351] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    1.009423] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    1.009537] pci 0004:02:02.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    1.009652] pci 0004:02:02.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    1.009756] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    1.009859] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    1.009940] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    1.010028] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    1.010122] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    1.010237] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    1.010337] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    1.010431] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    1.010520] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    1.010605] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    1.010680] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    1.010785] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    1.010880] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    1.010970] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    1.011059] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    1.011145] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    1.011234] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.011578] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    1.011894] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    1.017223] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    1.017297] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    1.017367] iommu: Adding device 0004:03:00.0 to group 2
[    1.017436] pci 0004:02:02.0: PCI bridge to [bus 03]
[    1.017498] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    1.017586] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    1.017723] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    1.017814] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    1.017906] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    1.017983] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    1.018308] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    1.018386] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    1.018491] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    1.018622] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    1.018979] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    1.024303] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    1.024376] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    1.024439] iommu: Adding device 0004:01:00.0 to group 3
[    1.024517] iommu: Adding device 0004:01:00.1 to group 3
[    1.024587] iommu: Adding device 0004:01:00.2 to group 3
[    1.024647] iommu: Adding device 0004:01:00.3 to group 3
[    1.024706] iommu: Adding device 0004:01:00.4 to group 3
[    1.024794] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    1.024884] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    1.025003] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    1.025150] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    1.025336] pci 0005:00:00.0: BAR 15: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    1.025485] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    1.025641] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    1.025759] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    1.025889] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    1.026015] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    1.026167] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    1.026310] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.026659] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    1.026969] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    1.032293] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    1.032361] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    1.032452] iommu: Adding device 0005:01:00.0 to group 4
[    1.032533] iommu: Adding device 0005:01:00.1 to group 4
[    1.032603] pci 0005:00:00.0: PCI bridge to [bus 01]
[    1.032679] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    1.032856] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    1.033200] pci 0030:00:00.0: PCI bridge to [bus 01]
[    1.033298] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    1.033647] pci 0033:00:00.0: PCI bridge to [bus 01]
[    1.033741] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.034101] pci 0034:00:00.0: PCI bridge to [bus 01]
[    1.034245] pci 0035:00:00.0: BAR 14: assigned [mem 0x620c280000000-0x620c2807fffff]
[    1.034333] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    1.034475] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.034814] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    1.034888] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    1.034988] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    1.035330] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    1.035405] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    1.035757] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    1.035818] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    1.035929] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    1.036102] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    1.036260] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    1.036418] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    1.036555] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    1.036715] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    1.036856] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    1.037013] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    1.037158] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    1.037310] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    1.037455] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    1.037605] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    1.037774] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    1.037918] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    1.038040] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    1.038204] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    1.038367] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    1.038525] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    1.038664] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    1.038827] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    1.038976] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    1.039108] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    1.039250] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    1.039409] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    1.039565] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    1.039655] pci 0006:00:00.1: Associating to existing PE d
[    1.039732] pci 0006:00:01.0: Associating to existing PE d
[    1.039816] pci 0006:00:01.1: Associating to existing PE d
[    1.039897] pci 0006:00:02.0: Associating to existing PE d
[    1.039976] pci 0006:00:02.1: Associating to existing PE d
[    1.040111] NPU6: Found 1 MMIO ATSD registers
[    1.040116] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    1.040265] pci 0007:00:00.1: Associating to existing PE d
[    1.040351] pci 0007:00:01.0: Associating to existing PE d
[    1.040417] pci 0007:00:01.1: Associating to existing PE d
[    1.040491] pci 0007:00:02.0: Associating to existing PE d
[    1.040575] pci 0007:00:02.1: Associating to existing PE d
[    1.040670] NPU7: Found 1 MMIO ATSD registers
[    1.044881] EEH: PCI Enhanced I/O Error Handling Enabled
[    1.068577] HugeTLB registered 2 MB page size, pre-allocated 0 pages
[    1.068631] HugeTLB registered 1 GB page size, pre-allocated 0 pages
[    1.073211] SCSI subsystem initialized
[    1.073656] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    1.073755] pci 0002:02:00.0: vgaarb: bridge control possible
[    1.073829] vgaarb: loaded
[    1.073941] usbcore: registered new interface driver usbfs
[    1.074043] usbcore: registered new interface driver hub
[    1.074629] usbcore: registered new device driver usb
[    1.074709] pps_core: LinuxPPS API ver. 1 registered
[    1.074780] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    1.074913] PTP clock support registered
[    1.075917] NetLabel: Initializing
[    1.075951] NetLabel:  domain hash size = 128
[    1.075997] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO
[    1.076109] NetLabel:  unlabeled traffic allowed by default
[    1.077088] clocksource: Switched to clocksource timebase
[    1.099204] VFS: Disk quotas dquot_6.6.0
[    1.099479] VFS: Dquot-cache hash table entries: 8192 (order 0, 65536 bytes)
[    1.100080] AppArmor: AppArmor Filesystem Enabled
[    1.104305] NET: Registered protocol family 2
[    1.105257] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    1.107281] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    1.107682] TCP: Hash tables configured (established 524288 bind 65536)
[    1.107792] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    1.108582] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    1.110022] NET: Registered protocol family 1
[    1.110376] Unpacking initramfs...
[    2.169963] Freeing initrd memory: 38528K
[    2.215003] audit: initializing netlink subsys (disabled)
[    2.215152] audit: type=2000 audit(1503585886.204:1): initialized
[    2.223319] Initialise system trusted keyrings
[    2.224133] workingset: timestamp_bits=38 max_order=22 bucket_order=0
[    2.228153] zbud: loaded
[    2.233156] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    2.234140] fuse init (API version 7.26)
[    2.239246] Key type asymmetric registered
[    2.239278] Asymmetric key parser 'x509' registered
[    2.239363] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 246)
[    2.239770] io scheduler noop registered
[    2.239803] io scheduler deadline registered
[    2.239873] io scheduler cfq registered (default)
[    2.242624] Using unsupported 1024x768 vga at 600c100010000, depth=32, pitch=4096
[    2.325479] Console: switching to colour frame buffer device 128x48
[    2.408029] fb0: Open Firmware frame buffer device on /pciex@600c3c0200000/pci@0/pci@0/vga@0
[    2.408424] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    2.408500] hvc0: No interrupts property, using OPAL event
[    2.409007] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
[    2.411675] Linux agpgart interface v0.103
[    2.429205] loop: module loaded
[    2.429609] libphy: Fixed MDIO Bus: probed
[    2.429642] tun: Universal TUN/TAP device driver, 1.6
[    2.429698] tun: (C) 1999-2004 Max Krasnyansky &lt;maxk@qualcomm.com&gt;
[    2.429875] PPP generic driver version 2.4.2
[    2.430049] VFIO - User Level meta-driver version: 0.3
[    2.431130] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    2.431220] ehci-pci: EHCI PCI platform driver
[    2.431321] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    2.431390] ohci-pci: OHCI PCI platform driver
[    2.431503] uhci_hcd: USB Universal Host Controller Interface driver
[    2.431728] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.431790] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    2.431979] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    2.432111] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    2.432815] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002
[    2.432875] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.432974] usb usb1: Product: xHCI Host Controller
[    2.433071] usb usb1: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.433175] usb usb1: SerialNumber: 0001:01:00.0
[    2.433444] hub 1-0:1.0: USB hub found
[    2.433492] hub 1-0:1.0: 4 ports detected
[    2.433868] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.433913] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    2.434020] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    2.434150] usb usb2: New USB device found, idVendor=1d6b, idProduct=0003
[    2.434246] usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.434367] usb usb2: Product: xHCI Host Controller
[    2.434454] usb usb2: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.434549] usb usb2: SerialNumber: 0001:01:00.0
[    2.434808] hub 2-0:1.0: USB hub found
[    2.434865] hub 2-0:1.0: 4 ports detected
[    2.435707] mousedev: PS/2 mouse device common for all mice
[    2.473047] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    2.473115] i2c /dev entries driver
[    2.476635] device-mapper: uevent: version 1.0.3
[    2.477038] device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
[    2.477129] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    2.492199] ledtrig-cpu: registered to indicate activity on CPUs
[    2.493485] NET: Registered protocol family 10
[    2.502567] Segment Routing with IPv6
[    2.502627] NET: Registered protocol family 17
[    2.502693] Key type dns_resolver registered
[    2.503017] registered taskstats version 1
[    2.503069] Loading compiled-in X.509 certificates
[    2.508138] Loaded X.509 cert 'Build time autogenerated kernel key: 5d3adc177bbb659f71409a29e976c45eb95b6207'
[    2.508472] zswap: loaded using pool lzo/zbud
[    2.511828] Key type big_key registered
[    2.511866] Key type trusted registered
[    2.515233] Key type encrypted registered
[    2.515271] AppArmor: AppArmor sha1 policy hashing enabled
[    2.515330] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    2.515477] evm: HMAC attrs: 0x1
[    2.565106] rtc-opal opal-rtc: setting system clock to 2017-08-24 14:44:47 UTC (1503585887)
[    2.565978] Unable to open file: /etc/keys/x509_ima.der (-2)
[    2.565984] Unable to open file: /etc/keys/x509_evm.der (-2)
[    2.566497] Freeing unused kernel memory: 4416K
[    2.566639] This architecture does not have kernel memory protection.
Loading, please wait...
starting version 232
[    2.858952] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    2.862057] tg3.c:v3.137 (May 11, 2014)
[    2.868054] [drm] Initialized
[    2.869116] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    2.869188] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    2.870494] scsi host0: ahci
[    2.870825] scsi host1: ahci
[    2.871132] scsi host2: ahci
[    2.871418] scsi host3: ahci
[    2.871569] ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
[    2.871672] ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
[    2.871798] ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
[    2.871915] ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
[    2.878364] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    2.879042] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    2.879142] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.879260] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.879379] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.895884] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    2.896503] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    2.896621] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.896778] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.896891] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.897545] [drm] platform has no IO space, trying MMIO
[    2.897610] [drm] Using P2A bridge for configuration
[    2.897660] [drm] AST 2500 detected
[    2.897714] [drm] Analog VGA only
[    2.897763] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    2.897949] [TTM] Zone  kernel: Available graphics memory: 133936608 kiB
[    2.898055] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    2.898150] [TTM] Initializing pool allocator
[    2.898245] [TTM] Initializing DMA pool allocator
[    2.901347] fb: switching to astdrmfb from OFfb vga
[    2.901433] Console: switching to colour dummy device 80x25
[    2.919890] Console: switching to colour frame buffer device 128x48
[    2.939930] ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[    2.960982] [drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
[    2.996656] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    3.017691] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    3.187163] ata4: SATA link down (SStatus 0 SControl 300)
[    3.187263] ata3: SATA link down (SStatus 0 SControl 300)
[    3.348982] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.349065] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.349922] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.350001] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.350121] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.350234] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.350762] ata2.00: configured for UDMA/133
[    3.350896] ata1.00: configured for UDMA/133
[    3.351771] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.397286] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.397366] sd 0:0:0:0: [sda] 4096-byte physical blocks
[    3.397397] sd 0:0:0:0: Attached scsi generic sg0 type 0
[    3.397536] sd 0:0:0:0: [sda] Write Protect is off
[    3.397636] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.398259] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.442419]  sda: sda1 sda2
[    3.442968] sd 0:0:0:0: [sda] Attached SCSI removable disk
[    3.461235] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.461306] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[    3.461317] sd 1:0:0:0: Attached scsi generic sg1 type 0
[    3.461435] sd 1:0:0:0: [sdb] Write Protect is off
[    3.461518] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.476715] sd 1:0:0:0: [sdb] Attached SCSI removable disk
Begin: Loading essential drivers ... done.
Begin: Running /scripts/init-premount ... done.
Begin: Mounting root file system ... Begin: Running /scripts/local-top ... done.
Begin: Running /scripts/local-premount ... done.
Begin: Will now check root file system ... fsck from util-linux 2.29
[/sbin/fsck.ext4 (1) -- /dev/sda2] fsck.ext4 -a -C0 /dev/sda2 
/dev/sda2: clean, 61836/61054976 files, 4985708/244188416 blocks
done.
[    3.953905] EXT4-fs (sda2): mounted filesystem with ordered data mode. Opts: (null)
done.
Begin: Running /scripts/local-bottom ... done.
Begin: Running /scripts/init-bottom ... done.
[    4.779371] ip_tables: (C) 2000-2006 Netfilter Core Team
[    4.820996] systemd[1]: systemd 232 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN)
[    4.821914] systemd[1]: Detected architecture ppc64-le.

Welcome to [1mUbuntu 17.04[0m!

[    4.842067] systemd[1]: Set hostname to &lt;w54L&gt;.
[    5.329570] systemd[1]: Listening on udev Control Socket.
[[0;32m  OK  [0m] Listening on udev Control Socket.
[    5.329963] systemd[1]: Started Forward Password Requests to Wall Directory Watch.
[[0;32m  OK  [0m] Started Forward Password Requests to Wall Directory Watch.
[    5.330335] systemd[1]: Listening on fsck to fsckd communication Socket.
[[0;32m  OK  [0m] Listening on fsck to fsckd communication Socket.
[    5.330917] systemd[1]: Created slice User and Session Slice.
[[0;32m  OK  [0m] Created slice User and Session Slice.
[    5.331250] systemd[1]: Listening on Journal Socket (/dev/log).
[[0;32m  OK  [0m] Listening on Journal Socket (/dev/log).
[    5.331562] systemd[1]: Listening on udev Kernel Socket.
[[0;32m  OK  [0m] Listening on udev Kernel Socket.
[    5.331867] systemd[1]: Listening on /dev/initctl Compatibility Named Pipe.
[[0;32m  OK  [0m] Listening on /dev/initctl Compatibility Named Pipe.
[[0;32m  OK  [0m] Reached target Remote File Systems.
[[0;32m  OK  [0m] Set up automount Arbitrary Executab\xe2\x80\xa6rmats File System Automount Point.
[[0;32m  OK  [0m] Listening on Journal Socket.
[[0;32m  OK  [0m] Listening on Syslog Socket.
[[0;32m  OK  [0m] Created slice System Slice.
[[0;32m  OK  [0m] Created slice system-serial\x2dgetty.slice.
[[0;32m  OK  [0m] Started Read required files in advance.
         Mounting POSIX Message Queue File System...
         Starting Create list of required st\xe2\x80\xa6ce nodes for the current kernel...
[[0;32m  OK  [0m] Reached target Slices.
[    5.403381] random: crng init done
         Starting Set the console keyboard layout...
         Starting Uncomplicated firewall...
         Mounting Huge Pages File System...
         Starting Load Kernel Modules...
         Starting Nameserver information manager...
[[0;32m  OK  [0m] Reached target User and Group Name Lookups.
[[0;32m  OK  [0m] Listening on Journal Audit Socket.
         Starting Journal Service...
         Mounting Debug File System...
[[0;32m  OK  [0m] Started Create list of required sta\xe2\x80\xa6vice nodes for the current kernel.
         Starting Create Static Device Nodes in /dev...
[[0;32m  OK  [0m] Started Uncomplicated firewall.
[[0;32m  OK  [0m] Started Load Kernel Modules.
         Mounting FUSE Control File System...
         Starting Apply Kernel Variables...
[[0;32m  OK  [0m] Mounted FUSE Control File System.
[[0;32m  OK  [0m] Mounted Huge Pages File System.
[[0;32m  OK  [0m] Mounted POSIX Message Queue File System.
[[0;32m  OK  [0m] Mounted Debug File System.
[[0;32m  OK  [0m] Started Apply Kernel Variables.
[[0;32m  OK  [0m] Started Nameserver information manager.
[[0;32m  OK  [0m] Reached target Network (Pre).
[[0;32m  OK  [0m] Started Journal Service.
[[0;32m  OK  [0m] Started Create Static Device Nodes in /dev.
         Starting udev Kernel Device Manager...
[[0;32m  OK  [0m] Started udev Kernel Device Manager.
         Starting Remount Root and Kernel File Systems...
[[0;32m  OK  [0m] Started Remount Root and Kernel File Systems.
         Starting udev Coldplug all Devices...
         Starting Load/Save Random Seed...
         Activating swap /swapfile...
         Starting Flush Journal to Persistent Storage...
[[0;32m  OK  [0m] Started Load/Save Random Seed.
[[0;32m  OK  [0m] Started Flush Journal to Persistent Storage.
[[0;32m  OK  [0m] Started Set the console keyboard layout.
[[0;32m  OK  [0m] Reached target Local File Systems (Pre).
[[0;32m  OK  [0m] Reached target Local File Systems.
         Starting Set console font and keymap...
         Starting AppArmor initialization...
         Starting Tell Plymouth To Write Out Runtime Data...
         Starting Create Volatile Files and Directories...
[[0;32m  OK  [0m] Started Set console font and keymap.
[[0;32m  OK  [0m] Started Tell Plymouth To Write Out Runtime Data.
[[0;32m  OK  [0m] Started Create Volatile Files and Directories.
         Starting Update UTMP about System Boot/Shutdown...
         Starting Network Time Synchronization...
[[0;32m  OK  [0m] Started Update UTMP about System Boot/Shutdown.
[[0;32m  OK  [0m] Activated swap /swapfile.
[[0;32m  OK  [0m] Reached target Swap.
[[0;32m  OK  [0m] Started AppArmor initialization.
         Starting Raise network interfaces...
[[0;32m  OK  [0m] Started udev Coldplug all Devices.
[   77.307688895,3] I2C: Request timeout !
[   77.307756051,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   77.307981481,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   77.308093043,3] I2C:  start_time=000000093f947d37 end_time=00000009402775f7 (duration=000000000092f8c0)
[   77.308198704,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started ifup for enP5p1s0f0.
[[0;32m  OK  [0m] Started Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Reached target Encrypted Volumes.
[[0;32m  OK  [0m] Reached target Paths.
[   77.462293753,3] I2C: Initial error status 0x82018c0482080000
[   77.482815286,3] I2C: Request timeout !
[   77.482877430,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   77.482989766,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   77.483061308,3] I2C:  start_time=000000094a04beae end_time=000000094aa1ab06 (duration=00000000009cec58)
[   77.483171308,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Network Time Synchronization.
[   78.008902651,3] I2C: Request timeout !
[   78.008975705,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   78.009088586,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   78.009163201,3] I2C:  start_time=000000094bfbc5e2 end_time=000000094c76db12 (duration=00000000007b1530)
[   78.009264390,3] I2C: Register dump--
    cmd:0x103b000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Reached target System Initialization.
[[0;32m  OK  [0m] Listening on D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Listening on UUID daemon activation socket.
[[0;32m  OK  [0m] Reached target Sockets.
[[0;32m  OK  [0m] Started Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Started Message of the Day.
[[0;32m  OK  [0m] Reached target Basic System.
[   78.058128225,3] I2C: Request timeout !
[   78.058184847,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   78.058297279,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   78.058368799,3] I2C:  start_time=000000094eeae59e end_time=000000094f6646cc (duration=00000000007b612e)
[   78.058481731,3] I2C: Register dump--
    cmd:0x1037000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Set the CPU Frequency Scaling governor.
         Starting LSB: daemon to balance interrupts for SMP systems...
[[0;32m  OK  [0m] Started D-Bus System Message Bus.
[   78.123511078,3] I2C: Request timeout !
[   78.123580485,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   78.123693158,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   78.123777186,3] I2C:  start_time=00000009531eb276 end_time=00000009536f7d09 (duration=000000000050ca93)
[   78.123887558,3] I2C: Register dump--
    cmd:0x1035000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
         Starting Accounts Service...
         Starting Login Service...
[   78.150551791,3] I2C: Request timeout !
[   78.150628504,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   78.150730936,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   78.150811986,3] I2C:  start_time=00000009546d2bed end_time=0000000954e73402 (duration=00000000007a0815)
[   78.150920908,3] I2C: Register dump--
    cmd:0x1037000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
         Starting System Logging Service...
[[0;32m  OK  [0m] Started Regular background program processing daemon.
[[0;32m  OK  [0m] Reached target System Time Synchronized.
[[0;32m  OK  [0m] Started Daily apt activities.
[[0;32m  OK  [0m] Reached target Timers.
[[0;32m  OK  [0m] Found device /dev/hvc0.
[[0;32m  OK  [0m] Started System Logging Service.
[[0;32m  OK  [0m] Started Login Service.
[[0;32m  OK  [0m] Listening on Load/Save RF Kill Switch Status /dev/rfkill Watch.
[[0;32m  OK  [0m] Started LSB: daemon to balance interrupts for SMP systems.
[[0;32m  OK  [0m] Started Raise network interfaces.
[[0;32m  OK  [0m] Reached target Network.
         Starting Network Name Resolution...
         Starting OpenBSD Secure Shell server...
         Starting Permit User Sessions...
[[0;32m  OK  [0m] Started Permit User Sessions.
         Starting Hold until boot process finishes up...
         Starting Terminate Plymouth Boot Screen...
[[0;32m  OK  [0m] Started Hold until boot process finishes up.
         Starting Set console scheme...
[[0;32m  OK  [0m] Started Serial Getty on hvc0.
[[0;32m  OK  [0m] Started Terminate Plymouth Boot Screen.
[[0;32m  OK  [0m] Started Set console scheme.
[[0;32m  OK  [0m] Created slice system-getty.slice.
[[0;32m  OK  [0m] Started Getty on tty1.
[[0;32m  OK  [0m] Reached target Login Prompts.
[[0;32m  OK  [0m] Started OpenBSD Secure Shell server.
[[0;32m  OK  [0m] Started Accounts Service.
[[0;32m  OK  [0m] Started Network Name Resolution.
[[0;32m  OK  [0m] Reached target Multi-User System.
[[0;32m  OK  [0m] Reached target Graphical Interface.
[[0;32m  OK  [0m] Started Stop ureadahead data collection 45s after completed startup.
         Starting Update UTMP about System Runlevel Changes...
[[0;32m  OK  [0m] Started Update UTMP about System Runlevel Changes.

Ubuntu 17.04 w54L hvc0

w54L login: </msg>
<status endtime="20170824 14:50:15.883" status="PASS" starttime="20170824 14:50:15.844"></status>
</kw>
<status endtime="20170824 14:50:15.883" status="PASS" starttime="20170824 14:49:58.974"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170824 14:50:15.883" status="FAIL" critical="yes" starttime="20170824 14:41:16.362">Keyword 'Is Host Off' failed after retrying for 6 minutes. The last error was: Off != On</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170824 14:50:15.884" status="FAIL" starttime="20170824 14:41:16.325"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170824 14:50:15.888" status="FAIL" starttime="20170824 14:41:09.947"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat name="Tests" pass="1" id="s1" fail="1">Tests</stat>
<stat name="Security" pass="1" id="s1-s1" fail="0">Tests.Security</stat>
<stat name="Test Ssl" pass="1" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat name="Test Basic Poweron" pass="0" id="s1-s2" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
