<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161216 04:22:05.722" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code update BMC">
<kw name="Check If File Exist" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n PATH: ${filepath}</arg>
</arguments>
<msg timestamp="20161216 04:22:06.177" level="INFO">
PATH: /home/fspcibld/barreleye-20161216040940.all.tar</msg>
<status status="PASS" endtime="20161216 04:22:06.177" starttime="20161216 04:22:06.177"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>msg=${filepath} doesn't exist [ ERROR ]</arg>
</arguments>
<msg timestamp="20161216 04:22:06.178" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/barreleye-20161216040940.all.tar"&gt;/home/fspcibld/barreleye-20161216040940.all.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161216 04:22:06.178" starttime="20161216 04:22:06.177"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${filepath}</arg>
</arguments>
<msg timestamp="20161216 04:22:06.178" level="INFO">${FILE_PATH} = /home/fspcibld/barreleye-20161216040940.all.tar</msg>
<status status="PASS" endtime="20161216 04:22:06.178" starttime="20161216 04:22:06.178"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:06.178" starttime="20161216 04:22:06.176"></status>
</kw>
<kw name="System Readiness Test" library="code_update_utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<assign>
<var>${l_status}</var>
</assign>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161216 04:22:06.180" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161216 04:22:06.180" starttime="20161216 04:22:06.180"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161216 04:22:06.184" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161216 04:22:09.187" level="INFO">${RC} = 0</msg>
<msg timestamp="20161216 04:22:09.187" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.61 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.797 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161216 04:22:09.188" starttime="20161216 04:22:06.181"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161216 04:22:09.191" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.61 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.797 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.772 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.746 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.746/0.983/1.619/0.368 ms</msg>
<status status="PASS" endtime="20161216 04:22:09.191" starttime="20161216 04:22:09.190"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:09.193" starttime="20161216 04:22:09.191"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:09.193" starttime="20161216 04:22:06.180"></status>
</kw>
<msg timestamp="20161216 04:22:09.193" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161216 04:22:09.193" starttime="20161216 04:22:06.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:09.199" starttime="20161216 04:22:09.194"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:22:09.201" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:22:09.203" starttime="20161216 04:22:09.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:09.204" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:09.204" starttime="20161216 04:22:09.203"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:22:09.204" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:22:09.204" starttime="20161216 04:22:09.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:22:09.205" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:22:09.205" starttime="20161216 04:22:09.204"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:22:09.569" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:22:09.569" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:09.569" starttime="20161216 04:22:09.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:22:09.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:22:09.570" starttime="20161216 04:22:09.570"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:09.571" starttime="20161216 04:22:09.200"></status>
</kw>
<msg timestamp="20161216 04:22:09.571" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161216 04:22:09.571" starttime="20161216 04:22:09.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:09.576" starttime="20161216 04:22:09.571"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161216 04:22:09.578" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161216 04:22:09.578" starttime="20161216 04:22:09.578"></status>
</kw>
<msg timestamp="20161216 04:22:09.578" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161216 04:22:09.578" starttime="20161216 04:22:09.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:09.583" starttime="20161216 04:22:09.583"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:09.583" starttime="20161216 04:22:09.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:09.586" starttime="20161216 04:22:09.583"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161216 04:22:09.587" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161216 04:22:09.587" starttime="20161216 04:22:09.586"></status>
</kw>
<msg timestamp="20161216 04:22:09.587" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161216 04:22:09.587" starttime="20161216 04:22:09.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:09.591" starttime="20161216 04:22:09.590"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:09.591" starttime="20161216 04:22:09.590"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:09.591" starttime="20161216 04:22:09.587"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161216 04:22:09.591" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161216 04:22:12.347" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161216 04:22:12.348" starttime="20161216 04:22:09.591"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:12.348" starttime="20161216 04:22:09.576"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161216 04:22:12.348" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161216 04:22:12.406" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:22:12.407" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161216 04:22:12.407" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161216 04:22:12.407" starttime="20161216 04:22:12.348"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161216 04:22:12.408" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161216 04:22:12.408" starttime="20161216 04:22:12.407"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:12.409" starttime="20161216 04:22:06.179"></status>
</kw>
<msg timestamp="20161216 04:22:12.409" level="INFO">${l_status} = True</msg>
<status status="PASS" endtime="20161216 04:22:12.409" starttime="20161216 04:22:06.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_status}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=System not in ideal state to use [ERROR]</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:12.416" starttime="20161216 04:22:12.409"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:12.416" starttime="20161216 04:22:06.179"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Validate BMC Version</arg>
<arg>before</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Validate BMC Version" library="code_update_utils">
<arguments>
<arg>before</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161216 04:22:12.421" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161216 04:22:12.421" starttime="20161216 04:22:12.420"></status>
</kw>
<msg timestamp="20161216 04:22:12.421" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161216 04:22:12.421" starttime="20161216 04:22:12.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:12.425" starttime="20161216 04:22:12.424"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:12.425" starttime="20161216 04:22:12.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:12.428" starttime="20161216 04:22:12.425"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161216 04:22:12.429" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161216 04:22:12.429" starttime="20161216 04:22:12.428"></status>
</kw>
<msg timestamp="20161216 04:22:12.429" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161216 04:22:12.429" starttime="20161216 04:22:12.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:12.433" starttime="20161216 04:22:12.432"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:12.433" starttime="20161216 04:22:12.432"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:12.433" starttime="20161216 04:22:12.429"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161216 04:22:12.433" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161216 04:22:14.625" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161216 04:22:14.626" starttime="20161216 04:22:12.433"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:14.626" starttime="20161216 04:22:12.418"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat /etc/version</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${version}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161216 04:22:14.626" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161216 04:22:14.826" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:22:14.826" level="INFO">${version} = 20161216032049</msg>
<msg timestamp="20161216 04:22:14.826" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161216 04:22:14.826" starttime="20161216 04:22:14.626"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161216 04:22:14.827" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161216 04:22:14.827" starttime="20161216 04:22:14.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${args}' == 'before'</arg>
<arg>Should not Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
<arg>ELSE</arg>
<arg>Should Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:14.830" starttime="20161216 04:22:14.830"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:14.830" starttime="20161216 04:22:14.827"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:14.830" starttime="20161216 04:22:12.417"></status>
</kw>
<msg timestamp="20161216 04:22:14.830" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20161216 04:22:14.831" starttime="20161216 04:22:12.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Pass Execution</arg>
<arg>Same Driver version installed</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:14.833" starttime="20161216 04:22:14.831"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161216 04:22:14.835" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161216 04:22:14.835" starttime="20161216 04:22:14.835"></status>
</kw>
<msg timestamp="20161216 04:22:14.835" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161216 04:22:14.835" starttime="20161216 04:22:14.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:14.839" starttime="20161216 04:22:14.838"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:14.839" starttime="20161216 04:22:14.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:14.842" starttime="20161216 04:22:14.839"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161216 04:22:14.843" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161216 04:22:14.843" starttime="20161216 04:22:14.842"></status>
</kw>
<msg timestamp="20161216 04:22:14.843" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161216 04:22:14.843" starttime="20161216 04:22:14.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:14.848" starttime="20161216 04:22:14.847"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:14.848" starttime="20161216 04:22:14.847"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:14.848" starttime="20161216 04:22:14.843"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161216 04:22:14.848" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161216 04:22:17.066" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161216 04:22:17.067" starttime="20161216 04:22:14.848"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:17.067" starttime="20161216 04:22:14.834"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20161216 04:22:17.068" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20161216 04:22:17.146" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:22:17.147" level="INFO">${output} = </msg>
<msg timestamp="20161216 04:22:17.147" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals on disk.</msg>
<msg timestamp="20161216 04:22:17.147" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20161216 04:22:17.147" starttime="20161216 04:22:17.067"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:17.148" starttime="20161216 04:22:17.147"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${stderr}</arg>
<arg>Vacuuming done</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:17.149" starttime="20161216 04:22:17.148"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:17.149" starttime="20161216 04:22:14.834"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:22:17.150" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:22:17.150" starttime="20161216 04:22:17.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:22:17.152" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:22:17.152" starttime="20161216 04:22:17.151"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:22:17.154" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161216 04:22:17.154" starttime="20161216 04:22:17.154"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:22:17.157" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status status="PASS" endtime="20161216 04:22:17.157" starttime="20161216 04:22:17.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:17.158" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:17.158" starttime="20161216 04:22:17.158"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:17.159" starttime="20161216 04:22:17.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:22:17.164" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:22:17.164" starttime="20161216 04:22:17.164"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:22:17.165" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:22:17.165" starttime="20161216 04:22:17.165"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:17.165" starttime="20161216 04:22:17.165"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:17.165" starttime="20161216 04:22:17.163"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:17.165" starttime="20161216 04:22:17.160"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:22:17.167" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:22:17.167" starttime="20161216 04:22:17.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:17.168" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:17.168" starttime="20161216 04:22:17.167"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:22:17.168" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:22:17.168" starttime="20161216 04:22:17.168"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:22:17.169" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:22:17.169" starttime="20161216 04:22:17.168"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:22:17.569" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:22:17.569" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:17.569" starttime="20161216 04:22:17.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:22:17.569" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:22:17.569" starttime="20161216 04:22:17.569"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:17.570" starttime="20161216 04:22:17.166"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:22:17.847" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:22:17.847" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:17.848" starttime="20161216 04:22:17.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:22:17.854" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:22:17.854" starttime="20161216 04:22:17.854"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:22:17.856" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:22:17.856" starttime="20161216 04:22:17.856"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:17.857" starttime="20161216 04:22:17.855"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:17.857" starttime="20161216 04:22:17.853"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:17.857" starttime="20161216 04:22:17.848"></status>
</kw>
<msg timestamp="20161216 04:22:17.857" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:17.857" starttime="20161216 04:22:17.155"></status>
</kw>
<msg timestamp="20161216 04:22:17.858" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:17.858" starttime="20161216 04:22:17.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:22:17.859" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:22:17.859" starttime="20161216 04:22:17.858"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:22:17.862" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:22:17.862" starttime="20161216 04:22:17.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:22:17.863" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:22:17.863" starttime="20161216 04:22:17.862"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:22:17.865" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161216 04:22:17.865" starttime="20161216 04:22:17.864"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:22:17.866" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161216 04:22:17.866" starttime="20161216 04:22:17.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:17.867" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:17.867" starttime="20161216 04:22:17.867"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:17.868" starttime="20161216 04:22:17.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:22:17.874" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:22:17.874" starttime="20161216 04:22:17.873"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:22:17.875" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:22:17.875" starttime="20161216 04:22:17.875"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:17.875" starttime="20161216 04:22:17.874"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:17.875" starttime="20161216 04:22:17.872"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:17.875" starttime="20161216 04:22:17.868"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:22:17.876" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:22:17.877" starttime="20161216 04:22:17.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:17.877" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:17.877" starttime="20161216 04:22:17.877"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:22:17.878" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:22:17.878" starttime="20161216 04:22:17.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:22:17.878" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:22:17.878" starttime="20161216 04:22:17.878"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:22:18.359" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:22:18.359" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:18.359" starttime="20161216 04:22:17.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:22:18.361" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:22:18.361" starttime="20161216 04:22:18.360"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:18.361" starttime="20161216 04:22:17.875"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:22:18.625" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:22:18.625" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:18.626" starttime="20161216 04:22:18.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:22:18.632" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:22:18.632" starttime="20161216 04:22:18.631"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:22:18.633" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:22:18.633" starttime="20161216 04:22:18.633"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:18.634" starttime="20161216 04:22:18.632"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:18.634" starttime="20161216 04:22:18.630"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:18.634" starttime="20161216 04:22:18.626"></status>
</kw>
<msg timestamp="20161216 04:22:18.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:18.634" starttime="20161216 04:22:17.865"></status>
</kw>
<msg timestamp="20161216 04:22:18.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:18.635" starttime="20161216 04:22:17.863"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:22:18.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:22:18.636" starttime="20161216 04:22:18.635"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:22:18.636" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:22:18.637" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:22:18.637" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': 0}</msg>
<status status="PASS" endtime="20161216 04:22:18.637" starttime="20161216 04:22:18.636"></status>
</kw>
<msg timestamp="20161216 04:22:18.637" level="INFO">${state} = 0</msg>
<status status="PASS" endtime="20161216 04:22:18.637" starttime="20161216 04:22:17.861"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:18.638" starttime="20161216 04:22:18.638"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:18.638" starttime="20161216 04:22:17.860"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:18.638" starttime="20161216 04:22:17.860"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:18.638" starttime="20161216 04:22:17.149"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20161216 04:22:18.640" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161216 04:22:18.640" starttime="20161216 04:22:18.640"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:22:18.642" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20161216 04:22:18.642" starttime="20161216 04:22:18.641"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:22:18.643" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161216 04:22:18.643" starttime="20161216 04:22:18.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:18.643" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:18.643" starttime="20161216 04:22:18.643"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:18.644" starttime="20161216 04:22:18.643"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:22:18.645" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:22:18.645" starttime="20161216 04:22:18.644"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:22:18.646" level="INFO">URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:22:18.646" starttime="20161216 04:22:18.646"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:18.646" starttime="20161216 04:22:18.645"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:18.646" starttime="20161216 04:22:18.644"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:22:18.647" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:22:18.648" starttime="20161216 04:22:18.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:18.649" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:18.649" starttime="20161216 04:22:18.648"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:22:18.649" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:22:18.649" starttime="20161216 04:22:18.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:22:18.650" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:22:18.650" starttime="20161216 04:22:18.650"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:22:19.320" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:22:19.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:19.320" starttime="20161216 04:22:18.650"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:22:19.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:22:19.321" starttime="20161216 04:22:19.320"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.321" starttime="20161216 04:22:18.646"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:22:19.523" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161216 04:22:19.523" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:19.523" starttime="20161216 04:22:19.321"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:22:19.525" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:22:19.525" starttime="20161216 04:22:19.524"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:22:19.526" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:22:19.527" starttime="20161216 04:22:19.526"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.527" starttime="20161216 04:22:19.525"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.527" starttime="20161216 04:22:19.524"></status>
</kw>
<msg timestamp="20161216 04:22:19.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:19.527" starttime="20161216 04:22:18.642"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:22:19.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:22:19.528" starttime="20161216 04:22:19.528"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161216 04:22:19.529" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:22:19.529" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:22:19.530" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20161216 04:22:19.530" starttime="20161216 04:22:19.529"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.530" starttime="20161216 04:22:18.640"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:22:19.533" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161216 04:22:19.533" starttime="20161216 04:22:19.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:22:19.539" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Get, args:{}</msg>
<status status="PASS" endtime="20161216 04:22:19.539" starttime="20161216 04:22:19.538"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:22:19.541" level="INFO">URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Get, args:{}</msg>
<status status="PASS" endtime="20161216 04:22:19.542" starttime="20161216 04:22:19.541"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.542" starttime="20161216 04:22:19.540"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.542" starttime="20161216 04:22:19.538"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.542" starttime="20161216 04:22:19.533"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:22:19.543" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:22:19.543" starttime="20161216 04:22:19.542"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:19.544" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:19.544" starttime="20161216 04:22:19.543"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:22:19.544" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:22:19.544" starttime="20161216 04:22:19.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:22:19.545" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:22:19.545" starttime="20161216 04:22:19.544"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:22:19.878" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:22:19.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:19.878" starttime="20161216 04:22:19.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:22:19.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:22:19.879" starttime="20161216 04:22:19.878"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.879" starttime="20161216 04:22:19.542"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:22:19.977" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20161216 04:22:19.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:19.977" starttime="20161216 04:22:19.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:22:19.981" level="INFO">${msg} = Response code:200, Content:{
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:22:19.981" starttime="20161216 04:22:19.980"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:22:19.982" level="INFO">Response code:200, Content:{
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:22:19.982" starttime="20161216 04:22:19.982"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.982" starttime="20161216 04:22:19.981"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.982" starttime="20161216 04:22:19.980"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.982" starttime="20161216 04:22:19.977"></status>
</kw>
<msg timestamp="20161216 04:22:19.983" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:19.983" starttime="20161216 04:22:19.531"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:22:19.984" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:22:19.984" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:22:19.984" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161216 04:22:19.984" starttime="20161216 04:22:19.983"></status>
</kw>
<msg timestamp="20161216 04:22:19.984" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20161216 04:22:19.984" starttime="20161216 04:22:19.530"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:19.985" starttime="20161216 04:22:19.984"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.985" starttime="20161216 04:22:18.639"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:22:19.986" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:22:19.986" starttime="20161216 04:22:19.985"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:22:19.987" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20161216 04:22:19.987" starttime="20161216 04:22:19.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:19.988" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:19.988" starttime="20161216 04:22:19.987"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:19.988" starttime="20161216 04:22:19.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:22:19.992" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc/action/PrepareForUpdate, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:22:19.992" starttime="20161216 04:22:19.992"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:22:19.993" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc/action/PrepareForUpdate, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:22:19.993" starttime="20161216 04:22:19.993"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.993" starttime="20161216 04:22:19.992"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.993" starttime="20161216 04:22:19.991"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:19.993" starttime="20161216 04:22:19.988"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:22:19.994" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:22:19.995" starttime="20161216 04:22:19.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:19.995" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:19.995" starttime="20161216 04:22:19.995"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:22:19.996" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:22:19.996" starttime="20161216 04:22:19.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:22:19.996" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:22:19.996" starttime="20161216 04:22:19.996"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:22:20.407" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:22:20.407" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:20.407" starttime="20161216 04:22:19.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:22:20.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:22:20.408" starttime="20161216 04:22:20.407"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:20.409" starttime="20161216 04:22:19.994"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:22:21.280" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:22:21.280" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:21.280" starttime="20161216 04:22:20.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:22:21.290" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:22:21.290" starttime="20161216 04:22:21.287"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:22:21.292" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:22:21.292" starttime="20161216 04:22:21.292"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:21.292" starttime="20161216 04:22:21.291"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:21.292" starttime="20161216 04:22:21.286"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:21.292" starttime="20161216 04:22:21.281"></status>
</kw>
<msg timestamp="20161216 04:22:21.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:21.293" starttime="20161216 04:22:19.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:22:21.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:22:21.293" starttime="20161216 04:22:21.293"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:22:21.295" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161216 04:22:21.295" starttime="20161216 04:22:21.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:22:21.299" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161216 04:22:21.299" starttime="20161216 04:22:21.298"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:22:21.299" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161216 04:22:21.300" starttime="20161216 04:22:21.299"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:21.300" starttime="20161216 04:22:21.299"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:21.300" starttime="20161216 04:22:21.298"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:21.300" starttime="20161216 04:22:21.295"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:22:21.301" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:22:21.301" starttime="20161216 04:22:21.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:21.302" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:21.302" starttime="20161216 04:22:21.301"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:22:21.302" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:22:21.302" starttime="20161216 04:22:21.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:22:21.303" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:22:21.303" starttime="20161216 04:22:21.302"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:22:21.734" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:22:21.734" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:21.734" starttime="20161216 04:22:21.303"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:22:21.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:22:21.735" starttime="20161216 04:22:21.735"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:21.735" starttime="20161216 04:22:21.300"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:22:21.860" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161216 04:22:21.861" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:21.861" starttime="20161216 04:22:21.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:22:21.864" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "...</msg>
<status status="PASS" endtime="20161216 04:22:21.864" starttime="20161216 04:22:21.864"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:22:21.865" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:22:21.865" starttime="20161216 04:22:21.865"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:21.865" starttime="20161216 04:22:21.865"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:21.866" starttime="20161216 04:22:21.864"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:21.866" starttime="20161216 04:22:21.861"></status>
</kw>
<msg timestamp="20161216 04:22:21.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:22:21.866" starttime="20161216 04:22:21.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:22:21.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:22:21.866" starttime="20161216 04:22:21.866"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:22:21.867" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:22:21.867" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:22:21.867" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'p...</msg>
<status status="PASS" endtime="20161216 04:22:21.867" starttime="20161216 04:22:21.867"></status>
</kw>
<msg timestamp="20161216 04:22:21.868" level="INFO">${data} = {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application...</msg>
<status status="PASS" endtime="20161216 04:22:21.868" starttime="20161216 04:22:21.293"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>Switch to update mode in progress</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:21.868" starttime="20161216 04:22:21.868"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:21.868" starttime="20161216 04:22:19.985"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161216 04:22:21.874" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161216 04:22:21.875" starttime="20161216 04:22:21.874"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161216 04:22:21.892" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161216 04:22:24.887" level="INFO">${RC} = 0</msg>
<msg timestamp="20161216 04:22:24.887" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.47 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.768 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161216 04:22:24.887" starttime="20161216 04:22:21.875"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161216 04:22:24.891" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.47 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.768 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.804 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.870 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.768/0.979/1.475/0.289 ms</msg>
<status status="PASS" endtime="20161216 04:22:24.891" starttime="20161216 04:22:24.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:24.892" starttime="20161216 04:22:24.891"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:24.892" starttime="20161216 04:22:21.873"></status>
</kw>
<msg timestamp="20161216 04:22:24.893" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161216 04:22:24.893" starttime="20161216 04:22:21.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:24.898" starttime="20161216 04:22:24.893"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:22:24.901" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:22:24.902" starttime="20161216 04:22:24.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:24.902" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:24.902" starttime="20161216 04:22:24.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:22:24.903" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:22:24.903" starttime="20161216 04:22:24.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:22:24.904" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:22:24.904" starttime="20161216 04:22:24.903"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:22:26.464" level="FAIL">SSLError: EOF occurred in violation of protocol (_ssl.c:590)</msg>
<status status="FAIL" endtime="20161216 04:22:26.464" starttime="20161216 04:22:24.904"></status>
</kw>
<status status="FAIL" endtime="20161216 04:22:26.465" starttime="20161216 04:22:24.899"></status>
</kw>
<msg timestamp="20161216 04:22:26.465" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161216 04:22:26.465" starttime="20161216 04:22:24.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161216 04:22:26.471" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161216 04:22:26.471" starttime="20161216 04:22:26.470"></status>
</kw>
<status status="FAIL" endtime="20161216 04:22:26.471" starttime="20161216 04:22:26.466"></status>
</kw>
<status status="FAIL" endtime="20161216 04:22:26.471" starttime="20161216 04:22:21.872"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161216 04:22:36.474" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161216 04:22:36.474" starttime="20161216 04:22:36.474"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161216 04:22:36.482" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161216 04:22:39.486" level="INFO">${RC} = 0</msg>
<msg timestamp="20161216 04:22:39.487" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.43 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.808 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161216 04:22:39.487" starttime="20161216 04:22:36.475"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161216 04:22:39.491" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.43 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.808 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=1.29 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.799 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.799/1.083/1.435/0.286 ms</msg>
<status status="PASS" endtime="20161216 04:22:39.491" starttime="20161216 04:22:39.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:39.492" starttime="20161216 04:22:39.492"></status>
</kw>
<status status="PASS" endtime="20161216 04:22:39.493" starttime="20161216 04:22:36.473"></status>
</kw>
<msg timestamp="20161216 04:22:39.493" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161216 04:22:39.493" starttime="20161216 04:22:36.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161216 04:22:39.499" starttime="20161216 04:22:39.494"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:22:39.502" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:22:39.503" starttime="20161216 04:22:39.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:22:39.503" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:22:39.503" starttime="20161216 04:22:39.503"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:22:39.504" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:22:39.504" starttime="20161216 04:22:39.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:22:39.504" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:22:39.505" starttime="20161216 04:22:39.504"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:22:43.008" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ProtocolError('Connection aborted.', error(104, 'Connection reset by peer')))</msg>
<status status="FAIL" endtime="20161216 04:22:43.009" starttime="20161216 04:22:39.505"></status>
</kw>
<status status="FAIL" endtime="20161216 04:22:43.009" starttime="20161216 04:22:39.500"></status>
</kw>
<msg timestamp="20161216 04:22:43.009" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161216 04:22:43.009" starttime="20161216 04:22:39.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161216 04:22:43.015" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161216 04:22:43.015" starttime="20161216 04:22:43.014"></status>
</kw>
<status status="FAIL" endtime="20161216 04:22:43.015" starttime="20161216 04:22:43.010"></status>
</kw>
<status status="FAIL" endtime="20161216 04:22:43.015" starttime="20161216 04:22:36.472"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161216 04:22:53.019" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161216 04:22:53.019" starttime="20161216 04:22:53.018"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161216 04:22:53.025" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161216 04:23:06.032" level="INFO">${RC} = 1</msg>
<msg timestamp="20161216 04:23:06.032" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20161216 04:23:06.033" starttime="20161216 04:22:53.019"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161216 04:23:06.045" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20161216 04:23:06.045" starttime="20161216 04:23:06.042"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161216 04:23:06.046" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161216 04:23:06.046" starttime="20161216 04:23:06.045"></status>
</kw>
<status status="FAIL" endtime="20161216 04:23:06.046" starttime="20161216 04:22:53.018"></status>
</kw>
<msg timestamp="20161216 04:23:06.047" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161216 04:23:06.047" starttime="20161216 04:22:53.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161216 04:23:06.052" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161216 04:23:06.052" starttime="20161216 04:23:06.052"></status>
</kw>
<status status="FAIL" endtime="20161216 04:23:06.052" starttime="20161216 04:23:06.048"></status>
</kw>
<status status="FAIL" endtime="20161216 04:23:06.054" starttime="20161216 04:22:53.016"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161216 04:23:16.057" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161216 04:23:16.057" starttime="20161216 04:23:16.056"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161216 04:23:16.063" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161216 04:23:29.098" level="INFO">${RC} = 1</msg>
<msg timestamp="20161216 04:23:29.098" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20161216 04:23:29.099" starttime="20161216 04:23:16.057"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161216 04:23:29.111" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20161216 04:23:29.111" starttime="20161216 04:23:29.108"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161216 04:23:29.113" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161216 04:23:29.113" starttime="20161216 04:23:29.111"></status>
</kw>
<status status="FAIL" endtime="20161216 04:23:29.113" starttime="20161216 04:23:16.056"></status>
</kw>
<msg timestamp="20161216 04:23:29.114" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161216 04:23:29.114" starttime="20161216 04:23:16.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161216 04:23:29.121" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161216 04:23:29.121" starttime="20161216 04:23:29.120"></status>
</kw>
<status status="FAIL" endtime="20161216 04:23:29.121" starttime="20161216 04:23:29.115"></status>
</kw>
<status status="FAIL" endtime="20161216 04:23:29.121" starttime="20161216 04:23:16.054"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161216 04:23:39.126" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161216 04:23:39.126" starttime="20161216 04:23:39.125"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161216 04:23:39.141" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161216 04:23:52.138" level="INFO">${RC} = 1</msg>
<msg timestamp="20161216 04:23:52.139" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20161216 04:23:52.139" starttime="20161216 04:23:39.126"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161216 04:23:52.143" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20161216 04:23:52.143" starttime="20161216 04:23:52.142"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161216 04:23:52.144" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161216 04:23:52.144" starttime="20161216 04:23:52.143"></status>
</kw>
<status status="FAIL" endtime="20161216 04:23:52.145" starttime="20161216 04:23:39.124"></status>
</kw>
<msg timestamp="20161216 04:23:52.145" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161216 04:23:52.145" starttime="20161216 04:23:39.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161216 04:23:52.151" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161216 04:23:52.152" starttime="20161216 04:23:52.151"></status>
</kw>
<status status="FAIL" endtime="20161216 04:23:52.152" starttime="20161216 04:23:52.146"></status>
</kw>
<status status="FAIL" endtime="20161216 04:23:52.152" starttime="20161216 04:23:39.122"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161216 04:24:02.155" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161216 04:24:02.155" starttime="20161216 04:24:02.155"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161216 04:24:02.161" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161216 04:24:05.167" level="INFO">${RC} = 0</msg>
<msg timestamp="20161216 04:24:05.168" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.93 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.755 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161216 04:24:05.168" starttime="20161216 04:24:02.156"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161216 04:24:05.172" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.93 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.755 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.811 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.812 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.755/1.078/1.936/0.496 ms</msg>
<status status="PASS" endtime="20161216 04:24:05.172" starttime="20161216 04:24:05.171"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:24:05.173" starttime="20161216 04:24:05.173"></status>
</kw>
<status status="PASS" endtime="20161216 04:24:05.174" starttime="20161216 04:24:02.154"></status>
</kw>
<msg timestamp="20161216 04:24:05.174" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161216 04:24:05.174" starttime="20161216 04:24:02.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161216 04:24:05.180" starttime="20161216 04:24:05.174"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:24:05.183" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:24:05.184" starttime="20161216 04:24:05.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:24:05.184" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:24:05.184" starttime="20161216 04:24:05.184"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:24:05.185" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:24:05.185" starttime="20161216 04:24:05.185"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:24:05.185" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:24:05.186" starttime="20161216 04:24:05.185"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:24:45.840" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.23.30', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" endtime="20161216 04:24:45.841" starttime="20161216 04:24:05.186"></status>
</kw>
<status status="FAIL" endtime="20161216 04:24:45.841" starttime="20161216 04:24:05.180"></status>
</kw>
<msg timestamp="20161216 04:24:45.841" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161216 04:24:45.841" starttime="20161216 04:24:05.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161216 04:24:45.847" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161216 04:24:45.847" starttime="20161216 04:24:45.847"></status>
</kw>
<status status="FAIL" endtime="20161216 04:24:45.848" starttime="20161216 04:24:45.842"></status>
</kw>
<status status="FAIL" endtime="20161216 04:24:45.848" starttime="20161216 04:24:02.153"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161216 04:24:55.851" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161216 04:24:55.851" starttime="20161216 04:24:55.851"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161216 04:24:55.859" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161216 04:24:58.863" level="INFO">${RC} = 0</msg>
<msg timestamp="20161216 04:24:58.863" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=3.04 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.828 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161216 04:24:58.864" starttime="20161216 04:24:55.852"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161216 04:24:58.867" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=3.04 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.828 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.805 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.864 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.805/1.386/3.049/0.960 ms</msg>
<status status="PASS" endtime="20161216 04:24:58.867" starttime="20161216 04:24:58.866"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:24:58.868" starttime="20161216 04:24:58.867"></status>
</kw>
<status status="PASS" endtime="20161216 04:24:58.868" starttime="20161216 04:24:55.850"></status>
</kw>
<msg timestamp="20161216 04:24:58.868" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161216 04:24:58.868" starttime="20161216 04:24:55.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161216 04:24:58.873" starttime="20161216 04:24:58.869"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:24:58.875" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:24:58.875" starttime="20161216 04:24:58.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:24:58.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:24:58.876" starttime="20161216 04:24:58.876"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:24:58.877" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:24:58.877" starttime="20161216 04:24:58.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:24:58.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:24:58.877" starttime="20161216 04:24:58.877"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:25:02.955" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:25:02.955" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:02.955" starttime="20161216 04:24:58.877"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:25:02.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:25:02.956" starttime="20161216 04:25:02.956"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:02.956" starttime="20161216 04:24:58.874"></status>
</kw>
<msg timestamp="20161216 04:25:02.957" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161216 04:25:02.957" starttime="20161216 04:24:58.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161216 04:25:02.961" starttime="20161216 04:25:02.957"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161216 04:25:02.964" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161216 04:25:02.964" starttime="20161216 04:25:02.963"></status>
</kw>
<msg timestamp="20161216 04:25:02.964" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161216 04:25:02.964" starttime="20161216 04:25:02.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:25:02.967" starttime="20161216 04:25:02.967"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:02.967" starttime="20161216 04:25:02.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161216 04:25:02.970" starttime="20161216 04:25:02.967"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161216 04:25:02.971" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161216 04:25:02.971" starttime="20161216 04:25:02.971"></status>
</kw>
<msg timestamp="20161216 04:25:02.971" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161216 04:25:02.971" starttime="20161216 04:25:02.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:25:02.975" starttime="20161216 04:25:02.975"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:02.975" starttime="20161216 04:25:02.974"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:02.975" starttime="20161216 04:25:02.971"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161216 04:25:02.976" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161216 04:25:15.069" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161216 04:25:15.070" starttime="20161216 04:25:02.976"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:15.070" starttime="20161216 04:25:02.962"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161216 04:25:15.071" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161216 04:25:15.139" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:25:15.140" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161216 04:25:15.140" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161216 04:25:15.140" starttime="20161216 04:25:15.071"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161216 04:25:15.141" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161216 04:25:15.141" starttime="20161216 04:25:15.140"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:15.141" starttime="20161216 04:24:55.848"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:15.141" starttime="20161216 04:22:21.871"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:15.141" starttime="20161216 04:22:21.868"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20161216 04:25:15.142" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20161216 04:25:15.142" starttime="20161216 04:25:15.142"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
</arguments>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:25:15.146" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:25:15.146" starttime="20161216 04:25:15.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:25:15.147" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:25:15.147" starttime="20161216 04:25:15.146"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:25:15.149" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:25:15.149" starttime="20161216 04:25:15.148"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:25:15.150" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:25:15.150" starttime="20161216 04:25:15.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:25:15.151" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:25:15.151" starttime="20161216 04:25:15.151"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:25:15.152" starttime="20161216 04:25:15.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:25:15.156" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:25:15.157" starttime="20161216 04:25:15.156"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:25:15.157" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:25:15.157" starttime="20161216 04:25:15.157"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:15.158" starttime="20161216 04:25:15.157"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:15.158" starttime="20161216 04:25:15.155"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:15.158" starttime="20161216 04:25:15.152"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:25:15.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:25:15.159" starttime="20161216 04:25:15.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:25:15.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:25:15.159" starttime="20161216 04:25:15.159"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:25:15.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:25:15.160" starttime="20161216 04:25:15.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:25:15.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:25:15.160" starttime="20161216 04:25:15.160"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:25:15.493" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:25:15.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:15.493" starttime="20161216 04:25:15.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:25:15.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:25:15.495" starttime="20161216 04:25:15.494"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:15.496" starttime="20161216 04:25:15.158"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:25:18.162" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:25:18.163" level="INFO">${ret} = &lt;Response [503]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:18.163" starttime="20161216 04:25:15.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:25:18.169" level="INFO">${msg} = Response code:503, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.ObjectPathInUse: busy processing bus traffic"
  }, 
  "message": "503 Service Unavailable", 
  "status": "error"...</msg>
<status status="PASS" endtime="20161216 04:25:18.169" starttime="20161216 04:25:18.168"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:25:18.171" level="INFO">Response code:503, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.ObjectPathInUse: busy processing bus traffic"
  }, 
  "message": "503 Service Unavailable", 
  "status": "error"
}</msg>
<status status="PASS" endtime="20161216 04:25:18.171" starttime="20161216 04:25:18.170"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:18.171" starttime="20161216 04:25:18.170"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:18.171" starttime="20161216 04:25:18.168"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:18.171" starttime="20161216 04:25:18.163"></status>
</kw>
<msg timestamp="20161216 04:25:18.171" level="INFO">${resp} = &lt;Response [503]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:18.172" starttime="20161216 04:25:15.149"></status>
</kw>
<msg timestamp="20161216 04:25:18.172" level="INFO">${resp} = &lt;Response [503]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:18.172" starttime="20161216 04:25:15.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:25:18.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20161216 04:25:18.173" level="FAIL">503 != 200</msg>
<status status="FAIL" endtime="20161216 04:25:18.174" starttime="20161216 04:25:18.172"></status>
</kw>
<status status="FAIL" endtime="20161216 04:25:18.174" starttime="20161216 04:25:15.145"></status>
</kw>
<status status="FAIL" endtime="20161216 04:25:18.174" starttime="20161216 04:25:15.144"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:25:28.177" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:25:28.177" starttime="20161216 04:25:28.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:25:28.178" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:25:28.178" starttime="20161216 04:25:28.177"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:25:28.180" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:25:28.180" starttime="20161216 04:25:28.179"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:25:28.182" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:25:28.182" starttime="20161216 04:25:28.181"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:25:28.183" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:25:28.183" starttime="20161216 04:25:28.182"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:25:28.184" starttime="20161216 04:25:28.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:25:28.191" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:25:28.191" starttime="20161216 04:25:28.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:25:28.193" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:25:28.193" starttime="20161216 04:25:28.192"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:28.193" starttime="20161216 04:25:28.191"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:28.193" starttime="20161216 04:25:28.189"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:28.193" starttime="20161216 04:25:28.184"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:25:28.195" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:25:28.195" starttime="20161216 04:25:28.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:25:28.196" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:25:28.196" starttime="20161216 04:25:28.196"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:25:28.196" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:25:28.196" starttime="20161216 04:25:28.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:25:28.197" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:25:28.197" starttime="20161216 04:25:28.197"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:25:28.555" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:25:28.556" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:28.556" starttime="20161216 04:25:28.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:25:28.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:25:28.557" starttime="20161216 04:25:28.556"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:28.557" starttime="20161216 04:25:28.194"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:25:29.463" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:25:29.464" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:29.464" starttime="20161216 04:25:28.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:25:29.470" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:25:29.470" starttime="20161216 04:25:29.469"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:25:29.471" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:25:29.472" starttime="20161216 04:25:29.471"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:29.472" starttime="20161216 04:25:29.470"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:29.472" starttime="20161216 04:25:29.469"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:29.472" starttime="20161216 04:25:29.464"></status>
</kw>
<msg timestamp="20161216 04:25:29.472" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:29.472" starttime="20161216 04:25:28.180"></status>
</kw>
<msg timestamp="20161216 04:25:29.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:29.473" starttime="20161216 04:25:28.178"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:25:29.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:25:29.474" starttime="20161216 04:25:29.473"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:25:29.475" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:25:29.475" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:25:29.475" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:25:29.475" starttime="20161216 04:25:29.474"></status>
</kw>
<msg timestamp="20161216 04:25:29.475" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:25:29.475" starttime="20161216 04:25:28.176"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:25:29.476" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:25:29.476" starttime="20161216 04:25:29.475"></status>
</kw>
<status status="FAIL" endtime="20161216 04:25:29.476" starttime="20161216 04:25:28.175"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:25:39.479" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:25:39.479" starttime="20161216 04:25:39.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:25:39.480" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:25:39.481" starttime="20161216 04:25:39.479"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:25:39.482" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:25:39.482" starttime="20161216 04:25:39.482"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:25:39.485" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:25:39.485" starttime="20161216 04:25:39.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:25:39.485" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:25:39.485" starttime="20161216 04:25:39.485"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:25:39.486" starttime="20161216 04:25:39.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:25:39.490" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:25:39.490" starttime="20161216 04:25:39.489"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:25:39.491" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:25:39.491" starttime="20161216 04:25:39.491"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:39.491" starttime="20161216 04:25:39.490"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:39.491" starttime="20161216 04:25:39.489"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:39.492" starttime="20161216 04:25:39.486"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:25:39.493" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:25:39.493" starttime="20161216 04:25:39.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:25:39.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:25:39.494" starttime="20161216 04:25:39.493"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:25:39.494" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:25:39.494" starttime="20161216 04:25:39.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:25:39.495" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:25:39.495" starttime="20161216 04:25:39.495"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:25:53.755" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:25:53.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:53.756" starttime="20161216 04:25:39.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:25:53.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:25:53.757" starttime="20161216 04:25:53.756"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:53.757" starttime="20161216 04:25:39.492"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:25:54.118" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:25:54.118" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:54.118" starttime="20161216 04:25:53.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:25:54.125" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:25:54.125" starttime="20161216 04:25:54.124"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:25:54.126" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:25:54.126" starttime="20161216 04:25:54.126"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:54.126" starttime="20161216 04:25:54.125"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:54.126" starttime="20161216 04:25:54.123"></status>
</kw>
<status status="PASS" endtime="20161216 04:25:54.126" starttime="20161216 04:25:54.118"></status>
</kw>
<msg timestamp="20161216 04:25:54.126" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:54.127" starttime="20161216 04:25:39.483"></status>
</kw>
<msg timestamp="20161216 04:25:54.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:25:54.127" starttime="20161216 04:25:39.481"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:25:54.127" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:25:54.127" starttime="20161216 04:25:54.127"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:25:54.128" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:25:54.128" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:25:54.128" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:25:54.128" starttime="20161216 04:25:54.128"></status>
</kw>
<msg timestamp="20161216 04:25:54.129" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:25:54.129" starttime="20161216 04:25:39.477"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:25:54.129" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:25:54.129" starttime="20161216 04:25:54.129"></status>
</kw>
<status status="FAIL" endtime="20161216 04:25:54.130" starttime="20161216 04:25:39.477"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:26:04.132" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:26:04.132" starttime="20161216 04:26:04.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:26:04.133" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:26:04.133" starttime="20161216 04:26:04.132"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:26:04.135" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:26:04.135" starttime="20161216 04:26:04.134"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:26:04.136" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:26:04.136" starttime="20161216 04:26:04.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:26:04.137" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:26:04.137" starttime="20161216 04:26:04.137"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:26:04.138" starttime="20161216 04:26:04.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:26:04.143" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:26:04.143" starttime="20161216 04:26:04.142"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:26:04.144" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:26:04.144" starttime="20161216 04:26:04.144"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:04.144" starttime="20161216 04:26:04.143"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:04.145" starttime="20161216 04:26:04.141"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:04.145" starttime="20161216 04:26:04.138"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:26:04.146" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:26:04.146" starttime="20161216 04:26:04.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:26:04.147" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:26:04.147" starttime="20161216 04:26:04.146"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:26:04.147" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:26:04.147" starttime="20161216 04:26:04.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:26:04.148" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:26:04.148" starttime="20161216 04:26:04.147"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:26:04.477" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:26:04.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:04.478" starttime="20161216 04:26:04.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:26:04.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:26:04.479" starttime="20161216 04:26:04.478"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:04.479" starttime="20161216 04:26:04.145"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:26:04.758" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:26:04.758" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:04.758" starttime="20161216 04:26:04.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:26:04.766" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:26:04.766" starttime="20161216 04:26:04.765"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:26:04.767" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:26:04.767" starttime="20161216 04:26:04.767"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:04.768" starttime="20161216 04:26:04.766"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:04.768" starttime="20161216 04:26:04.765"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:04.768" starttime="20161216 04:26:04.758"></status>
</kw>
<msg timestamp="20161216 04:26:04.768" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:04.768" starttime="20161216 04:26:04.135"></status>
</kw>
<msg timestamp="20161216 04:26:04.769" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:04.769" starttime="20161216 04:26:04.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:26:04.770" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:26:04.770" starttime="20161216 04:26:04.769"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:26:04.771" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:26:04.771" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:26:04.771" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:26:04.771" starttime="20161216 04:26:04.770"></status>
</kw>
<msg timestamp="20161216 04:26:04.771" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:26:04.771" starttime="20161216 04:26:04.131"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:26:04.772" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:26:04.772" starttime="20161216 04:26:04.771"></status>
</kw>
<status status="FAIL" endtime="20161216 04:26:04.772" starttime="20161216 04:26:04.130"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:26:14.777" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:26:14.777" starttime="20161216 04:26:14.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:26:14.778" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:26:14.778" starttime="20161216 04:26:14.777"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:26:14.780" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:26:14.780" starttime="20161216 04:26:14.779"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:26:14.781" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:26:14.782" starttime="20161216 04:26:14.781"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:26:14.782" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:26:14.782" starttime="20161216 04:26:14.782"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:26:14.783" starttime="20161216 04:26:14.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:26:14.789" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:26:14.789" starttime="20161216 04:26:14.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:26:14.790" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:26:14.790" starttime="20161216 04:26:14.790"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:14.790" starttime="20161216 04:26:14.789"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:14.790" starttime="20161216 04:26:14.788"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:14.791" starttime="20161216 04:26:14.783"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:26:14.792" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:26:14.793" starttime="20161216 04:26:14.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:26:14.794" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:26:14.794" starttime="20161216 04:26:14.794"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:26:14.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:26:14.795" starttime="20161216 04:26:14.794"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:26:14.795" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:26:14.795" starttime="20161216 04:26:14.795"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:26:15.123" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:26:15.124" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:15.124" starttime="20161216 04:26:14.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:26:15.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:26:15.124" starttime="20161216 04:26:15.124"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:15.125" starttime="20161216 04:26:14.791"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:26:15.668" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:26:15.669" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:15.669" starttime="20161216 04:26:15.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:26:15.675" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:26:15.675" starttime="20161216 04:26:15.674"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:26:15.676" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:26:15.676" starttime="20161216 04:26:15.676"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:15.677" starttime="20161216 04:26:15.675"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:15.677" starttime="20161216 04:26:15.674"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:15.677" starttime="20161216 04:26:15.669"></status>
</kw>
<msg timestamp="20161216 04:26:15.677" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:15.677" starttime="20161216 04:26:14.780"></status>
</kw>
<msg timestamp="20161216 04:26:15.678" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:15.678" starttime="20161216 04:26:14.778"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:26:15.679" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:26:15.679" starttime="20161216 04:26:15.678"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:26:15.679" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:26:15.679" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:26:15.680" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:26:15.680" starttime="20161216 04:26:15.679"></status>
</kw>
<msg timestamp="20161216 04:26:15.680" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:26:15.680" starttime="20161216 04:26:14.774"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:26:15.681" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:26:15.681" starttime="20161216 04:26:15.680"></status>
</kw>
<status status="FAIL" endtime="20161216 04:26:15.681" starttime="20161216 04:26:14.773"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:26:25.684" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:26:25.684" starttime="20161216 04:26:25.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:26:25.685" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:26:25.685" starttime="20161216 04:26:25.684"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:26:25.687" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:26:25.687" starttime="20161216 04:26:25.686"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:26:25.689" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:26:25.689" starttime="20161216 04:26:25.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:26:25.690" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:26:25.690" starttime="20161216 04:26:25.689"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:26:25.690" starttime="20161216 04:26:25.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:26:25.697" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:26:25.697" starttime="20161216 04:26:25.696"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:26:25.698" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:26:25.699" starttime="20161216 04:26:25.698"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:25.699" starttime="20161216 04:26:25.698"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:25.699" starttime="20161216 04:26:25.695"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:25.699" starttime="20161216 04:26:25.691"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:26:25.701" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:26:25.701" starttime="20161216 04:26:25.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:26:25.702" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:26:25.702" starttime="20161216 04:26:25.702"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:26:25.703" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:26:25.703" starttime="20161216 04:26:25.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:26:25.704" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:26:25.704" starttime="20161216 04:26:25.703"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:26:26.095" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:26:26.096" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:26.096" starttime="20161216 04:26:25.704"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:26:26.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:26:26.096" starttime="20161216 04:26:26.096"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:26.096" starttime="20161216 04:26:25.699"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:26:26.489" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:26:26.490" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:26.490" starttime="20161216 04:26:26.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:26:26.499" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:26:26.499" starttime="20161216 04:26:26.498"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:26:26.500" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:26:26.500" starttime="20161216 04:26:26.499"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:26.500" starttime="20161216 04:26:26.499"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:26.500" starttime="20161216 04:26:26.495"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:26.500" starttime="20161216 04:26:26.490"></status>
</kw>
<msg timestamp="20161216 04:26:26.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:26.500" starttime="20161216 04:26:25.687"></status>
</kw>
<msg timestamp="20161216 04:26:26.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:26.501" starttime="20161216 04:26:25.685"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:26:26.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:26:26.502" starttime="20161216 04:26:26.501"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:26:26.502" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:26:26.502" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:26:26.502" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:26:26.502" starttime="20161216 04:26:26.502"></status>
</kw>
<msg timestamp="20161216 04:26:26.503" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:26:26.503" starttime="20161216 04:26:25.683"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:26:26.503" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:26:26.503" starttime="20161216 04:26:26.503"></status>
</kw>
<status status="FAIL" endtime="20161216 04:26:26.503" starttime="20161216 04:26:25.682"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:26:36.506" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:26:36.506" starttime="20161216 04:26:36.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:26:36.508" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:26:36.508" starttime="20161216 04:26:36.507"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:26:36.510" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:26:36.510" starttime="20161216 04:26:36.509"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:26:36.512" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:26:36.512" starttime="20161216 04:26:36.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:26:36.512" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:26:36.513" starttime="20161216 04:26:36.512"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:26:36.513" starttime="20161216 04:26:36.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:26:36.519" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:26:36.519" starttime="20161216 04:26:36.518"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:26:36.520" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:26:36.520" starttime="20161216 04:26:36.520"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:36.521" starttime="20161216 04:26:36.519"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:36.521" starttime="20161216 04:26:36.518"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:36.521" starttime="20161216 04:26:36.514"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:26:36.522" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:26:36.522" starttime="20161216 04:26:36.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:26:36.523" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:26:36.523" starttime="20161216 04:26:36.523"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:26:36.523" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:26:36.524" starttime="20161216 04:26:36.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:26:36.524" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:26:36.524" starttime="20161216 04:26:36.524"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:26:36.856" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:26:36.857" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:36.857" starttime="20161216 04:26:36.524"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:26:36.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:26:36.857" starttime="20161216 04:26:36.857"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:36.858" starttime="20161216 04:26:36.521"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:26:37.145" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:26:37.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:37.145" starttime="20161216 04:26:36.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:26:37.149" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:26:37.149" starttime="20161216 04:26:37.149"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:26:37.150" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:26:37.150" starttime="20161216 04:26:37.150"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:37.150" starttime="20161216 04:26:37.150"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:37.151" starttime="20161216 04:26:37.149"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:37.151" starttime="20161216 04:26:37.146"></status>
</kw>
<msg timestamp="20161216 04:26:37.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:37.151" starttime="20161216 04:26:36.510"></status>
</kw>
<msg timestamp="20161216 04:26:37.152" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:37.152" starttime="20161216 04:26:36.508"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:26:37.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:26:37.153" starttime="20161216 04:26:37.152"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:26:37.153" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:26:37.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:26:37.153" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:26:37.153" starttime="20161216 04:26:37.153"></status>
</kw>
<msg timestamp="20161216 04:26:37.154" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:26:37.154" starttime="20161216 04:26:36.505"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:26:37.154" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:26:37.154" starttime="20161216 04:26:37.154"></status>
</kw>
<status status="FAIL" endtime="20161216 04:26:37.154" starttime="20161216 04:26:36.504"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:26:47.157" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:26:47.157" starttime="20161216 04:26:47.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:26:47.161" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:26:47.161" starttime="20161216 04:26:47.157"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:26:47.162" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:26:47.162" starttime="20161216 04:26:47.162"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:26:47.164" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:26:47.164" starttime="20161216 04:26:47.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:26:47.165" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:26:47.165" starttime="20161216 04:26:47.165"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:26:47.166" starttime="20161216 04:26:47.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:26:47.171" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:26:47.171" starttime="20161216 04:26:47.170"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:26:47.172" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:26:47.172" starttime="20161216 04:26:47.172"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:47.172" starttime="20161216 04:26:47.171"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:47.172" starttime="20161216 04:26:47.169"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:47.172" starttime="20161216 04:26:47.166"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:26:47.174" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:26:47.174" starttime="20161216 04:26:47.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:26:47.175" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:26:47.175" starttime="20161216 04:26:47.174"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:26:47.175" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:26:47.175" starttime="20161216 04:26:47.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:26:47.176" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:26:47.176" starttime="20161216 04:26:47.176"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:26:47.511" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:26:47.512" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:47.512" starttime="20161216 04:26:47.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:26:47.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:26:47.513" starttime="20161216 04:26:47.512"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:47.513" starttime="20161216 04:26:47.173"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:26:47.964" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:26:47.964" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:47.964" starttime="20161216 04:26:47.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:26:47.971" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:26:47.971" starttime="20161216 04:26:47.970"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:26:47.972" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:26:47.972" starttime="20161216 04:26:47.972"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:47.973" starttime="20161216 04:26:47.971"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:47.973" starttime="20161216 04:26:47.970"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:47.973" starttime="20161216 04:26:47.965"></status>
</kw>
<msg timestamp="20161216 04:26:47.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:47.973" starttime="20161216 04:26:47.163"></status>
</kw>
<msg timestamp="20161216 04:26:47.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:47.974" starttime="20161216 04:26:47.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:26:47.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:26:47.975" starttime="20161216 04:26:47.974"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:26:47.976" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:26:47.976" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:26:47.976" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:26:47.976" starttime="20161216 04:26:47.975"></status>
</kw>
<msg timestamp="20161216 04:26:47.976" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:26:47.976" starttime="20161216 04:26:47.156"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:26:47.977" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:26:47.977" starttime="20161216 04:26:47.976"></status>
</kw>
<status status="FAIL" endtime="20161216 04:26:47.977" starttime="20161216 04:26:47.155"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:26:57.980" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:26:57.980" starttime="20161216 04:26:57.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:26:57.981" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:26:57.981" starttime="20161216 04:26:57.981"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:26:57.983" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:26:57.983" starttime="20161216 04:26:57.982"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:26:57.985" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:26:57.985" starttime="20161216 04:26:57.984"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:26:57.985" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:26:57.985" starttime="20161216 04:26:57.985"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:26:57.989" starttime="20161216 04:26:57.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:26:57.995" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:26:57.995" starttime="20161216 04:26:57.994"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:26:57.999" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:26:57.999" starttime="20161216 04:26:57.999"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:58.000" starttime="20161216 04:26:57.995"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:58.000" starttime="20161216 04:26:57.993"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:58.000" starttime="20161216 04:26:57.989"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:26:58.001" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:26:58.001" starttime="20161216 04:26:58.000"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:26:58.002" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:26:58.002" starttime="20161216 04:26:58.001"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:26:58.002" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:26:58.002" starttime="20161216 04:26:58.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:26:58.003" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:26:58.003" starttime="20161216 04:26:58.002"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:26:58.339" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:26:58.339" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:58.339" starttime="20161216 04:26:58.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:26:58.340" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:26:58.340" starttime="20161216 04:26:58.339"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:58.340" starttime="20161216 04:26:58.000"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:26:58.626" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:26:58.627" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:58.627" starttime="20161216 04:26:58.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:26:58.633" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:26:58.633" starttime="20161216 04:26:58.632"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:26:58.634" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:26:58.634" starttime="20161216 04:26:58.634"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:58.635" starttime="20161216 04:26:58.633"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:58.635" starttime="20161216 04:26:58.632"></status>
</kw>
<status status="PASS" endtime="20161216 04:26:58.635" starttime="20161216 04:26:58.627"></status>
</kw>
<msg timestamp="20161216 04:26:58.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:58.635" starttime="20161216 04:26:57.983"></status>
</kw>
<msg timestamp="20161216 04:26:58.636" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:26:58.636" starttime="20161216 04:26:57.981"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:26:58.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:26:58.638" starttime="20161216 04:26:58.637"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:26:58.638" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:26:58.638" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:26:58.638" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:26:58.638" starttime="20161216 04:26:58.638"></status>
</kw>
<msg timestamp="20161216 04:26:58.639" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:26:58.639" starttime="20161216 04:26:57.979"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:26:58.639" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:26:58.639" starttime="20161216 04:26:58.639"></status>
</kw>
<status status="FAIL" endtime="20161216 04:26:58.640" starttime="20161216 04:26:57.978"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:27:08.645" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:27:08.645" starttime="20161216 04:27:08.645"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:27:08.646" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:27:08.646" starttime="20161216 04:27:08.646"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:27:08.648" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:27:08.648" starttime="20161216 04:27:08.647"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:27:08.649" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:27:08.649" starttime="20161216 04:27:08.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:27:08.649" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:27:08.649" starttime="20161216 04:27:08.649"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:27:08.650" starttime="20161216 04:27:08.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:27:08.655" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:27:08.655" starttime="20161216 04:27:08.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:27:08.655" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:27:08.656" starttime="20161216 04:27:08.655"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:08.656" starttime="20161216 04:27:08.655"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:08.656" starttime="20161216 04:27:08.653"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:08.656" starttime="20161216 04:27:08.650"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:27:08.658" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:27:08.658" starttime="20161216 04:27:08.658"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:27:08.659" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:27:08.659" starttime="20161216 04:27:08.659"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:27:08.660" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:27:08.660" starttime="20161216 04:27:08.659"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:27:08.660" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:27:08.660" starttime="20161216 04:27:08.660"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:27:08.990" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:27:08.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:08.991" starttime="20161216 04:27:08.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:27:08.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:27:08.991" starttime="20161216 04:27:08.991"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:08.991" starttime="20161216 04:27:08.656"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:27:09.274" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:27:09.275" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:09.275" starttime="20161216 04:27:08.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:27:09.281" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:27:09.281" starttime="20161216 04:27:09.280"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:27:09.282" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:27:09.283" starttime="20161216 04:27:09.282"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:09.283" starttime="20161216 04:27:09.281"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:09.283" starttime="20161216 04:27:09.280"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:09.283" starttime="20161216 04:27:09.275"></status>
</kw>
<msg timestamp="20161216 04:27:09.283" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:09.284" starttime="20161216 04:27:08.648"></status>
</kw>
<msg timestamp="20161216 04:27:09.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:09.285" starttime="20161216 04:27:08.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:27:09.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:27:09.286" starttime="20161216 04:27:09.285"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:27:09.287" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:27:09.287" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:27:09.287" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:27:09.287" starttime="20161216 04:27:09.286"></status>
</kw>
<msg timestamp="20161216 04:27:09.288" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:27:09.288" starttime="20161216 04:27:08.643"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:27:09.288" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:27:09.288" starttime="20161216 04:27:09.288"></status>
</kw>
<status status="FAIL" endtime="20161216 04:27:09.289" starttime="20161216 04:27:08.642"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:27:19.291" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:27:19.291" starttime="20161216 04:27:19.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:27:19.292" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:27:19.292" starttime="20161216 04:27:19.292"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:27:19.294" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:27:19.294" starttime="20161216 04:27:19.293"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:27:19.295" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:27:19.295" starttime="20161216 04:27:19.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:27:19.296" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:27:19.296" starttime="20161216 04:27:19.295"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:27:19.297" starttime="20161216 04:27:19.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:27:19.304" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:27:19.304" starttime="20161216 04:27:19.303"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:27:19.306" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:27:19.306" starttime="20161216 04:27:19.305"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:19.306" starttime="20161216 04:27:19.305"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:19.306" starttime="20161216 04:27:19.302"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:19.306" starttime="20161216 04:27:19.297"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:27:19.308" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:27:19.308" starttime="20161216 04:27:19.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:27:19.309" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:27:19.309" starttime="20161216 04:27:19.309"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:27:19.310" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:27:19.310" starttime="20161216 04:27:19.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:27:19.310" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:27:19.310" starttime="20161216 04:27:19.310"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:27:19.638" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:27:19.638" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:19.638" starttime="20161216 04:27:19.310"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:27:19.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:27:19.639" starttime="20161216 04:27:19.639"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:19.639" starttime="20161216 04:27:19.307"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:27:19.924" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:27:19.924" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:19.924" starttime="20161216 04:27:19.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:27:19.929" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:27:19.929" starttime="20161216 04:27:19.928"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:27:19.929" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:27:19.930" starttime="20161216 04:27:19.929"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:19.930" starttime="20161216 04:27:19.929"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:19.930" starttime="20161216 04:27:19.928"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:19.930" starttime="20161216 04:27:19.925"></status>
</kw>
<msg timestamp="20161216 04:27:19.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:19.930" starttime="20161216 04:27:19.294"></status>
</kw>
<msg timestamp="20161216 04:27:19.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:19.930" starttime="20161216 04:27:19.292"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:27:19.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:27:19.931" starttime="20161216 04:27:19.931"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:27:19.932" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:27:19.932" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:27:19.932" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:27:19.932" starttime="20161216 04:27:19.931"></status>
</kw>
<msg timestamp="20161216 04:27:19.932" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:27:19.932" starttime="20161216 04:27:19.290"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:27:19.933" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:27:19.933" starttime="20161216 04:27:19.932"></status>
</kw>
<status status="FAIL" endtime="20161216 04:27:19.933" starttime="20161216 04:27:19.289"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:27:29.935" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:27:29.935" starttime="20161216 04:27:29.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:27:29.936" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:27:29.936" starttime="20161216 04:27:29.936"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:27:29.938" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:27:29.938" starttime="20161216 04:27:29.937"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:27:29.939" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:27:29.939" starttime="20161216 04:27:29.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:27:29.940" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:27:29.940" starttime="20161216 04:27:29.939"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:27:29.940" starttime="20161216 04:27:29.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:27:29.946" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:27:29.946" starttime="20161216 04:27:29.945"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:27:29.947" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:27:29.947" starttime="20161216 04:27:29.947"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:29.947" starttime="20161216 04:27:29.946"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:29.947" starttime="20161216 04:27:29.944"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:29.947" starttime="20161216 04:27:29.940"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:27:29.948" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:27:29.949" starttime="20161216 04:27:29.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:27:29.949" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:27:29.949" starttime="20161216 04:27:29.949"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:27:29.950" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:27:29.950" starttime="20161216 04:27:29.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:27:29.951" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:27:29.951" starttime="20161216 04:27:29.950"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:27:30.282" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:27:30.282" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:30.282" starttime="20161216 04:27:29.951"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:27:30.283" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:27:30.283" starttime="20161216 04:27:30.283"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:30.284" starttime="20161216 04:27:29.947"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:27:30.562" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:27:30.562" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:30.562" starttime="20161216 04:27:30.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:27:30.566" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:27:30.566" starttime="20161216 04:27:30.566"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:27:30.567" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:27:30.567" starttime="20161216 04:27:30.567"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:30.567" starttime="20161216 04:27:30.566"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:30.567" starttime="20161216 04:27:30.565"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:30.567" starttime="20161216 04:27:30.562"></status>
</kw>
<msg timestamp="20161216 04:27:30.568" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:30.568" starttime="20161216 04:27:29.938"></status>
</kw>
<msg timestamp="20161216 04:27:30.568" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:30.568" starttime="20161216 04:27:29.936"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:27:30.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:27:30.572" starttime="20161216 04:27:30.568"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:27:30.572" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:27:30.572" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:27:30.573" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:27:30.573" starttime="20161216 04:27:30.572"></status>
</kw>
<msg timestamp="20161216 04:27:30.573" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:27:30.573" starttime="20161216 04:27:29.934"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:27:30.574" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:27:30.574" starttime="20161216 04:27:30.574"></status>
</kw>
<status status="FAIL" endtime="20161216 04:27:30.574" starttime="20161216 04:27:29.933"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:27:40.578" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:27:40.579" starttime="20161216 04:27:40.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:27:40.579" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:27:40.579" starttime="20161216 04:27:40.579"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:27:40.580" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:27:40.581" starttime="20161216 04:27:40.580"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:27:40.582" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:27:40.582" starttime="20161216 04:27:40.581"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:27:40.582" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:27:40.582" starttime="20161216 04:27:40.582"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:27:40.583" starttime="20161216 04:27:40.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:27:40.588" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:27:40.588" starttime="20161216 04:27:40.587"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:27:40.589" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:27:40.589" starttime="20161216 04:27:40.588"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:40.589" starttime="20161216 04:27:40.588"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:40.589" starttime="20161216 04:27:40.587"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:40.589" starttime="20161216 04:27:40.583"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:27:40.590" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:27:40.590" starttime="20161216 04:27:40.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:27:40.591" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:27:40.591" starttime="20161216 04:27:40.590"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:27:40.591" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:27:40.591" starttime="20161216 04:27:40.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:27:40.592" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:27:40.592" starttime="20161216 04:27:40.592"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:27:40.921" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:27:40.922" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:40.922" starttime="20161216 04:27:40.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:27:40.922" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:27:40.923" starttime="20161216 04:27:40.922"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:40.923" starttime="20161216 04:27:40.589"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:27:41.203" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:27:41.203" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:41.203" starttime="20161216 04:27:40.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:27:41.207" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:27:41.207" starttime="20161216 04:27:41.207"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:27:41.208" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:27:41.208" starttime="20161216 04:27:41.208"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:41.208" starttime="20161216 04:27:41.208"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:41.209" starttime="20161216 04:27:41.207"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:41.209" starttime="20161216 04:27:41.204"></status>
</kw>
<msg timestamp="20161216 04:27:41.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:41.209" starttime="20161216 04:27:40.581"></status>
</kw>
<msg timestamp="20161216 04:27:41.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:41.209" starttime="20161216 04:27:40.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:27:41.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:27:41.210" starttime="20161216 04:27:41.209"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:27:41.210" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:27:41.210" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:27:41.210" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:27:41.210" starttime="20161216 04:27:41.210"></status>
</kw>
<msg timestamp="20161216 04:27:41.211" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:27:41.211" starttime="20161216 04:27:40.576"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:27:41.211" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:27:41.211" starttime="20161216 04:27:41.211"></status>
</kw>
<status status="FAIL" endtime="20161216 04:27:41.211" starttime="20161216 04:27:40.575"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:27:51.216" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:27:51.216" starttime="20161216 04:27:51.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:27:51.217" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:27:51.217" starttime="20161216 04:27:51.217"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:27:51.219" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:27:51.219" starttime="20161216 04:27:51.219"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:27:51.221" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:27:51.221" starttime="20161216 04:27:51.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:27:51.222" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:27:51.222" starttime="20161216 04:27:51.222"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:27:51.223" starttime="20161216 04:27:51.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:27:51.229" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:27:51.229" starttime="20161216 04:27:51.228"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:27:51.230" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:27:51.230" starttime="20161216 04:27:51.230"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:51.230" starttime="20161216 04:27:51.230"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:51.230" starttime="20161216 04:27:51.228"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:51.231" starttime="20161216 04:27:51.224"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:27:51.231" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:27:51.232" starttime="20161216 04:27:51.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:27:51.232" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:27:51.232" starttime="20161216 04:27:51.232"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:27:51.233" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:27:51.233" starttime="20161216 04:27:51.233"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:27:51.234" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:27:51.234" starttime="20161216 04:27:51.233"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:27:51.577" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:27:51.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:51.577" starttime="20161216 04:27:51.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:27:51.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:27:51.579" starttime="20161216 04:27:51.578"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:51.579" starttime="20161216 04:27:51.231"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:27:52.132" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:27:52.132" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:52.132" starttime="20161216 04:27:51.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:27:52.140" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:27:52.141" starttime="20161216 04:27:52.140"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:27:52.141" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:27:52.141" starttime="20161216 04:27:52.141"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:52.142" starttime="20161216 04:27:52.141"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:52.142" starttime="20161216 04:27:52.139"></status>
</kw>
<status status="PASS" endtime="20161216 04:27:52.142" starttime="20161216 04:27:52.133"></status>
</kw>
<msg timestamp="20161216 04:27:52.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:52.142" starttime="20161216 04:27:51.219"></status>
</kw>
<msg timestamp="20161216 04:27:52.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:27:52.142" starttime="20161216 04:27:51.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:27:52.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:27:52.143" starttime="20161216 04:27:52.143"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:27:52.144" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:27:52.144" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:27:52.144" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:27:52.144" starttime="20161216 04:27:52.144"></status>
</kw>
<msg timestamp="20161216 04:27:52.144" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:27:52.144" starttime="20161216 04:27:51.215"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:27:52.145" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:27:52.145" starttime="20161216 04:27:52.145"></status>
</kw>
<status status="FAIL" endtime="20161216 04:27:52.145" starttime="20161216 04:27:51.213"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:28:02.148" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:28:02.148" starttime="20161216 04:28:02.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:28:02.150" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:28:02.150" starttime="20161216 04:28:02.148"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:28:02.151" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:28:02.152" starttime="20161216 04:28:02.151"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:28:02.154" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:28:02.154" starttime="20161216 04:28:02.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:28:02.155" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:28:02.155" starttime="20161216 04:28:02.154"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:28:02.156" starttime="20161216 04:28:02.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:28:02.161" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:28:02.161" starttime="20161216 04:28:02.160"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:28:02.161" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:28:02.162" starttime="20161216 04:28:02.161"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:02.162" starttime="20161216 04:28:02.161"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:02.162" starttime="20161216 04:28:02.159"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:02.162" starttime="20161216 04:28:02.156"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:28:02.163" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:28:02.163" starttime="20161216 04:28:02.162"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:28:02.164" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:28:02.164" starttime="20161216 04:28:02.163"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:28:02.164" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:28:02.164" starttime="20161216 04:28:02.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:28:02.165" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:28:02.165" starttime="20161216 04:28:02.165"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:28:02.492" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:28:02.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:02.492" starttime="20161216 04:28:02.165"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:28:02.493" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:28:02.494" starttime="20161216 04:28:02.493"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:02.494" starttime="20161216 04:28:02.162"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:28:02.772" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:28:02.772" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:02.772" starttime="20161216 04:28:02.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:28:02.780" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:28:02.780" starttime="20161216 04:28:02.779"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:28:02.781" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:28:02.781" starttime="20161216 04:28:02.781"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:02.781" starttime="20161216 04:28:02.780"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:02.782" starttime="20161216 04:28:02.778"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:02.782" starttime="20161216 04:28:02.773"></status>
</kw>
<msg timestamp="20161216 04:28:02.782" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:02.782" starttime="20161216 04:28:02.152"></status>
</kw>
<msg timestamp="20161216 04:28:02.783" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:02.783" starttime="20161216 04:28:02.150"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:28:02.784" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:28:02.784" starttime="20161216 04:28:02.783"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:28:02.785" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:28:02.785" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:28:02.785" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:28:02.785" starttime="20161216 04:28:02.784"></status>
</kw>
<msg timestamp="20161216 04:28:02.785" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:28:02.785" starttime="20161216 04:28:02.147"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:28:02.786" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:28:02.786" starttime="20161216 04:28:02.786"></status>
</kw>
<status status="FAIL" endtime="20161216 04:28:02.787" starttime="20161216 04:28:02.146"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:28:12.790" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:28:12.790" starttime="20161216 04:28:12.789"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:28:12.791" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:28:12.791" starttime="20161216 04:28:12.790"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:28:12.793" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:28:12.793" starttime="20161216 04:28:12.792"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:28:12.795" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:28:12.795" starttime="20161216 04:28:12.794"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:28:12.795" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:28:12.796" starttime="20161216 04:28:12.795"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:28:12.797" starttime="20161216 04:28:12.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:28:12.805" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:28:12.805" starttime="20161216 04:28:12.803"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:28:12.806" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:28:12.807" starttime="20161216 04:28:12.806"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:12.808" starttime="20161216 04:28:12.805"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:12.808" starttime="20161216 04:28:12.803"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:12.808" starttime="20161216 04:28:12.798"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:28:12.809" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:28:12.810" starttime="20161216 04:28:12.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:28:12.810" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:28:12.810" starttime="20161216 04:28:12.810"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:28:12.811" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:28:12.811" starttime="20161216 04:28:12.810"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:28:12.811" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:28:12.811" starttime="20161216 04:28:12.811"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:28:13.145" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:28:13.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:13.145" starttime="20161216 04:28:12.812"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:28:13.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:28:13.146" starttime="20161216 04:28:13.146"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:13.146" starttime="20161216 04:28:12.808"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:28:13.425" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:28:13.425" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:13.425" starttime="20161216 04:28:13.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:28:13.432" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:28:13.432" starttime="20161216 04:28:13.431"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:28:13.433" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:28:13.433" starttime="20161216 04:28:13.433"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:13.434" starttime="20161216 04:28:13.432"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:13.434" starttime="20161216 04:28:13.430"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:13.434" starttime="20161216 04:28:13.426"></status>
</kw>
<msg timestamp="20161216 04:28:13.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:13.434" starttime="20161216 04:28:12.793"></status>
</kw>
<msg timestamp="20161216 04:28:13.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:13.435" starttime="20161216 04:28:12.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:28:13.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:28:13.436" starttime="20161216 04:28:13.435"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:28:13.437" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:28:13.437" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:28:13.437" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:28:13.437" starttime="20161216 04:28:13.436"></status>
</kw>
<msg timestamp="20161216 04:28:13.437" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:28:13.437" starttime="20161216 04:28:12.788"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:28:13.438" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:28:13.438" starttime="20161216 04:28:13.438"></status>
</kw>
<status status="FAIL" endtime="20161216 04:28:13.438" starttime="20161216 04:28:12.787"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:28:23.441" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:28:23.441" starttime="20161216 04:28:23.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:28:23.442" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:28:23.442" starttime="20161216 04:28:23.442"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:28:23.444" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:28:23.444" starttime="20161216 04:28:23.443"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:28:23.445" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:28:23.445" starttime="20161216 04:28:23.445"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:28:23.446" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:28:23.446" starttime="20161216 04:28:23.446"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:28:23.447" starttime="20161216 04:28:23.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:28:23.452" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:28:23.452" starttime="20161216 04:28:23.451"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:28:23.453" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:28:23.454" starttime="20161216 04:28:23.453"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:23.454" starttime="20161216 04:28:23.453"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:23.454" starttime="20161216 04:28:23.451"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:23.454" starttime="20161216 04:28:23.447"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:28:23.455" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:28:23.456" starttime="20161216 04:28:23.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:28:23.456" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:28:23.457" starttime="20161216 04:28:23.456"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:28:23.457" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:28:23.457" starttime="20161216 04:28:23.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:28:23.458" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:28:23.458" starttime="20161216 04:28:23.458"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:28:23.786" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:28:23.786" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:23.786" starttime="20161216 04:28:23.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:28:23.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:28:23.787" starttime="20161216 04:28:23.786"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:23.787" starttime="20161216 04:28:23.454"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:28:24.067" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:28:24.068" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:24.068" starttime="20161216 04:28:23.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:28:24.072" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:28:24.072" starttime="20161216 04:28:24.071"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:28:24.072" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:28:24.072" starttime="20161216 04:28:24.072"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:24.073" starttime="20161216 04:28:24.072"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:24.073" starttime="20161216 04:28:24.071"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:24.073" starttime="20161216 04:28:24.068"></status>
</kw>
<msg timestamp="20161216 04:28:24.073" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:24.073" starttime="20161216 04:28:23.444"></status>
</kw>
<msg timestamp="20161216 04:28:24.073" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:24.073" starttime="20161216 04:28:23.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:28:24.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:28:24.074" starttime="20161216 04:28:24.073"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:28:24.074" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:28:24.075" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:28:24.075" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:28:24.075" starttime="20161216 04:28:24.074"></status>
</kw>
<msg timestamp="20161216 04:28:24.075" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:28:24.075" starttime="20161216 04:28:23.440"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:28:24.075" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:28:24.076" starttime="20161216 04:28:24.075"></status>
</kw>
<status status="FAIL" endtime="20161216 04:28:24.076" starttime="20161216 04:28:23.439"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:28:34.079" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:28:34.079" starttime="20161216 04:28:34.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:28:34.080" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:28:34.080" starttime="20161216 04:28:34.079"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:28:34.082" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:28:34.082" starttime="20161216 04:28:34.081"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:28:34.085" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:28:34.085" starttime="20161216 04:28:34.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:28:34.085" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:28:34.086" starttime="20161216 04:28:34.085"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:28:34.087" starttime="20161216 04:28:34.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:28:34.092" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:28:34.092" starttime="20161216 04:28:34.091"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:28:34.093" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:28:34.093" starttime="20161216 04:28:34.092"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:34.093" starttime="20161216 04:28:34.092"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:34.093" starttime="20161216 04:28:34.090"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:34.093" starttime="20161216 04:28:34.087"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:28:34.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:28:34.094" starttime="20161216 04:28:34.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:28:34.095" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:28:34.095" starttime="20161216 04:28:34.094"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:28:34.096" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:28:34.096" starttime="20161216 04:28:34.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:28:34.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:28:34.096" starttime="20161216 04:28:34.096"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:28:34.433" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:28:34.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:34.433" starttime="20161216 04:28:34.097"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:28:34.434" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:28:34.434" starttime="20161216 04:28:34.434"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:34.434" starttime="20161216 04:28:34.093"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:28:34.783" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:28:34.783" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:34.783" starttime="20161216 04:28:34.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:28:34.788" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:28:34.788" starttime="20161216 04:28:34.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:28:34.789" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:28:34.789" starttime="20161216 04:28:34.789"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:34.789" starttime="20161216 04:28:34.788"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:34.789" starttime="20161216 04:28:34.787"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:34.789" starttime="20161216 04:28:34.784"></status>
</kw>
<msg timestamp="20161216 04:28:34.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:34.790" starttime="20161216 04:28:34.082"></status>
</kw>
<msg timestamp="20161216 04:28:34.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:34.790" starttime="20161216 04:28:34.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:28:34.791" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:28:34.791" starttime="20161216 04:28:34.790"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:28:34.791" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:28:34.791" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:28:34.791" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:28:34.791" starttime="20161216 04:28:34.791"></status>
</kw>
<msg timestamp="20161216 04:28:34.792" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:28:34.792" starttime="20161216 04:28:34.078"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:28:34.792" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:28:34.792" starttime="20161216 04:28:34.792"></status>
</kw>
<status status="FAIL" endtime="20161216 04:28:34.793" starttime="20161216 04:28:34.076"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:28:44.796" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:28:44.796" starttime="20161216 04:28:44.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:28:44.797" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:28:44.797" starttime="20161216 04:28:44.796"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:28:44.799" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:28:44.799" starttime="20161216 04:28:44.798"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:28:44.801" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:28:44.801" starttime="20161216 04:28:44.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:28:44.802" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:28:44.802" starttime="20161216 04:28:44.801"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:28:44.803" starttime="20161216 04:28:44.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:28:44.809" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:28:44.809" starttime="20161216 04:28:44.808"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:28:44.810" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:28:44.810" starttime="20161216 04:28:44.810"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:44.810" starttime="20161216 04:28:44.809"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:44.810" starttime="20161216 04:28:44.808"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:44.810" starttime="20161216 04:28:44.803"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:28:44.811" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:28:44.812" starttime="20161216 04:28:44.811"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:28:44.812" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:28:44.812" starttime="20161216 04:28:44.812"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:28:44.813" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:28:44.813" starttime="20161216 04:28:44.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:28:44.813" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:28:44.813" starttime="20161216 04:28:44.813"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:28:45.145" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:28:45.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:45.145" starttime="20161216 04:28:44.814"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:28:45.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:28:45.146" starttime="20161216 04:28:45.146"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:45.146" starttime="20161216 04:28:44.810"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:28:45.426" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:28:45.426" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:45.426" starttime="20161216 04:28:45.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:28:45.433" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:28:45.434" starttime="20161216 04:28:45.433"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:28:45.435" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:28:45.435" starttime="20161216 04:28:45.435"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:45.435" starttime="20161216 04:28:45.434"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:45.436" starttime="20161216 04:28:45.432"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:45.436" starttime="20161216 04:28:45.427"></status>
</kw>
<msg timestamp="20161216 04:28:45.436" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:45.436" starttime="20161216 04:28:44.799"></status>
</kw>
<msg timestamp="20161216 04:28:45.437" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:45.437" starttime="20161216 04:28:44.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:28:45.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:28:45.438" starttime="20161216 04:28:45.437"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:28:45.438" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:28:45.438" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:28:45.439" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:28:45.439" starttime="20161216 04:28:45.438"></status>
</kw>
<msg timestamp="20161216 04:28:45.439" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:28:45.439" starttime="20161216 04:28:44.794"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:28:45.440" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:28:45.440" starttime="20161216 04:28:45.439"></status>
</kw>
<status status="FAIL" endtime="20161216 04:28:45.440" starttime="20161216 04:28:44.793"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:28:55.442" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:28:55.442" starttime="20161216 04:28:55.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:28:55.443" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:28:55.443" starttime="20161216 04:28:55.442"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:28:55.445" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:28:55.445" starttime="20161216 04:28:55.444"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:28:55.446" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:28:55.446" starttime="20161216 04:28:55.446"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:28:55.447" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:28:55.447" starttime="20161216 04:28:55.447"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:28:55.448" starttime="20161216 04:28:55.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:28:55.454" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:28:55.454" starttime="20161216 04:28:55.452"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:28:55.455" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:28:55.455" starttime="20161216 04:28:55.455"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:55.455" starttime="20161216 04:28:55.454"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:55.455" starttime="20161216 04:28:55.452"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:55.455" starttime="20161216 04:28:55.448"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:28:55.456" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:28:55.457" starttime="20161216 04:28:55.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:28:55.458" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:28:55.458" starttime="20161216 04:28:55.457"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:28:55.458" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:28:55.458" starttime="20161216 04:28:55.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:28:55.459" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:28:55.459" starttime="20161216 04:28:55.459"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:28:55.877" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:28:55.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:55.877" starttime="20161216 04:28:55.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:28:55.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:28:55.878" starttime="20161216 04:28:55.878"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:55.878" starttime="20161216 04:28:55.456"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:28:56.420" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:28:56.421" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:56.421" starttime="20161216 04:28:55.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:28:56.427" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:28:56.427" starttime="20161216 04:28:56.426"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:28:56.428" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:28:56.428" starttime="20161216 04:28:56.427"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:56.428" starttime="20161216 04:28:56.427"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:56.428" starttime="20161216 04:28:56.425"></status>
</kw>
<status status="PASS" endtime="20161216 04:28:56.428" starttime="20161216 04:28:56.421"></status>
</kw>
<msg timestamp="20161216 04:28:56.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:56.429" starttime="20161216 04:28:55.445"></status>
</kw>
<msg timestamp="20161216 04:28:56.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:28:56.429" starttime="20161216 04:28:55.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:28:56.430" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:28:56.430" starttime="20161216 04:28:56.430"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:28:56.431" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:28:56.431" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:28:56.431" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:28:56.431" starttime="20161216 04:28:56.430"></status>
</kw>
<msg timestamp="20161216 04:28:56.431" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:28:56.431" starttime="20161216 04:28:55.441"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:28:56.432" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:28:56.432" starttime="20161216 04:28:56.432"></status>
</kw>
<status status="FAIL" endtime="20161216 04:28:56.432" starttime="20161216 04:28:55.440"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:29:06.437" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:29:06.437" starttime="20161216 04:29:06.435"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:29:06.438" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:29:06.438" starttime="20161216 04:29:06.438"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:29:06.439" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:29:06.440" starttime="20161216 04:29:06.439"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:29:06.441" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:29:06.441" starttime="20161216 04:29:06.441"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:29:06.442" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:29:06.442" starttime="20161216 04:29:06.441"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:29:06.442" starttime="20161216 04:29:06.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:29:06.447" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:29:06.447" starttime="20161216 04:29:06.447"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:29:06.449" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:29:06.449" starttime="20161216 04:29:06.449"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:06.449" starttime="20161216 04:29:06.448"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:06.449" starttime="20161216 04:29:06.446"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:06.449" starttime="20161216 04:29:06.442"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:29:06.450" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:29:06.451" starttime="20161216 04:29:06.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:29:06.451" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:29:06.451" starttime="20161216 04:29:06.451"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:29:06.452" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:29:06.452" starttime="20161216 04:29:06.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:29:06.453" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:29:06.453" starttime="20161216 04:29:06.452"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:29:06.790" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:29:06.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:06.790" starttime="20161216 04:29:06.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:29:06.791" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:29:06.791" starttime="20161216 04:29:06.790"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:06.791" starttime="20161216 04:29:06.449"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:29:07.068" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:29:07.068" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:07.068" starttime="20161216 04:29:06.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:29:07.073" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:29:07.073" starttime="20161216 04:29:07.072"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:29:07.073" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:29:07.074" starttime="20161216 04:29:07.073"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:07.074" starttime="20161216 04:29:07.073"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:07.074" starttime="20161216 04:29:07.072"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:07.074" starttime="20161216 04:29:07.069"></status>
</kw>
<msg timestamp="20161216 04:29:07.074" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:07.074" starttime="20161216 04:29:06.440"></status>
</kw>
<msg timestamp="20161216 04:29:07.074" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:07.074" starttime="20161216 04:29:06.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:29:07.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:29:07.075" starttime="20161216 04:29:07.075"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:29:07.075" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:29:07.075" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:29:07.076" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:29:07.076" starttime="20161216 04:29:07.075"></status>
</kw>
<msg timestamp="20161216 04:29:07.076" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:29:07.076" starttime="20161216 04:29:06.434"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:29:07.076" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:29:07.077" starttime="20161216 04:29:07.076"></status>
</kw>
<status status="FAIL" endtime="20161216 04:29:07.077" starttime="20161216 04:29:06.433"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:29:17.079" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:29:17.079" starttime="20161216 04:29:17.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:29:17.080" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:29:17.080" starttime="20161216 04:29:17.079"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:29:17.081" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:29:17.081" starttime="20161216 04:29:17.081"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:29:17.083" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:29:17.083" starttime="20161216 04:29:17.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:29:17.083" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:29:17.084" starttime="20161216 04:29:17.083"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:29:17.084" starttime="20161216 04:29:17.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:29:17.090" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:29:17.090" starttime="20161216 04:29:17.089"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:29:17.091" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:29:17.091" starttime="20161216 04:29:17.091"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:17.091" starttime="20161216 04:29:17.090"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:17.091" starttime="20161216 04:29:17.088"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:17.091" starttime="20161216 04:29:17.084"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:29:17.092" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:29:17.093" starttime="20161216 04:29:17.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:29:17.093" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:29:17.093" starttime="20161216 04:29:17.093"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:29:17.094" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:29:17.094" starttime="20161216 04:29:17.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:29:17.095" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:29:17.095" starttime="20161216 04:29:17.094"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:29:17.563" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:29:17.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:17.563" starttime="20161216 04:29:17.095"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:29:17.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:29:17.565" starttime="20161216 04:29:17.564"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:17.565" starttime="20161216 04:29:17.091"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:29:17.934" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:29:17.934" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:17.934" starttime="20161216 04:29:17.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:29:17.943" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:29:17.943" starttime="20161216 04:29:17.942"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:29:17.945" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:29:17.945" starttime="20161216 04:29:17.944"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:17.945" starttime="20161216 04:29:17.943"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:17.945" starttime="20161216 04:29:17.941"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:17.946" starttime="20161216 04:29:17.935"></status>
</kw>
<msg timestamp="20161216 04:29:17.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:17.946" starttime="20161216 04:29:17.082"></status>
</kw>
<msg timestamp="20161216 04:29:17.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:17.948" starttime="20161216 04:29:17.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:29:17.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:29:17.949" starttime="20161216 04:29:17.948"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:29:17.950" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:29:17.950" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:29:17.950" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:29:17.950" starttime="20161216 04:29:17.949"></status>
</kw>
<msg timestamp="20161216 04:29:17.950" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:29:17.950" starttime="20161216 04:29:17.078"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:29:17.951" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:29:17.951" starttime="20161216 04:29:17.950"></status>
</kw>
<status status="FAIL" endtime="20161216 04:29:17.951" starttime="20161216 04:29:17.077"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:29:27.953" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:29:27.953" starttime="20161216 04:29:27.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:29:27.955" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:29:27.955" starttime="20161216 04:29:27.954"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:29:27.956" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:29:27.956" starttime="20161216 04:29:27.956"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:29:27.958" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:29:27.958" starttime="20161216 04:29:27.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:29:27.959" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:29:27.959" starttime="20161216 04:29:27.958"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:29:27.959" starttime="20161216 04:29:27.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:29:27.965" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:29:27.965" starttime="20161216 04:29:27.964"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:29:27.966" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:29:27.966" starttime="20161216 04:29:27.966"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:27.967" starttime="20161216 04:29:27.965"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:27.967" starttime="20161216 04:29:27.964"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:27.967" starttime="20161216 04:29:27.960"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:29:27.969" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:29:27.970" starttime="20161216 04:29:27.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:29:27.970" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:29:27.971" starttime="20161216 04:29:27.970"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:29:27.971" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:29:27.971" starttime="20161216 04:29:27.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:29:27.972" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:29:27.972" starttime="20161216 04:29:27.972"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:29:28.364" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:29:28.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:28.364" starttime="20161216 04:29:27.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:29:28.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:29:28.365" starttime="20161216 04:29:28.364"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:28.365" starttime="20161216 04:29:27.967"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:29:28.651" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:29:28.651" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:28.651" starttime="20161216 04:29:28.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:29:28.658" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:29:28.658" starttime="20161216 04:29:28.657"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:29:28.659" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:29:28.659" starttime="20161216 04:29:28.659"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:28.659" starttime="20161216 04:29:28.658"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:28.660" starttime="20161216 04:29:28.656"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:28.660" starttime="20161216 04:29:28.651"></status>
</kw>
<msg timestamp="20161216 04:29:28.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:28.660" starttime="20161216 04:29:27.956"></status>
</kw>
<msg timestamp="20161216 04:29:28.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:28.661" starttime="20161216 04:29:27.955"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:29:28.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:29:28.662" starttime="20161216 04:29:28.661"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:29:28.663" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:29:28.663" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:29:28.663" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:29:28.663" starttime="20161216 04:29:28.662"></status>
</kw>
<msg timestamp="20161216 04:29:28.663" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:29:28.663" starttime="20161216 04:29:27.952"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:29:28.664" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:29:28.664" starttime="20161216 04:29:28.664"></status>
</kw>
<status status="FAIL" endtime="20161216 04:29:28.665" starttime="20161216 04:29:27.951"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:29:38.667" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:29:38.667" starttime="20161216 04:29:38.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:29:38.668" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:29:38.668" starttime="20161216 04:29:38.667"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:29:38.670" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:29:38.670" starttime="20161216 04:29:38.669"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:29:38.671" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:29:38.671" starttime="20161216 04:29:38.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:29:38.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:29:38.672" starttime="20161216 04:29:38.671"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:29:38.672" starttime="20161216 04:29:38.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:29:38.687" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:29:38.687" starttime="20161216 04:29:38.686"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:29:38.687" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:29:38.688" starttime="20161216 04:29:38.687"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:38.688" starttime="20161216 04:29:38.687"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:38.688" starttime="20161216 04:29:38.685"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:38.688" starttime="20161216 04:29:38.672"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:29:38.694" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:29:38.694" starttime="20161216 04:29:38.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:29:38.695" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:29:38.695" starttime="20161216 04:29:38.694"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:29:38.695" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:29:38.695" starttime="20161216 04:29:38.695"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:29:38.696" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:29:38.696" starttime="20161216 04:29:38.695"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:29:39.026" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:29:39.026" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:39.026" starttime="20161216 04:29:38.696"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:29:39.027" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:29:39.027" starttime="20161216 04:29:39.027"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:39.027" starttime="20161216 04:29:38.692"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:29:39.317" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:29:39.317" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:39.317" starttime="20161216 04:29:39.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:29:39.322" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:29:39.322" starttime="20161216 04:29:39.322"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:29:39.323" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:29:39.324" starttime="20161216 04:29:39.323"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:39.324" starttime="20161216 04:29:39.323"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:39.324" starttime="20161216 04:29:39.321"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:39.324" starttime="20161216 04:29:39.318"></status>
</kw>
<msg timestamp="20161216 04:29:39.325" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:39.325" starttime="20161216 04:29:38.670"></status>
</kw>
<msg timestamp="20161216 04:29:39.325" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:39.325" starttime="20161216 04:29:38.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:29:39.326" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:29:39.326" starttime="20161216 04:29:39.326"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:29:39.327" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:29:39.327" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:29:39.327" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:29:39.327" starttime="20161216 04:29:39.327"></status>
</kw>
<msg timestamp="20161216 04:29:39.327" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:29:39.328" starttime="20161216 04:29:38.666"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:29:39.328" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:29:39.329" starttime="20161216 04:29:39.328"></status>
</kw>
<status status="FAIL" endtime="20161216 04:29:39.329" starttime="20161216 04:29:38.665"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:29:49.335" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:29:49.335" starttime="20161216 04:29:49.335"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:29:49.336" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:29:49.336" starttime="20161216 04:29:49.336"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:29:49.338" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:29:49.338" starttime="20161216 04:29:49.337"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:29:49.339" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:29:49.339" starttime="20161216 04:29:49.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:29:49.340" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:29:49.340" starttime="20161216 04:29:49.340"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:29:49.340" starttime="20161216 04:29:49.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:29:49.345" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:29:49.345" starttime="20161216 04:29:49.344"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:29:49.345" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:29:49.346" starttime="20161216 04:29:49.345"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:49.346" starttime="20161216 04:29:49.345"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:49.346" starttime="20161216 04:29:49.344"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:49.346" starttime="20161216 04:29:49.341"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:29:49.347" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:29:49.347" starttime="20161216 04:29:49.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:29:49.348" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:29:49.348" starttime="20161216 04:29:49.347"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:29:49.348" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:29:49.348" starttime="20161216 04:29:49.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:29:49.349" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:29:49.349" starttime="20161216 04:29:49.349"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:29:49.685" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:29:49.685" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:49.685" starttime="20161216 04:29:49.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:29:49.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:29:49.686" starttime="20161216 04:29:49.685"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:49.686" starttime="20161216 04:29:49.346"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:29:49.969" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:29:49.969" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:49.969" starttime="20161216 04:29:49.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:29:49.973" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:29:49.973" starttime="20161216 04:29:49.973"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:29:49.974" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:29:49.974" starttime="20161216 04:29:49.974"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:49.974" starttime="20161216 04:29:49.974"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:49.975" starttime="20161216 04:29:49.973"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:49.975" starttime="20161216 04:29:49.970"></status>
</kw>
<msg timestamp="20161216 04:29:49.975" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:49.975" starttime="20161216 04:29:49.338"></status>
</kw>
<msg timestamp="20161216 04:29:49.975" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:29:49.975" starttime="20161216 04:29:49.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:29:49.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:29:49.976" starttime="20161216 04:29:49.975"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:29:49.976" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:29:49.976" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:29:49.976" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:29:49.976" starttime="20161216 04:29:49.976"></status>
</kw>
<msg timestamp="20161216 04:29:49.977" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:29:49.977" starttime="20161216 04:29:49.334"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:29:49.977" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:29:49.977" starttime="20161216 04:29:49.977"></status>
</kw>
<status status="FAIL" endtime="20161216 04:29:49.977" starttime="20161216 04:29:49.333"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:29:59.980" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:29:59.980" starttime="20161216 04:29:59.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:29:59.981" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:29:59.981" starttime="20161216 04:29:59.980"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:29:59.983" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:29:59.983" starttime="20161216 04:29:59.982"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:29:59.984" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:29:59.984" starttime="20161216 04:29:59.984"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:29:59.984" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:29:59.985" starttime="20161216 04:29:59.984"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:29:59.985" starttime="20161216 04:29:59.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:29:59.990" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:29:59.991" starttime="20161216 04:29:59.989"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:29:59.991" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:29:59.992" starttime="20161216 04:29:59.991"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:59.992" starttime="20161216 04:29:59.991"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:59.992" starttime="20161216 04:29:59.989"></status>
</kw>
<status status="PASS" endtime="20161216 04:29:59.992" starttime="20161216 04:29:59.985"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:29:59.993" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:29:59.993" starttime="20161216 04:29:59.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:29:59.994" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:29:59.994" starttime="20161216 04:29:59.994"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:29:59.995" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:29:59.995" starttime="20161216 04:29:59.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:29:59.995" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:29:59.995" starttime="20161216 04:29:59.995"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:30:00.324" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:30:00.324" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:00.324" starttime="20161216 04:29:59.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:30:00.325" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:30:00.326" starttime="20161216 04:30:00.325"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:00.326" starttime="20161216 04:29:59.992"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:30:00.614" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:30:00.614" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:00.614" starttime="20161216 04:30:00.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:30:00.620" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:30:00.620" starttime="20161216 04:30:00.620"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:30:00.621" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:30:00.622" starttime="20161216 04:30:00.621"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:00.622" starttime="20161216 04:30:00.621"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:00.622" starttime="20161216 04:30:00.619"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:00.622" starttime="20161216 04:30:00.615"></status>
</kw>
<msg timestamp="20161216 04:30:00.622" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:00.622" starttime="20161216 04:29:59.983"></status>
</kw>
<msg timestamp="20161216 04:30:00.623" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:00.623" starttime="20161216 04:29:59.981"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:30:00.624" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:30:00.624" starttime="20161216 04:30:00.623"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:30:00.624" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:30:00.624" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:30:00.625" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:30:00.625" starttime="20161216 04:30:00.624"></status>
</kw>
<msg timestamp="20161216 04:30:00.625" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:30:00.625" starttime="20161216 04:29:59.979"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:30:00.626" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:30:00.626" starttime="20161216 04:30:00.625"></status>
</kw>
<status status="FAIL" endtime="20161216 04:30:00.626" starttime="20161216 04:29:59.978"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:30:10.630" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:30:10.630" starttime="20161216 04:30:10.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:30:10.631" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:30:10.631" starttime="20161216 04:30:10.630"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:30:10.633" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:30:10.633" starttime="20161216 04:30:10.632"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:30:10.635" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:30:10.635" starttime="20161216 04:30:10.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:30:10.636" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:30:10.636" starttime="20161216 04:30:10.635"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:30:10.636" starttime="20161216 04:30:10.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:30:10.642" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:30:10.642" starttime="20161216 04:30:10.641"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:30:10.643" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:30:10.643" starttime="20161216 04:30:10.643"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:10.643" starttime="20161216 04:30:10.642"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:10.643" starttime="20161216 04:30:10.641"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:10.643" starttime="20161216 04:30:10.637"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:30:10.644" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:30:10.645" starttime="20161216 04:30:10.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:30:10.645" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:30:10.645" starttime="20161216 04:30:10.645"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:30:10.646" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:30:10.646" starttime="20161216 04:30:10.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:30:10.646" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:30:10.646" starttime="20161216 04:30:10.646"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:30:11.018" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:30:11.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:11.018" starttime="20161216 04:30:10.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:30:11.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:30:11.019" starttime="20161216 04:30:11.019"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:11.019" starttime="20161216 04:30:10.643"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:30:11.296" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:30:11.296" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:11.296" starttime="20161216 04:30:11.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:30:11.301" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:30:11.301" starttime="20161216 04:30:11.301"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:30:11.303" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:30:11.303" starttime="20161216 04:30:11.302"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:11.303" starttime="20161216 04:30:11.302"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:11.303" starttime="20161216 04:30:11.300"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:11.303" starttime="20161216 04:30:11.297"></status>
</kw>
<msg timestamp="20161216 04:30:11.304" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:11.304" starttime="20161216 04:30:10.633"></status>
</kw>
<msg timestamp="20161216 04:30:11.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:11.306" starttime="20161216 04:30:10.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:30:11.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:30:11.307" starttime="20161216 04:30:11.306"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:30:11.307" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:30:11.307" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:30:11.308" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:30:11.308" starttime="20161216 04:30:11.307"></status>
</kw>
<msg timestamp="20161216 04:30:11.308" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:30:11.308" starttime="20161216 04:30:10.628"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:30:11.309" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:30:11.309" starttime="20161216 04:30:11.308"></status>
</kw>
<status status="FAIL" endtime="20161216 04:30:11.309" starttime="20161216 04:30:10.627"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:30:21.312" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:30:21.312" starttime="20161216 04:30:21.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:30:21.313" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:30:21.313" starttime="20161216 04:30:21.313"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:30:21.315" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:30:21.315" starttime="20161216 04:30:21.314"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:30:21.317" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:30:21.317" starttime="20161216 04:30:21.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:30:21.318" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:30:21.318" starttime="20161216 04:30:21.317"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:30:21.319" starttime="20161216 04:30:21.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:30:21.324" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:30:21.324" starttime="20161216 04:30:21.323"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:30:21.325" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:30:21.325" starttime="20161216 04:30:21.325"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:21.325" starttime="20161216 04:30:21.324"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:21.326" starttime="20161216 04:30:21.322"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:21.326" starttime="20161216 04:30:21.319"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:30:21.329" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:30:21.329" starttime="20161216 04:30:21.329"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:30:21.330" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:30:21.330" starttime="20161216 04:30:21.330"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:30:21.330" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:30:21.331" starttime="20161216 04:30:21.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:30:21.331" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:30:21.331" starttime="20161216 04:30:21.331"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:30:21.676" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:30:21.677" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:21.677" starttime="20161216 04:30:21.331"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:30:21.678" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:30:21.678" starttime="20161216 04:30:21.677"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:21.678" starttime="20161216 04:30:21.326"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:30:21.959" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:30:21.959" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:21.959" starttime="20161216 04:30:21.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:30:21.966" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:30:21.966" starttime="20161216 04:30:21.965"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:30:21.967" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:30:21.967" starttime="20161216 04:30:21.967"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:21.968" starttime="20161216 04:30:21.966"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:21.968" starttime="20161216 04:30:21.965"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:21.968" starttime="20161216 04:30:21.960"></status>
</kw>
<msg timestamp="20161216 04:30:21.969" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:21.969" starttime="20161216 04:30:21.315"></status>
</kw>
<msg timestamp="20161216 04:30:21.969" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:21.970" starttime="20161216 04:30:21.313"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:30:21.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:30:21.970" starttime="20161216 04:30:21.970"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:30:21.971" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:30:21.971" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:30:21.971" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:30:21.971" starttime="20161216 04:30:21.970"></status>
</kw>
<msg timestamp="20161216 04:30:21.971" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:30:21.971" starttime="20161216 04:30:21.311"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:30:21.972" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:30:21.972" starttime="20161216 04:30:21.971"></status>
</kw>
<status status="FAIL" endtime="20161216 04:30:21.972" starttime="20161216 04:30:21.310"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:30:31.977" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:30:31.977" starttime="20161216 04:30:31.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:30:31.977" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:30:31.977" starttime="20161216 04:30:31.977"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:30:31.979" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:30:31.979" starttime="20161216 04:30:31.978"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:30:31.981" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:30:31.981" starttime="20161216 04:30:31.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:30:31.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:30:31.981" starttime="20161216 04:30:31.981"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:30:31.982" starttime="20161216 04:30:31.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:30:31.988" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:30:31.988" starttime="20161216 04:30:31.987"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:30:31.990" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:30:31.990" starttime="20161216 04:30:31.990"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:31.990" starttime="20161216 04:30:31.988"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:31.992" starttime="20161216 04:30:31.986"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:31.992" starttime="20161216 04:30:31.982"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:30:31.994" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:30:31.995" starttime="20161216 04:30:31.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:30:31.995" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:30:31.995" starttime="20161216 04:30:31.995"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:30:31.996" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:30:31.996" starttime="20161216 04:30:31.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:30:31.997" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:30:31.997" starttime="20161216 04:30:31.996"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:30:32.366" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:30:32.367" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:32.367" starttime="20161216 04:30:31.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:30:32.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:30:32.368" starttime="20161216 04:30:32.367"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:32.368" starttime="20161216 04:30:31.993"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:30:32.896" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:30:32.896" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:32.896" starttime="20161216 04:30:32.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:30:32.903" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:30:32.903" starttime="20161216 04:30:32.902"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:30:32.904" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:30:32.904" starttime="20161216 04:30:32.904"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:32.905" starttime="20161216 04:30:32.903"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:32.905" starttime="20161216 04:30:32.901"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:32.905" starttime="20161216 04:30:32.897"></status>
</kw>
<msg timestamp="20161216 04:30:32.905" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:32.906" starttime="20161216 04:30:31.979"></status>
</kw>
<msg timestamp="20161216 04:30:32.906" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:32.906" starttime="20161216 04:30:31.978"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:30:32.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:30:32.907" starttime="20161216 04:30:32.906"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:30:32.908" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:30:32.908" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:30:32.908" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:30:32.908" starttime="20161216 04:30:32.907"></status>
</kw>
<msg timestamp="20161216 04:30:32.908" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:30:32.909" starttime="20161216 04:30:31.973"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:30:32.910" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:30:32.910" starttime="20161216 04:30:32.909"></status>
</kw>
<status status="FAIL" endtime="20161216 04:30:32.910" starttime="20161216 04:30:31.972"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:30:42.912" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:30:42.912" starttime="20161216 04:30:42.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:30:42.913" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:30:42.913" starttime="20161216 04:30:42.913"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:30:42.915" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:30:42.915" starttime="20161216 04:30:42.914"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:30:42.917" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:30:42.917" starttime="20161216 04:30:42.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:30:42.917" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:30:42.917" starttime="20161216 04:30:42.917"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:30:42.918" starttime="20161216 04:30:42.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:30:42.925" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:30:42.925" starttime="20161216 04:30:42.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:30:42.926" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:30:42.926" starttime="20161216 04:30:42.926"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:42.926" starttime="20161216 04:30:42.925"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:42.926" starttime="20161216 04:30:42.923"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:42.927" starttime="20161216 04:30:42.918"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:30:42.930" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:30:42.931" starttime="20161216 04:30:42.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:30:42.932" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:30:42.932" starttime="20161216 04:30:42.931"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:30:42.932" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:30:42.932" starttime="20161216 04:30:42.932"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:30:42.933" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:30:42.933" starttime="20161216 04:30:42.933"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:30:43.277" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:30:43.278" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:43.278" starttime="20161216 04:30:42.933"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:30:43.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:30:43.279" starttime="20161216 04:30:43.278"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:43.279" starttime="20161216 04:30:42.929"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:30:43.556" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:30:43.557" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:43.557" starttime="20161216 04:30:43.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:30:43.564" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:30:43.564" starttime="20161216 04:30:43.563"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:30:43.565" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:30:43.565" starttime="20161216 04:30:43.565"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:43.566" starttime="20161216 04:30:43.564"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:43.566" starttime="20161216 04:30:43.562"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:43.566" starttime="20161216 04:30:43.557"></status>
</kw>
<msg timestamp="20161216 04:30:43.566" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:43.566" starttime="20161216 04:30:42.915"></status>
</kw>
<msg timestamp="20161216 04:30:43.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:43.567" starttime="20161216 04:30:42.914"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:30:43.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:30:43.568" starttime="20161216 04:30:43.567"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:30:43.569" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:30:43.569" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:30:43.569" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:30:43.569" starttime="20161216 04:30:43.568"></status>
</kw>
<msg timestamp="20161216 04:30:43.570" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:30:43.570" starttime="20161216 04:30:42.911"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:30:43.570" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:30:43.571" starttime="20161216 04:30:43.570"></status>
</kw>
<status status="FAIL" endtime="20161216 04:30:43.571" starttime="20161216 04:30:42.910"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:30:53.574" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:30:53.574" starttime="20161216 04:30:53.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:30:53.575" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:30:53.575" starttime="20161216 04:30:53.574"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:30:53.577" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:30:53.577" starttime="20161216 04:30:53.577"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:30:53.579" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:30:53.579" starttime="20161216 04:30:53.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:30:53.580" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:30:53.580" starttime="20161216 04:30:53.580"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:30:53.581" starttime="20161216 04:30:53.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:30:53.588" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:30:53.590" starttime="20161216 04:30:53.587"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:30:53.591" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:30:53.591" starttime="20161216 04:30:53.591"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:53.591" starttime="20161216 04:30:53.590"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:53.592" starttime="20161216 04:30:53.586"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:53.592" starttime="20161216 04:30:53.582"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:30:53.594" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:30:53.595" starttime="20161216 04:30:53.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:30:53.595" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:30:53.595" starttime="20161216 04:30:53.595"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:30:53.596" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:30:53.596" starttime="20161216 04:30:53.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:30:53.596" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:30:53.596" starttime="20161216 04:30:53.596"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:30:53.930" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:30:53.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:53.930" starttime="20161216 04:30:53.596"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:30:53.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:30:53.932" starttime="20161216 04:30:53.931"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:53.932" starttime="20161216 04:30:53.592"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:30:54.218" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:30:54.218" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:54.218" starttime="20161216 04:30:53.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:30:54.225" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:30:54.225" starttime="20161216 04:30:54.224"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:30:54.226" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:30:54.226" starttime="20161216 04:30:54.226"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:54.226" starttime="20161216 04:30:54.225"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:54.227" starttime="20161216 04:30:54.223"></status>
</kw>
<status status="PASS" endtime="20161216 04:30:54.227" starttime="20161216 04:30:54.218"></status>
</kw>
<msg timestamp="20161216 04:30:54.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:54.228" starttime="20161216 04:30:53.577"></status>
</kw>
<msg timestamp="20161216 04:30:54.228" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:30:54.228" starttime="20161216 04:30:53.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:30:54.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:30:54.229" starttime="20161216 04:30:54.228"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:30:54.230" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:30:54.230" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:30:54.230" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:30:54.230" starttime="20161216 04:30:54.229"></status>
</kw>
<msg timestamp="20161216 04:30:54.230" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:30:54.230" starttime="20161216 04:30:53.572"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:30:54.231" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:30:54.231" starttime="20161216 04:30:54.231"></status>
</kw>
<status status="FAIL" endtime="20161216 04:30:54.231" starttime="20161216 04:30:53.571"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:31:04.234" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:31:04.234" starttime="20161216 04:31:04.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:31:04.235" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:31:04.235" starttime="20161216 04:31:04.234"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:31:04.237" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:31:04.237" starttime="20161216 04:31:04.236"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:31:04.239" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:31:04.239" starttime="20161216 04:31:04.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:31:04.240" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:31:04.240" starttime="20161216 04:31:04.239"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:31:04.241" starttime="20161216 04:31:04.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:31:04.248" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:31:04.249" starttime="20161216 04:31:04.247"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:31:04.250" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:31:04.250" starttime="20161216 04:31:04.250"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:04.251" starttime="20161216 04:31:04.249"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:04.251" starttime="20161216 04:31:04.246"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:04.251" starttime="20161216 04:31:04.241"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:31:04.252" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:31:04.253" starttime="20161216 04:31:04.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:31:04.253" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:31:04.253" starttime="20161216 04:31:04.253"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:31:04.254" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:31:04.254" starttime="20161216 04:31:04.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:31:04.255" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:31:04.255" starttime="20161216 04:31:04.254"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:31:04.586" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:31:04.586" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:04.586" starttime="20161216 04:31:04.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:31:04.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:31:04.588" starttime="20161216 04:31:04.587"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:04.588" starttime="20161216 04:31:04.251"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:31:04.869" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:31:04.869" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:04.869" starttime="20161216 04:31:04.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:31:04.873" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:31:04.873" starttime="20161216 04:31:04.873"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:31:04.874" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:31:04.874" starttime="20161216 04:31:04.874"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:04.874" starttime="20161216 04:31:04.873"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:04.874" starttime="20161216 04:31:04.872"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:04.874" starttime="20161216 04:31:04.869"></status>
</kw>
<msg timestamp="20161216 04:31:04.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:04.874" starttime="20161216 04:31:04.237"></status>
</kw>
<msg timestamp="20161216 04:31:04.876" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:04.876" starttime="20161216 04:31:04.235"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:31:04.877" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:31:04.877" starttime="20161216 04:31:04.876"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:31:04.877" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:31:04.877" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:31:04.877" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:31:04.878" starttime="20161216 04:31:04.877"></status>
</kw>
<msg timestamp="20161216 04:31:04.878" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:31:04.878" starttime="20161216 04:31:04.233"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:31:04.879" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:31:04.879" starttime="20161216 04:31:04.878"></status>
</kw>
<status status="FAIL" endtime="20161216 04:31:04.879" starttime="20161216 04:31:04.232"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:31:14.885" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:31:14.885" starttime="20161216 04:31:14.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:31:14.886" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:31:14.886" starttime="20161216 04:31:14.886"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:31:14.888" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:31:14.888" starttime="20161216 04:31:14.887"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:31:14.889" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:31:14.890" starttime="20161216 04:31:14.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:31:14.892" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:31:14.892" starttime="20161216 04:31:14.891"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:31:14.893" starttime="20161216 04:31:14.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:31:14.898" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:31:14.898" starttime="20161216 04:31:14.897"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:31:14.899" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:31:14.900" starttime="20161216 04:31:14.899"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:14.900" starttime="20161216 04:31:14.899"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:14.900" starttime="20161216 04:31:14.897"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:14.900" starttime="20161216 04:31:14.894"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:31:14.901" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:31:14.901" starttime="20161216 04:31:14.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:31:14.902" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:31:14.902" starttime="20161216 04:31:14.901"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:31:14.902" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:31:14.902" starttime="20161216 04:31:14.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:31:14.903" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:31:14.903" starttime="20161216 04:31:14.903"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:31:15.304" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:31:15.304" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:15.305" starttime="20161216 04:31:14.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:31:15.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:31:15.306" starttime="20161216 04:31:15.305"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:15.306" starttime="20161216 04:31:14.900"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:31:15.592" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:31:15.592" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:15.592" starttime="20161216 04:31:15.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:31:15.600" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:31:15.600" starttime="20161216 04:31:15.599"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:31:15.601" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:31:15.602" starttime="20161216 04:31:15.601"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:15.602" starttime="20161216 04:31:15.600"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:15.602" starttime="20161216 04:31:15.598"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:15.602" starttime="20161216 04:31:15.593"></status>
</kw>
<msg timestamp="20161216 04:31:15.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:15.605" starttime="20161216 04:31:14.888"></status>
</kw>
<msg timestamp="20161216 04:31:15.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:15.605" starttime="20161216 04:31:14.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:31:15.606" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:31:15.606" starttime="20161216 04:31:15.605"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:31:15.607" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:31:15.607" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:31:15.607" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:31:15.607" starttime="20161216 04:31:15.606"></status>
</kw>
<msg timestamp="20161216 04:31:15.607" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:31:15.607" starttime="20161216 04:31:14.881"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:31:15.608" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:31:15.608" starttime="20161216 04:31:15.607"></status>
</kw>
<status status="FAIL" endtime="20161216 04:31:15.608" starttime="20161216 04:31:14.880"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:31:25.610" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:31:25.610" starttime="20161216 04:31:25.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:31:25.611" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:31:25.611" starttime="20161216 04:31:25.610"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:31:25.612" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:31:25.612" starttime="20161216 04:31:25.612"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:31:25.614" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:31:25.614" starttime="20161216 04:31:25.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:31:25.614" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:31:25.614" starttime="20161216 04:31:25.614"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:31:25.615" starttime="20161216 04:31:25.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:31:25.622" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:31:25.622" starttime="20161216 04:31:25.621"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:31:25.623" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:31:25.624" starttime="20161216 04:31:25.623"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:25.624" starttime="20161216 04:31:25.622"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:25.624" starttime="20161216 04:31:25.620"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:25.624" starttime="20161216 04:31:25.615"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:31:25.625" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:31:25.626" starttime="20161216 04:31:25.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:31:25.626" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:31:25.626" starttime="20161216 04:31:25.626"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:31:25.627" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:31:25.627" starttime="20161216 04:31:25.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:31:25.627" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:31:25.627" starttime="20161216 04:31:25.627"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:31:26.041" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:31:26.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:26.041" starttime="20161216 04:31:25.627"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:31:26.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:31:26.042" starttime="20161216 04:31:26.042"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:26.042" starttime="20161216 04:31:25.624"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:31:26.557" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:31:26.558" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:26.558" starttime="20161216 04:31:26.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:31:26.563" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:31:26.563" starttime="20161216 04:31:26.562"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:31:26.564" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:31:26.564" starttime="20161216 04:31:26.564"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:26.565" starttime="20161216 04:31:26.563"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:26.565" starttime="20161216 04:31:26.562"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:26.565" starttime="20161216 04:31:26.558"></status>
</kw>
<msg timestamp="20161216 04:31:26.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:26.565" starttime="20161216 04:31:25.612"></status>
</kw>
<msg timestamp="20161216 04:31:26.566" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:26.566" starttime="20161216 04:31:25.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:31:26.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:31:26.568" starttime="20161216 04:31:26.568"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:31:26.569" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:31:26.569" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:31:26.569" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:31:26.569" starttime="20161216 04:31:26.568"></status>
</kw>
<msg timestamp="20161216 04:31:26.570" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:31:26.570" starttime="20161216 04:31:25.609"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:31:26.571" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:31:26.571" starttime="20161216 04:31:26.570"></status>
</kw>
<status status="FAIL" endtime="20161216 04:31:26.571" starttime="20161216 04:31:25.608"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:31:36.574" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:31:36.574" starttime="20161216 04:31:36.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:31:36.578" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:31:36.578" starttime="20161216 04:31:36.577"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:31:36.580" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:31:36.580" starttime="20161216 04:31:36.579"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:31:36.582" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:31:36.582" starttime="20161216 04:31:36.581"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:31:36.582" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:31:36.582" starttime="20161216 04:31:36.582"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:31:36.583" starttime="20161216 04:31:36.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:31:36.588" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:31:36.588" starttime="20161216 04:31:36.587"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:31:36.588" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:31:36.589" starttime="20161216 04:31:36.588"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:36.589" starttime="20161216 04:31:36.588"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:36.589" starttime="20161216 04:31:36.586"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:36.589" starttime="20161216 04:31:36.583"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:31:36.590" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:31:36.590" starttime="20161216 04:31:36.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:31:36.591" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:31:36.591" starttime="20161216 04:31:36.591"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:31:36.591" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:31:36.591" starttime="20161216 04:31:36.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:31:36.592" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:31:36.592" starttime="20161216 04:31:36.592"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:31:36.923" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:31:36.924" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:36.924" starttime="20161216 04:31:36.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:31:36.925" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:31:36.925" starttime="20161216 04:31:36.924"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:36.925" starttime="20161216 04:31:36.589"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:31:37.214" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:31:37.215" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:37.215" starttime="20161216 04:31:36.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:31:37.222" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:31:37.222" starttime="20161216 04:31:37.221"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:31:37.224" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:31:37.224" starttime="20161216 04:31:37.223"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:37.224" starttime="20161216 04:31:37.223"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:37.224" starttime="20161216 04:31:37.221"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:37.225" starttime="20161216 04:31:37.215"></status>
</kw>
<msg timestamp="20161216 04:31:37.226" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:37.226" starttime="20161216 04:31:36.580"></status>
</kw>
<msg timestamp="20161216 04:31:37.226" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:37.226" starttime="20161216 04:31:36.578"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:31:37.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:31:37.227" starttime="20161216 04:31:37.226"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:31:37.228" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:31:37.228" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:31:37.229" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:31:37.229" starttime="20161216 04:31:37.228"></status>
</kw>
<msg timestamp="20161216 04:31:37.229" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:31:37.229" starttime="20161216 04:31:36.572"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:31:37.230" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:31:37.230" starttime="20161216 04:31:37.229"></status>
</kw>
<status status="FAIL" endtime="20161216 04:31:37.231" starttime="20161216 04:31:36.571"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:31:47.233" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:31:47.233" starttime="20161216 04:31:47.233"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:31:47.234" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:31:47.234" starttime="20161216 04:31:47.234"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:31:47.236" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:31:47.236" starttime="20161216 04:31:47.236"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:31:47.240" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:31:47.240" starttime="20161216 04:31:47.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:31:47.243" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:31:47.243" starttime="20161216 04:31:47.242"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:31:47.243" starttime="20161216 04:31:47.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:31:47.248" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:31:47.248" starttime="20161216 04:31:47.247"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:31:47.249" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:31:47.249" starttime="20161216 04:31:47.249"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:47.249" starttime="20161216 04:31:47.249"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:47.250" starttime="20161216 04:31:47.247"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:47.250" starttime="20161216 04:31:47.244"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:31:47.251" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:31:47.251" starttime="20161216 04:31:47.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:31:47.251" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:31:47.251" starttime="20161216 04:31:47.251"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:31:47.252" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:31:47.252" starttime="20161216 04:31:47.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:31:47.252" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:31:47.253" starttime="20161216 04:31:47.252"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:31:47.585" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:31:47.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:47.586" starttime="20161216 04:31:47.253"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:31:47.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:31:47.587" starttime="20161216 04:31:47.586"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:47.587" starttime="20161216 04:31:47.250"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:31:47.865" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:31:47.865" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:47.866" starttime="20161216 04:31:47.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:31:47.875" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:31:47.875" starttime="20161216 04:31:47.874"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:31:47.877" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:31:47.877" starttime="20161216 04:31:47.876"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:47.877" starttime="20161216 04:31:47.875"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:47.877" starttime="20161216 04:31:47.873"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:47.877" starttime="20161216 04:31:47.866"></status>
</kw>
<msg timestamp="20161216 04:31:47.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:47.878" starttime="20161216 04:31:47.236"></status>
</kw>
<msg timestamp="20161216 04:31:47.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:47.878" starttime="20161216 04:31:47.235"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:31:47.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:31:47.879" starttime="20161216 04:31:47.879"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:31:47.880" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:31:47.880" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:31:47.881" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:31:47.881" starttime="20161216 04:31:47.880"></status>
</kw>
<msg timestamp="20161216 04:31:47.881" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:31:47.881" starttime="20161216 04:31:47.232"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:31:47.881" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:31:47.882" starttime="20161216 04:31:47.881"></status>
</kw>
<status status="FAIL" endtime="20161216 04:31:47.882" starttime="20161216 04:31:47.231"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:31:57.888" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:31:57.888" starttime="20161216 04:31:57.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:31:57.889" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:31:57.889" starttime="20161216 04:31:57.888"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:31:57.891" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:31:57.891" starttime="20161216 04:31:57.890"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:31:57.894" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:31:57.894" starttime="20161216 04:31:57.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:31:57.895" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:31:57.895" starttime="20161216 04:31:57.894"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:31:57.896" starttime="20161216 04:31:57.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:31:57.905" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:31:57.905" starttime="20161216 04:31:57.904"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:31:57.907" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:31:57.907" starttime="20161216 04:31:57.906"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:57.907" starttime="20161216 04:31:57.906"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:57.907" starttime="20161216 04:31:57.903"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:57.907" starttime="20161216 04:31:57.897"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:31:57.909" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:31:57.909" starttime="20161216 04:31:57.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:31:57.910" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:31:57.910" starttime="20161216 04:31:57.910"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:31:57.911" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:31:57.911" starttime="20161216 04:31:57.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:31:57.911" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:31:57.911" starttime="20161216 04:31:57.911"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:31:58.483" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:31:58.483" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:58.483" starttime="20161216 04:31:57.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:31:58.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:31:58.485" starttime="20161216 04:31:58.484"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:58.485" starttime="20161216 04:31:57.907"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:31:58.880" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:31:58.880" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:58.880" starttime="20161216 04:31:58.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:31:58.887" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:31:58.887" starttime="20161216 04:31:58.886"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:31:58.888" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:31:58.888" starttime="20161216 04:31:58.887"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:58.888" starttime="20161216 04:31:58.887"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:58.888" starttime="20161216 04:31:58.885"></status>
</kw>
<status status="PASS" endtime="20161216 04:31:58.888" starttime="20161216 04:31:58.881"></status>
</kw>
<msg timestamp="20161216 04:31:58.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:58.889" starttime="20161216 04:31:57.891"></status>
</kw>
<msg timestamp="20161216 04:31:58.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:31:58.890" starttime="20161216 04:31:57.889"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:31:58.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:31:58.891" starttime="20161216 04:31:58.890"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:31:58.891" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:31:58.891" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:31:58.892" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:31:58.892" starttime="20161216 04:31:58.891"></status>
</kw>
<msg timestamp="20161216 04:31:58.892" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:31:58.892" starttime="20161216 04:31:57.884"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:31:58.893" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:31:58.893" starttime="20161216 04:31:58.892"></status>
</kw>
<status status="FAIL" endtime="20161216 04:31:58.893" starttime="20161216 04:31:57.882"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:32:08.896" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:32:08.896" starttime="20161216 04:32:08.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:32:08.896" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:32:08.897" starttime="20161216 04:32:08.896"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:32:08.898" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:32:08.898" starttime="20161216 04:32:08.898"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:32:08.900" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:32:08.900" starttime="20161216 04:32:08.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:32:08.901" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:32:08.901" starttime="20161216 04:32:08.900"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:32:08.902" starttime="20161216 04:32:08.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:32:08.909" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:32:08.910" starttime="20161216 04:32:08.908"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:32:08.911" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:32:08.911" starttime="20161216 04:32:08.910"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:08.911" starttime="20161216 04:32:08.910"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:08.911" starttime="20161216 04:32:08.907"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:08.912" starttime="20161216 04:32:08.902"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:32:08.913" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:32:08.913" starttime="20161216 04:32:08.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:32:08.914" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:32:08.914" starttime="20161216 04:32:08.914"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:32:08.915" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:32:08.915" starttime="20161216 04:32:08.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:32:08.915" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:32:08.915" starttime="20161216 04:32:08.915"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:32:09.253" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:32:09.253" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:09.254" starttime="20161216 04:32:08.916"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:32:09.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:32:09.254" starttime="20161216 04:32:09.254"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:09.254" starttime="20161216 04:32:08.912"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:32:09.535" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:32:09.535" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:09.535" starttime="20161216 04:32:09.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:32:09.541" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:32:09.541" starttime="20161216 04:32:09.540"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:32:09.542" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:32:09.542" starttime="20161216 04:32:09.541"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:09.542" starttime="20161216 04:32:09.541"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:09.542" starttime="20161216 04:32:09.539"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:09.542" starttime="20161216 04:32:09.536"></status>
</kw>
<msg timestamp="20161216 04:32:09.542" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:09.543" starttime="20161216 04:32:08.898"></status>
</kw>
<msg timestamp="20161216 04:32:09.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:09.543" starttime="20161216 04:32:08.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:32:09.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:32:09.544" starttime="20161216 04:32:09.544"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:32:09.545" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:32:09.545" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:32:09.545" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:32:09.545" starttime="20161216 04:32:09.544"></status>
</kw>
<msg timestamp="20161216 04:32:09.545" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:32:09.545" starttime="20161216 04:32:08.894"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:32:09.546" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:32:09.546" starttime="20161216 04:32:09.545"></status>
</kw>
<status status="FAIL" endtime="20161216 04:32:09.546" starttime="20161216 04:32:08.893"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:32:19.549" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:32:19.549" starttime="20161216 04:32:19.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:32:19.551" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:32:19.551" starttime="20161216 04:32:19.549"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:32:19.553" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:32:19.553" starttime="20161216 04:32:19.552"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:32:19.555" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:32:19.555" starttime="20161216 04:32:19.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:32:19.556" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:32:19.556" starttime="20161216 04:32:19.556"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:32:19.557" starttime="20161216 04:32:19.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:32:19.565" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:32:19.565" starttime="20161216 04:32:19.564"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:32:19.566" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:32:19.567" starttime="20161216 04:32:19.566"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:19.567" starttime="20161216 04:32:19.566"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:19.567" starttime="20161216 04:32:19.563"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:19.567" starttime="20161216 04:32:19.558"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:32:19.568" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:32:19.569" starttime="20161216 04:32:19.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:32:19.569" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:32:19.569" starttime="20161216 04:32:19.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:32:19.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:32:19.570" starttime="20161216 04:32:19.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:32:19.570" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:32:19.570" starttime="20161216 04:32:19.570"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:32:19.904" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:32:19.904" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:19.904" starttime="20161216 04:32:19.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:32:19.908" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:32:19.908" starttime="20161216 04:32:19.905"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:19.908" starttime="20161216 04:32:19.567"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:32:20.190" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:32:20.191" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:20.191" starttime="20161216 04:32:19.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:32:20.197" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:32:20.197" starttime="20161216 04:32:20.197"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:32:20.198" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:32:20.199" starttime="20161216 04:32:20.198"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:20.199" starttime="20161216 04:32:20.197"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:20.199" starttime="20161216 04:32:20.196"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:20.199" starttime="20161216 04:32:20.191"></status>
</kw>
<msg timestamp="20161216 04:32:20.202" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:20.202" starttime="20161216 04:32:19.553"></status>
</kw>
<msg timestamp="20161216 04:32:20.202" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:20.202" starttime="20161216 04:32:19.551"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:32:20.203" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:32:20.203" starttime="20161216 04:32:20.202"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:32:20.204" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:32:20.204" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:32:20.204" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:32:20.204" starttime="20161216 04:32:20.203"></status>
</kw>
<msg timestamp="20161216 04:32:20.204" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:32:20.204" starttime="20161216 04:32:19.548"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:32:20.205" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:32:20.205" starttime="20161216 04:32:20.204"></status>
</kw>
<status status="FAIL" endtime="20161216 04:32:20.205" starttime="20161216 04:32:19.547"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:32:30.207" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:32:30.207" starttime="20161216 04:32:30.207"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:32:30.208" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:32:30.208" starttime="20161216 04:32:30.208"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:32:30.210" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:32:30.210" starttime="20161216 04:32:30.209"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:32:30.211" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:32:30.211" starttime="20161216 04:32:30.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:32:30.212" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:32:30.212" starttime="20161216 04:32:30.212"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:32:30.213" starttime="20161216 04:32:30.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:32:30.218" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:32:30.218" starttime="20161216 04:32:30.217"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:32:30.219" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:32:30.220" starttime="20161216 04:32:30.219"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:30.220" starttime="20161216 04:32:30.219"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:30.220" starttime="20161216 04:32:30.216"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:30.220" starttime="20161216 04:32:30.213"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:32:30.222" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:32:30.222" starttime="20161216 04:32:30.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:32:30.223" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:32:30.223" starttime="20161216 04:32:30.222"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:32:30.223" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:32:30.223" starttime="20161216 04:32:30.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:32:30.224" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:32:30.224" starttime="20161216 04:32:30.224"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:32:30.649" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:32:30.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:30.649" starttime="20161216 04:32:30.224"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:32:30.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:32:30.651" starttime="20161216 04:32:30.650"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:30.651" starttime="20161216 04:32:30.220"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:32:30.937" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:32:30.937" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:30.937" starttime="20161216 04:32:30.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:32:30.944" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:32:30.944" starttime="20161216 04:32:30.943"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:32:30.945" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:32:30.945" starttime="20161216 04:32:30.945"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:30.946" starttime="20161216 04:32:30.944"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:30.946" starttime="20161216 04:32:30.942"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:30.946" starttime="20161216 04:32:30.938"></status>
</kw>
<msg timestamp="20161216 04:32:30.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:30.946" starttime="20161216 04:32:30.210"></status>
</kw>
<msg timestamp="20161216 04:32:30.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:30.947" starttime="20161216 04:32:30.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:32:30.948" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:32:30.948" starttime="20161216 04:32:30.947"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:32:30.949" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:32:30.949" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:32:30.949" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:32:30.949" starttime="20161216 04:32:30.948"></status>
</kw>
<msg timestamp="20161216 04:32:30.949" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:32:30.949" starttime="20161216 04:32:30.206"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:32:30.950" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:32:30.950" starttime="20161216 04:32:30.950"></status>
</kw>
<status status="FAIL" endtime="20161216 04:32:30.951" starttime="20161216 04:32:30.205"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:32:40.954" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:32:40.954" starttime="20161216 04:32:40.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:32:40.955" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:32:40.955" starttime="20161216 04:32:40.955"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:32:40.957" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:32:40.957" starttime="20161216 04:32:40.957"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:32:40.959" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:32:40.959" starttime="20161216 04:32:40.959"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:32:40.960" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:32:40.960" starttime="20161216 04:32:40.960"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:32:40.964" starttime="20161216 04:32:40.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:32:40.969" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:32:40.969" starttime="20161216 04:32:40.968"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:32:40.970" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:32:40.970" starttime="20161216 04:32:40.969"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:40.970" starttime="20161216 04:32:40.969"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:40.970" starttime="20161216 04:32:40.967"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:40.971" starttime="20161216 04:32:40.964"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:32:40.971" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:32:40.972" starttime="20161216 04:32:40.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:32:40.973" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:32:40.973" starttime="20161216 04:32:40.972"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:32:40.973" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:32:40.973" starttime="20161216 04:32:40.973"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:32:40.974" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:32:40.974" starttime="20161216 04:32:40.973"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:32:41.309" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:32:41.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:41.309" starttime="20161216 04:32:40.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:32:41.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:32:41.310" starttime="20161216 04:32:41.310"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:41.311" starttime="20161216 04:32:40.971"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:32:41.589" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:32:41.589" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:41.589" starttime="20161216 04:32:41.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:32:41.597" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:32:41.597" starttime="20161216 04:32:41.596"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:32:41.598" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:32:41.598" starttime="20161216 04:32:41.598"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:41.598" starttime="20161216 04:32:41.597"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:41.599" starttime="20161216 04:32:41.595"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:41.599" starttime="20161216 04:32:41.590"></status>
</kw>
<msg timestamp="20161216 04:32:41.599" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:41.599" starttime="20161216 04:32:40.958"></status>
</kw>
<msg timestamp="20161216 04:32:41.599" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:41.600" starttime="20161216 04:32:40.956"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:32:41.601" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:32:41.601" starttime="20161216 04:32:41.600"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:32:41.602" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:32:41.602" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:32:41.602" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:32:41.602" starttime="20161216 04:32:41.602"></status>
</kw>
<msg timestamp="20161216 04:32:41.603" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:32:41.603" starttime="20161216 04:32:40.953"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:32:41.603" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:32:41.603" starttime="20161216 04:32:41.603"></status>
</kw>
<status status="FAIL" endtime="20161216 04:32:41.603" starttime="20161216 04:32:40.952"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:32:51.606" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:32:51.606" starttime="20161216 04:32:51.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:32:51.607" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:32:51.607" starttime="20161216 04:32:51.607"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:32:51.609" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:32:51.609" starttime="20161216 04:32:51.608"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:32:51.611" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:32:51.611" starttime="20161216 04:32:51.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:32:51.612" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:32:51.612" starttime="20161216 04:32:51.611"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:32:51.613" starttime="20161216 04:32:51.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:32:51.621" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:32:51.621" starttime="20161216 04:32:51.619"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:32:51.622" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:32:51.623" starttime="20161216 04:32:51.622"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:51.623" starttime="20161216 04:32:51.621"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:51.623" starttime="20161216 04:32:51.618"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:51.623" starttime="20161216 04:32:51.613"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:32:51.624" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:32:51.624" starttime="20161216 04:32:51.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:32:51.625" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:32:51.625" starttime="20161216 04:32:51.625"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:32:51.625" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:32:51.625" starttime="20161216 04:32:51.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:32:51.626" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:32:51.626" starttime="20161216 04:32:51.626"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:32:51.961" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:32:51.961" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:51.961" starttime="20161216 04:32:51.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:32:51.962" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:32:51.962" starttime="20161216 04:32:51.961"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:51.962" starttime="20161216 04:32:51.623"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:32:52.250" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:32:52.251" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:52.251" starttime="20161216 04:32:51.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:32:52.258" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:32:52.258" starttime="20161216 04:32:52.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:32:52.259" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:32:52.260" starttime="20161216 04:32:52.259"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:52.260" starttime="20161216 04:32:52.258"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:52.260" starttime="20161216 04:32:52.257"></status>
</kw>
<status status="PASS" endtime="20161216 04:32:52.260" starttime="20161216 04:32:52.251"></status>
</kw>
<msg timestamp="20161216 04:32:52.261" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:52.261" starttime="20161216 04:32:51.609"></status>
</kw>
<msg timestamp="20161216 04:32:52.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:32:52.262" starttime="20161216 04:32:51.607"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:32:52.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:32:52.262" starttime="20161216 04:32:52.262"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:32:52.263" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:32:52.263" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:32:52.263" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:32:52.263" starttime="20161216 04:32:52.263"></status>
</kw>
<msg timestamp="20161216 04:32:52.263" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:32:52.263" starttime="20161216 04:32:51.605"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:32:52.264" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:32:52.264" starttime="20161216 04:32:52.264"></status>
</kw>
<status status="FAIL" endtime="20161216 04:32:52.264" starttime="20161216 04:32:51.604"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:33:02.267" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:33:02.267" starttime="20161216 04:33:02.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:33:02.268" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:33:02.268" starttime="20161216 04:33:02.267"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:33:02.269" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:33:02.269" starttime="20161216 04:33:02.269"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:33:02.271" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:33:02.271" starttime="20161216 04:33:02.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:33:02.272" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:33:02.272" starttime="20161216 04:33:02.271"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:33:02.273" starttime="20161216 04:33:02.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:33:02.280" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:33:02.280" starttime="20161216 04:33:02.279"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:33:02.281" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:33:02.281" starttime="20161216 04:33:02.281"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:02.281" starttime="20161216 04:33:02.280"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:02.282" starttime="20161216 04:33:02.277"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:02.283" starttime="20161216 04:33:02.273"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:33:02.285" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:33:02.286" starttime="20161216 04:33:02.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:33:02.286" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:33:02.287" starttime="20161216 04:33:02.286"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:33:02.288" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:33:02.288" starttime="20161216 04:33:02.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:33:02.289" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:33:02.289" starttime="20161216 04:33:02.288"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:33:02.620" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:33:02.620" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:02.620" starttime="20161216 04:33:02.289"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:33:02.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:33:02.622" starttime="20161216 04:33:02.621"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:02.622" starttime="20161216 04:33:02.284"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:33:03.034" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:33:03.034" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:03.034" starttime="20161216 04:33:02.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:33:03.042" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:33:03.042" starttime="20161216 04:33:03.041"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:33:03.043" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:33:03.044" starttime="20161216 04:33:03.043"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:03.044" starttime="20161216 04:33:03.042"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:03.044" starttime="20161216 04:33:03.040"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:03.044" starttime="20161216 04:33:03.035"></status>
</kw>
<msg timestamp="20161216 04:33:03.045" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:03.045" starttime="20161216 04:33:02.270"></status>
</kw>
<msg timestamp="20161216 04:33:03.046" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:03.046" starttime="20161216 04:33:02.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:33:03.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:33:03.047" starttime="20161216 04:33:03.046"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:33:03.047" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:33:03.048" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:33:03.048" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:33:03.048" starttime="20161216 04:33:03.047"></status>
</kw>
<msg timestamp="20161216 04:33:03.048" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:33:03.048" starttime="20161216 04:33:02.266"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:33:03.049" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:33:03.049" starttime="20161216 04:33:03.049"></status>
</kw>
<status status="FAIL" endtime="20161216 04:33:03.050" starttime="20161216 04:33:02.265"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:33:13.053" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:33:13.053" starttime="20161216 04:33:13.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:33:13.054" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:33:13.054" starttime="20161216 04:33:13.053"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:33:13.055" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:33:13.056" starttime="20161216 04:33:13.055"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:33:13.063" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:33:13.063" starttime="20161216 04:33:13.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:33:13.064" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:33:13.064" starttime="20161216 04:33:13.063"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:33:13.064" starttime="20161216 04:33:13.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:33:13.071" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:33:13.071" starttime="20161216 04:33:13.070"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:33:13.072" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:33:13.072" starttime="20161216 04:33:13.072"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:13.073" starttime="20161216 04:33:13.071"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:13.073" starttime="20161216 04:33:13.069"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:13.073" starttime="20161216 04:33:13.065"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:33:13.073" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:33:13.074" starttime="20161216 04:33:13.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:33:13.075" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:33:13.075" starttime="20161216 04:33:13.074"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:33:13.075" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:33:13.075" starttime="20161216 04:33:13.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:33:13.076" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:33:13.076" starttime="20161216 04:33:13.076"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:33:13.410" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:33:13.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:13.410" starttime="20161216 04:33:13.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:33:13.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:33:13.411" starttime="20161216 04:33:13.411"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:13.412" starttime="20161216 04:33:13.073"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:33:13.844" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:33:13.844" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:13.844" starttime="20161216 04:33:13.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:33:13.851" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:33:13.852" starttime="20161216 04:33:13.851"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:33:13.853" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:33:13.853" starttime="20161216 04:33:13.853"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:13.853" starttime="20161216 04:33:13.852"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:13.853" starttime="20161216 04:33:13.850"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:13.854" starttime="20161216 04:33:13.845"></status>
</kw>
<msg timestamp="20161216 04:33:13.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:13.855" starttime="20161216 04:33:13.060"></status>
</kw>
<msg timestamp="20161216 04:33:13.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:13.855" starttime="20161216 04:33:13.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:33:13.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:33:13.857" starttime="20161216 04:33:13.856"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:33:13.857" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:33:13.857" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:33:13.858" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:33:13.858" starttime="20161216 04:33:13.857"></status>
</kw>
<msg timestamp="20161216 04:33:13.858" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:33:13.858" starttime="20161216 04:33:13.051"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:33:13.859" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:33:13.859" starttime="20161216 04:33:13.858"></status>
</kw>
<status status="FAIL" endtime="20161216 04:33:13.860" starttime="20161216 04:33:13.050"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:33:23.864" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:33:23.864" starttime="20161216 04:33:23.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:33:23.865" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:33:23.865" starttime="20161216 04:33:23.865"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:33:23.866" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:33:23.866" starttime="20161216 04:33:23.866"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:33:23.868" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:33:23.868" starttime="20161216 04:33:23.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:33:23.869" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:33:23.869" starttime="20161216 04:33:23.868"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:33:23.869" starttime="20161216 04:33:23.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:33:23.874" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:33:23.874" starttime="20161216 04:33:23.874"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:33:23.875" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:33:23.875" starttime="20161216 04:33:23.875"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:23.878" starttime="20161216 04:33:23.875"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:23.878" starttime="20161216 04:33:23.873"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:23.878" starttime="20161216 04:33:23.869"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:33:23.880" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:33:23.880" starttime="20161216 04:33:23.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:33:23.881" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:33:23.881" starttime="20161216 04:33:23.880"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:33:23.881" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:33:23.882" starttime="20161216 04:33:23.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:33:23.887" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:33:23.887" starttime="20161216 04:33:23.886"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:33:24.218" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:33:24.219" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:24.219" starttime="20161216 04:33:23.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:33:24.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:33:24.220" starttime="20161216 04:33:24.219"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:24.220" starttime="20161216 04:33:23.879"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:33:24.503" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:33:24.503" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:24.503" starttime="20161216 04:33:24.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:33:24.508" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:33:24.508" starttime="20161216 04:33:24.508"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:33:24.509" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:33:24.509" starttime="20161216 04:33:24.509"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:24.509" starttime="20161216 04:33:24.509"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:24.510" starttime="20161216 04:33:24.507"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:24.510" starttime="20161216 04:33:24.504"></status>
</kw>
<msg timestamp="20161216 04:33:24.510" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:24.510" starttime="20161216 04:33:23.867"></status>
</kw>
<msg timestamp="20161216 04:33:24.510" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:24.511" starttime="20161216 04:33:23.865"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:33:24.511" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:33:24.511" starttime="20161216 04:33:24.511"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:33:24.512" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:33:24.512" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:33:24.512" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:33:24.512" starttime="20161216 04:33:24.512"></status>
</kw>
<msg timestamp="20161216 04:33:24.513" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:33:24.513" starttime="20161216 04:33:23.861"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:33:24.513" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:33:24.513" starttime="20161216 04:33:24.513"></status>
</kw>
<status status="FAIL" endtime="20161216 04:33:24.514" starttime="20161216 04:33:23.860"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:33:34.516" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:33:34.516" starttime="20161216 04:33:34.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:33:34.517" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:33:34.517" starttime="20161216 04:33:34.516"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:33:34.518" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:33:34.518" starttime="20161216 04:33:34.518"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:33:34.520" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:33:34.520" starttime="20161216 04:33:34.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:33:34.521" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:33:34.521" starttime="20161216 04:33:34.521"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:33:34.522" starttime="20161216 04:33:34.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:33:34.528" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:33:34.528" starttime="20161216 04:33:34.527"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:33:34.529" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:33:34.529" starttime="20161216 04:33:34.529"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:34.530" starttime="20161216 04:33:34.528"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:34.530" starttime="20161216 04:33:34.526"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:34.530" starttime="20161216 04:33:34.523"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:33:34.531" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:33:34.532" starttime="20161216 04:33:34.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:33:34.533" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:33:34.533" starttime="20161216 04:33:34.532"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:33:34.533" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:33:34.534" starttime="20161216 04:33:34.533"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:33:34.534" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:33:34.534" starttime="20161216 04:33:34.534"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:33:34.868" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:33:34.869" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:34.869" starttime="20161216 04:33:34.534"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:33:34.870" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:33:34.870" starttime="20161216 04:33:34.869"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:34.870" starttime="20161216 04:33:34.530"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:33:35.155" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:33:35.155" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:35.155" starttime="20161216 04:33:34.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:33:35.162" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:33:35.162" starttime="20161216 04:33:35.161"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:33:35.163" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:33:35.164" starttime="20161216 04:33:35.163"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:35.164" starttime="20161216 04:33:35.163"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:35.164" starttime="20161216 04:33:35.161"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:35.164" starttime="20161216 04:33:35.156"></status>
</kw>
<msg timestamp="20161216 04:33:35.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:35.165" starttime="20161216 04:33:34.519"></status>
</kw>
<msg timestamp="20161216 04:33:35.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:35.165" starttime="20161216 04:33:34.517"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:33:35.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:33:35.166" starttime="20161216 04:33:35.165"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:33:35.166" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:33:35.167" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:33:35.167" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:33:35.167" starttime="20161216 04:33:35.166"></status>
</kw>
<msg timestamp="20161216 04:33:35.167" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:33:35.167" starttime="20161216 04:33:34.515"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:33:35.168" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:33:35.168" starttime="20161216 04:33:35.167"></status>
</kw>
<status status="FAIL" endtime="20161216 04:33:35.168" starttime="20161216 04:33:34.514"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:33:45.171" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:33:45.171" starttime="20161216 04:33:45.171"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:33:45.173" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:33:45.173" starttime="20161216 04:33:45.171"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:33:45.175" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:33:45.175" starttime="20161216 04:33:45.174"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:33:45.177" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:33:45.177" starttime="20161216 04:33:45.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:33:45.178" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:33:45.178" starttime="20161216 04:33:45.177"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:33:45.179" starttime="20161216 04:33:45.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:33:45.185" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:33:45.185" starttime="20161216 04:33:45.184"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:33:45.186" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:33:45.186" starttime="20161216 04:33:45.186"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:45.186" starttime="20161216 04:33:45.185"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:45.187" starttime="20161216 04:33:45.184"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:45.187" starttime="20161216 04:33:45.179"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:33:45.188" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:33:45.188" starttime="20161216 04:33:45.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:33:45.189" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:33:45.189" starttime="20161216 04:33:45.189"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:33:45.190" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:33:45.190" starttime="20161216 04:33:45.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:33:45.190" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:33:45.190" starttime="20161216 04:33:45.190"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:33:45.581" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:33:45.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:45.581" starttime="20161216 04:33:45.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:33:45.582" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:33:45.583" starttime="20161216 04:33:45.582"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:45.583" starttime="20161216 04:33:45.187"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:33:45.873" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:33:45.873" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:45.873" starttime="20161216 04:33:45.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:33:45.881" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:33:45.881" starttime="20161216 04:33:45.880"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:33:45.883" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:33:45.883" starttime="20161216 04:33:45.883"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:45.883" starttime="20161216 04:33:45.882"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:45.883" starttime="20161216 04:33:45.880"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:45.883" starttime="20161216 04:33:45.874"></status>
</kw>
<msg timestamp="20161216 04:33:45.884" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:45.884" starttime="20161216 04:33:45.175"></status>
</kw>
<msg timestamp="20161216 04:33:45.884" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:45.884" starttime="20161216 04:33:45.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:33:45.885" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:33:45.885" starttime="20161216 04:33:45.884"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:33:45.886" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:33:45.886" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:33:45.886" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:33:45.886" starttime="20161216 04:33:45.885"></status>
</kw>
<msg timestamp="20161216 04:33:45.886" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:33:45.886" starttime="20161216 04:33:45.170"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:33:45.887" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:33:45.887" starttime="20161216 04:33:45.886"></status>
</kw>
<status status="FAIL" endtime="20161216 04:33:45.887" starttime="20161216 04:33:45.169"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:33:55.890" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:33:55.890" starttime="20161216 04:33:55.890"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:33:55.891" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:33:55.891" starttime="20161216 04:33:55.890"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:33:55.893" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:33:55.893" starttime="20161216 04:33:55.893"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:33:55.896" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:33:55.896" starttime="20161216 04:33:55.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:33:55.897" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:33:55.897" starttime="20161216 04:33:55.897"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:33:55.898" starttime="20161216 04:33:55.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:33:55.905" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:33:55.905" starttime="20161216 04:33:55.904"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:33:55.906" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:33:55.906" starttime="20161216 04:33:55.906"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:55.906" starttime="20161216 04:33:55.905"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:55.906" starttime="20161216 04:33:55.904"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:55.906" starttime="20161216 04:33:55.899"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:33:55.907" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:33:55.908" starttime="20161216 04:33:55.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:33:55.908" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:33:55.908" starttime="20161216 04:33:55.908"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:33:55.909" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:33:55.909" starttime="20161216 04:33:55.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:33:55.910" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:33:55.910" starttime="20161216 04:33:55.909"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:33:56.268" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:33:56.268" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:56.268" starttime="20161216 04:33:55.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:33:56.269" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:33:56.269" starttime="20161216 04:33:56.268"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:56.269" starttime="20161216 04:33:55.907"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:33:56.813" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:33:56.813" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:56.813" starttime="20161216 04:33:56.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:33:56.824" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:33:56.824" starttime="20161216 04:33:56.824"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:33:56.825" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:33:56.825" starttime="20161216 04:33:56.825"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:56.826" starttime="20161216 04:33:56.824"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:56.826" starttime="20161216 04:33:56.823"></status>
</kw>
<status status="PASS" endtime="20161216 04:33:56.826" starttime="20161216 04:33:56.814"></status>
</kw>
<msg timestamp="20161216 04:33:56.826" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:56.826" starttime="20161216 04:33:55.893"></status>
</kw>
<msg timestamp="20161216 04:33:56.826" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:33:56.826" starttime="20161216 04:33:55.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:33:56.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:33:56.827" starttime="20161216 04:33:56.826"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:33:56.828" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:33:56.828" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:33:56.828" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:33:56.828" starttime="20161216 04:33:56.828"></status>
</kw>
<msg timestamp="20161216 04:33:56.828" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:33:56.828" starttime="20161216 04:33:55.889"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:33:56.829" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:33:56.829" starttime="20161216 04:33:56.829"></status>
</kw>
<status status="FAIL" endtime="20161216 04:33:56.829" starttime="20161216 04:33:55.888"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:34:06.833" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:34:06.833" starttime="20161216 04:34:06.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:34:06.834" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:34:06.834" starttime="20161216 04:34:06.834"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:34:06.836" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:34:06.836" starttime="20161216 04:34:06.836"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:34:06.838" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:34:06.838" starttime="20161216 04:34:06.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:34:06.839" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:34:06.839" starttime="20161216 04:34:06.839"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:34:06.840" starttime="20161216 04:34:06.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:34:06.846" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:34:06.846" starttime="20161216 04:34:06.845"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:34:06.847" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:34:06.847" starttime="20161216 04:34:06.847"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:06.847" starttime="20161216 04:34:06.846"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:06.847" starttime="20161216 04:34:06.845"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:06.847" starttime="20161216 04:34:06.840"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:34:06.850" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:34:06.851" starttime="20161216 04:34:06.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:34:06.851" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:34:06.851" starttime="20161216 04:34:06.851"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:34:06.852" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:34:06.852" starttime="20161216 04:34:06.852"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:34:06.852" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:34:06.852" starttime="20161216 04:34:06.852"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:34:07.193" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:34:07.193" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:07.193" starttime="20161216 04:34:06.853"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:34:07.194" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:34:07.194" starttime="20161216 04:34:07.193"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:07.194" starttime="20161216 04:34:06.848"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:34:07.471" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:34:07.472" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:07.472" starttime="20161216 04:34:07.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:34:07.479" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:34:07.479" starttime="20161216 04:34:07.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:34:07.481" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:34:07.481" starttime="20161216 04:34:07.480"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:07.481" starttime="20161216 04:34:07.479"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:07.481" starttime="20161216 04:34:07.478"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:07.481" starttime="20161216 04:34:07.472"></status>
</kw>
<msg timestamp="20161216 04:34:07.482" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:07.482" starttime="20161216 04:34:06.836"></status>
</kw>
<msg timestamp="20161216 04:34:07.482" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:07.482" starttime="20161216 04:34:06.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:34:07.483" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:34:07.483" starttime="20161216 04:34:07.483"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:34:07.484" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:34:07.484" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:34:07.484" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:34:07.484" starttime="20161216 04:34:07.484"></status>
</kw>
<msg timestamp="20161216 04:34:07.485" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:34:07.485" starttime="20161216 04:34:06.831"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:34:07.485" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:34:07.485" starttime="20161216 04:34:07.485"></status>
</kw>
<status status="FAIL" endtime="20161216 04:34:07.486" starttime="20161216 04:34:06.830"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:34:17.488" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:34:17.488" starttime="20161216 04:34:17.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:34:17.489" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:34:17.489" starttime="20161216 04:34:17.489"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:34:17.491" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:34:17.491" starttime="20161216 04:34:17.490"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:34:17.492" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:34:17.492" starttime="20161216 04:34:17.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:34:17.495" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:34:17.495" starttime="20161216 04:34:17.494"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:34:17.495" starttime="20161216 04:34:17.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:34:17.500" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:34:17.500" starttime="20161216 04:34:17.499"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:34:17.501" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:34:17.501" starttime="20161216 04:34:17.501"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:17.501" starttime="20161216 04:34:17.501"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:17.502" starttime="20161216 04:34:17.499"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:17.502" starttime="20161216 04:34:17.495"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:34:17.504" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:34:17.505" starttime="20161216 04:34:17.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:34:17.505" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:34:17.505" starttime="20161216 04:34:17.505"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:34:17.506" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:34:17.506" starttime="20161216 04:34:17.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:34:17.506" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:34:17.506" starttime="20161216 04:34:17.506"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:34:17.835" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:34:17.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:17.836" starttime="20161216 04:34:17.506"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:34:17.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:34:17.837" starttime="20161216 04:34:17.836"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:17.837" starttime="20161216 04:34:17.502"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:34:18.122" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:34:18.122" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:18.123" starttime="20161216 04:34:17.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:34:18.130" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:34:18.130" starttime="20161216 04:34:18.129"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:34:18.131" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:34:18.131" starttime="20161216 04:34:18.131"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:18.132" starttime="20161216 04:34:18.130"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:18.132" starttime="20161216 04:34:18.128"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:18.132" starttime="20161216 04:34:18.123"></status>
</kw>
<msg timestamp="20161216 04:34:18.132" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:18.132" starttime="20161216 04:34:17.491"></status>
</kw>
<msg timestamp="20161216 04:34:18.133" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:18.133" starttime="20161216 04:34:17.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:34:18.134" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:34:18.134" starttime="20161216 04:34:18.133"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:34:18.134" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:34:18.134" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:34:18.134" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:34:18.134" starttime="20161216 04:34:18.134"></status>
</kw>
<msg timestamp="20161216 04:34:18.135" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:34:18.135" starttime="20161216 04:34:17.487"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:34:18.135" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:34:18.135" starttime="20161216 04:34:18.135"></status>
</kw>
<status status="FAIL" endtime="20161216 04:34:18.135" starttime="20161216 04:34:17.486"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:34:28.139" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:34:28.139" starttime="20161216 04:34:28.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:34:28.140" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:34:28.140" starttime="20161216 04:34:28.139"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:34:28.142" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:34:28.142" starttime="20161216 04:34:28.141"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:34:28.144" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:34:28.144" starttime="20161216 04:34:28.143"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:34:28.145" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:34:28.145" starttime="20161216 04:34:28.144"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:34:28.146" starttime="20161216 04:34:28.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:34:28.153" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:34:28.153" starttime="20161216 04:34:28.152"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:34:28.154" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:34:28.154" starttime="20161216 04:34:28.154"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:28.155" starttime="20161216 04:34:28.154"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:28.155" starttime="20161216 04:34:28.151"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:28.155" starttime="20161216 04:34:28.146"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:34:28.156" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:34:28.159" starttime="20161216 04:34:28.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:34:28.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:34:28.159" starttime="20161216 04:34:28.159"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:34:28.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:34:28.160" starttime="20161216 04:34:28.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:34:28.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:34:28.160" starttime="20161216 04:34:28.160"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:34:28.592" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:34:28.592" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:28.592" starttime="20161216 04:34:28.160"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:34:28.598" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:34:28.598" starttime="20161216 04:34:28.593"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:28.598" starttime="20161216 04:34:28.155"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:34:29.140" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:34:29.140" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:29.141" starttime="20161216 04:34:28.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:34:29.148" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:34:29.148" starttime="20161216 04:34:29.147"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:34:29.149" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:34:29.149" starttime="20161216 04:34:29.149"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:29.149" starttime="20161216 04:34:29.148"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:29.150" starttime="20161216 04:34:29.146"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:29.150" starttime="20161216 04:34:29.141"></status>
</kw>
<msg timestamp="20161216 04:34:29.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:29.150" starttime="20161216 04:34:28.142"></status>
</kw>
<msg timestamp="20161216 04:34:29.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:29.151" starttime="20161216 04:34:28.140"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:34:29.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:34:29.152" starttime="20161216 04:34:29.151"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:34:29.153" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:34:29.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:34:29.153" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:34:29.153" starttime="20161216 04:34:29.152"></status>
</kw>
<msg timestamp="20161216 04:34:29.154" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:34:29.154" starttime="20161216 04:34:28.137"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:34:29.154" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:34:29.154" starttime="20161216 04:34:29.154"></status>
</kw>
<status status="FAIL" endtime="20161216 04:34:29.155" starttime="20161216 04:34:28.136"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:34:39.158" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:34:39.158" starttime="20161216 04:34:39.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:34:39.159" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:34:39.159" starttime="20161216 04:34:39.159"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:34:39.161" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:34:39.161" starttime="20161216 04:34:39.160"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:34:39.163" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:34:39.163" starttime="20161216 04:34:39.162"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:34:39.166" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:34:39.166" starttime="20161216 04:34:39.165"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:34:39.166" starttime="20161216 04:34:39.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:34:39.172" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:34:39.172" starttime="20161216 04:34:39.170"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:34:39.172" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:34:39.173" starttime="20161216 04:34:39.172"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:39.173" starttime="20161216 04:34:39.172"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:39.173" starttime="20161216 04:34:39.170"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:39.173" starttime="20161216 04:34:39.167"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:34:39.175" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:34:39.176" starttime="20161216 04:34:39.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:34:39.177" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:34:39.177" starttime="20161216 04:34:39.176"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:34:39.178" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:34:39.178" starttime="20161216 04:34:39.177"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:34:39.179" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:34:39.179" starttime="20161216 04:34:39.178"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:34:39.515" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:34:39.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:39.516" starttime="20161216 04:34:39.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:34:39.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:34:39.517" starttime="20161216 04:34:39.516"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:39.517" starttime="20161216 04:34:39.173"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:34:39.800" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:34:39.800" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:39.800" starttime="20161216 04:34:39.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:34:39.806" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:34:39.806" starttime="20161216 04:34:39.805"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:34:39.807" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:34:39.807" starttime="20161216 04:34:39.807"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:39.807" starttime="20161216 04:34:39.806"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:39.808" starttime="20161216 04:34:39.805"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:39.808" starttime="20161216 04:34:39.801"></status>
</kw>
<msg timestamp="20161216 04:34:39.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:39.808" starttime="20161216 04:34:39.161"></status>
</kw>
<msg timestamp="20161216 04:34:39.809" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:39.809" starttime="20161216 04:34:39.159"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:34:39.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:34:39.810" starttime="20161216 04:34:39.809"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:34:39.810" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:34:39.810" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:34:39.811" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:34:39.811" starttime="20161216 04:34:39.810"></status>
</kw>
<msg timestamp="20161216 04:34:39.811" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:34:39.811" starttime="20161216 04:34:39.157"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:34:39.812" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:34:39.812" starttime="20161216 04:34:39.811"></status>
</kw>
<status status="FAIL" endtime="20161216 04:34:39.812" starttime="20161216 04:34:39.156"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:34:49.817" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:34:49.818" starttime="20161216 04:34:49.815"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:34:49.818" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:34:49.818" starttime="20161216 04:34:49.818"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:34:49.820" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:34:49.820" starttime="20161216 04:34:49.820"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:34:49.822" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:34:49.822" starttime="20161216 04:34:49.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:34:49.822" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:34:49.822" starttime="20161216 04:34:49.822"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:34:49.823" starttime="20161216 04:34:49.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:34:49.828" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:34:49.828" starttime="20161216 04:34:49.828"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:34:49.829" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:34:49.829" starttime="20161216 04:34:49.829"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:49.829" starttime="20161216 04:34:49.829"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:49.830" starttime="20161216 04:34:49.827"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:49.830" starttime="20161216 04:34:49.824"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:34:49.832" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:34:49.833" starttime="20161216 04:34:49.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:34:49.833" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:34:49.833" starttime="20161216 04:34:49.833"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:34:49.834" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:34:49.834" starttime="20161216 04:34:49.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:34:49.834" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:34:49.834" starttime="20161216 04:34:49.834"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:34:50.169" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:34:50.169" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:50.169" starttime="20161216 04:34:49.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:34:50.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:34:50.170" starttime="20161216 04:34:50.169"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:50.170" starttime="20161216 04:34:49.830"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:34:50.493" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:34:50.493" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:50.493" starttime="20161216 04:34:50.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:34:50.501" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:34:50.502" starttime="20161216 04:34:50.501"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:34:50.503" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:34:50.503" starttime="20161216 04:34:50.503"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:50.503" starttime="20161216 04:34:50.502"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:50.504" starttime="20161216 04:34:50.500"></status>
</kw>
<status status="PASS" endtime="20161216 04:34:50.504" starttime="20161216 04:34:50.494"></status>
</kw>
<msg timestamp="20161216 04:34:50.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:50.504" starttime="20161216 04:34:49.820"></status>
</kw>
<msg timestamp="20161216 04:34:50.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:34:50.505" starttime="20161216 04:34:49.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:34:50.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:34:50.506" starttime="20161216 04:34:50.505"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:34:50.506" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:34:50.506" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:34:50.506" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:34:50.506" starttime="20161216 04:34:50.506"></status>
</kw>
<msg timestamp="20161216 04:34:50.507" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:34:50.507" starttime="20161216 04:34:49.814"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:34:50.507" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:34:50.507" starttime="20161216 04:34:50.507"></status>
</kw>
<status status="FAIL" endtime="20161216 04:34:50.507" starttime="20161216 04:34:49.813"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:35:00.510" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:35:00.510" starttime="20161216 04:35:00.510"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:35:00.511" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:35:00.511" starttime="20161216 04:35:00.511"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:35:00.513" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:35:00.513" starttime="20161216 04:35:00.512"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:35:00.517" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:35:00.517" starttime="20161216 04:35:00.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:35:00.517" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:35:00.517" starttime="20161216 04:35:00.517"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:35:00.518" starttime="20161216 04:35:00.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:35:00.526" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:35:00.526" starttime="20161216 04:35:00.523"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:35:00.527" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:35:00.527" starttime="20161216 04:35:00.527"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:00.527" starttime="20161216 04:35:00.526"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:00.527" starttime="20161216 04:35:00.522"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:00.527" starttime="20161216 04:35:00.518"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:35:00.529" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:35:00.529" starttime="20161216 04:35:00.528"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:35:00.530" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:35:00.530" starttime="20161216 04:35:00.530"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:35:00.531" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:35:00.531" starttime="20161216 04:35:00.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:35:00.531" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:35:00.531" starttime="20161216 04:35:00.531"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:35:00.871" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:35:00.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:35:00.872" starttime="20161216 04:35:00.531"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:35:00.872" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:35:00.872" starttime="20161216 04:35:00.872"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:00.872" starttime="20161216 04:35:00.527"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:35:01.152" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:35:01.152" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:35:01.152" starttime="20161216 04:35:00.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:35:01.159" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:35:01.159" starttime="20161216 04:35:01.158"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:35:01.160" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:35:01.160" starttime="20161216 04:35:01.160"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:01.161" starttime="20161216 04:35:01.159"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:01.161" starttime="20161216 04:35:01.157"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:01.161" starttime="20161216 04:35:01.152"></status>
</kw>
<msg timestamp="20161216 04:35:01.162" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:35:01.162" starttime="20161216 04:35:00.513"></status>
</kw>
<msg timestamp="20161216 04:35:01.162" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:35:01.162" starttime="20161216 04:35:00.511"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:35:01.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:35:01.163" starttime="20161216 04:35:01.162"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:35:01.164" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:35:01.164" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:35:01.164" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:35:01.164" starttime="20161216 04:35:01.163"></status>
</kw>
<msg timestamp="20161216 04:35:01.165" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:35:01.165" starttime="20161216 04:35:00.509"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:35:01.165" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:35:01.165" starttime="20161216 04:35:01.165"></status>
</kw>
<status status="FAIL" endtime="20161216 04:35:01.166" starttime="20161216 04:35:00.508"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:35:11.168" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:35:11.168" starttime="20161216 04:35:11.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:35:11.169" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:35:11.169" starttime="20161216 04:35:11.168"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:35:11.171" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:35:11.171" starttime="20161216 04:35:11.171"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:35:11.173" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:35:11.173" starttime="20161216 04:35:11.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:35:11.173" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:35:11.173" starttime="20161216 04:35:11.173"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:35:11.175" starttime="20161216 04:35:11.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:35:11.180" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:35:11.180" starttime="20161216 04:35:11.179"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:35:11.181" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:35:11.182" starttime="20161216 04:35:11.181"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:11.182" starttime="20161216 04:35:11.180"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:11.182" starttime="20161216 04:35:11.179"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:11.182" starttime="20161216 04:35:11.175"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:35:11.186" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:35:11.186" starttime="20161216 04:35:11.185"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:35:11.187" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:35:11.187" starttime="20161216 04:35:11.187"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:35:11.187" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:35:11.187" starttime="20161216 04:35:11.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:35:11.188" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:35:11.188" starttime="20161216 04:35:11.188"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:35:11.525" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:35:11.525" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:35:11.525" starttime="20161216 04:35:11.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:35:11.526" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:35:11.526" starttime="20161216 04:35:11.525"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:11.526" starttime="20161216 04:35:11.182"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:35:11.811" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:35:11.812" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:35:11.812" starttime="20161216 04:35:11.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:35:11.817" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:35:11.817" starttime="20161216 04:35:11.816"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:35:11.818" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:35:11.818" starttime="20161216 04:35:11.817"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:11.818" starttime="20161216 04:35:11.817"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:11.818" starttime="20161216 04:35:11.816"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:11.818" starttime="20161216 04:35:11.812"></status>
</kw>
<msg timestamp="20161216 04:35:11.818" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:35:11.818" starttime="20161216 04:35:11.171"></status>
</kw>
<msg timestamp="20161216 04:35:11.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:35:11.819" starttime="20161216 04:35:11.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:35:11.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:35:11.823" starttime="20161216 04:35:11.819"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:35:11.824" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:35:11.824" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:35:11.828" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:35:11.828" starttime="20161216 04:35:11.824"></status>
</kw>
<msg timestamp="20161216 04:35:11.828" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:35:11.828" starttime="20161216 04:35:11.167"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:35:11.829" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:35:11.829" starttime="20161216 04:35:11.829"></status>
</kw>
<status status="FAIL" endtime="20161216 04:35:11.829" starttime="20161216 04:35:11.166"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161216 04:35:21.832" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161216 04:35:21.832" starttime="20161216 04:35:21.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161216 04:35:21.833" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161216 04:35:21.833" starttime="20161216 04:35:21.832"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:35:21.834" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161216 04:35:21.834" starttime="20161216 04:35:21.834"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161216 04:35:21.836" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161216 04:35:21.836" starttime="20161216 04:35:21.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:35:21.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:35:21.837" starttime="20161216 04:35:21.836"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161216 04:35:21.838" starttime="20161216 04:35:21.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:35:21.845" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:35:21.845" starttime="20161216 04:35:21.843"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:35:21.846" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161216 04:35:21.846" starttime="20161216 04:35:21.845"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:21.846" starttime="20161216 04:35:21.845"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:21.846" starttime="20161216 04:35:21.842"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:21.846" starttime="20161216 04:35:21.838"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161216 04:35:21.847" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161216 04:35:21.848" starttime="20161216 04:35:21.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161216 04:35:21.848" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161216 04:35:21.848" starttime="20161216 04:35:21.848"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161216 04:35:21.849" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161216 04:35:21.849" starttime="20161216 04:35:21.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161216 04:35:21.849" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161216 04:35:21.849" starttime="20161216 04:35:21.849"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161216 04:35:22.182" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:35:22.182" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:35:22.182" starttime="20161216 04:35:21.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:35:22.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:35:22.183" starttime="20161216 04:35:22.183"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:22.183" starttime="20161216 04:35:21.846"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161216 04:35:22.463" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161216 04:35:22.463" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:35:22.463" starttime="20161216 04:35:22.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161216 04:35:22.469" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:35:22.469" starttime="20161216 04:35:22.468"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161216 04:35:22.470" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161216 04:35:22.470" starttime="20161216 04:35:22.470"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:22.471" starttime="20161216 04:35:22.469"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:22.471" starttime="20161216 04:35:22.467"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:22.471" starttime="20161216 04:35:22.463"></status>
</kw>
<msg timestamp="20161216 04:35:22.471" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:35:22.471" starttime="20161216 04:35:21.835"></status>
</kw>
<msg timestamp="20161216 04:35:22.472" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161216 04:35:22.472" starttime="20161216 04:35:21.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161216 04:35:22.473" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161216 04:35:22.473" starttime="20161216 04:35:22.472"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161216 04:35:22.474" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161216 04:35:22.474" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161216 04:35:22.474" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161216 04:35:22.474" starttime="20161216 04:35:22.473"></status>
</kw>
<msg timestamp="20161216 04:35:22.475" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161216 04:35:22.475" starttime="20161216 04:35:21.831"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161216 04:35:22.475" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:35:22.475" starttime="20161216 04:35:22.475"></status>
</kw>
<status status="FAIL" endtime="20161216 04:35:22.476" starttime="20161216 04:35:21.830"></status>
</kw>
<msg timestamp="20161216 04:35:22.476" level="FAIL">Keyword 'Verify BMC State' failed after retrying for 10 minutes. The last error was: '[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161216 04:35:22.476" starttime="20161216 04:25:15.143"></status>
</kw>
<doc>BMC code update process initiation</doc>
<status status="FAIL" endtime="20161216 04:35:22.476" critical="yes" starttime="20161216 04:22:06.176">Keyword 'Verify BMC State' failed after retrying for 10 minutes. The last error was: '[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</status>
</test>
<test id="s1-t2" name="Test BMC CPU Mem Performance at Ready State">
<kw name="Check BMC CPU Performance" library="utils">
<doc>Minimal 10% of proc should be free in 3 sample</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161216 04:35:22.480" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161216 04:35:22.801" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:35:22.801" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161216 04:35:22.801" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161216 04:35:22.801" starttime="20161216 04:35:22.480"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161216 04:35:22.802" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161216 04:35:22.802" starttime="20161216 04:35:22.801"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161216 04:35:22.803" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161216 04:35:22.803" starttime="20161216 04:35:22.802"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161216 04:35:22.808" starttime="20161216 04:35:22.803"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:22.808" starttime="20161216 04:35:22.479"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:22.808" starttime="20161216 04:35:22.479"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161216 04:35:22.809" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161216 04:35:23.250" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:35:23.250" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161216 04:35:23.250" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161216 04:35:23.250" starttime="20161216 04:35:22.809"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161216 04:35:23.251" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161216 04:35:23.251" starttime="20161216 04:35:23.251"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161216 04:35:23.251" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161216 04:35:23.251" starttime="20161216 04:35:23.251"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161216 04:35:23.254" starttime="20161216 04:35:23.252"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:23.255" starttime="20161216 04:35:22.808"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:23.255" starttime="20161216 04:35:22.808"></status>
</kw>
<kw type="foritem" name="${var} = 3">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161216 04:35:23.256" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161216 04:35:23.704" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:35:23.704" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161216 04:35:23.704" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161216 04:35:23.705" starttime="20161216 04:35:23.256"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161216 04:35:23.706" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161216 04:35:23.706" starttime="20161216 04:35:23.706"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161216 04:35:23.707" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161216 04:35:23.707" starttime="20161216 04:35:23.707"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161216 04:35:23.711" starttime="20161216 04:35:23.707"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:23.712" starttime="20161216 04:35:23.255"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:23.712" starttime="20161216 04:35:23.255"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:23.712" starttime="20161216 04:35:22.478"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:23.712" starttime="20161216 04:35:22.478"></status>
</kw>
<kw name="Check BMC Mem Performance" library="utils">
<doc>Minimal 10% of memory should be free</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161216 04:35:23.716" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161216 04:35:23.873" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:35:23.874" level="INFO">${bmc_mem_free_output} = 344908</msg>
<msg timestamp="20161216 04:35:23.874" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161216 04:35:23.874" starttime="20161216 04:35:23.716"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161216 04:35:23.875" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161216 04:35:23.875" starttime="20161216 04:35:23.875"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161216 04:35:23.876" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161216 04:35:24.083" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:35:24.084" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161216 04:35:24.084" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161216 04:35:24.084" starttime="20161216 04:35:23.876"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161216 04:35:24.085" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161216 04:35:24.085" starttime="20161216 04:35:24.084"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161216 04:35:24.089" level="INFO">${bmc_mem_percentage} = 34490800</msg>
<status status="PASS" endtime="20161216 04:35:24.089" starttime="20161216 04:35:24.085"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161216 04:35:24.094" level="INFO">${bmc_mem_percentage} = 69</msg>
<status status="PASS" endtime="20161216 04:35:24.094" starttime="20161216 04:35:24.090"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161216 04:35:24.098" starttime="20161216 04:35:24.094"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:24.098" starttime="20161216 04:35:23.715"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:24.098" starttime="20161216 04:35:23.715"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161216 04:35:24.099" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161216 04:35:24.297" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:35:24.297" level="INFO">${bmc_mem_free_output} = 344884</msg>
<msg timestamp="20161216 04:35:24.297" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161216 04:35:24.297" starttime="20161216 04:35:24.099"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161216 04:35:24.298" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161216 04:35:24.298" starttime="20161216 04:35:24.297"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161216 04:35:24.299" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161216 04:35:24.489" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:35:24.489" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161216 04:35:24.489" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161216 04:35:24.489" starttime="20161216 04:35:24.298"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161216 04:35:24.490" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161216 04:35:24.490" starttime="20161216 04:35:24.490"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161216 04:35:24.495" level="INFO">${bmc_mem_percentage} = 34488400</msg>
<status status="PASS" endtime="20161216 04:35:24.495" starttime="20161216 04:35:24.490"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161216 04:35:24.499" level="INFO">${bmc_mem_percentage} = 69</msg>
<status status="PASS" endtime="20161216 04:35:24.499" starttime="20161216 04:35:24.495"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161216 04:35:24.503" starttime="20161216 04:35:24.499"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:24.503" starttime="20161216 04:35:24.098"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:24.504" starttime="20161216 04:35:24.098"></status>
</kw>
<kw type="foritem" name="${var} = 3">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161216 04:35:24.505" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161216 04:35:24.662" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:35:24.662" level="INFO">${bmc_mem_free_output} = 344760</msg>
<msg timestamp="20161216 04:35:24.662" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161216 04:35:24.662" starttime="20161216 04:35:24.505"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161216 04:35:24.663" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161216 04:35:24.663" starttime="20161216 04:35:24.662"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161216 04:35:24.663" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161216 04:35:24.852" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161216 04:35:24.853" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161216 04:35:24.853" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161216 04:35:24.853" starttime="20161216 04:35:24.663"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161216 04:35:24.854" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161216 04:35:24.854" starttime="20161216 04:35:24.853"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161216 04:35:24.858" level="INFO">${bmc_mem_percentage} = 34476000</msg>
<status status="PASS" endtime="20161216 04:35:24.858" starttime="20161216 04:35:24.854"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161216 04:35:24.862" level="INFO">${bmc_mem_percentage} = 69</msg>
<status status="PASS" endtime="20161216 04:35:24.862" starttime="20161216 04:35:24.858"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161216 04:35:24.865" starttime="20161216 04:35:24.862"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:24.866" starttime="20161216 04:35:24.504"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:24.866" starttime="20161216 04:35:24.504"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:24.866" starttime="20161216 04:35:23.715"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:24.866" starttime="20161216 04:35:23.712"></status>
</kw>
<status status="PASS" endtime="20161216 04:35:24.866" critical="yes" starttime="20161216 04:35:22.477"></status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update</doc>
<status status="FAIL" endtime="20161216 04:35:24.869" starttime="20161216 04:22:05.724"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="1">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
