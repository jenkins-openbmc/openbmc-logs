<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170925 17:38:43.585" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:38:44.541" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:38:44.543" starttime="20170925 17:38:44.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:38:44.545" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:38:44.545" starttime="20170925 17:38:44.543"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:38:44.546" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:38:44.546" starttime="20170925 17:38:44.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:38:44.546" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:38:44.546" starttime="20170925 17:38:44.546"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:38:44.745" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:38:44.745" starttime="20170925 17:38:44.547"></status>
</kw>
<msg timestamp="20170925 17:38:44.746" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:38:44.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:38:44.746" starttime="20170925 17:38:44.547"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:38:44.746" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:38:44.746" starttime="20170925 17:38:44.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:38:44.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:38:44.747" starttime="20170925 17:38:44.747"></status>
</kw>
<status status="PASS" endtime="20170925 17:38:44.747" starttime="20170925 17:38:44.539"></status>
</kw>
<status status="PASS" endtime="20170925 17:38:44.747" starttime="20170925 17:38:44.538"></status>
</kw>
<status status="PASS" endtime="20170925 17:38:44.747" starttime="20170925 17:38:44.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:38:44.748" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170925 17:38:44.748" starttime="20170925 17:38:44.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:38:44.749" starttime="20170925 17:38:44.748"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:38:44.793" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170925 17:38:44.794" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170925 17:38:44.794" starttime="20170925 17:38:44.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:38:44.794" starttime="20170925 17:38:44.794"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:38:44.795" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:38:44.795" starttime="20170925 17:38:44.795"></status>
</kw>
<msg timestamp="20170925 17:38:44.795" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170925 17:38:44.795" starttime="20170925 17:38:44.536"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170925 17:38:44.796" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170925 17:38:44.796" starttime="20170925 17:38:44.795"></status>
</kw>
<status status="PASS" endtime="20170925 17:38:44.796" starttime="20170925 17:38:44.535"></status>
</kw>
<status status="PASS" endtime="20170925 17:38:44.796" starttime="20170925 17:38:44.535"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170925 17:38:44.798" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170925 17:38:44.798" starttime="20170925 17:38:44.797"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170925 17:38:44.816" level="INFO">${image_version} = v1.99.10-33-g34f9244</msg>
<status status="PASS" endtime="20170925 17:38:44.816" starttime="20170925 17:38:44.798"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170925 17:38:44.817" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170925 17:38:56.206" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20170925 17:38:56.206" starttime="20170925 17:38:44.816"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:38:56.210" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:38:56.211" starttime="20170925 17:38:56.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:38:56.212" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:38:56.212" starttime="20170925 17:38:56.211"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:38:56.212" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:38:56.212" starttime="20170925 17:38:56.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:38:56.213" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:38:56.213" starttime="20170925 17:38:56.213"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:38:56.408" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:38:56.409" starttime="20170925 17:38:56.214"></status>
</kw>
<msg timestamp="20170925 17:38:56.409" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:38:56.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:38:56.409" starttime="20170925 17:38:56.213"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:38:56.409" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:38:56.410" starttime="20170925 17:38:56.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:38:56.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:38:56.410" starttime="20170925 17:38:56.410"></status>
</kw>
<status status="PASS" endtime="20170925 17:38:56.411" starttime="20170925 17:38:56.209"></status>
</kw>
<status status="PASS" endtime="20170925 17:38:56.411" starttime="20170925 17:38:56.209"></status>
</kw>
<status status="PASS" endtime="20170925 17:38:56.411" starttime="20170925 17:38:56.208"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:38:56.411" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170925 17:38:56.411" starttime="20170925 17:38:56.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:38:56.412" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170925 17:38:56.412" starttime="20170925 17:38:56.412"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:38:56.413" starttime="20170925 17:38:56.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:38:56.413" starttime="20170925 17:38:56.413"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:39:02.300" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170925 17:39:02.300" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:02.300" starttime="20170925 17:38:56.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:02.301" starttime="20170925 17:39:02.301"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:39:02.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:02.302" starttime="20170925 17:39:02.301"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:39:02.302" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:39:02.302" starttime="20170925 17:39:02.302"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:02.303" starttime="20170925 17:38:56.207"></status>
</kw>
<kw name="Verify Image Upload" library="code_update_utils">
<doc>Verify the image was uploaded correctly and that it created</doc>
<arguments>
<arg>${image_version}</arg>
</arguments>
<assign>
<var>${ret}</var>
<var>${version_id}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170925 17:39:02.309" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170925 17:39:02.309" starttime="20170925 17:39:02.309"></status>
</kw>
<msg timestamp="20170925 17:39:02.309" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170925 17:39:02.309" starttime="20170925 17:39:02.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:02.311" starttime="20170925 17:39:02.310"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:02.311" starttime="20170925 17:39:02.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:02.312" starttime="20170925 17:39:02.311"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170925 17:39:02.313" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170925 17:39:02.313" starttime="20170925 17:39:02.312"></status>
</kw>
<msg timestamp="20170925 17:39:02.313" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170925 17:39:02.313" starttime="20170925 17:39:02.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:02.315" starttime="20170925 17:39:02.315"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:02.315" starttime="20170925 17:39:02.314"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:02.315" starttime="20170925 17:39:02.313"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170925 17:39:02.316" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170925 17:39:04.597" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170925 17:39:04.597" starttime="20170925 17:39:02.316"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:04.597" starttime="20170925 17:39:02.308"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:39:04.605" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20170925 17:39:04.652" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170925 17:39:04.652" level="INFO">${stdout} = /tmp/images/6235b70b/
/tmp/images/eb27353e/</msg>
<msg timestamp="20170925 17:39:04.652" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:39:04.652" starttime="20170925 17:39:04.605"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170925 17:39:04.652" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170925 17:39:04.653" starttime="20170925 17:39:04.652"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:04.653" starttime="20170925 17:39:04.604"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170925 17:39:04.658" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170925 17:39:04.658" starttime="20170925 17:39:04.658"></status>
</kw>
<msg timestamp="20170925 17:39:04.658" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170925 17:39:04.658" starttime="20170925 17:39:04.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:04.659" starttime="20170925 17:39:04.659"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:04.659" starttime="20170925 17:39:04.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:04.660" starttime="20170925 17:39:04.660"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170925 17:39:04.661" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170925 17:39:04.661" starttime="20170925 17:39:04.661"></status>
</kw>
<msg timestamp="20170925 17:39:04.662" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170925 17:39:04.662" starttime="20170925 17:39:04.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:04.664" starttime="20170925 17:39:04.663"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:04.664" starttime="20170925 17:39:04.663"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:04.664" starttime="20170925 17:39:04.662"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170925 17:39:04.664" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170925 17:39:06.340" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170925 17:39:06.341" starttime="20170925 17:39:04.664"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:06.341" starttime="20170925 17:39:04.656"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/6235b70b/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:39:06.349" level="INFO">Executing command 'cat /tmp/images/6235b70b/MANIFEST | grep "version="'.</msg>
<msg timestamp="20170925 17:39:06.415" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170925 17:39:06.415" level="INFO">${stdout} = version=v1.99.10-31-g33f1cca</msg>
<msg timestamp="20170925 17:39:06.415" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:39:06.415" starttime="20170925 17:39:06.348"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170925 17:39:06.416" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170925 17:39:06.416" starttime="20170925 17:39:06.416"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:06.416" starttime="20170925 17:39:06.348"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170925 17:39:06.421" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170925 17:39:06.422" starttime="20170925 17:39:06.421"></status>
</kw>
<msg timestamp="20170925 17:39:06.422" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170925 17:39:06.422" starttime="20170925 17:39:06.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:06.423" starttime="20170925 17:39:06.423"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:06.423" starttime="20170925 17:39:06.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:06.424" starttime="20170925 17:39:06.424"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170925 17:39:06.425" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170925 17:39:06.425" starttime="20170925 17:39:06.425"></status>
</kw>
<msg timestamp="20170925 17:39:06.425" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170925 17:39:06.425" starttime="20170925 17:39:06.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:06.427" starttime="20170925 17:39:06.427"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:06.427" starttime="20170925 17:39:06.426"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:06.427" starttime="20170925 17:39:06.426"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170925 17:39:06.428" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170925 17:39:08.105" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170925 17:39:08.105" starttime="20170925 17:39:06.427"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:08.105" starttime="20170925 17:39:06.420"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/eb27353e/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:39:08.113" level="INFO">Executing command 'cat /tmp/images/eb27353e/MANIFEST | grep "version="'.</msg>
<msg timestamp="20170925 17:39:08.180" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170925 17:39:08.180" level="INFO">${stdout} = version=v1.99.10-33-g34f9244</msg>
<msg timestamp="20170925 17:39:08.180" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:39:08.180" starttime="20170925 17:39:08.113"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170925 17:39:08.181" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170925 17:39:08.181" starttime="20170925 17:39:08.181"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:08.181" starttime="20170925 17:39:08.113"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170925 17:39:08.186" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170925 17:39:08.186" starttime="20170925 17:39:08.186"></status>
</kw>
<msg timestamp="20170925 17:39:08.186" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170925 17:39:08.186" starttime="20170925 17:39:08.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:08.187" starttime="20170925 17:39:08.187"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:08.188" starttime="20170925 17:39:08.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:08.188" starttime="20170925 17:39:08.188"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170925 17:39:08.189" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170925 17:39:08.189" starttime="20170925 17:39:08.189"></status>
</kw>
<msg timestamp="20170925 17:39:08.189" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170925 17:39:08.190" starttime="20170925 17:39:08.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:08.191" starttime="20170925 17:39:08.191"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:08.192" starttime="20170925 17:39:08.191"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:08.192" starttime="20170925 17:39:08.190"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170925 17:39:08.192" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170925 17:39:09.938" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170925 17:39:09.938" starttime="20170925 17:39:08.192"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:09.938" starttime="20170925 17:39:08.185"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170925 17:39:09.944" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170925 17:39:09.944" starttime="20170925 17:39:09.943"></status>
</kw>
<msg timestamp="20170925 17:39:09.944" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170925 17:39:09.944" starttime="20170925 17:39:09.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:09.945" starttime="20170925 17:39:09.945"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:09.945" starttime="20170925 17:39:09.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:09.946" starttime="20170925 17:39:09.945"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170925 17:39:09.947" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170925 17:39:09.947" starttime="20170925 17:39:09.947"></status>
</kw>
<msg timestamp="20170925 17:39:09.947" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170925 17:39:09.947" starttime="20170925 17:39:09.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:09.949" starttime="20170925 17:39:09.948"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:09.949" starttime="20170925 17:39:09.948"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:09.949" starttime="20170925 17:39:09.947"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170925 17:39:09.949" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170925 17:39:11.594" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170925 17:39:11.594" starttime="20170925 17:39:09.949"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:11.595" starttime="20170925 17:39:09.942"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/eb27353e/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:39:11.602" level="INFO">Executing command 'cat /tmp/images/eb27353e/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20170925 17:39:11.679" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170925 17:39:11.679" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<msg timestamp="20170925 17:39:11.679" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:39:11.679" starttime="20170925 17:39:11.602"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170925 17:39:11.680" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170925 17:39:11.680" starttime="20170925 17:39:11.679"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:11.680" starttime="20170925 17:39:11.601"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/eb27353e</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:39:11.690" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:39:11.691" starttime="20170925 17:39:11.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:39:11.691" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:39:11.691" starttime="20170925 17:39:11.691"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:39:11.692" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:39:11.692" starttime="20170925 17:39:11.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:39:11.693" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:39:11.693" starttime="20170925 17:39:11.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:39:11.954" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:39:11.954" starttime="20170925 17:39:11.694"></status>
</kw>
<msg timestamp="20170925 17:39:11.954" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:39:11.954" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:11.954" starttime="20170925 17:39:11.693"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:39:11.955" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:11.955" starttime="20170925 17:39:11.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:39:11.955" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:11.956" starttime="20170925 17:39:11.955"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:11.956" starttime="20170925 17:39:11.689"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:11.956" starttime="20170925 17:39:11.689"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:11.956" starttime="20170925 17:39:11.688"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:39:11.956" level="INFO">${base_uri} = /xyz/openbmc_project/software/eb27353e/attr/Activation</msg>
<status status="PASS" endtime="20170925 17:39:11.957" starttime="20170925 17:39:11.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:11.957" starttime="20170925 17:39:11.957"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:39:12.074" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/eb27353e/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170925 17:39:12.074" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.075" starttime="20170925 17:39:11.957"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:12.075" starttime="20170925 17:39:12.075"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:39:12.076" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:39:12.076" starttime="20170925 17:39:12.076"></status>
</kw>
<msg timestamp="20170925 17:39:12.076" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.076" starttime="20170925 17:39:11.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:39:12.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.077" starttime="20170925 17:39:12.076"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:39:12.077" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:39:12.077" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:39:12.078" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20170925 17:39:12.078" starttime="20170925 17:39:12.077"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:12.078" starttime="20170925 17:39:11.686"></status>
</kw>
<msg timestamp="20170925 17:39:12.078" level="INFO">${ret} = True</msg>
<msg timestamp="20170925 17:39:12.078" level="INFO">${version_id} = eb27353e</msg>
<status status="PASS" endtime="20170925 17:39:12.078" starttime="20170925 17:39:02.303"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:12.079" starttime="20170925 17:39:12.079"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:39:12.083" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:39:12.083" starttime="20170925 17:39:12.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:39:12.083" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:39:12.083" starttime="20170925 17:39:12.083"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:39:12.084" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:39:12.084" starttime="20170925 17:39:12.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:39:12.085" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:39:12.085" starttime="20170925 17:39:12.084"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:39:12.268" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:39:12.268" starttime="20170925 17:39:12.086"></status>
</kw>
<msg timestamp="20170925 17:39:12.268" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:39:12.268" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.268" starttime="20170925 17:39:12.085"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:39:12.269" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.269" starttime="20170925 17:39:12.269"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:39:12.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.270" starttime="20170925 17:39:12.269"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:12.270" starttime="20170925 17:39:12.082"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:12.270" starttime="20170925 17:39:12.081"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:12.270" starttime="20170925 17:39:12.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:39:12.271" level="INFO">${base_uri} = /xyz/openbmc_project/software/eb27353e</msg>
<status status="PASS" endtime="20170925 17:39:12.271" starttime="20170925 17:39:12.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:12.272" starttime="20170925 17:39:12.271"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:39:12.387" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/eb27353e, headers=None json=None</msg>
<msg timestamp="20170925 17:39:12.387" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.387" starttime="20170925 17:39:12.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:12.388" starttime="20170925 17:39:12.387"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:39:12.388" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:39:12.388" starttime="20170925 17:39:12.388"></status>
</kw>
<msg timestamp="20170925 17:39:12.389" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.389" starttime="20170925 17:39:12.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:39:12.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.389" starttime="20170925 17:39:12.389"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:39:12.390" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/eb27353e", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-33-g34f9244", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:39:12.390" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:39:12.390" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170925 17:39:12.390" starttime="20170925 17:39:12.390"></status>
</kw>
<msg timestamp="20170925 17:39:12.391" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready...</msg>
<status status="PASS" endtime="20170925 17:39:12.391" starttime="20170925 17:39:12.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20170925 17:39:12.391" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.391" starttime="20170925 17:39:12.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170925 17:39:12.392" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20170925 17:39:12.392" starttime="20170925 17:39:12.392"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:39:12.393" level="INFO">${base_uri} = /xyz/openbmc_project/software/eb27353e</msg>
<status status="PASS" endtime="20170925 17:39:12.393" starttime="20170925 17:39:12.393"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:39:12.398" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:39:12.399" starttime="20170925 17:39:12.398"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:39:12.399" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:39:12.399" starttime="20170925 17:39:12.399"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:39:12.400" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:39:12.400" starttime="20170925 17:39:12.400"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:39:12.401" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:39:12.401" starttime="20170925 17:39:12.400"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:39:12.576" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:39:12.576" starttime="20170925 17:39:12.402"></status>
</kw>
<msg timestamp="20170925 17:39:12.576" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:39:12.576" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.576" starttime="20170925 17:39:12.401"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:39:12.577" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.577" starttime="20170925 17:39:12.576"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:39:12.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:12.577" starttime="20170925 17:39:12.577"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:12.577" starttime="20170925 17:39:12.397"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:12.578" starttime="20170925 17:39:12.397"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:12.578" starttime="20170925 17:39:12.396"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:39:12.578" level="INFO">${base_uri} = /xyz/openbmc_project/software/eb27353e/attr/RequestedActivation</msg>
<status status="PASS" endtime="20170925 17:39:12.578" starttime="20170925 17:39:12.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:39:12.579" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:39:12.579" starttime="20170925 17:39:12.579"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:12.580" starttime="20170925 17:39:12.580"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170925 17:39:12.582" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/eb27353e/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'he...</msg>
<status status="PASS" endtime="20170925 17:39:12.582" starttime="20170925 17:39:12.581"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170925 17:39:12.584" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/eb27353e/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170925 17:39:12.584" starttime="20170925 17:39:12.584"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:12.584" starttime="20170925 17:39:12.583"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:12.584" starttime="20170925 17:39:12.580"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:39:13.079" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/eb27353e/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170925 17:39:13.079" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:13.079" starttime="20170925 17:39:12.585"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170925 17:39:13.081" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170925 17:39:13.081" starttime="20170925 17:39:13.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170925 17:39:13.082" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170925 17:39:13.082" starttime="20170925 17:39:13.081"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:13.082" starttime="20170925 17:39:13.081"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:13.082" starttime="20170925 17:39:13.079"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:39:13.082" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:39:13.082" starttime="20170925 17:39:13.082"></status>
</kw>
<msg timestamp="20170925 17:39:13.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:13.083" starttime="20170925 17:39:12.393"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:39:13.083" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:13.083" starttime="20170925 17:39:13.083"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170925 17:39:13.084" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:39:13.084" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:39:13.084" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170925 17:39:13.084" starttime="20170925 17:39:13.084"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:13.084" starttime="20170925 17:39:12.392"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:39:13.089" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:39:13.090" starttime="20170925 17:39:13.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:39:13.090" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:39:13.090" starttime="20170925 17:39:13.090"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:39:13.091" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:39:13.091" starttime="20170925 17:39:13.091"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:39:13.092" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:39:13.092" starttime="20170925 17:39:13.091"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:39:14.013" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:39:14.013" starttime="20170925 17:39:13.093"></status>
</kw>
<msg timestamp="20170925 17:39:14.013" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:39:14.013" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:14.013" starttime="20170925 17:39:13.092"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:39:14.014" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:14.014" starttime="20170925 17:39:14.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:39:14.015" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:14.016" starttime="20170925 17:39:14.015"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:14.016" starttime="20170925 17:39:13.088"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:14.016" starttime="20170925 17:39:13.087"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:14.016" starttime="20170925 17:39:13.086"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:39:14.017" level="INFO">${base_uri} = /xyz/openbmc_project/software/eb27353e</msg>
<status status="PASS" endtime="20170925 17:39:14.017" starttime="20170925 17:39:14.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:14.018" starttime="20170925 17:39:14.017"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:39:14.420" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/eb27353e, headers=None json=None</msg>
<msg timestamp="20170925 17:39:14.421" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:14.421" starttime="20170925 17:39:14.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:14.421" starttime="20170925 17:39:14.421"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:39:14.422" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:39:14.422" starttime="20170925 17:39:14.422"></status>
</kw>
<msg timestamp="20170925 17:39:14.422" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:14.422" starttime="20170925 17:39:13.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:39:14.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:14.423" starttime="20170925 17:39:14.423"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:39:14.424" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/eb27353e", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-33-g34f9244", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:39:14.424" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:39:14.424" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170925 17:39:14.424" starttime="20170925 17:39:14.423"></status>
</kw>
<msg timestamp="20170925 17:39:14.424" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20170925 17:39:14.424" starttime="20170925 17:39:13.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20170925 17:39:14.425" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:14.425" starttime="20170925 17:39:14.424"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update_utils">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170925 17:39:14.431" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170925 17:39:14.431" starttime="20170925 17:39:14.430"></status>
</kw>
<msg timestamp="20170925 17:39:14.431" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170925 17:39:14.431" starttime="20170925 17:39:14.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:14.432" starttime="20170925 17:39:14.432"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:14.432" starttime="20170925 17:39:14.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:14.433" starttime="20170925 17:39:14.432"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170925 17:39:14.434" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170925 17:39:14.434" starttime="20170925 17:39:14.434"></status>
</kw>
<msg timestamp="20170925 17:39:14.434" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170925 17:39:14.434" starttime="20170925 17:39:14.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:14.436" starttime="20170925 17:39:14.436"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:14.436" starttime="20170925 17:39:14.435"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:14.436" starttime="20170925 17:39:14.434"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170925 17:39:14.437" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170925 17:39:16.880" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170925 17:39:16.880" starttime="20170925 17:39:14.436"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:16.881" starttime="20170925 17:39:14.429"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/eb27353e</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:39:16.891" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:39:16.891" starttime="20170925 17:39:16.890"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:39:16.892" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:39:16.892" starttime="20170925 17:39:16.892"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:39:16.892" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:39:16.893" starttime="20170925 17:39:16.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:39:16.893" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:39:16.893" starttime="20170925 17:39:16.893"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:39:17.076" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:39:17.076" starttime="20170925 17:39:16.894"></status>
</kw>
<msg timestamp="20170925 17:39:17.076" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:39:17.076" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:17.076" starttime="20170925 17:39:16.894"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:39:17.077" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:17.077" starttime="20170925 17:39:17.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:39:17.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:17.078" starttime="20170925 17:39:17.078"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:17.078" starttime="20170925 17:39:16.890"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:17.078" starttime="20170925 17:39:16.889"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:17.078" starttime="20170925 17:39:16.888"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:39:17.079" level="INFO">${base_uri} = /xyz/openbmc_project/software/eb27353e</msg>
<status status="PASS" endtime="20170925 17:39:17.079" starttime="20170925 17:39:17.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:17.080" starttime="20170925 17:39:17.079"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:39:17.861" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/eb27353e, headers=None json=None</msg>
<msg timestamp="20170925 17:39:17.861" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:17.861" starttime="20170925 17:39:17.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:39:17.862" starttime="20170925 17:39:17.862"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:39:17.862" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:39:17.863" starttime="20170925 17:39:17.862"></status>
</kw>
<msg timestamp="20170925 17:39:17.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:39:17.863" starttime="20170925 17:39:16.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:39:17.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:39:17.864" starttime="20170925 17:39:17.863"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:39:17.864" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/eb27353e", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-33-g34f9244", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:39:17.864" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:39:17.864" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170925 17:39:17.864" starttime="20170925 17:39:17.864"></status>
</kw>
<status status="PASS" endtime="20170925 17:39:17.865" starttime="20170925 17:39:16.887"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/eb27353e</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:40:17.884" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:40:17.884" starttime="20170925 17:40:17.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:40:17.885" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:40:17.885" starttime="20170925 17:40:17.885"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:40:17.886" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:40:17.886" starttime="20170925 17:40:17.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:40:17.886" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:40:17.886" starttime="20170925 17:40:17.886"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:40:18.063" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:40:18.063" starttime="20170925 17:40:17.887"></status>
</kw>
<msg timestamp="20170925 17:40:18.063" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:40:18.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:40:18.063" starttime="20170925 17:40:17.887"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:40:18.064" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:40:18.064" starttime="20170925 17:40:18.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:40:18.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:40:18.065" starttime="20170925 17:40:18.064"></status>
</kw>
<status status="PASS" endtime="20170925 17:40:18.065" starttime="20170925 17:40:17.883"></status>
</kw>
<status status="PASS" endtime="20170925 17:40:18.065" starttime="20170925 17:40:17.882"></status>
</kw>
<status status="PASS" endtime="20170925 17:40:18.065" starttime="20170925 17:40:17.881"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:40:18.066" level="INFO">${base_uri} = /xyz/openbmc_project/software/eb27353e</msg>
<status status="PASS" endtime="20170925 17:40:18.066" starttime="20170925 17:40:18.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:40:18.066" starttime="20170925 17:40:18.066"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:40:18.198" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/eb27353e, headers=None json=None</msg>
<msg timestamp="20170925 17:40:18.198" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:40:18.198" starttime="20170925 17:40:18.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:40:18.199" starttime="20170925 17:40:18.198"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:40:18.199" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:40:18.199" starttime="20170925 17:40:18.199"></status>
</kw>
<msg timestamp="20170925 17:40:18.199" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:40:18.199" starttime="20170925 17:40:17.880"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:40:18.200" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:40:18.200" starttime="20170925 17:40:18.200"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:40:18.201" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/eb27353e", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-33-g34f9244", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:40:18.201" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:40:18.201" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170925 17:40:18.201" starttime="20170925 17:40:18.200"></status>
</kw>
<status status="PASS" endtime="20170925 17:40:18.201" starttime="20170925 17:40:17.880"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/eb27353e</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:41:18.232" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:41:18.232" starttime="20170925 17:41:18.232"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:41:18.234" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:41:18.234" starttime="20170925 17:41:18.233"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:41:18.235" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:41:18.235" starttime="20170925 17:41:18.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:41:18.236" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:41:18.236" starttime="20170925 17:41:18.235"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:41:18.414" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:41:18.414" starttime="20170925 17:41:18.236"></status>
</kw>
<msg timestamp="20170925 17:41:18.414" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:41:18.414" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:41:18.414" starttime="20170925 17:41:18.236"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:41:18.415" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:41:18.415" starttime="20170925 17:41:18.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:41:18.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:41:18.416" starttime="20170925 17:41:18.415"></status>
</kw>
<status status="PASS" endtime="20170925 17:41:18.416" starttime="20170925 17:41:18.231"></status>
</kw>
<status status="PASS" endtime="20170925 17:41:18.416" starttime="20170925 17:41:18.230"></status>
</kw>
<status status="PASS" endtime="20170925 17:41:18.416" starttime="20170925 17:41:18.229"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:41:18.417" level="INFO">${base_uri} = /xyz/openbmc_project/software/eb27353e</msg>
<status status="PASS" endtime="20170925 17:41:18.417" starttime="20170925 17:41:18.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:41:18.417" starttime="20170925 17:41:18.417"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:41:18.549" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/eb27353e, headers=None json=None</msg>
<msg timestamp="20170925 17:41:18.549" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:41:18.549" starttime="20170925 17:41:18.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:41:18.550" starttime="20170925 17:41:18.549"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:41:18.550" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:41:18.550" starttime="20170925 17:41:18.550"></status>
</kw>
<msg timestamp="20170925 17:41:18.551" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:41:18.551" starttime="20170925 17:41:18.229"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:41:18.551" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:41:18.551" starttime="20170925 17:41:18.551"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:41:18.552" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/eb27353e", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-33-g34f9244", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:41:18.552" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:41:18.552" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170925 17:41:18.552" starttime="20170925 17:41:18.552"></status>
</kw>
<status status="PASS" endtime="20170925 17:41:18.553" starttime="20170925 17:41:18.228"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/eb27353e</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:42:18.626" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:42:18.626" starttime="20170925 17:42:18.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:42:18.627" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:42:18.627" starttime="20170925 17:42:18.627"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:42:18.628" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:42:18.628" starttime="20170925 17:42:18.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:42:18.629" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:42:18.629" starttime="20170925 17:42:18.629"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:42:18.855" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:42:18.855" starttime="20170925 17:42:18.630"></status>
</kw>
<msg timestamp="20170925 17:42:18.855" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:42:18.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:18.855" starttime="20170925 17:42:18.630"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:42:18.856" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:18.856" starttime="20170925 17:42:18.856"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:18.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:18.857" starttime="20170925 17:42:18.856"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:18.857" starttime="20170925 17:42:18.624"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:18.857" starttime="20170925 17:42:18.623"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:18.857" starttime="20170925 17:42:18.622"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:42:18.858" level="INFO">${base_uri} = /xyz/openbmc_project/software/eb27353e</msg>
<status status="PASS" endtime="20170925 17:42:18.858" starttime="20170925 17:42:18.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:18.859" starttime="20170925 17:42:18.858"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:42:18.989" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/eb27353e, headers=None json=None</msg>
<msg timestamp="20170925 17:42:18.989" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:18.989" starttime="20170925 17:42:18.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:18.990" starttime="20170925 17:42:18.989"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:42:18.990" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:42:18.990" starttime="20170925 17:42:18.990"></status>
</kw>
<msg timestamp="20170925 17:42:18.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:18.990" starttime="20170925 17:42:18.621"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:18.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:18.991" starttime="20170925 17:42:18.991"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:42:18.992" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/eb27353e", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-33-g34f9244", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:42:18.992" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:42:18.992" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170925 17:42:18.992" starttime="20170925 17:42:18.992"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:18.992" starttime="20170925 17:42:18.620"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:18.992" starttime="20170925 17:39:14.425"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:42:18.996" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:42:18.997" starttime="20170925 17:42:18.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:42:18.998" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:42:18.998" starttime="20170925 17:42:18.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:42:18.999" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:42:18.999" starttime="20170925 17:42:18.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:42:19.000" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:42:19.000" starttime="20170925 17:42:18.999"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:42:19.199" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:42:19.199" starttime="20170925 17:42:19.001"></status>
</kw>
<msg timestamp="20170925 17:42:19.199" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:42:19.199" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:19.199" starttime="20170925 17:42:19.001"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:42:19.200" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:19.200" starttime="20170925 17:42:19.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:19.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:19.201" starttime="20170925 17:42:19.200"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:19.201" starttime="20170925 17:42:18.995"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:19.201" starttime="20170925 17:42:18.994"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:19.201" starttime="20170925 17:42:18.994"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:42:19.202" level="INFO">${base_uri} = /xyz/openbmc_project/software/eb27353e</msg>
<status status="PASS" endtime="20170925 17:42:19.202" starttime="20170925 17:42:19.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:19.203" starttime="20170925 17:42:19.202"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:42:19.318" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/eb27353e, headers=None json=None</msg>
<msg timestamp="20170925 17:42:19.318" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:19.318" starttime="20170925 17:42:19.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:19.319" starttime="20170925 17:42:19.319"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:42:19.320" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:42:19.320" starttime="20170925 17:42:19.319"></status>
</kw>
<msg timestamp="20170925 17:42:19.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:19.320" starttime="20170925 17:42:18.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:19.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:19.321" starttime="20170925 17:42:19.320"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:42:19.321" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/eb27353e", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-33-g34f9244", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:42:19.321" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:42:19.321" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170925 17:42:19.322" starttime="20170925 17:42:19.321"></status>
</kw>
<msg timestamp="20170925 17:42:19.322" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20170925 17:42:19.322" starttime="20170925 17:42:18.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20170925 17:42:19.322" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:19.323" starttime="20170925 17:42:19.322"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:19.323" starttime="20170925 17:38:44.797"></status>
</kw>
<kw name="OBMC Reboot (off)" library="boot_utils">
<doc>Do "OBMC Reboot (off)" boot test.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=OBMC Reboot (off)</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:42:19.324" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=OBMC Reboot (off)  loc_stack_mode=normal  loc_quiet=1</msg>
<status status="PASS" endtime="20170925 17:42:19.324" starttime="20170925 17:42:19.323"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=OBMC Reboot (off)</arg>
<arg>loc_stack_mode=normal</arg>
<arg>loc_quiet=1</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:19.330" starttime="20170925 17:42:19.329"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20170925 17:42:19.331" level="INFO">${boot_stack} = OBMC Reboot (off)</msg>
<msg timestamp="20170925 17:42:19.332" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20170925 17:42:19.332" level="INFO">${quiet} = 1</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170925 17:42:19.451" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:42:19.451" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170925 17:42:20.230" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170925 17:42:20.230" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170925 17:42:20.297" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170925 17:42:20.306" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170925 17:42:20.306" level="INFO">${stderr} = </msg>
<msg timestamp="20170925 17:42:20.306" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170925 17:42:20.306" starttime="20170925 17:42:19.434"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170925 17:42:20.307" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170925 17:42:20.307" starttime="20170925 17:42:20.306"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170925 17:42:20.308" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170925 17:42:20.308" starttime="20170925 17:42:20.308"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:20.308" starttime="20170925 17:42:19.433"></status>
</kw>
<msg timestamp="20170925 17:42:20.309" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170925 17:42:20.521" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:42:20.547" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:42:20.548" starttime="20170925 17:42:20.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:42:20.548" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:42:20.548" starttime="20170925 17:42:20.548"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:42:20.549" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:42:20.549" starttime="20170925 17:42:20.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:42:20.550" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:42:20.550" starttime="20170925 17:42:20.549"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:42:20.741" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:42:20.741" starttime="20170925 17:42:20.551"></status>
</kw>
<msg timestamp="20170925 17:42:20.741" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:42:20.741" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:20.741" starttime="20170925 17:42:20.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:42:20.742" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:20.742" starttime="20170925 17:42:20.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:20.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:20.743" starttime="20170925 17:42:20.742"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:20.743" starttime="20170925 17:42:20.546"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:20.743" starttime="20170925 17:42:20.545"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:20.743" starttime="20170925 17:42:20.543"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:42:20.744" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170925 17:42:20.744" starttime="20170925 17:42:20.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:20.746" starttime="20170925 17:42:20.744"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:42:20.809" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20170925 17:42:20.809" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:20.809" starttime="20170925 17:42:20.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:20.810" starttime="20170925 17:42:20.809"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:42:20.810" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:42:20.810" starttime="20170925 17:42:20.810"></status>
</kw>
<msg timestamp="20170925 17:42:20.811" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:20.811" starttime="20170925 17:42:20.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:20.811" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:20.811" starttime="20170925 17:42:20.811"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:42:20.812" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:42:20.812" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:42:20.812" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170925 17:42:20.812" starttime="20170925 17:42:20.812"></status>
</kw>
<msg timestamp="20170925 17:42:20.813" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170925 17:42:20.813" starttime="20170925 17:42:20.542"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:20.813" starttime="20170925 17:42:20.541"></status>
</kw>
<msg timestamp="20170925 17:42:20.813" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20170925 17:42:20.813" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20170925 17:42:20.813" starttime="20170925 17:42:20.535"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:20.815" starttime="20170925 17:42:20.814"></status>
</kw>
<msg timestamp="20170925 17:42:20.815" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170925 17:42:20.815" starttime="20170925 17:42:20.814"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170925 17:42:20.827" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170925 17:42:20.827" starttime="20170925 17:42:20.826"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:42:20.828" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20170925 17:42:20.828" starttime="20170925 17:42:20.828"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:42:20.831" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:42:20.831" starttime="20170925 17:42:20.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:42:20.832" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:42:20.832" starttime="20170925 17:42:20.831"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:42:20.832" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:42:20.832" starttime="20170925 17:42:20.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:42:20.833" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:42:20.833" starttime="20170925 17:42:20.833"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.027" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:42:21.027" starttime="20170925 17:42:20.834"></status>
</kw>
<msg timestamp="20170925 17:42:21.027" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:42:21.028" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.028" starttime="20170925 17:42:20.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.028" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.028" starttime="20170925 17:42:21.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.029" starttime="20170925 17:42:21.029"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.029" starttime="20170925 17:42:20.830"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.029" starttime="20170925 17:42:20.829"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.029" starttime="20170925 17:42:20.829"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:42:21.030" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170925 17:42:21.030" starttime="20170925 17:42:21.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:42:21.031" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:42:21.031" starttime="20170925 17:42:21.030"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:21.035" starttime="20170925 17:42:21.031"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170925 17:42:21.037" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20170925 17:42:21.037" starttime="20170925 17:42:21.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170925 17:42:21.038" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170925 17:42:21.038" starttime="20170925 17:42:21.038"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.038" starttime="20170925 17:42:21.037"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.039" starttime="20170925 17:42:21.035"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:42:21.190" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170925 17:42:21.190" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.191" starttime="20170925 17:42:21.039"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170925 17:42:21.192" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170925 17:42:21.192" starttime="20170925 17:42:21.191"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170925 17:42:21.194" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170925 17:42:21.194" starttime="20170925 17:42:21.193"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.194" starttime="20170925 17:42:21.192"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.194" starttime="20170925 17:42:21.191"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:42:21.195" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:42:21.195" starttime="20170925 17:42:21.195"></status>
</kw>
<msg timestamp="20170925 17:42:21.195" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.196" starttime="20170925 17:42:20.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.196" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.197" starttime="20170925 17:42:21.196"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170925 17:42:21.197" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:42:21.197" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:42:21.197" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170925 17:42:21.197" starttime="20170925 17:42:21.197"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.197" starttime="20170925 17:42:20.827"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.198" starttime="20170925 17:42:20.826"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.198" starttime="20170925 17:42:20.815"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20170925 17:42:21.199" starttime="20170925 17:42:21.198"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:42:21.199" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20170925 17:42:21.199" starttime="20170925 17:42:21.199"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:42:21.204" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:42:21.205" starttime="20170925 17:42:21.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:42:21.205" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:42:21.205" starttime="20170925 17:42:21.205"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:42:21.206" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:42:21.206" starttime="20170925 17:42:21.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:42:21.207" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:42:21.207" starttime="20170925 17:42:21.206"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.446" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:42:21.446" starttime="20170925 17:42:21.208"></status>
</kw>
<msg timestamp="20170925 17:42:21.446" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:42:21.446" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.446" starttime="20170925 17:42:21.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.447" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.447" starttime="20170925 17:42:21.447"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.448" starttime="20170925 17:42:21.447"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.448" starttime="20170925 17:42:21.203"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.448" starttime="20170925 17:42:21.202"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.448" starttime="20170925 17:42:21.202"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:42:21.449" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170925 17:42:21.449" starttime="20170925 17:42:21.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:21.449" starttime="20170925 17:42:21.449"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:42:21.514" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20170925 17:42:21.514" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.514" starttime="20170925 17:42:21.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:21.515" starttime="20170925 17:42:21.514"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:42:21.515" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:42:21.515" starttime="20170925 17:42:21.515"></status>
</kw>
<msg timestamp="20170925 17:42:21.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.515" starttime="20170925 17:42:21.201"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.516" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.516" starttime="20170925 17:42:21.516"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:42:21.517" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:42:21.517" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:42:21.517" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170925 17:42:21.517" starttime="20170925 17:42:21.516"></status>
</kw>
<msg timestamp="20170925 17:42:21.517" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170925 17:42:21.517" starttime="20170925 17:42:21.201"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.518" starttime="20170925 17:42:21.200"></status>
</kw>
<msg timestamp="20170925 17:42:21.518" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170925 17:42:21.518" starttime="20170925 17:42:21.200"></status>
</kw>
<msg timestamp="20170925 17:42:21.518" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170925 17:42:21.518" starttime="20170925 17:42:21.198"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.518" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.519" starttime="20170925 17:42:21.518"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.519" starttime="20170925 17:42:20.534"></status>
</kw>
<msg timestamp="20170925 17:42:21.571" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170925 17:42:21.607" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170925 17:42:21.617" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170925 17:42:21.617" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:42:21.665" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:42:21.666" starttime="20170925 17:42:21.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:42:21.667" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:42:21.667" starttime="20170925 17:42:21.667"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:42:21.668" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:42:21.668" starttime="20170925 17:42:21.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:42:21.668" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:42:21.668" starttime="20170925 17:42:21.668"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.847" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:42:21.847" starttime="20170925 17:42:21.669"></status>
</kw>
<msg timestamp="20170925 17:42:21.847" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:42:21.847" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.847" starttime="20170925 17:42:21.669"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.848" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.848" starttime="20170925 17:42:21.847"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.849" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.849" starttime="20170925 17:42:21.848"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.849" starttime="20170925 17:42:21.664"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.849" starttime="20170925 17:42:21.663"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.849" starttime="20170925 17:42:21.662"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:42:21.850" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170925 17:42:21.850" starttime="20170925 17:42:21.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:21.851" starttime="20170925 17:42:21.850"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:42:21.914" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170925 17:42:21.915" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.915" starttime="20170925 17:42:21.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:21.915" starttime="20170925 17:42:21.915"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:42:21.916" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:42:21.916" starttime="20170925 17:42:21.916"></status>
</kw>
<msg timestamp="20170925 17:42:21.916" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.916" starttime="20170925 17:42:21.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:21.917" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:21.917" starttime="20170925 17:42:21.916"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:42:21.917" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:42:21.917" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:42:21.918" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170925 17:42:21.918" starttime="20170925 17:42:21.917"></status>
</kw>
<msg timestamp="20170925 17:42:21.918" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170925 17:42:21.918" starttime="20170925 17:42:21.660"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:21.918" starttime="20170925 17:42:21.658"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:42:21.923" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:42:21.923" starttime="20170925 17:42:21.922"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:42:21.924" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:42:21.924" starttime="20170925 17:42:21.923"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:42:21.925" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:42:21.925" starttime="20170925 17:42:21.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:42:21.925" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:42:21.925" starttime="20170925 17:42:21.925"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:42:22.117" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:42:22.117" starttime="20170925 17:42:21.926"></status>
</kw>
<msg timestamp="20170925 17:42:22.117" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:42:22.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.117" starttime="20170925 17:42:21.926"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:42:22.118" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.118" starttime="20170925 17:42:22.118"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:22.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.119" starttime="20170925 17:42:22.119"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.119" starttime="20170925 17:42:21.922"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.119" starttime="20170925 17:42:21.921"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.120" starttime="20170925 17:42:21.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:42:22.120" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170925 17:42:22.120" starttime="20170925 17:42:22.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:22.121" starttime="20170925 17:42:22.121"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:42:22.184" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170925 17:42:22.184" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.184" starttime="20170925 17:42:22.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:22.185" starttime="20170925 17:42:22.185"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:42:22.185" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:42:22.186" starttime="20170925 17:42:22.185"></status>
</kw>
<msg timestamp="20170925 17:42:22.186" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.186" starttime="20170925 17:42:21.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:22.187" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.187" starttime="20170925 17:42:22.186"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:42:22.187" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:42:22.187" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:42:22.188" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170925 17:42:22.188" starttime="20170925 17:42:22.187"></status>
</kw>
<msg timestamp="20170925 17:42:22.188" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170925 17:42:22.188" starttime="20170925 17:42:21.920"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.188" starttime="20170925 17:42:21.919"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:22.190" starttime="20170925 17:42:22.189"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>New Get Boot Progress</arg>
</arguments>
<assign>
<var>${new_status}</var>
<var>${new_value}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:42:22.195" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:42:22.195" starttime="20170925 17:42:22.194"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:42:22.196" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:42:22.196" starttime="20170925 17:42:22.196"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:42:22.197" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:42:22.197" starttime="20170925 17:42:22.197"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:42:22.198" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:42:22.198" starttime="20170925 17:42:22.198"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:42:22.410" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:42:22.410" starttime="20170925 17:42:22.200"></status>
</kw>
<msg timestamp="20170925 17:42:22.410" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:42:22.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.410" starttime="20170925 17:42:22.199"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:42:22.411" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.411" starttime="20170925 17:42:22.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:22.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.412" starttime="20170925 17:42:22.411"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.412" starttime="20170925 17:42:22.193"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.412" starttime="20170925 17:42:22.193"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.412" starttime="20170925 17:42:22.192"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:42:22.412" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170925 17:42:22.413" starttime="20170925 17:42:22.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:22.413" starttime="20170925 17:42:22.413"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:42:22.521" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170925 17:42:22.521" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.521" starttime="20170925 17:42:22.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:22.522" starttime="20170925 17:42:22.521"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:42:22.522" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:42:22.522" starttime="20170925 17:42:22.522"></status>
</kw>
<msg timestamp="20170925 17:42:22.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.523" starttime="20170925 17:42:22.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:22.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.523" starttime="20170925 17:42:22.523"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:42:22.524" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:42:22.524" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:42:22.524" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status status="PASS" endtime="20170925 17:42:22.524" starttime="20170925 17:42:22.524"></status>
</kw>
<msg timestamp="20170925 17:42:22.524" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170925 17:42:22.524" starttime="20170925 17:42:22.191"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.525" starttime="20170925 17:42:22.190"></status>
</kw>
<msg timestamp="20170925 17:42:22.525" level="INFO">${new_status} = PASS</msg>
<msg timestamp="20170925 17:42:22.525" level="INFO">${new_value} = Unspecified</msg>
<status status="PASS" endtime="20170925 17:42:22.525" starttime="20170925 17:42:22.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${new_status}' == 'PASS'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
</arguments>
<msg timestamp="20170925 17:42:22.527" level="INFO">${boot_prog_method} = New</msg>
<status status="PASS" endtime="20170925 17:42:22.527" starttime="20170925 17:42:22.526"></status>
</kw>
<kw name="Rqpvars" library="gen_robot_print">
<arguments>
<arg>boot_prog_method</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:22.527" starttime="20170925 17:42:22.527"></status>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170925 17:42:22.528" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170925 17:42:22.528" starttime="20170925 17:42:22.528"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.528" starttime="20170925 17:42:22.526"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.528" starttime="20170925 17:42:22.525"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.528" starttime="20170925 17:42:22.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:42:22.533" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:42:22.533" starttime="20170925 17:42:22.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:42:22.534" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:42:22.534" starttime="20170925 17:42:22.534"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:42:22.535" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:42:22.535" starttime="20170925 17:42:22.534"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:42:22.535" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:42:22.535" starttime="20170925 17:42:22.535"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:42:22.745" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:42:22.745" starttime="20170925 17:42:22.536"></status>
</kw>
<msg timestamp="20170925 17:42:22.745" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:42:22.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.745" starttime="20170925 17:42:22.536"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:42:22.746" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.746" starttime="20170925 17:42:22.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:22.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.747" starttime="20170925 17:42:22.746"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.747" starttime="20170925 17:42:22.532"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.747" starttime="20170925 17:42:22.531"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.747" starttime="20170925 17:42:22.531"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:42:22.748" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170925 17:42:22.748" starttime="20170925 17:42:22.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:22.748" starttime="20170925 17:42:22.748"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:42:22.835" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170925 17:42:22.835" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.835" starttime="20170925 17:42:22.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:22.836" starttime="20170925 17:42:22.836"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:42:22.836" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:42:22.836" starttime="20170925 17:42:22.836"></status>
</kw>
<msg timestamp="20170925 17:42:22.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.837" starttime="20170925 17:42:22.530"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:22.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:22.838" starttime="20170925 17:42:22.837"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:42:22.838" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:42:22.838" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:42:22.838" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status status="PASS" endtime="20170925 17:42:22.838" starttime="20170925 17:42:22.838"></status>
</kw>
<msg timestamp="20170925 17:42:22.839" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170925 17:42:22.839" starttime="20170925 17:42:22.529"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.839" starttime="20170925 17:42:22.529"></status>
</kw>
<msg timestamp="20170925 17:42:22.839" level="INFO">${state} = Unspecified</msg>
<status status="PASS" endtime="20170925 17:42:22.839" starttime="20170925 17:42:22.529"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:22.839" starttime="20170925 17:42:22.188"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:42:22.845" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:42:22.846" starttime="20170925 17:42:22.844"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:42:22.847" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:42:22.847" starttime="20170925 17:42:22.846"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:42:22.848" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:42:22.848" starttime="20170925 17:42:22.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:42:22.849" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:42:22.849" starttime="20170925 17:42:22.848"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:42:23.066" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:42:23.066" starttime="20170925 17:42:22.850"></status>
</kw>
<msg timestamp="20170925 17:42:23.066" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:42:23.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:23.066" starttime="20170925 17:42:22.849"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:42:23.067" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:23.067" starttime="20170925 17:42:23.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:23.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:23.068" starttime="20170925 17:42:23.067"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:23.068" starttime="20170925 17:42:22.843"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:23.068" starttime="20170925 17:42:22.842"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:23.068" starttime="20170925 17:42:22.841"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:42:23.069" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170925 17:42:23.069" starttime="20170925 17:42:23.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:23.070" starttime="20170925 17:42:23.069"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:42:23.157" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170925 17:42:23.157" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:23.157" starttime="20170925 17:42:23.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:42:23.158" starttime="20170925 17:42:23.158"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:42:23.158" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:42:23.158" starttime="20170925 17:42:23.158"></status>
</kw>
<msg timestamp="20170925 17:42:23.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:42:23.159" starttime="20170925 17:42:22.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:42:23.159" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:42:23.159" starttime="20170925 17:42:23.159"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:42:23.160" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:42:23.160" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:42:23.160" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170925 17:42:23.160" starttime="20170925 17:42:23.160"></status>
</kw>
<msg timestamp="20170925 17:42:23.160" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170925 17:42:23.161" starttime="20170925 17:42:22.840"></status>
</kw>
<status status="PASS" endtime="20170925 17:42:23.161" starttime="20170925 17:42:22.839"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<msg timestamp="20170925 17:42:23.168" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/sbin/reboot</arg>
<arg>fork=${1}</arg>
</arguments>
<msg timestamp="20170925 17:42:23.188" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:42:23.189" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20170925 17:42:23.199" starttime="20170925 17:42:23.170"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:42:27.231" level="FAIL">
#(UTC) 2017/09/25 17:42:27.225038 -    4.062530 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:42:27.236" starttime="20170925 17:42:23.212"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:42:31.269" level="FAIL">
#(UTC) 2017/09/25 17:42:31.265834 -    4.040796 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:42:31.270" starttime="20170925 17:42:27.249"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:42:35.284" level="FAIL">
#(UTC) 2017/09/25 17:42:35.281722 -    4.015888 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:42:35.285" starttime="20170925 17:42:31.272"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:42:39.303" level="FAIL">
#(UTC) 2017/09/25 17:42:39.300560 -    4.018838 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:42:39.304" starttime="20170925 17:42:35.286"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:42:43.320" level="FAIL">
#(UTC) 2017/09/25 17:42:43.316700 -    4.016140 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:42:43.321" starttime="20170925 17:42:39.307"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:42:47.334" level="FAIL">
#(UTC) 2017/09/25 17:42:47.332066 -    4.015366 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:42:47.335" starttime="20170925 17:42:43.323"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:42:51.351" level="FAIL">
#(UTC) 2017/09/25 17:42:51.348258 -    4.016192 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:42:51.352" starttime="20170925 17:42:47.338"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:42:55.367" level="FAIL">
#(UTC) 2017/09/25 17:42:55.364295 -    4.016037 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:42:55.368" starttime="20170925 17:42:51.355"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:42:59.387" level="FAIL">
#(UTC) 2017/09/25 17:42:59.384308 -    4.020013 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:42:59.388" starttime="20170925 17:42:55.371"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:03.403" level="FAIL">
#(UTC) 2017/09/25 17:43:03.400583 -    4.016275 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:03.405" starttime="20170925 17:42:59.391"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:07.423" level="FAIL">
#(UTC) 2017/09/25 17:43:07.420455 -    4.019872 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:07.424" starttime="20170925 17:43:03.407"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:11.439" level="FAIL">
#(UTC) 2017/09/25 17:43:11.436313 -    4.015858 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:11.440" starttime="20170925 17:43:07.427"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:15.455" level="FAIL">
#(UTC) 2017/09/25 17:43:15.452254 -    4.015941 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:15.456" starttime="20170925 17:43:11.443"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:19.472" level="FAIL">
#(UTC) 2017/09/25 17:43:19.468978 -    4.016724 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:19.473" starttime="20170925 17:43:15.459"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:23.488" level="FAIL">
#(UTC) 2017/09/25 17:43:23.485561 -    4.016583 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:23.489" starttime="20170925 17:43:19.475"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:27.503" level="FAIL">
#(UTC) 2017/09/25 17:43:27.500415 -    4.014854 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:27.504" starttime="20170925 17:43:23.492"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:31.520" level="FAIL">
#(UTC) 2017/09/25 17:43:31.516790 -    4.016375 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:31.521" starttime="20170925 17:43:27.507"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:35.559" level="FAIL">
#(UTC) 2017/09/25 17:43:35.548007 -    4.031217 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:35.561" starttime="20170925 17:43:31.523"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:39.580" level="FAIL">
#(UTC) 2017/09/25 17:43:39.576626 -    4.028619 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:39.581" starttime="20170925 17:43:35.563"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:43.596" level="FAIL">
#(UTC) 2017/09/25 17:43:43.593134 -    4.016508 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:43.597" starttime="20170925 17:43:39.584"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:47.613" level="FAIL">
#(UTC) 2017/09/25 17:43:47.610096 -    4.016962 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:47.614" starttime="20170925 17:43:43.600"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:51.632" level="FAIL">
#(UTC) 2017/09/25 17:43:51.629043 -    4.018947 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:51.633" starttime="20170925 17:43:47.617"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:55.648" level="FAIL">
#(UTC) 2017/09/25 17:43:55.644618 -    4.015575 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:55.649" starttime="20170925 17:43:51.636"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:43:59.667" level="FAIL">
#(UTC) 2017/09/25 17:43:59.664395 -    4.019777 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:43:59.668" starttime="20170925 17:43:55.651"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:44:03.683" level="FAIL">
#(UTC) 2017/09/25 17:44:03.680062 -    4.015667 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:44:03.684" starttime="20170925 17:43:59.671"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:44:07.699" level="FAIL">
#(UTC) 2017/09/25 17:44:07.696401 -    4.016339 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170925 17:44:07.700" starttime="20170925 17:44:03.686"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:44:12.718" level="FAIL">
#(UTC) 2017/09/25 17:44:12.714727 -    5.018326 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             40
</msg>
<status status="FAIL" endtime="20170925 17:44:12.719" starttime="20170925 17:44:07.703"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:44:17.734" starttime="20170925 17:44:12.721"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:44:22.758" level="FAIL">
#(UTC) 2017/09/25 17:44:22.755184 -   10.040457 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170925 17:44:22.759" starttime="20170925 17:44:17.746"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:44:27.778" level="FAIL">
#(UTC) 2017/09/25 17:44:27.775478 -    5.020294 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170925 17:44:27.779" starttime="20170925 17:44:22.761"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:44:32.793" level="FAIL">
#(UTC) 2017/09/25 17:44:32.790430 -    5.014952 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170925 17:44:32.794" starttime="20170925 17:44:27.781"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:44:37.807" level="FAIL">
#(UTC) 2017/09/25 17:44:37.804798 -    5.014368 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170925 17:44:37.808" starttime="20170925 17:44:32.796"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:44:42.824" level="FAIL">
#(UTC) 2017/09/25 17:44:42.821721 -    5.016923 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170925 17:44:42.826" starttime="20170925 17:44:37.810"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:44:47.840" level="FAIL">
#(UTC) 2017/09/25 17:44:47.837549 -    5.015828 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170925 17:44:47.841" starttime="20170925 17:44:42.828"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:44:52.877" level="FAIL">
#(UTC) 2017/09/25 17:44:52.863937 -    5.026388 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170925 17:44:52.882" starttime="20170925 17:44:47.843"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:44:57.910" level="FAIL">
#(UTC) 2017/09/25 17:44:57.906673 -    5.042736 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170925 17:44:57.911" starttime="20170925 17:44:52.894"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:45:02.951" level="FAIL">
#(UTC) 2017/09/25 17:45:02.936582 -    5.029909 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170925 17:45:02.957" starttime="20170925 17:44:57.913"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:45:08.005" level="FAIL">
#(UTC) 2017/09/25 17:45:07.990833 -    5.054251 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170925 17:45:08.010" starttime="20170925 17:45:02.967"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:45:13.038" level="FAIL">
#(UTC) 2017/09/25 17:45:13.035111 -    5.044278 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170925 17:45:13.039" starttime="20170925 17:45:08.022"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:45:18.056" level="FAIL">
#(UTC) 2017/09/25 17:45:18.052805 -    5.017694 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             80
</msg>
<status status="FAIL" endtime="20170925 17:45:18.057" starttime="20170925 17:45:13.042"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:45:22.089" starttime="20170925 17:45:18.059"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/uptime | cut -f 1 -d ' '</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170925 17:45:22.129" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:22.130" level="INFO">Executing command 'cat /proc/uptime | cut -f 1 -d ' ''.</msg>
<msg timestamp="20170925 17:45:22.148" level="FAIL">error: [Errno 104] Connection reset by peer</msg>
<status status="FAIL" endtime="20170925 17:45:22.148" starttime="20170925 17:45:22.109"></status>
</kw>
<msg timestamp="20170925 17:45:22.201" level="FAIL">ValueError: could not convert string to float: </msg>
<status status="FAIL" endtime="20170925 17:45:22.206" starttime="20170925 17:42:23.162"></status>
</kw>
<msg timestamp="20170925 17:45:22.219" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170925 17:45:22.223" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="My Ffdc" library="obmc_boot_test">
<doc>Collect FFDC data.</doc>
<msg timestamp="20170925 17:45:22.235" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<arguments>
<arg>ffdc_prefix=9.3.86.161.170925.174223.</arg>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170925 17:45:22.253" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170925 17:45:22.253" starttime="20170925 17:45:22.252"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170925 17:45:22.257" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170925 17:45:25.263" level="INFO">${RC} = 0</msg>
<msg timestamp="20170925 17:45:25.263" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.709 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.585 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170925 17:45:25.263" starttime="20170925 17:45:22.253"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.267" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.709 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.585 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.611 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.718 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.585/0.655/0.718/0.066 ms</msg>
<status status="PASS" endtime="20170925 17:45:25.267" starttime="20170925 17:45:25.266"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:45:25.268" starttime="20170925 17:45:25.268"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.268" starttime="20170925 17:45:22.252"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170925 17:45:25.295" level="INFO">${cur_time} = 2017-09-25 17:45:25:294742</msg>
<status status="PASS" endtime="20170925 17:45:25.295" starttime="20170925 17:45:25.295"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170925 17:45:25.296" level="INFO">${cur_time} = 20170925174525294742</msg>
<status status="PASS" endtime="20170925 17:45:25.296" starttime="20170925 17:45:25.295"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.296" starttime="20170925 17:45:25.294"></status>
</kw>
<msg timestamp="20170925 17:45:25.302" level="INFO">${FFDC_TIME} = 20170925174525294742</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170925 17:45:25.303" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170925 17:45:25.303" starttime="20170925 17:45:25.303"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170925 17:45:25.304" level="INFO">${suite_name} = 20170925174525294742_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170925 17:45:25.304" starttime="20170925 17:45:25.303"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170925 17:45:25.305" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170925 17:45:25.305" starttime="20170925 17:45:25.305"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170925 17:45:25.306" level="INFO">${test_name} = 20170925174525294742_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170925 17:45:25.306" starttime="20170925 17:45:25.306"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.306" starttime="20170925 17:45:25.302"></status>
</kw>
<msg timestamp="20170925 17:45:25.306" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170925 17:45:25.307" level="INFO">${FFDC_PREFIX} = 9.3.86.161.170925.174223.</msg>
<msg timestamp="20170925 17:45:25.330" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170925 17:45:25.332" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.332" starttime="20170925 17:45:25.331"></status>
</kw>
<msg timestamp="20170925 17:45:25.337" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.351" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.351" starttime="20170925 17:45:25.350"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.351" starttime="20170925 17:45:25.349"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.352" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.352" starttime="20170925 17:45:25.352"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.352" starttime="20170925 17:45:25.351"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.353" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.353" starttime="20170925 17:45:25.353"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.353" starttime="20170925 17:45:25.352"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.355" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.355" starttime="20170925 17:45:25.354"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.355" starttime="20170925 17:45:25.354"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.356" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.356" starttime="20170925 17:45:25.356"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.356" starttime="20170925 17:45:25.355"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.358" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.358" starttime="20170925 17:45:25.357"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.358" starttime="20170925 17:45:25.357"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.359" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.359" starttime="20170925 17:45:25.359"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.359" starttime="20170925 17:45:25.358"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.360" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.361" starttime="20170925 17:45:25.360"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.361" starttime="20170925 17:45:25.359"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.362" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.362" starttime="20170925 17:45:25.361"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.362" starttime="20170925 17:45:25.361"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.364" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.364" starttime="20170925 17:45:25.363"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.364" starttime="20170925 17:45:25.362"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.365" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.365" starttime="20170925 17:45:25.364"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.365" starttime="20170925 17:45:25.364"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.366" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.366" starttime="20170925 17:45:25.366"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.366" starttime="20170925 17:45:25.365"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:25.367" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:25.368" starttime="20170925 17:45:25.367"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:25.368" starttime="20170925 17:45:25.366"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170925 17:45:25.387" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:25.388" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170925 17:45:25.388" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:25.389" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170925 17:45:31.788" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170925 17:45:31.788" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170925 17:45:32.833" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170925 17:45:32.845" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170925 17:45:32.845" level="INFO">${stderr} = </msg>
<msg timestamp="20170925 17:45:32.845" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170925 17:45:32.845" starttime="20170925 17:45:25.368"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.846" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170925 17:45:32.846" starttime="20170925 17:45:32.845"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.846" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170925 17:45:32.846" starttime="20170925 17:45:32.846"></status>
</kw>
<msg timestamp="20170925 17:45:32.847" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170925 17:45:32.847" starttime="20170925 17:45:25.368"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.848" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.848" starttime="20170925 17:45:32.848"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.848" starttime="20170925 17:45:32.847"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.848" starttime="20170925 17:45:25.362"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.850" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.850" starttime="20170925 17:45:32.849"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.850" starttime="20170925 17:45:32.849"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170925 17:45:32.850" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170925 17:45:32.850" starttime="20170925 17:45:32.850"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.852" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.852" starttime="20170925 17:45:32.851"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.852" starttime="20170925 17:45:32.851"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.853" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.853" starttime="20170925 17:45:32.853"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.853" starttime="20170925 17:45:32.852"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.853" starttime="20170925 17:45:32.851"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.855" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.855" starttime="20170925 17:45:32.854"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.855" starttime="20170925 17:45:32.854"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.856" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.856" starttime="20170925 17:45:32.856"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.856" starttime="20170925 17:45:32.855"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.856" starttime="20170925 17:45:32.853"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.858" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.858" starttime="20170925 17:45:32.857"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.858" starttime="20170925 17:45:32.856"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.859" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.859" starttime="20170925 17:45:32.859"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.859" starttime="20170925 17:45:32.858"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.859" starttime="20170925 17:45:32.856"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.859" starttime="20170925 17:45:32.850"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.860" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.861" starttime="20170925 17:45:32.860"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.861" starttime="20170925 17:45:32.860"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.861" starttime="20170925 17:45:25.349"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170925 17:45:32.867" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170925 17:45:32.867" starttime="20170925 17:45:32.867"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170925 17:45:32.869" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170925 17:45:32.869" starttime="20170925 17:45:32.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:45:32.870" starttime="20170925 17:45:32.870"></status>
</kw>
<msg timestamp="20170925 17:45:32.870" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170925 17:45:32.870" starttime="20170925 17:45:32.869"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:45:32.872" starttime="20170925 17:45:32.872"></status>
</kw>
<msg timestamp="20170925 17:45:32.872" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:45:32.873" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:45:32.873" starttime="20170925 17:45:32.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:45:32.873" starttime="20170925 17:45:32.873"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170925 17:45:32.890" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170925 17:45:32.890" starttime="20170925 17:45:32.890"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170925 17:45:32.892" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170925 17:45:32.892" starttime="20170925 17:45:32.891"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.898" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170925 17:45:32.898" starttime="20170925 17:45:32.892"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.901" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.901" starttime="20170925 17:45:32.901"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.901" starttime="20170925 17:45:32.900"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.903" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.903" starttime="20170925 17:45:32.902"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.903" starttime="20170925 17:45:32.902"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.904" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.904" starttime="20170925 17:45:32.904"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.904" starttime="20170925 17:45:32.903"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:32.906" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:32.906" starttime="20170925 17:45:32.905"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.906" starttime="20170925 17:45:32.905"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.906" starttime="20170925 17:45:32.900"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:32.906" starttime="20170925 17:45:32.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:45:32.907" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:45:32.907" starttime="20170925 17:45:32.906"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:45:32.953" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:32.953" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:32.953" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170925 17:45:37.515" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20170925 17:45:37.516" starttime="20170925 17:45:32.927"></status>
</kw>
<msg timestamp="20170925 17:45:37.516" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:45:37.516" level="INFO">${ret_values} = (u'', u'Traceback (most recent call last):\n  File "/usr/sbin/obmcutil", line 169, in &lt;module&gt;\n    obj = bus.get_object(bus_name, obj_path)\n  File "/usr/lib/python2.7/site-packages/dbus/bus.py", lin...</msg>
<status status="PASS" endtime="20170925 17:45:37.516" starttime="20170925 17:45:32.907"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:45:37.517" level="INFO">${stdout} = </msg>
<status status="PASS" endtime="20170925 17:45:37.517" starttime="20170925 17:45:37.517"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:45:37.517" level="INFO">${stderr} = Traceback (most recent call last):
  File "/usr/sbin/obmcutil", line 169, in &lt;module&gt;
    obj = bus.get_object(bus_name, obj_path)
  File "/usr/lib/python2.7/site-packages/dbus/bus.py", line 241, in g...</msg>
<status status="PASS" endtime="20170925 17:45:37.518" starttime="20170925 17:45:37.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:37.525" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:37.526" starttime="20170925 17:45:37.525"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.526" starttime="20170925 17:45:37.524"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.526" starttime="20170925 17:45:37.518"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.526" starttime="20170925 17:45:32.898"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.526" starttime="20170925 17:45:32.898"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.526" starttime="20170925 17:45:32.898"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.526" starttime="20170925 17:45:32.891"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.526" starttime="20170925 17:45:32.890"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170925 17:45:37.527" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170925 17:45:37.527" starttime="20170925 17:45:37.527"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170925 17:45:37.532" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170925 17:45:37.532" starttime="20170925 17:45:37.528"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:37.536" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:37.536" starttime="20170925 17:45:37.536"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.536" starttime="20170925 17:45:37.535"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:37.538" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:37.538" starttime="20170925 17:45:37.537"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.538" starttime="20170925 17:45:37.537"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:37.539" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:37.539" starttime="20170925 17:45:37.539"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.539" starttime="20170925 17:45:37.538"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:37.540" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:37.540" starttime="20170925 17:45:37.540"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.540" starttime="20170925 17:45:37.539"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.541" starttime="20170925 17:45:37.535"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:37.541" starttime="20170925 17:45:37.534"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:45:37.541" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:45:37.541" starttime="20170925 17:45:37.541"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:45:37.587" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:37.588" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:37.588" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170925 17:45:38.557" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:45:38.557" starttime="20170925 17:45:37.562"></status>
</kw>
<msg timestamp="20170925 17:45:38.557" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:45:38.557" level="INFO">${ret_values} = (u'20170925173311', u'', 0)</msg>
<status status="PASS" endtime="20170925 17:45:38.557" starttime="20170925 17:45:37.542"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:45:38.558" level="INFO">${stdout} = 20170925173311</msg>
<status status="PASS" endtime="20170925 17:45:38.558" starttime="20170925 17:45:38.558"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:45:38.559" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:45:38.559" starttime="20170925 17:45:38.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:38.567" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:38.567" starttime="20170925 17:45:38.566"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.567" starttime="20170925 17:45:38.565"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.567" starttime="20170925 17:45:38.559"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.567" starttime="20170925 17:45:37.533"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.567" starttime="20170925 17:45:37.533"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:38.570" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:38.570" starttime="20170925 17:45:38.570"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.570" starttime="20170925 17:45:38.569"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:38.571" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:38.572" starttime="20170925 17:45:38.571"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.572" starttime="20170925 17:45:38.570"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:38.573" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:38.573" starttime="20170925 17:45:38.572"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.573" starttime="20170925 17:45:38.572"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:38.574" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:38.574" starttime="20170925 17:45:38.574"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.574" starttime="20170925 17:45:38.573"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.574" starttime="20170925 17:45:38.569"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.574" starttime="20170925 17:45:38.568"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:45:38.575" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:45:38.575" starttime="20170925 17:45:38.575"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:45:38.622" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:38.622" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:38.623" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170925 17:45:38.866" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:45:38.866" starttime="20170925 17:45:38.596"></status>
</kw>
<msg timestamp="20170925 17:45:38.867" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:45:38.867" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-33"\nVERSION_ID="v1.99.10-33-g34f9244"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170925 17:45:38.867" starttime="20170925 17:45:38.576"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:45:38.867" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-33"
VERSION_ID="v1.99.10-33-g34f9244"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170925 17:45:38.867" starttime="20170925 17:45:38.867"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:45:38.868" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:45:38.868" starttime="20170925 17:45:38.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:38.876" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:38.876" starttime="20170925 17:45:38.875"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.876" starttime="20170925 17:45:38.875"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.876" starttime="20170925 17:45:38.868"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.876" starttime="20170925 17:45:38.567"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.876" starttime="20170925 17:45:38.567"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.876" starttime="20170925 17:45:37.533"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.877" starttime="20170925 17:45:37.526"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.877" starttime="20170925 17:45:37.526"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170925 17:45:38.878" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170925 17:45:38.878" starttime="20170925 17:45:38.877"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170925 17:45:38.879" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170925 17:45:38.879" starttime="20170925 17:45:38.878"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:38.882" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:38.882" starttime="20170925 17:45:38.882"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.882" starttime="20170925 17:45:38.881"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:38.883" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:38.883" starttime="20170925 17:45:38.883"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.884" starttime="20170925 17:45:38.882"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:38.885" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:38.885" starttime="20170925 17:45:38.884"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.885" starttime="20170925 17:45:38.884"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:38.886" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:38.886" starttime="20170925 17:45:38.886"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.886" starttime="20170925 17:45:38.885"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.886" starttime="20170925 17:45:38.880"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:38.886" starttime="20170925 17:45:38.880"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:45:38.887" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:45:38.887" starttime="20170925 17:45:38.887"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:45:38.933" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:38.934" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:38.934" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170925 17:45:39.277" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:45:39.277" starttime="20170925 17:45:38.908"></status>
</kw>
<msg timestamp="20170925 17:45:39.277" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:45:39.278" level="INFO">${ret_values} = (u' 17:45:52 up 1 min,  load average: 5.66, 1.61, 0.55', u'', 0)</msg>
<status status="PASS" endtime="20170925 17:45:39.278" starttime="20170925 17:45:38.887"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:45:39.279" level="INFO">${stdout} =  17:45:52 up 1 min,  load average: 5.66, 1.61, 0.55</msg>
<status status="PASS" endtime="20170925 17:45:39.279" starttime="20170925 17:45:39.278"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:45:39.279" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:45:39.279" starttime="20170925 17:45:39.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:39.287" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:39.287" starttime="20170925 17:45:39.286"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.287" starttime="20170925 17:45:39.286"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.287" starttime="20170925 17:45:39.280"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.287" starttime="20170925 17:45:38.879"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.287" starttime="20170925 17:45:38.879"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:39.290" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:39.290" starttime="20170925 17:45:39.290"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.291" starttime="20170925 17:45:39.289"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:39.292" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:39.292" starttime="20170925 17:45:39.291"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.292" starttime="20170925 17:45:39.291"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:39.293" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:39.293" starttime="20170925 17:45:39.293"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.293" starttime="20170925 17:45:39.292"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:39.294" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:39.295" starttime="20170925 17:45:39.294"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.295" starttime="20170925 17:45:39.294"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.295" starttime="20170925 17:45:39.289"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.295" starttime="20170925 17:45:39.288"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:45:39.296" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:45:39.296" starttime="20170925 17:45:39.295"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:45:39.341" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:39.341" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:39.342" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170925 17:45:39.666" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:45:39.666" starttime="20170925 17:45:39.316"></status>
</kw>
<msg timestamp="20170925 17:45:39.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:45:39.666" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20170925 17:45:39.666" starttime="20170925 17:45:39.296"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:45:39.667" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20170925 17:45:39.667" starttime="20170925 17:45:39.667"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:45:39.668" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:45:39.668" starttime="20170925 17:45:39.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:39.676" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:39.676" starttime="20170925 17:45:39.675"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.676" starttime="20170925 17:45:39.674"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.676" starttime="20170925 17:45:39.668"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.676" starttime="20170925 17:45:39.288"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.676" starttime="20170925 17:45:39.287"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:39.680" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:39.680" starttime="20170925 17:45:39.679"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.680" starttime="20170925 17:45:39.679"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:39.681" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:39.681" starttime="20170925 17:45:39.681"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.681" starttime="20170925 17:45:39.680"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:39.682" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:39.682" starttime="20170925 17:45:39.682"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.683" starttime="20170925 17:45:39.681"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:39.684" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:39.684" starttime="20170925 17:45:39.683"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.684" starttime="20170925 17:45:39.683"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.684" starttime="20170925 17:45:39.678"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.684" starttime="20170925 17:45:39.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:45:39.685" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:45:39.685" starttime="20170925 17:45:39.684"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:45:39.731" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:39.731" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:45:39.732" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170925 17:45:39.778" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:45:39.779" starttime="20170925 17:45:39.706"></status>
</kw>
<msg timestamp="20170925 17:45:39.779" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:45:39.779" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 15:42:31 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170925 17:45:39.779" starttime="20170925 17:45:39.685"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:45:39.779" level="INFO">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 15:42:31 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170925 17:45:39.779" starttime="20170925 17:45:39.779"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:45:39.780" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:45:39.780" starttime="20170925 17:45:39.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:45:39.788" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:45:39.788" starttime="20170925 17:45:39.787"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.788" starttime="20170925 17:45:39.786"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.788" starttime="20170925 17:45:39.780"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.788" starttime="20170925 17:45:39.676"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.788" starttime="20170925 17:45:39.676"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.788" starttime="20170925 17:45:38.879"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.788" starttime="20170925 17:45:38.877"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.788" starttime="20170925 17:45:38.877"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.788" starttime="20170925 17:45:32.890"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.789" starttime="20170925 17:45:32.889"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.789" starttime="20170925 17:45:32.873"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.789" starttime="20170925 17:45:32.871"></status>
</kw>
<status status="PASS" endtime="20170925 17:45:39.789" starttime="20170925 17:45:32.871"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:45:39.791" starttime="20170925 17:45:39.791"></status>
</kw>
<msg timestamp="20170925 17:45:39.791" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:45:39.791" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:45:39.791" starttime="20170925 17:45:39.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:45:39.792" starttime="20170925 17:45:39.791"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170925 17:45:39.809" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170925 17:45:39.809" starttime="20170925 17:45:39.808"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170925 17:45:39.810" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170925 17:45:39.810" starttime="20170925 17:45:39.810"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:45:39.811" level="INFO">${logpath} = /home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170925 17:45:39.811" starttime="20170925 17:45:39.811"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:45:39.814" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:45:39.815" starttime="20170925 17:45:39.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:45:39.815" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:45:39.815" starttime="20170925 17:45:39.815"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:45:39.816" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:45:39.816" starttime="20170925 17:45:39.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:45:39.817" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:45:39.817" starttime="20170925 17:45:39.816"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:45:49.833" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170925 17:45:49.833" starttime="20170925 17:45:39.818"></status>
</kw>
<msg timestamp="20170925 17:45:49.833" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170925 17:45:49.833" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170925 17:45:49.833" starttime="20170925 17:45:39.817"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:45:49.834" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170925 17:45:49.834" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170925 17:45:49.834" starttime="20170925 17:45:49.834"></status>
</kw>
<status status="FAIL" endtime="20170925 17:45:49.835" starttime="20170925 17:45:39.813"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:46:09.837" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:46:09.838" starttime="20170925 17:46:09.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:46:09.839" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:46:09.839" starttime="20170925 17:46:09.839"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:46:09.840" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:46:09.840" starttime="20170925 17:46:09.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:46:09.841" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:46:09.841" starttime="20170925 17:46:09.840"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:46:19.856" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170925 17:46:19.856" starttime="20170925 17:46:09.841"></status>
</kw>
<msg timestamp="20170925 17:46:19.856" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170925 17:46:19.856" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170925 17:46:19.856" starttime="20170925 17:46:09.841"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:46:19.857" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170925 17:46:19.857" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170925 17:46:19.857" starttime="20170925 17:46:19.857"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:19.858" starttime="20170925 17:46:09.835"></status>
</kw>
<msg timestamp="20170925 17:46:19.858" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170925 17:46:19.858" starttime="20170925 17:45:39.813"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:19.858" starttime="20170925 17:45:39.812"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:19.858" starttime="20170925 17:45:39.812"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:19.858" starttime="20170925 17:45:39.811"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:19.858" starttime="20170925 17:45:39.811"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:19.858" starttime="20170925 17:45:39.810"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:19.858" starttime="20170925 17:45:39.809"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:19.859" starttime="20170925 17:45:39.809"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:19.859" starttime="20170925 17:45:39.808"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:19.859" starttime="20170925 17:45:39.792"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:19.859" starttime="20170925 17:45:39.789"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:19.859" starttime="20170925 17:45:39.789"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:19.861" starttime="20170925 17:46:19.861"></status>
</kw>
<msg timestamp="20170925 17:46:19.861" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:19.861" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:46:19.861" starttime="20170925 17:46:19.860"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:19.862" starttime="20170925 17:46:19.862"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:19.882" starttime="20170925 17:46:19.879"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170925 17:46:19.885" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170925 17:46:19.885" starttime="20170925 17:46:19.883"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:19.885" starttime="20170925 17:46:19.879"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:19.885" starttime="20170925 17:46:19.862"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:19.885" starttime="20170925 17:46:19.859"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:19.885" starttime="20170925 17:46:19.859"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:19.887" starttime="20170925 17:46:19.887"></status>
</kw>
<msg timestamp="20170925 17:46:19.887" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:19.887" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:46:19.887" starttime="20170925 17:46:19.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:19.888" starttime="20170925 17:46:19.887"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170925 17:46:19.926" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:19.926" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:19.927" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170925 17:46:19.999" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170925 17:46:20.011" level="FAIL">#(UTC) 2017/09/25 17:46:20.009832 -   47.165353 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170925 17:46:20.011" starttime="20170925 17:46:19.905"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:20.011" starttime="20170925 17:46:19.904"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:20.011" starttime="20170925 17:46:19.888"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:20.011" starttime="20170925 17:46:19.885"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:20.011" starttime="20170925 17:46:19.885"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:20.013" starttime="20170925 17:46:20.013"></status>
</kw>
<msg timestamp="20170925 17:46:20.013" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:20.013" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:46:20.014" starttime="20170925 17:46:20.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:20.014" starttime="20170925 17:46:20.014"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170925 17:46:20.031" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170925 17:46:20.031" starttime="20170925 17:46:20.031"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170925 17:46:20.033" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170925 17:46:20.033" starttime="20170925 17:46:20.033"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:46:20.034" level="INFO">${logpath} = /home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170925 17:46:20.034" starttime="20170925 17:46:20.033"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:20.035" starttime="20170925 17:46:20.035"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:20.036" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:20.036" starttime="20170925 17:46:20.036"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:20.082" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:20.082" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:20.083" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170925 17:46:20.190" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:46:20.190" starttime="20170925 17:46:20.057"></status>
</kw>
<msg timestamp="20170925 17:46:20.190" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:20.190" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170925 17:46:20.190" starttime="20170925 17:46:20.036"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:20.191" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170925 17:46:20.191" starttime="20170925 17:46:20.190"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:20.191" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:46:20.191" starttime="20170925 17:46:20.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:20.199" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:20.199" starttime="20170925 17:46:20.198"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:20.199" starttime="20170925 17:46:20.198"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:20.199" starttime="20170925 17:46:20.192"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:20.200" starttime="20170925 17:46:20.034"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:20.200" starttime="20170925 17:46:20.033"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:46:20.201" level="INFO">${logpath} = /home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170925 17:46:20.201" starttime="20170925 17:46:20.200"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:20.202" starttime="20170925 17:46:20.202"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:20.203" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:20.203" starttime="20170925 17:46:20.202"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:20.249" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:20.249" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:20.250" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170925 17:46:21.781" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:46:21.781" starttime="20170925 17:46:20.223"></status>
</kw>
<msg timestamp="20170925 17:46:21.781" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:21.782" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 25 17:46 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 25 17:46 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170925 17:46:21.782" starttime="20170925 17:46:20.203"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:21.783" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 25 17:46 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 25 17:46 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170925 17:46:21.784" starttime="20170925 17:46:21.783"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:21.784" level="INFO">${stderr} = ls: /proc/1262/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170925 17:46:21.784" starttime="20170925 17:46:21.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:21.793" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:21.793" starttime="20170925 17:46:21.792"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:21.793" starttime="20170925 17:46:21.791"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:21.793" starttime="20170925 17:46:21.784"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:21.793" starttime="20170925 17:46:20.201"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:21.793" starttime="20170925 17:46:20.200"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:46:21.794" level="INFO">${logpath} = /home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170925 17:46:21.794" starttime="20170925 17:46:21.793"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:21.795" starttime="20170925 17:46:21.795"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:21.796" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:21.796" starttime="20170925 17:46:21.795"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:21.842" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:21.843" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:21.843" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170925 17:46:23.431" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:46:23.432" starttime="20170925 17:46:21.817"></status>
</kw>
<msg timestamp="20170925 17:46:23.432" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:23.433" level="INFO">${ret_values} = (u'-- Logs begin at Mon 2017-09-25 17:44:57 UTC, end at Mon 2017-09-25 17:46:33 UTC. --\nSep 25 17:44:57 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 25 17:44:57 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170925 17:46:23.433" starttime="20170925 17:46:21.796"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:23.434" level="INFO">${stdout} = -- Logs begin at Mon 2017-09-25 17:44:57 UTC, end at Mon 2017-09-25 17:46:33 UTC. --
Sep 25 17:44:57 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 25 17:44:57 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170925 17:46:23.434" starttime="20170925 17:46:23.433"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:23.435" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:46:23.435" starttime="20170925 17:46:23.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:23.443" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:23.443" starttime="20170925 17:46:23.442"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:23.443" starttime="20170925 17:46:23.441"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:23.443" starttime="20170925 17:46:23.435"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:23.443" starttime="20170925 17:46:21.794"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:23.444" starttime="20170925 17:46:21.793"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:46:23.444" level="INFO">${logpath} = /home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170925 17:46:23.444" starttime="20170925 17:46:23.444"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:23.446" starttime="20170925 17:46:23.445"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:23.447" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:23.447" starttime="20170925 17:46:23.446"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:23.493" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:23.493" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:23.494" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170925 17:46:27.096" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:46:27.098" starttime="20170925 17:46:23.467"></status>
</kw>
<msg timestamp="20170925 17:46:27.099" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:27.110" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=24540d086a0f45d0a1cc2abc2984c5d0;i=1;b=60c20148d6bf4a17929385a14f319d3a;m=148c15f;t=55a071dfbcde5;x=fc2d912254eed517",\n\t"__REALTIME_TIMESTAMP" : "1506361497865701",\n\t"__MON...</msg>
<status status="PASS" endtime="20170925 17:46:27.110" starttime="20170925 17:46:23.447"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:27.114" level="INFO">${stdout} = {
	"__CURSOR" : "s=24540d086a0f45d0a1cc2abc2984c5d0;i=1;b=60c20148d6bf4a17929385a14f319d3a;m=148c15f;t=55a071dfbcde5;x=fc2d912254eed517",
	"__REALTIME_TIMESTAMP" : "1506361497865701",
	"__MONOTONIC_TI...</msg>
<status status="PASS" endtime="20170925 17:46:27.114" starttime="20170925 17:46:27.111"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:27.114" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:46:27.114" starttime="20170925 17:46:27.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:27.127" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:27.128" starttime="20170925 17:46:27.125"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:27.128" starttime="20170925 17:46:27.121"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:27.128" starttime="20170925 17:46:27.115"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:27.128" starttime="20170925 17:46:23.445"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:27.128" starttime="20170925 17:46:23.444"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:46:27.129" level="INFO">${logpath} = /home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170925 17:46:27.129" starttime="20170925 17:46:27.128"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:27.130" starttime="20170925 17:46:27.130"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:27.131" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:27.131" starttime="20170925 17:46:27.131"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:27.177" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:27.177" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:27.178" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170925 17:46:27.319" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:46:27.319" starttime="20170925 17:46:27.152"></status>
</kw>
<msg timestamp="20170925 17:46:27.319" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:27.319" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          290708 kB\nMemAvailable:     330400 kB\nBuffers:           11252 kB\nCached:            41036 kB\nSwapCached:            0 kB\nActive:            8757...</msg>
<status status="PASS" endtime="20170925 17:46:27.319" starttime="20170925 17:46:27.132"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:27.320" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          290708 kB
MemAvailable:     330400 kB
Buffers:           11252 kB
Cached:            41036 kB
SwapCached:            0 kB
Active:            87576 kB
Inac...</msg>
<status status="PASS" endtime="20170925 17:46:27.320" starttime="20170925 17:46:27.320"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:27.320" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:46:27.321" starttime="20170925 17:46:27.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:27.328" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:27.328" starttime="20170925 17:46:27.328"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:27.328" starttime="20170925 17:46:27.327"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:27.329" starttime="20170925 17:46:27.321"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:27.329" starttime="20170925 17:46:27.129"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:27.329" starttime="20170925 17:46:27.128"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:46:27.330" level="INFO">${logpath} = /home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170925 17:46:27.330" starttime="20170925 17:46:27.329"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:27.331" starttime="20170925 17:46:27.331"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:27.332" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:27.332" starttime="20170925 17:46:27.331"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:27.378" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:27.378" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:27.379" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170925 17:46:27.931" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:46:27.931" starttime="20170925 17:46:27.352"></status>
</kw>
<msg timestamp="20170925 17:46:27.931" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:27.931" level="INFO">${ret_values} = (u'Mem: 141876K used, 290368K free, 8868K shrd, 11344K buff, 41300K cached\nCPU:  66% usr  33% sys   0% nic   0% idle   0% io   0% irq   0% sirq\nLoad average: 6.62 2.45 0.89 6/151 1267\n  PID  PPID U...</msg>
<status status="PASS" endtime="20170925 17:46:27.932" starttime="20170925 17:46:27.332"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:27.932" level="INFO">${stdout} = Mem: 141876K used, 290368K free, 8868K shrd, 11344K buff, 41300K cached
CPU:  66% usr  33% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 6.62 2.45 0.89 6/151 1267
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20170925 17:46:27.932" starttime="20170925 17:46:27.932"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:27.933" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:46:27.933" starttime="20170925 17:46:27.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:27.941" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:27.941" starttime="20170925 17:46:27.940"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:27.941" starttime="20170925 17:46:27.939"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:27.941" starttime="20170925 17:46:27.933"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:27.941" starttime="20170925 17:46:27.330"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:27.941" starttime="20170925 17:46:27.329"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:46:27.942" level="INFO">${logpath} = /home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170925 17:46:27.942" starttime="20170925 17:46:27.942"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:27.943" starttime="20170925 17:46:27.943"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:27.944" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:27.944" starttime="20170925 17:46:27.944"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:27.990" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:27.990" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:27.990" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170925 17:46:28.076" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:46:28.077" starttime="20170925 17:46:27.965"></status>
</kw>
<msg timestamp="20170925 17:46:28.077" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:28.077" level="INFO">${ret_values} = (u'[    0.240000] TCP: Hash tables configured (established 4096 bind 4096)\n[    0.240000] UDP hash table entries: 256 (order: 0, 4096 bytes)\n[    0.240000] UDP-Lite hash table entries: 256 (order: 0...</msg>
<status status="PASS" endtime="20170925 17:46:28.077" starttime="20170925 17:46:27.944"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:28.078" level="INFO">${stdout} = [    0.240000] TCP: Hash tables configured (established 4096 bind 4096)
[    0.240000] UDP hash table entries: 256 (order: 0, 4096 bytes)
[    0.240000] UDP-Lite hash table entries: 256 (order: 0, 409...</msg>
<status status="PASS" endtime="20170925 17:46:28.078" starttime="20170925 17:46:28.077"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:28.079" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:46:28.079" starttime="20170925 17:46:28.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:28.087" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:28.087" starttime="20170925 17:46:28.086"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:28.087" starttime="20170925 17:46:28.085"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:28.087" starttime="20170925 17:46:28.079"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:28.087" starttime="20170925 17:46:27.942"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:28.087" starttime="20170925 17:46:27.941"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:28.087" starttime="20170925 17:46:20.033"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:28.087" starttime="20170925 17:46:20.032"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:28.087" starttime="20170925 17:46:20.031"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:28.087" starttime="20170925 17:46:20.031"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:28.087" starttime="20170925 17:46:20.030"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:28.087" starttime="20170925 17:46:20.014"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:28.088" starttime="20170925 17:46:20.012"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:28.088" starttime="20170925 17:46:20.011"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:28.090" starttime="20170925 17:46:28.089"></status>
</kw>
<msg timestamp="20170925 17:46:28.090" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:28.090" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:46:28.090" starttime="20170925 17:46:28.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:28.090" starttime="20170925 17:46:28.090"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:46:28.110" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:46:28.111" starttime="20170925 17:46:28.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:46:28.111" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:46:28.111" starttime="20170925 17:46:28.111"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:46:28.112" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:46:28.112" starttime="20170925 17:46:28.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:46:28.112" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:46:28.113" starttime="20170925 17:46:28.112"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:46:29.157" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:46:29.157" starttime="20170925 17:46:28.113"></status>
</kw>
<msg timestamp="20170925 17:46:29.157" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:29.158" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:29.158" starttime="20170925 17:46:28.113"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:46:29.158" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:29.158" starttime="20170925 17:46:29.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:46:29.159" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:29.159" starttime="20170925 17:46:29.159"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:29.159" starttime="20170925 17:46:28.109"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:29.159" starttime="20170925 17:46:28.108"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:29.160" starttime="20170925 17:46:28.108"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:46:29.160" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170925 17:46:29.160" starttime="20170925 17:46:29.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:29.161" starttime="20170925 17:46:29.161"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:46:33.887" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170925 17:46:33.888" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:33.888" starttime="20170925 17:46:29.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:33.889" starttime="20170925 17:46:33.888"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:46:33.889" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:46:33.889" starttime="20170925 17:46:33.889"></status>
</kw>
<msg timestamp="20170925 17:46:33.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:33.889" starttime="20170925 17:46:28.107"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:46:33.891" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:33.891" starttime="20170925 17:46:33.890"></status>
</kw>
<msg timestamp="20170925 17:46:33.891" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170925 17:46:33.891" starttime="20170925 17:46:33.890"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:33.891" starttime="20170925 17:46:33.891"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:46:33.892" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1220"
      ], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Led.Mapper.Error.ObjectNotFoundError", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1506361593636, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:46:33.892" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:46:33.892" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [u'_PID=1220'], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level....</msg>
<status status="PASS" endtime="20170925 17:46:33.892" starttime="20170925 17:46:33.892"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170925 17:46:33.893" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170925 17:46:33.893" starttime="20170925 17:46:33.892"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:46:33.893" level="INFO">${logpath} = /home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.esel</msg>
<status status="PASS" endtime="20170925 17:46:33.893" starttime="20170925 17:46:33.893"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170925 17:46:33.894" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.esel"&gt;/home/fspcibld/logs/20170925174525294742_BmcCodeUpdate/20170925174525294742_RESTBMCCodeUpdate/9.3.86.161.170925.174223.esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:33.894" starttime="20170925 17:46:33.894"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:33.895" starttime="20170925 17:46:33.895"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:46:33.899" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:46:33.900" starttime="20170925 17:46:33.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:46:33.901" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:46:33.901" starttime="20170925 17:46:33.900"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:46:33.902" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:46:33.902" starttime="20170925 17:46:33.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:46:33.902" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:46:33.902" starttime="20170925 17:46:33.902"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:46:35.898" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:46:35.898" starttime="20170925 17:46:33.903"></status>
</kw>
<msg timestamp="20170925 17:46:35.898" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:35.898" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:35.898" starttime="20170925 17:46:33.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:46:35.899" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:35.899" starttime="20170925 17:46:35.899"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:46:35.900" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:35.900" starttime="20170925 17:46:35.900"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:35.900" starttime="20170925 17:46:33.898"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:35.900" starttime="20170925 17:46:33.898"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:35.901" starttime="20170925 17:46:33.897"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:46:35.901" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170925 17:46:35.902" starttime="20170925 17:46:35.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:35.902" starttime="20170925 17:46:35.902"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:46:37.876" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170925 17:46:37.877" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:37.877" starttime="20170925 17:46:35.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:37.878" starttime="20170925 17:46:37.877"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:46:37.878" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:46:37.878" starttime="20170925 17:46:37.878"></status>
</kw>
<msg timestamp="20170925 17:46:37.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:37.878" starttime="20170925 17:46:33.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:46:37.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:37.879" starttime="20170925 17:46:37.879"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:46:37.880" level="INFO">To JSON using : content={
  "data": [
    "_PID=1220"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:46:37.880" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:46:37.880" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'_PID=1220']}</msg>
<status status="PASS" endtime="20170925 17:46:37.880" starttime="20170925 17:46:37.880"></status>
</kw>
<msg timestamp="20170925 17:46:37.881" level="INFO">${esel_data} = [u'_PID=1220']</msg>
<status status="PASS" endtime="20170925 17:46:37.881" starttime="20170925 17:46:33.896"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20170925 17:46:37.882" level="FAIL">[ _PID=1220 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" endtime="20170925 17:46:37.882" starttime="20170925 17:46:37.881"></status>
</kw>
<msg timestamp="20170925 17:46:37.882" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170925 17:46:37.882" starttime="20170925 17:46:37.881"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20170925 17:46:37.883" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170925 17:46:37.883" starttime="20170925 17:46:37.883"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.883" starttime="20170925 17:46:33.895"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.883" starttime="20170925 17:46:33.894"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170925 17:46:37.889" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170925 17:46:37.892" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170925 17:46:37.892" starttime="20170925 17:46:37.883"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170925 17:46:37.898" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170925 17:46:37.898" starttime="20170925 17:46:37.897"></status>
</kw>
<msg timestamp="20170925 17:46:37.898" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170925 17:46:37.898" starttime="20170925 17:46:37.896"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170925 17:46:37.899" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170925 17:46:37.899" starttime="20170925 17:46:37.898"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.899" starttime="20170925 17:46:28.107"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.899" starttime="20170925 17:46:28.091"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.899" starttime="20170925 17:46:28.088"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.899" starttime="20170925 17:46:28.088"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:37.902" starttime="20170925 17:46:37.901"></status>
</kw>
<msg timestamp="20170925 17:46:37.902" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:37.902" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:46:37.902" starttime="20170925 17:46:37.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:37.903" starttime="20170925 17:46:37.902"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170925 17:46:37.923" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170925 17:46:37.923" starttime="20170925 17:46:37.921"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.923" starttime="20170925 17:46:37.920"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.923" starttime="20170925 17:46:37.903"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.923" starttime="20170925 17:46:37.900"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.923" starttime="20170925 17:46:37.899"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.923" starttime="20170925 17:45:32.870"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.923" starttime="20170925 17:45:32.868"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.923" starttime="20170925 17:45:32.868"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.923" starttime="20170925 17:45:32.867"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170925 17:46:37.933" starttime="20170925 17:46:37.931"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.933" starttime="20170925 17:46:37.924"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.933" starttime="20170925 17:45:32.867"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:37.933" starttime="20170925 17:45:22.240"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:46:38.012" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:46:38.017" starttime="20170925 17:46:38.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:46:38.018" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:46:38.018" starttime="20170925 17:46:38.017"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:46:38.018" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:46:38.018" starttime="20170925 17:46:38.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:46:38.019" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:46:38.019" starttime="20170925 17:46:38.019"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:46:38.405" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:46:38.405" starttime="20170925 17:46:38.021"></status>
</kw>
<msg timestamp="20170925 17:46:38.405" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:38.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:38.405" starttime="20170925 17:46:38.020"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:46:38.406" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:38.406" starttime="20170925 17:46:38.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:46:38.407" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:38.407" starttime="20170925 17:46:38.406"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:38.407" starttime="20170925 17:46:38.010"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:38.407" starttime="20170925 17:46:38.008"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:38.407" starttime="20170925 17:46:38.005"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:46:38.408" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170925 17:46:38.408" starttime="20170925 17:46:38.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:38.408" starttime="20170925 17:46:38.408"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:46:39.613" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170925 17:46:39.613" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:39.613" starttime="20170925 17:46:38.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:39.614" starttime="20170925 17:46:39.614"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:46:39.614" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:46:39.615" starttime="20170925 17:46:39.614"></status>
</kw>
<msg timestamp="20170925 17:46:39.615" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:39.615" starttime="20170925 17:46:38.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:46:39.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170925 17:46:39.616" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170925 17:46:39.616" starttime="20170925 17:46:39.615"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:39.616" starttime="20170925 17:46:38.001"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:39.616" starttime="20170925 17:46:37.991"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:39.705" starttime="20170925 17:45:22.230"></status>
</kw>
<msg timestamp="20170925 17:46:39.712" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170925 17:46:39.719" starttime="20170925 17:46:39.719"></status>
</kw>
<msg timestamp="20170925 17:46:39.733" level="FAIL">#(UTC) 2017/09/25 17:46:39.732353 -    1.799383 - **ERROR** Boot failures exceed the boot failure threshold:
new_fail:                                         1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170925 17:46:39.733" starttime="20170925 17:42:19.330"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170925 17:46:39.738" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170925 17:46:39.740" level="INFO">${boot_stack} = </msg>
<msg timestamp="20170925 17:46:39.741" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20170925 17:46:39.741" level="INFO">${quiet} = 1</msg>
<status status="PASS" endtime="20170925 17:46:39.741" starttime="20170925 17:46:39.734"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:39.741" starttime="20170925 17:42:19.328"></status>
</kw>
<msg timestamp="20170925 17:46:39.742" level="FAIL">#(UTC) 2017/09/25 17:46:39.732353 -    1.799383 - **ERROR** Boot failures exceed the boot failure threshold:
new_fail:                                         1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170925 17:46:39.742" starttime="20170925 17:42:19.324"></status>
</kw>
<status status="FAIL" endtime="20170925 17:46:39.742" starttime="20170925 17:42:19.323"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170925 17:46:39.758" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170925 17:46:39.758" starttime="20170925 17:46:39.758"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170925 17:46:39.763" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170925 17:46:42.767" level="INFO">${RC} = 0</msg>
<msg timestamp="20170925 17:46:42.767" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.784 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.582 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170925 17:46:42.767" starttime="20170925 17:46:39.759"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.771" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.784 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.582 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.642 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.601 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.582/0.652/0.784/0.081 ms</msg>
<status status="PASS" endtime="20170925 17:46:42.771" starttime="20170925 17:46:42.770"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:42.772" starttime="20170925 17:46:42.771"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.772" starttime="20170925 17:46:39.757"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170925 17:46:42.786" level="INFO">${cur_time} = 2017-09-25 17:46:42:785703</msg>
<status status="PASS" endtime="20170925 17:46:42.786" starttime="20170925 17:46:42.785"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170925 17:46:42.787" level="INFO">${cur_time} = 20170925174642785703</msg>
<status status="PASS" endtime="20170925 17:46:42.787" starttime="20170925 17:46:42.786"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.787" starttime="20170925 17:46:42.784"></status>
</kw>
<msg timestamp="20170925 17:46:42.787" level="INFO">${FFDC_TIME} = 20170925174642785703</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170925 17:46:42.790" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170925 17:46:42.790" starttime="20170925 17:46:42.789"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170925 17:46:42.790" level="INFO">${suite_name} = 20170925174642785703_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170925 17:46:42.790" starttime="20170925 17:46:42.790"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170925 17:46:42.791" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170925 17:46:42.791" starttime="20170925 17:46:42.791"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170925 17:46:42.791" level="INFO">${test_name} = 20170925174642785703_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170925 17:46:42.791" starttime="20170925 17:46:42.791"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.792" starttime="20170925 17:46:42.788"></status>
</kw>
<msg timestamp="20170925 17:46:42.792" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170925 17:46:42.792" level="INFO">${FFDC_PREFIX} = 20170925174642785703_</msg>
<msg timestamp="20170925 17:46:42.808" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170925 17:46:42.810" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.810" starttime="20170925 17:46:42.809"></status>
</kw>
<msg timestamp="20170925 17:46:42.810" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.820" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.820" starttime="20170925 17:46:42.820"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.820" starttime="20170925 17:46:42.819"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.822" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.822" starttime="20170925 17:46:42.821"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.822" starttime="20170925 17:46:42.821"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.823" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.823" starttime="20170925 17:46:42.823"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.823" starttime="20170925 17:46:42.822"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.824" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.824" starttime="20170925 17:46:42.824"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.825" starttime="20170925 17:46:42.823"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.826" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.826" starttime="20170925 17:46:42.825"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.826" starttime="20170925 17:46:42.825"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.827" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.827" starttime="20170925 17:46:42.827"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.827" starttime="20170925 17:46:42.826"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.829" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.829" starttime="20170925 17:46:42.828"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.829" starttime="20170925 17:46:42.828"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.830" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.830" starttime="20170925 17:46:42.830"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.830" starttime="20170925 17:46:42.829"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.832" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.832" starttime="20170925 17:46:42.831"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.832" starttime="20170925 17:46:42.830"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.834" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.834" starttime="20170925 17:46:42.833"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.834" starttime="20170925 17:46:42.833"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.835" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.835" starttime="20170925 17:46:42.834"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.835" starttime="20170925 17:46:42.834"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.836" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.836" starttime="20170925 17:46:42.836"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.836" starttime="20170925 17:46:42.835"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:42.838" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:42.838" starttime="20170925 17:46:42.837"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:42.838" starttime="20170925 17:46:42.837"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170925 17:46:42.854" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:42.855" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:42.855" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170925 17:46:43.084" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170925 17:46:43.092" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170925 17:46:43.092" level="INFO">${stderr} = </msg>
<msg timestamp="20170925 17:46:43.092" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170925 17:46:43.092" starttime="20170925 17:46:42.838"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.093" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170925 17:46:43.093" starttime="20170925 17:46:43.093"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.094" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170925 17:46:43.094" starttime="20170925 17:46:43.093"></status>
</kw>
<msg timestamp="20170925 17:46:43.094" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170925 17:46:43.094" starttime="20170925 17:46:42.838"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.095" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.096" starttime="20170925 17:46:43.095"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.096" starttime="20170925 17:46:43.094"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.096" starttime="20170925 17:46:42.832"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.097" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.097" starttime="20170925 17:46:43.097"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.097" starttime="20170925 17:46:43.096"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170925 17:46:43.098" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170925 17:46:43.098" starttime="20170925 17:46:43.098"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.100" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.100" starttime="20170925 17:46:43.099"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.100" starttime="20170925 17:46:43.098"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.102" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.102" starttime="20170925 17:46:43.101"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.102" starttime="20170925 17:46:43.101"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.102" starttime="20170925 17:46:43.098"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.104" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.104" starttime="20170925 17:46:43.103"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.104" starttime="20170925 17:46:43.103"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.105" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.105" starttime="20170925 17:46:43.105"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.105" starttime="20170925 17:46:43.104"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.105" starttime="20170925 17:46:43.103"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.107" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.107" starttime="20170925 17:46:43.106"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.107" starttime="20170925 17:46:43.106"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.108" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.108" starttime="20170925 17:46:43.108"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.108" starttime="20170925 17:46:43.107"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.108" starttime="20170925 17:46:43.105"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.108" starttime="20170925 17:46:43.098"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.109" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.109" starttime="20170925 17:46:43.109"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.110" starttime="20170925 17:46:43.108"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.110" starttime="20170925 17:46:42.819"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170925 17:46:43.115" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170925 17:46:43.115" starttime="20170925 17:46:43.115"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170925 17:46:43.116" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170925 17:46:43.116" starttime="20170925 17:46:43.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:43.118" starttime="20170925 17:46:43.117"></status>
</kw>
<msg timestamp="20170925 17:46:43.118" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170925 17:46:43.118" starttime="20170925 17:46:43.117"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:43.120" starttime="20170925 17:46:43.120"></status>
</kw>
<msg timestamp="20170925 17:46:43.120" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:43.120" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:46:43.120" starttime="20170925 17:46:43.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:43.121" starttime="20170925 17:46:43.120"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170925 17:46:43.138" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170925 17:46:43.138" starttime="20170925 17:46:43.138"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170925 17:46:43.140" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170925 17:46:43.140" starttime="20170925 17:46:43.139"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.140" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170925 17:46:43.140" starttime="20170925 17:46:43.140"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.144" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.144" starttime="20170925 17:46:43.144"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.144" starttime="20170925 17:46:43.143"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.146" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.146" starttime="20170925 17:46:43.145"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.146" starttime="20170925 17:46:43.144"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.147" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.147" starttime="20170925 17:46:43.147"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.147" starttime="20170925 17:46:43.146"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:43.148" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:43.148" starttime="20170925 17:46:43.148"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.148" starttime="20170925 17:46:43.147"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.149" starttime="20170925 17:46:43.142"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:43.149" starttime="20170925 17:46:43.142"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:43.149" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:43.150" starttime="20170925 17:46:43.149"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:43.190" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:43.190" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:43.191" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170925 17:46:46.970" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20170925 17:46:46.970" starttime="20170925 17:46:43.168"></status>
</kw>
<msg timestamp="20170925 17:46:46.971" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:46.971" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.NotReady\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off', u'Traceback (most recent call last):\n  File "/usr/sbin/o...</msg>
<status status="PASS" endtime="20170925 17:46:46.971" starttime="20170925 17:46:43.150"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:46.971" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.NotReady
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170925 17:46:46.972" starttime="20170925 17:46:46.971"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:46.972" level="INFO">${stderr} = Traceback (most recent call last):
  File "/usr/sbin/obmcutil", line 169, in &lt;module&gt;
    obj = bus.get_object(bus_name, obj_path)
  File "/usr/lib/python2.7/site-packages/dbus/bus.py", line 241, in g...</msg>
<status status="PASS" endtime="20170925 17:46:46.972" starttime="20170925 17:46:46.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:46.980" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:46.980" starttime="20170925 17:46:46.980"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.980" starttime="20170925 17:46:46.979"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.981" starttime="20170925 17:46:46.972"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.981" starttime="20170925 17:46:43.141"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.981" starttime="20170925 17:46:43.141"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.981" starttime="20170925 17:46:43.141"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.981" starttime="20170925 17:46:43.139"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.981" starttime="20170925 17:46:43.138"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170925 17:46:46.982" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170925 17:46:46.982" starttime="20170925 17:46:46.982"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170925 17:46:46.983" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170925 17:46:46.983" starttime="20170925 17:46:46.982"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:46.986" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:46.986" starttime="20170925 17:46:46.986"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.986" starttime="20170925 17:46:46.985"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:46.988" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:46.988" starttime="20170925 17:46:46.987"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.988" starttime="20170925 17:46:46.986"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:46.989" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:46.989" starttime="20170925 17:46:46.989"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.989" starttime="20170925 17:46:46.988"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:46.990" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:46.990" starttime="20170925 17:46:46.990"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.991" starttime="20170925 17:46:46.989"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.991" starttime="20170925 17:46:46.985"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:46.991" starttime="20170925 17:46:46.984"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:46.991" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:46.992" starttime="20170925 17:46:46.991"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:47.033" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:47.033" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:47.033" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170925 17:46:47.680" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:46:47.681" starttime="20170925 17:46:47.010"></status>
</kw>
<msg timestamp="20170925 17:46:47.681" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:47.681" level="INFO">${ret_values} = (u'20170925173311', u'', 0)</msg>
<status status="PASS" endtime="20170925 17:46:47.681" starttime="20170925 17:46:46.992"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:47.682" level="INFO">${stdout} = 20170925173311</msg>
<status status="PASS" endtime="20170925 17:46:47.682" starttime="20170925 17:46:47.681"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:47.682" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:46:47.682" starttime="20170925 17:46:47.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:47.690" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:47.690" starttime="20170925 17:46:47.690"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:47.690" starttime="20170925 17:46:47.689"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:47.690" starttime="20170925 17:46:47.683"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:47.690" starttime="20170925 17:46:46.983"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:47.690" starttime="20170925 17:46:46.983"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:47.694" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:47.694" starttime="20170925 17:46:47.693"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:47.694" starttime="20170925 17:46:47.693"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:47.695" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:47.695" starttime="20170925 17:46:47.695"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:47.695" starttime="20170925 17:46:47.694"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:47.696" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:47.696" starttime="20170925 17:46:47.696"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:47.697" starttime="20170925 17:46:47.695"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:47.698" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:47.698" starttime="20170925 17:46:47.697"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:47.698" starttime="20170925 17:46:47.697"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:47.698" starttime="20170925 17:46:47.692"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:47.698" starttime="20170925 17:46:47.692"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:47.699" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:47.699" starttime="20170925 17:46:47.698"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:47.740" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:47.740" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:47.741" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170925 17:46:48.209" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:46:48.210" starttime="20170925 17:46:47.718"></status>
</kw>
<msg timestamp="20170925 17:46:48.210" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:48.210" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-33"\nVERSION_ID="v1.99.10-33-g34f9244"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170925 17:46:48.210" starttime="20170925 17:46:47.700"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:48.211" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-33"
VERSION_ID="v1.99.10-33-g34f9244"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170925 17:46:48.211" starttime="20170925 17:46:48.210"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:48.212" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:46:48.212" starttime="20170925 17:46:48.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.219" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.219" starttime="20170925 17:46:48.219"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.220" starttime="20170925 17:46:48.218"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.220" starttime="20170925 17:46:48.212"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.220" starttime="20170925 17:46:47.691"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.220" starttime="20170925 17:46:47.691"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.220" starttime="20170925 17:46:46.983"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.220" starttime="20170925 17:46:46.981"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.220" starttime="20170925 17:46:46.981"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170925 17:46:48.221" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170925 17:46:48.221" starttime="20170925 17:46:48.221"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.222" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170925 17:46:48.222" starttime="20170925 17:46:48.222"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.225" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.225" starttime="20170925 17:46:48.225"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.225" starttime="20170925 17:46:48.224"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.227" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.227" starttime="20170925 17:46:48.226"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.227" starttime="20170925 17:46:48.226"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.228" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.228" starttime="20170925 17:46:48.228"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.228" starttime="20170925 17:46:48.227"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.229" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.229" starttime="20170925 17:46:48.229"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.230" starttime="20170925 17:46:48.228"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.230" starttime="20170925 17:46:48.224"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.230" starttime="20170925 17:46:48.223"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:48.231" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:48.231" starttime="20170925 17:46:48.230"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:48.270" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:48.271" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:48.271" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170925 17:46:48.555" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:46:48.555" starttime="20170925 17:46:48.248"></status>
</kw>
<msg timestamp="20170925 17:46:48.555" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:48.555" level="INFO">${ret_values} = (u' 17:47:01 up 2 min,  load average: 4.93, 2.39, 0.91', u'', 0)</msg>
<status status="PASS" endtime="20170925 17:46:48.555" starttime="20170925 17:46:48.231"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:48.556" level="INFO">${stdout} =  17:47:01 up 2 min,  load average: 4.93, 2.39, 0.91</msg>
<status status="PASS" endtime="20170925 17:46:48.556" starttime="20170925 17:46:48.556"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:48.556" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:46:48.557" starttime="20170925 17:46:48.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.565" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.565" starttime="20170925 17:46:48.564"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.565" starttime="20170925 17:46:48.564"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.565" starttime="20170925 17:46:48.557"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.565" starttime="20170925 17:46:48.222"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.565" starttime="20170925 17:46:48.222"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.568" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.568" starttime="20170925 17:46:48.568"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.568" starttime="20170925 17:46:48.567"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.570" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.570" starttime="20170925 17:46:48.569"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.570" starttime="20170925 17:46:48.569"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.571" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.571" starttime="20170925 17:46:48.571"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.571" starttime="20170925 17:46:48.570"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.572" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.573" starttime="20170925 17:46:48.572"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.573" starttime="20170925 17:46:48.571"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.573" starttime="20170925 17:46:48.567"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.573" starttime="20170925 17:46:48.566"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:48.574" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:48.574" starttime="20170925 17:46:48.573"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:48.614" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:48.614" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:48.615" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170925 17:46:48.801" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:46:48.802" starttime="20170925 17:46:48.591"></status>
</kw>
<msg timestamp="20170925 17:46:48.802" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:48.802" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20170925 17:46:48.802" starttime="20170925 17:46:48.574"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:48.803" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20170925 17:46:48.803" starttime="20170925 17:46:48.802"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:48.803" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:46:48.803" starttime="20170925 17:46:48.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.811" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.811" starttime="20170925 17:46:48.811"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.811" starttime="20170925 17:46:48.810"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.811" starttime="20170925 17:46:48.804"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.811" starttime="20170925 17:46:48.565"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.811" starttime="20170925 17:46:48.565"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.815" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.815" starttime="20170925 17:46:48.815"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.815" starttime="20170925 17:46:48.814"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.817" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.817" starttime="20170925 17:46:48.816"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.817" starttime="20170925 17:46:48.816"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.818" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.818" starttime="20170925 17:46:48.818"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.818" starttime="20170925 17:46:48.817"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:48.819" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:48.819" starttime="20170925 17:46:48.819"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.820" starttime="20170925 17:46:48.818"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.820" starttime="20170925 17:46:48.814"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:48.820" starttime="20170925 17:46:48.813"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:46:48.821" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:46:48.821" starttime="20170925 17:46:48.820"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:46:48.861" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:48.861" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:46:48.861" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170925 17:46:49.078" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:46:49.078" starttime="20170925 17:46:48.839"></status>
</kw>
<msg timestamp="20170925 17:46:49.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:49.079" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 15:42:31 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170925 17:46:49.079" starttime="20170925 17:46:48.821"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:46:49.080" level="INFO">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 15:42:31 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170925 17:46:49.080" starttime="20170925 17:46:49.079"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:46:49.080" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:46:49.080" starttime="20170925 17:46:49.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:49.088" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:49.088" starttime="20170925 17:46:49.087"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.088" starttime="20170925 17:46:49.087"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.088" starttime="20170925 17:46:49.081"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.088" starttime="20170925 17:46:48.812"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.088" starttime="20170925 17:46:48.812"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.088" starttime="20170925 17:46:48.222"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.089" starttime="20170925 17:46:48.220"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.089" starttime="20170925 17:46:48.220"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.089" starttime="20170925 17:46:43.138"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.089" starttime="20170925 17:46:43.137"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.089" starttime="20170925 17:46:43.121"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.089" starttime="20170925 17:46:43.118"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.089" starttime="20170925 17:46:43.118"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:49.091" starttime="20170925 17:46:49.091"></status>
</kw>
<msg timestamp="20170925 17:46:49.091" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:49.091" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:46:49.091" starttime="20170925 17:46:49.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:49.092" starttime="20170925 17:46:49.092"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170925 17:46:49.106" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170925 17:46:49.106" starttime="20170925 17:46:49.106"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170925 17:46:49.108" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170925 17:46:49.108" starttime="20170925 17:46:49.107"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:46:49.109" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170925 17:46:49.109" starttime="20170925 17:46:49.109"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:46:49.112" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:46:49.112" starttime="20170925 17:46:49.112"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:46:49.113" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:46:49.113" starttime="20170925 17:46:49.113"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:46:49.114" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:46:49.114" starttime="20170925 17:46:49.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:46:49.114" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:46:49.114" starttime="20170925 17:46:49.114"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:46:49.385" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:46:49.385" starttime="20170925 17:46:49.115"></status>
</kw>
<msg timestamp="20170925 17:46:49.385" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:49.386" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:49.386" starttime="20170925 17:46:49.115"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:46:49.386" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:49.386" starttime="20170925 17:46:49.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:46:49.387" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:49.387" starttime="20170925 17:46:49.387"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.387" starttime="20170925 17:46:49.111"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.387" starttime="20170925 17:46:49.111"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:49.388" starttime="20170925 17:46:49.110"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:46:49.388" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170925 17:46:49.388" starttime="20170925 17:46:49.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:49.389" starttime="20170925 17:46:49.389"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:46:53.824" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170925 17:46:53.824" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:53.824" starttime="20170925 17:46:49.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:53.825" starttime="20170925 17:46:53.825"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:46:53.825" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:46:53.826" starttime="20170925 17:46:53.825"></status>
</kw>
<msg timestamp="20170925 17:46:53.826" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:53.826" starttime="20170925 17:46:49.109"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:46:53.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:53.827" starttime="20170925 17:46:53.827"></status>
</kw>
<msg timestamp="20170925 17:46:53.827" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170925 17:46:53.827" starttime="20170925 17:46:53.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:53.828" starttime="20170925 17:46:53.827"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170925 17:46:53.830" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 8000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30040
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 205000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 343
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:46:53.830" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170925 17:46:53.830" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170925 17:46:53.830" starttime="20170925 17:46:53.828"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:46:53.832" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:46:53.832" starttime="20170925 17:46:53.831"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:53.832" starttime="20170925 17:46:53.830"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:53.832" starttime="20170925 17:46:49.108"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:46:53.833" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_OCC_state.txt</msg>
<status status="PASS" endtime="20170925 17:46:53.833" starttime="20170925 17:46:53.832"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:46:53.836" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:46:53.836" starttime="20170925 17:46:53.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:46:53.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:46:53.837" starttime="20170925 17:46:53.836"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:46:53.837" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:46:53.837" starttime="20170925 17:46:53.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:46:53.838" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:46:53.838" starttime="20170925 17:46:53.838"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:46:54.539" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:46:54.540" starttime="20170925 17:46:53.839"></status>
</kw>
<msg timestamp="20170925 17:46:54.540" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:46:54.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:46:54.540" starttime="20170925 17:46:53.838"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:46:54.541" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:54.541" starttime="20170925 17:46:54.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:46:54.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:46:54.542" starttime="20170925 17:46:54.541"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:54.542" starttime="20170925 17:46:53.835"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:54.542" starttime="20170925 17:46:53.834"></status>
</kw>
<status status="PASS" endtime="20170925 17:46:54.542" starttime="20170925 17:46:53.834"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:46:54.543" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20170925 17:46:54.543" starttime="20170925 17:46:54.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:46:54.543" starttime="20170925 17:46:54.543"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:47:02.621" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170925 17:47:02.622" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:02.622" starttime="20170925 17:46:54.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:02.623" starttime="20170925 17:47:02.622"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:47:02.623" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:47:02.623" starttime="20170925 17:47:02.623"></status>
</kw>
<msg timestamp="20170925 17:47:02.624" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:02.624" starttime="20170925 17:46:53.833"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:02.625" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:02.625" starttime="20170925 17:47:02.625"></status>
</kw>
<msg timestamp="20170925 17:47:02.625" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170925 17:47:02.625" starttime="20170925 17:47:02.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:02.626" starttime="20170925 17:47:02.625"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170925 17:47:02.626" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:47:02.626" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170925 17:47:02.627" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20170925 17:47:02.627" starttime="20170925 17:47:02.626"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:02.628" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_OCC_state.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:02.628" starttime="20170925 17:47:02.628"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:02.628" starttime="20170925 17:47:02.627"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:02.628" starttime="20170925 17:46:53.832"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:02.629" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170925 17:47:02.629" starttime="20170925 17:47:02.629"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:47:02.632" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:47:02.633" starttime="20170925 17:47:02.632"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:47:02.633" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:47:02.633" starttime="20170925 17:47:02.633"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:47:02.634" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:47:02.634" starttime="20170925 17:47:02.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:47:02.635" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:47:02.635" starttime="20170925 17:47:02.634"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:47:02.971" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:47:02.971" starttime="20170925 17:47:02.636"></status>
</kw>
<msg timestamp="20170925 17:47:02.971" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:02.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:02.971" starttime="20170925 17:47:02.635"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:47:02.972" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:02.972" starttime="20170925 17:47:02.972"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:02.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:02.973" starttime="20170925 17:47:02.972"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:02.973" starttime="20170925 17:47:02.631"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:02.973" starttime="20170925 17:47:02.631"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:02.973" starttime="20170925 17:47:02.630"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:47:02.974" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170925 17:47:02.974" starttime="20170925 17:47:02.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:02.975" starttime="20170925 17:47:02.974"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:47:03.616" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170925 17:47:03.616" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:03.616" starttime="20170925 17:47:02.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:03.617" starttime="20170925 17:47:03.617"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:47:03.617" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:47:03.618" starttime="20170925 17:47:03.617"></status>
</kw>
<msg timestamp="20170925 17:47:03.618" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:03.618" starttime="20170925 17:47:02.629"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:03.619" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:03.619" starttime="20170925 17:47:03.619"></status>
</kw>
<msg timestamp="20170925 17:47:03.619" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170925 17:47:03.619" starttime="20170925 17:47:03.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:03.620" starttime="20170925 17:47:03.619"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170925 17:47:03.621" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:47:03.621" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170925 17:47:03.621" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170925 17:47:03.621" starttime="20170925 17:47:03.620"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:03.622" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:03.623" starttime="20170925 17:47:03.622"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:03.623" starttime="20170925 17:47:03.621"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:03.623" starttime="20170925 17:47:02.628"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:03.623" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_led.txt</msg>
<status status="PASS" endtime="20170925 17:47:03.624" starttime="20170925 17:47:03.623"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:47:03.626" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:47:03.627" starttime="20170925 17:47:03.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:47:03.627" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:47:03.627" starttime="20170925 17:47:03.627"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:47:03.628" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:47:03.628" starttime="20170925 17:47:03.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:47:03.629" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:47:03.629" starttime="20170925 17:47:03.628"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:47:04.012" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:47:04.012" starttime="20170925 17:47:03.629"></status>
</kw>
<msg timestamp="20170925 17:47:04.012" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:04.012" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:04.012" starttime="20170925 17:47:03.629"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:47:04.013" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:04.013" starttime="20170925 17:47:04.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:04.014" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:04.014" starttime="20170925 17:47:04.013"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:04.014" starttime="20170925 17:47:03.625"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:04.014" starttime="20170925 17:47:03.625"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:04.014" starttime="20170925 17:47:03.624"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:47:04.015" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170925 17:47:04.015" starttime="20170925 17:47:04.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:04.015" starttime="20170925 17:47:04.015"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:47:10.796" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170925 17:47:10.796" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:10.797" starttime="20170925 17:47:04.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:10.797" starttime="20170925 17:47:10.797"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:47:10.798" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:47:10.798" starttime="20170925 17:47:10.798"></status>
</kw>
<msg timestamp="20170925 17:47:10.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:10.798" starttime="20170925 17:47:03.624"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:10.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:10.800" starttime="20170925 17:47:10.799"></status>
</kw>
<msg timestamp="20170925 17:47:10.800" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170925 17:47:10.800" starttime="20170925 17:47:10.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:10.801" starttime="20170925 17:47:10.800"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170925 17:47:10.804" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:47:10.804" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170925 17:47:10.804" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170925 17:47:10.805" starttime="20170925 17:47:10.801"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:10.808" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_led.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:10.808" starttime="20170925 17:47:10.807"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:10.808" starttime="20170925 17:47:10.805"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:10.808" starttime="20170925 17:47:03.623"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:10.809" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170925 17:47:10.809" starttime="20170925 17:47:10.808"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:47:10.812" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:47:10.812" starttime="20170925 17:47:10.812"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:47:10.813" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:47:10.813" starttime="20170925 17:47:10.813"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:47:10.814" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:47:10.814" starttime="20170925 17:47:10.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:47:10.814" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:47:10.814" starttime="20170925 17:47:10.814"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:47:11.271" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:47:11.271" starttime="20170925 17:47:10.815"></status>
</kw>
<msg timestamp="20170925 17:47:11.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:11.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:11.271" starttime="20170925 17:47:10.815"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:47:11.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:11.272" starttime="20170925 17:47:11.271"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:11.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:11.273" starttime="20170925 17:47:11.272"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:11.273" starttime="20170925 17:47:10.811"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:11.273" starttime="20170925 17:47:10.810"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:11.273" starttime="20170925 17:47:10.810"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:47:11.274" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170925 17:47:11.274" starttime="20170925 17:47:11.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:11.274" starttime="20170925 17:47:11.274"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:47:12.362" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170925 17:47:12.362" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:12.362" starttime="20170925 17:47:11.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:12.363" starttime="20170925 17:47:12.363"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:47:12.364" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:47:12.364" starttime="20170925 17:47:12.363"></status>
</kw>
<msg timestamp="20170925 17:47:12.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:12.364" starttime="20170925 17:47:10.809"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:12.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:12.365" starttime="20170925 17:47:12.365"></status>
</kw>
<msg timestamp="20170925 17:47:12.365" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170925 17:47:12.365" starttime="20170925 17:47:12.364"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:12.366" starttime="20170925 17:47:12.366"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170925 17:47:12.367" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/6235b70b": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-31-g33f1cca", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/6235b70b/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/6235b70b/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/eb27353e", 
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c", 
        "/xyz/openbmc_project/software/6235b70b"
      ]
    }, 
    "/xyz/openbmc_project/software/eb27353e": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-33-g34f9244", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/eb27353e/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/eb27353e/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:47:12.367" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170925 17:47:12.367" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/6235b70b": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20170925 17:47:12.367" starttime="20170925 17:47:12.366"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:12.369" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:12.369" starttime="20170925 17:47:12.368"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:12.369" starttime="20170925 17:47:12.368"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:12.369" starttime="20170925 17:47:10.808"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:12.370" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_elog.txt</msg>
<status status="PASS" endtime="20170925 17:47:12.370" starttime="20170925 17:47:12.370"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:47:12.373" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:47:12.373" starttime="20170925 17:47:12.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:47:12.374" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:47:12.374" starttime="20170925 17:47:12.374"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:47:12.375" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:47:12.375" starttime="20170925 17:47:12.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:47:12.375" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:47:12.375" starttime="20170925 17:47:12.375"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:47:12.565" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:47:12.565" starttime="20170925 17:47:12.376"></status>
</kw>
<msg timestamp="20170925 17:47:12.565" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:12.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:12.565" starttime="20170925 17:47:12.376"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:47:12.566" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:12.566" starttime="20170925 17:47:12.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:12.567" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:12.567" starttime="20170925 17:47:12.566"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:12.567" starttime="20170925 17:47:12.372"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:12.567" starttime="20170925 17:47:12.372"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:12.567" starttime="20170925 17:47:12.371"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:47:12.568" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170925 17:47:12.568" starttime="20170925 17:47:12.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:12.568" starttime="20170925 17:47:12.568"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:47:12.692" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170925 17:47:12.693" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:12.693" starttime="20170925 17:47:12.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:12.694" starttime="20170925 17:47:12.693"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:47:12.694" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:47:12.694" starttime="20170925 17:47:12.694"></status>
</kw>
<msg timestamp="20170925 17:47:12.694" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:12.695" starttime="20170925 17:47:12.370"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:12.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:12.696" starttime="20170925 17:47:12.695"></status>
</kw>
<msg timestamp="20170925 17:47:12.696" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170925 17:47:12.696" starttime="20170925 17:47:12.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:12.697" starttime="20170925 17:47:12.696"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170925 17:47:12.697" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1220"
      ], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Led.Mapper.Error.ObjectNotFoundError", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1506361593636, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:47:12.697" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170925 17:47:12.697" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "_PID=1220"
            ],
            "Id": 1,
            "Message": "xyz.openbmc_pr...</msg>
<status status="PASS" endtime="20170925 17:47:12.698" starttime="20170925 17:47:12.697"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:12.699" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_elog.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:12.699" starttime="20170925 17:47:12.698"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:12.699" starttime="20170925 17:47:12.698"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:12.699" starttime="20170925 17:47:12.369"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:12.700" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170925 17:47:12.700" starttime="20170925 17:47:12.700"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:47:12.703" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:47:12.704" starttime="20170925 17:47:12.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:47:12.704" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:47:12.704" starttime="20170925 17:47:12.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:47:12.705" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:47:12.705" starttime="20170925 17:47:12.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:47:12.705" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:47:12.706" starttime="20170925 17:47:12.705"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:47:12.907" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:47:12.908" starttime="20170925 17:47:12.709"></status>
</kw>
<msg timestamp="20170925 17:47:12.908" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:12.908" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:12.908" starttime="20170925 17:47:12.708"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:47:12.908" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:12.909" starttime="20170925 17:47:12.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:12.909" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:12.909" starttime="20170925 17:47:12.909"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:12.910" starttime="20170925 17:47:12.702"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:12.910" starttime="20170925 17:47:12.702"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:12.910" starttime="20170925 17:47:12.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:47:12.911" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170925 17:47:12.911" starttime="20170925 17:47:12.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:12.912" starttime="20170925 17:47:12.911"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:47:15.141" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170925 17:47:15.142" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:15.142" starttime="20170925 17:47:12.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:15.143" starttime="20170925 17:47:15.142"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:47:15.143" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:47:15.143" starttime="20170925 17:47:15.143"></status>
</kw>
<msg timestamp="20170925 17:47:15.143" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:15.143" starttime="20170925 17:47:12.700"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:15.144" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:15.145" starttime="20170925 17:47:15.144"></status>
</kw>
<msg timestamp="20170925 17:47:15.145" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170925 17:47:15.145" starttime="20170925 17:47:15.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:15.145" starttime="20170925 17:47:15.145"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170925 17:47:15.149" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/eb27353e", 
        "/xyz/openbmc_project/software/6235b70b"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:47:15.149" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170925 17:47:15.149" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20170925 17:47:15.149" starttime="20170925 17:47:15.146"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:15.151" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:15.151" starttime="20170925 17:47:15.151"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.151" starttime="20170925 17:47:15.150"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.151" starttime="20170925 17:47:12.699"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.151" starttime="20170925 17:46:49.108"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.152" starttime="20170925 17:46:49.107"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.152" starttime="20170925 17:46:49.106"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.152" starttime="20170925 17:46:49.106"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.152" starttime="20170925 17:46:49.105"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.152" starttime="20170925 17:46:49.092"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.152" starttime="20170925 17:46:49.089"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.152" starttime="20170925 17:46:49.089"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:15.154" starttime="20170925 17:47:15.154"></status>
</kw>
<msg timestamp="20170925 17:47:15.154" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:15.154" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:47:15.154" starttime="20170925 17:47:15.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:15.155" starttime="20170925 17:47:15.154"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:15.171" starttime="20170925 17:47:15.169"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170925 17:47:15.173" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170925 17:47:15.173" starttime="20170925 17:47:15.171"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.173" starttime="20170925 17:47:15.168"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.173" starttime="20170925 17:47:15.155"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.174" starttime="20170925 17:47:15.152"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:15.174" starttime="20170925 17:47:15.152"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:15.176" starttime="20170925 17:47:15.175"></status>
</kw>
<msg timestamp="20170925 17:47:15.176" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:15.176" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:47:15.176" starttime="20170925 17:47:15.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:15.176" starttime="20170925 17:47:15.176"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170925 17:47:15.211" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:15.211" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:15.211" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170925 17:47:15.258" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170925 17:47:15.267" level="INFO">${core_files} = None</msg>
<msg timestamp="20170925 17:47:15.268" level="INFO">${stderr} = None</msg>
<msg timestamp="20170925 17:47:15.268" level="INFO">${rc} = None</msg>
<msg timestamp="20170925 17:47:15.268" level="FAIL">#(UTC) 2017/09/25 17:47:15.266983 -   32.175022 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170925 17:47:15.268" starttime="20170925 17:47:15.190"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170925 17:47:15.269" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170925 17:47:15.269" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170925 17:47:15.269" starttime="20170925 17:47:15.268"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:15.286" starttime="20170925 17:47:15.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:16.022" starttime="20170925 17:47:15.287"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.022" starttime="20170925 17:47:15.286"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.022" starttime="20170925 17:47:15.277"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.022" starttime="20170925 17:47:15.270"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170925 17:47:16.023" starttime="20170925 17:47:16.022"></status>
</kw>
<status status="FAIL" endtime="20170925 17:47:16.023" starttime="20170925 17:47:15.189"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.023" starttime="20170925 17:47:15.177"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.023" starttime="20170925 17:47:15.174"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.023" starttime="20170925 17:47:15.174"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:16.025" starttime="20170925 17:47:16.025"></status>
</kw>
<msg timestamp="20170925 17:47:16.025" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:16.025" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:47:16.025" starttime="20170925 17:47:16.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:16.026" starttime="20170925 17:47:16.026"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170925 17:47:16.040" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170925 17:47:16.040" starttime="20170925 17:47:16.040"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170925 17:47:16.042" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170925 17:47:16.042" starttime="20170925 17:47:16.042"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:16.043" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170925 17:47:16.043" starttime="20170925 17:47:16.042"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:16.044" starttime="20170925 17:47:16.044"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:47:16.045" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:47:16.045" starttime="20170925 17:47:16.045"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:47:16.085" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:16.085" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:16.086" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170925 17:47:16.132" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:47:16.133" starttime="20170925 17:47:16.063"></status>
</kw>
<msg timestamp="20170925 17:47:16.133" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:16.133" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170925 17:47:16.133" starttime="20170925 17:47:16.045"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:47:16.134" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170925 17:47:16.134" starttime="20170925 17:47:16.133"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:47:16.134" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:47:16.134" starttime="20170925 17:47:16.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:16.142" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:16.142" starttime="20170925 17:47:16.141"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.142" starttime="20170925 17:47:16.141"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.142" starttime="20170925 17:47:16.135"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.142" starttime="20170925 17:47:16.043"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.142" starttime="20170925 17:47:16.042"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:16.143" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170925 17:47:16.143" starttime="20170925 17:47:16.143"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:16.145" starttime="20170925 17:47:16.144"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:47:16.145" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:47:16.145" starttime="20170925 17:47:16.145"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:47:16.186" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:16.186" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:16.186" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170925 17:47:16.718" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:47:16.718" starttime="20170925 17:47:16.163"></status>
</kw>
<msg timestamp="20170925 17:47:16.718" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:16.719" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 25 17:46 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 25 17:46 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170925 17:47:16.719" starttime="20170925 17:47:16.146"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:47:16.720" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 25 17:46 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 25 17:46 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170925 17:47:16.721" starttime="20170925 17:47:16.720"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:47:16.721" level="INFO">${stderr} = ls: /proc/1424/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170925 17:47:16.722" starttime="20170925 17:47:16.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:16.730" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:16.730" starttime="20170925 17:47:16.729"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.730" starttime="20170925 17:47:16.728"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.730" starttime="20170925 17:47:16.722"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.730" starttime="20170925 17:47:16.143"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:16.730" starttime="20170925 17:47:16.143"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:16.731" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170925 17:47:16.731" starttime="20170925 17:47:16.731"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:16.732" starttime="20170925 17:47:16.732"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:47:16.733" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:47:16.733" starttime="20170925 17:47:16.733"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:47:16.773" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:16.773" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:16.774" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170925 17:47:17.881" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:47:17.882" starttime="20170925 17:47:16.751"></status>
</kw>
<msg timestamp="20170925 17:47:17.882" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:17.884" level="INFO">${ret_values} = (u'-- Logs begin at Mon 2017-09-25 17:44:57 UTC, end at Mon 2017-09-25 17:47:29 UTC. --\nSep 25 17:44:57 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 25 17:44:57 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170925 17:47:17.884" starttime="20170925 17:47:16.733"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:47:17.885" level="INFO">${stdout} = -- Logs begin at Mon 2017-09-25 17:44:57 UTC, end at Mon 2017-09-25 17:47:29 UTC. --
Sep 25 17:44:57 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 25 17:44:57 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170925 17:47:17.885" starttime="20170925 17:47:17.884"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:47:17.885" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:47:17.885" starttime="20170925 17:47:17.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:17.894" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:17.894" starttime="20170925 17:47:17.893"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:17.894" starttime="20170925 17:47:17.892"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:17.894" starttime="20170925 17:47:17.886"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:17.894" starttime="20170925 17:47:16.731"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:17.894" starttime="20170925 17:47:16.730"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:17.895" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170925 17:47:17.895" starttime="20170925 17:47:17.895"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:17.896" starttime="20170925 17:47:17.896"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:47:17.897" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:47:17.897" starttime="20170925 17:47:17.897"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:47:17.938" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:17.938" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:17.939" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170925 17:47:20.737" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:47:20.741" starttime="20170925 17:47:17.915"></status>
</kw>
<msg timestamp="20170925 17:47:20.741" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:20.756" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=24540d086a0f45d0a1cc2abc2984c5d0;i=1;b=60c20148d6bf4a17929385a14f319d3a;m=148c15f;t=55a071dfbcde5;x=fc2d912254eed517",\n\t"__REALTIME_TIMESTAMP" : "1506361497865701",\n\t"__MON...</msg>
<status status="PASS" endtime="20170925 17:47:20.756" starttime="20170925 17:47:17.898"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:47:20.760" level="INFO">${stdout} = {
	"__CURSOR" : "s=24540d086a0f45d0a1cc2abc2984c5d0;i=1;b=60c20148d6bf4a17929385a14f319d3a;m=148c15f;t=55a071dfbcde5;x=fc2d912254eed517",
	"__REALTIME_TIMESTAMP" : "1506361497865701",
	"__MONOTONIC_TI...</msg>
<status status="PASS" endtime="20170925 17:47:20.760" starttime="20170925 17:47:20.757"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:47:20.761" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:47:20.761" starttime="20170925 17:47:20.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:20.775" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:20.776" starttime="20170925 17:47:20.773"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:20.776" starttime="20170925 17:47:20.768"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:20.776" starttime="20170925 17:47:20.761"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:20.776" starttime="20170925 17:47:17.895"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:20.776" starttime="20170925 17:47:17.894"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:20.777" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170925 17:47:20.777" starttime="20170925 17:47:20.776"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:20.778" starttime="20170925 17:47:20.778"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:47:20.779" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:47:20.779" starttime="20170925 17:47:20.779"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:47:20.820" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:20.820" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:20.820" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170925 17:47:20.867" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:47:20.867" starttime="20170925 17:47:20.797"></status>
</kw>
<msg timestamp="20170925 17:47:20.867" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:20.867" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          284940 kB\nMemAvailable:     327204 kB\nBuffers:           11724 kB\nCached:            42708 kB\nSwapCached:            0 kB\nActive:            9454...</msg>
<status status="PASS" endtime="20170925 17:47:20.867" starttime="20170925 17:47:20.780"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:47:20.868" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          284940 kB
MemAvailable:     327204 kB
Buffers:           11724 kB
Cached:            42708 kB
SwapCached:            0 kB
Active:            94548 kB
Inac...</msg>
<status status="PASS" endtime="20170925 17:47:20.868" starttime="20170925 17:47:20.867"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:47:20.868" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:47:20.868" starttime="20170925 17:47:20.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:20.876" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:20.876" starttime="20170925 17:47:20.876"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:20.876" starttime="20170925 17:47:20.875"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:20.876" starttime="20170925 17:47:20.869"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:20.876" starttime="20170925 17:47:20.777"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:20.877" starttime="20170925 17:47:20.776"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:20.877" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170925 17:47:20.877" starttime="20170925 17:47:20.877"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:20.879" starttime="20170925 17:47:20.878"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:47:20.879" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:47:20.879" starttime="20170925 17:47:20.879"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:47:20.920" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:20.920" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:20.921" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170925 17:47:21.209" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:47:21.209" starttime="20170925 17:47:20.897"></status>
</kw>
<msg timestamp="20170925 17:47:21.209" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:21.210" level="INFO">${ret_values} = (u'Mem: 147288K used, 284956K free, 8860K shrd, 11724K buff, 42708K cached\nCPU:  16% usr   8% sys   0% nic  75% idle   0% io   0% irq   0% sirq\nLoad average: 4.11 2.45 0.98 1/159 1428\n  PID  PPID U...</msg>
<status status="PASS" endtime="20170925 17:47:21.210" starttime="20170925 17:47:20.880"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:47:21.210" level="INFO">${stdout} = Mem: 147288K used, 284956K free, 8860K shrd, 11724K buff, 42708K cached
CPU:  16% usr   8% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 4.11 2.45 0.98 1/159 1428
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20170925 17:47:21.210" starttime="20170925 17:47:21.210"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:47:21.211" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:47:21.211" starttime="20170925 17:47:21.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:21.219" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:21.219" starttime="20170925 17:47:21.218"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.219" starttime="20170925 17:47:21.217"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.219" starttime="20170925 17:47:21.211"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.219" starttime="20170925 17:47:20.878"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.219" starttime="20170925 17:47:20.877"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:21.220" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170925 17:47:21.220" starttime="20170925 17:47:21.219"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:21.221" starttime="20170925 17:47:21.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170925 17:47:21.222" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170925 17:47:21.222" starttime="20170925 17:47:21.221"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170925 17:47:21.262" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:21.262" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170925 17:47:21.262" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170925 17:47:21.319" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170925 17:47:21.319" starttime="20170925 17:47:21.239"></status>
</kw>
<msg timestamp="20170925 17:47:21.319" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:21.319" level="INFO">${ret_values} = (u'[    0.240000] TCP: Hash tables configured (established 4096 bind 4096)\n[    0.240000] UDP hash table entries: 256 (order: 0, 4096 bytes)\n[    0.240000] UDP-Lite hash table entries: 256 (order: 0...</msg>
<status status="PASS" endtime="20170925 17:47:21.319" starttime="20170925 17:47:21.222"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170925 17:47:21.320" level="INFO">${stdout} = [    0.240000] TCP: Hash tables configured (established 4096 bind 4096)
[    0.240000] UDP hash table entries: 256 (order: 0, 4096 bytes)
[    0.240000] UDP-Lite hash table entries: 256 (order: 0, 409...</msg>
<status status="PASS" endtime="20170925 17:47:21.320" starttime="20170925 17:47:21.320"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170925 17:47:21.321" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170925 17:47:21.321" starttime="20170925 17:47:21.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170925 17:47:21.328" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:21.328" starttime="20170925 17:47:21.328"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.329" starttime="20170925 17:47:21.327"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.329" starttime="20170925 17:47:21.321"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.329" starttime="20170925 17:47:21.220"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.329" starttime="20170925 17:47:21.219"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.329" starttime="20170925 17:47:16.042"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.329" starttime="20170925 17:47:16.041"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.329" starttime="20170925 17:47:16.040"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.329" starttime="20170925 17:47:16.040"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.329" starttime="20170925 17:47:16.039"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.329" starttime="20170925 17:47:16.026"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.329" starttime="20170925 17:47:16.023"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.329" starttime="20170925 17:47:16.023"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:21.331" starttime="20170925 17:47:21.331"></status>
</kw>
<msg timestamp="20170925 17:47:21.331" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:21.331" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:47:21.332" starttime="20170925 17:47:21.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:21.332" starttime="20170925 17:47:21.332"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:47:21.349" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:47:21.349" starttime="20170925 17:47:21.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:47:21.350" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:47:21.350" starttime="20170925 17:47:21.349"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:47:21.350" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:47:21.350" starttime="20170925 17:47:21.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:47:21.351" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:47:21.351" starttime="20170925 17:47:21.351"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:47:21.565" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:47:21.565" starttime="20170925 17:47:21.352"></status>
</kw>
<msg timestamp="20170925 17:47:21.565" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:21.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:21.565" starttime="20170925 17:47:21.351"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:47:21.566" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:21.566" starttime="20170925 17:47:21.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:21.567" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:21.567" starttime="20170925 17:47:21.566"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.567" starttime="20170925 17:47:21.347"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.567" starttime="20170925 17:47:21.347"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.567" starttime="20170925 17:47:21.346"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:47:21.568" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170925 17:47:21.568" starttime="20170925 17:47:21.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:21.569" starttime="20170925 17:47:21.568"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:47:21.736" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170925 17:47:21.736" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:21.736" starttime="20170925 17:47:21.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:21.737" starttime="20170925 17:47:21.737"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:47:21.737" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:47:21.738" starttime="20170925 17:47:21.737"></status>
</kw>
<msg timestamp="20170925 17:47:21.738" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:21.738" starttime="20170925 17:47:21.346"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:21.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:21.739" starttime="20170925 17:47:21.739"></status>
</kw>
<msg timestamp="20170925 17:47:21.739" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170925 17:47:21.739" starttime="20170925 17:47:21.738"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:21.740" starttime="20170925 17:47:21.739"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:47:21.740" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1220"
      ], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Led.Mapper.Error.ObjectNotFoundError", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1506361593636, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:47:21.740" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:47:21.741" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [u'_PID=1220'], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level....</msg>
<status status="PASS" endtime="20170925 17:47:21.741" starttime="20170925 17:47:21.740"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170925 17:47:21.741" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170925 17:47:21.741" starttime="20170925 17:47:21.741"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170925 17:47:21.742" level="INFO">${logpath} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_esel</msg>
<status status="PASS" endtime="20170925 17:47:21.742" starttime="20170925 17:47:21.742"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170925 17:47:21.743" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_esel"&gt;/home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/20170925174642785703_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:21.743" starttime="20170925 17:47:21.742"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:21.744" starttime="20170925 17:47:21.743"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:47:21.748" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:47:21.748" starttime="20170925 17:47:21.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:47:21.749" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:47:21.749" starttime="20170925 17:47:21.748"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:47:21.749" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:47:21.749" starttime="20170925 17:47:21.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:47:21.750" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:47:21.750" starttime="20170925 17:47:21.750"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:47:21.938" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:47:21.938" starttime="20170925 17:47:21.751"></status>
</kw>
<msg timestamp="20170925 17:47:21.938" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:21.938" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:21.938" starttime="20170925 17:47:21.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:47:21.939" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:21.939" starttime="20170925 17:47:21.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:21.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:21.940" starttime="20170925 17:47:21.939"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.940" starttime="20170925 17:47:21.747"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.940" starttime="20170925 17:47:21.746"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:21.940" starttime="20170925 17:47:21.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:47:21.941" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170925 17:47:21.941" starttime="20170925 17:47:21.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:21.942" starttime="20170925 17:47:21.941"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:47:22.033" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170925 17:47:22.033" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.033" starttime="20170925 17:47:21.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.034" starttime="20170925 17:47:22.034"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:47:22.035" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:47:22.035" starttime="20170925 17:47:22.034"></status>
</kw>
<msg timestamp="20170925 17:47:22.035" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.035" starttime="20170925 17:47:21.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.036" starttime="20170925 17:47:22.035"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:47:22.036" level="INFO">To JSON using : content={
  "data": [
    "_PID=1220"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:47:22.036" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:47:22.036" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'_PID=1220']}</msg>
<status status="PASS" endtime="20170925 17:47:22.036" starttime="20170925 17:47:22.036"></status>
</kw>
<msg timestamp="20170925 17:47:22.037" level="INFO">${esel_data} = [u'_PID=1220']</msg>
<status status="PASS" endtime="20170925 17:47:22.037" starttime="20170925 17:47:21.744"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg timestamp="20170925 17:47:22.038" level="FAIL">[ _PID=1220 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" endtime="20170925 17:47:22.038" starttime="20170925 17:47:22.038"></status>
</kw>
<msg timestamp="20170925 17:47:22.038" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170925 17:47:22.038" starttime="20170925 17:47:22.037"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.039" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170925 17:47:22.039" starttime="20170925 17:47:22.038"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.039" starttime="20170925 17:47:21.743"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.039" starttime="20170925 17:47:21.743"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170925 17:47:22.044" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170925 17:47:22.047" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170925 17:47:22.047" starttime="20170925 17:47:22.039"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170925 17:47:22.052" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170925 17:47:22.052" starttime="20170925 17:47:22.051"></status>
</kw>
<msg timestamp="20170925 17:47:22.052" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170925 17:47:22.052" starttime="20170925 17:47:22.050"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170925 17:47:22.053" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170925 17:47:22.053" starttime="20170925 17:47:22.053"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.054" starttime="20170925 17:47:21.345"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.054" starttime="20170925 17:47:21.332"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.054" starttime="20170925 17:47:21.330"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.054" starttime="20170925 17:47:21.329"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.058" starttime="20170925 17:47:22.056"></status>
</kw>
<msg timestamp="20170925 17:47:22.059" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:22.059" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170925 17:47:22.059" starttime="20170925 17:47:22.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.059" starttime="20170925 17:47:22.059"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170925 17:47:22.074" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170925 17:47:22.074" starttime="20170925 17:47:22.074"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.075" starttime="20170925 17:47:22.073"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.075" starttime="20170925 17:47:22.060"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.075" starttime="20170925 17:47:22.054"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.075" starttime="20170925 17:47:22.054"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.075" starttime="20170925 17:46:43.118"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.075" starttime="20170925 17:46:43.115"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.075" starttime="20170925 17:46:43.115"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.075" starttime="20170925 17:46:43.115"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170925 17:47:22.081" starttime="20170925 17:47:22.081"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.081" starttime="20170925 17:47:22.075"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.082" starttime="20170925 17:46:43.114"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.082" starttime="20170925 17:46:39.749"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.082" starttime="20170925 17:46:39.748"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170925 17:47:22.083" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170925 17:47:22.083" starttime="20170925 17:47:22.083"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170925 17:47:22.084" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170925174642785703_BmcCodeUpdate/20170925174642785703_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20170925 17:47:22.084" starttime="20170925 17:47:22.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.085" starttime="20170925 17:47:22.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.086" starttime="20170925 17:47:22.085"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.086" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170925 17:47:22.086" starttime="20170925 17:47:22.086"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.088" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170925 17:47:22.088" starttime="20170925 17:47:22.087"></status>
</kw>
<msg timestamp="20170925 17:47:22.088" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170925 17:47:22.088" starttime="20170925 17:47:22.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.089" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:22.089" starttime="20170925 17:47:22.089"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.089" starttime="20170925 17:47:22.088"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.090" starttime="20170925 17:47:22.090"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170925 17:47:22.092" level="INFO">${cur_time} = 2017-09-25 17:47:22:091281</msg>
<status status="PASS" endtime="20170925 17:47:22.092" starttime="20170925 17:47:22.091"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170925 17:47:22.092" level="INFO">${cur_time} = 20170925174722091281</msg>
<status status="PASS" endtime="20170925 17:47:22.092" starttime="20170925 17:47:22.092"></status>
</kw>
<msg timestamp="20170925 17:47:22.093" level="INFO">${cur_time} = 20170925174722091281</msg>
<status status="PASS" endtime="20170925 17:47:22.093" starttime="20170925 17:47:22.090"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.093" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170925 17:47:22.094" starttime="20170925 17:47:22.093"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.094" starttime="20170925 17:47:22.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:47:22.098" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:47:22.099" starttime="20170925 17:47:22.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:47:22.100" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:47:22.100" starttime="20170925 17:47:22.100"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:47:22.101" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:47:22.101" starttime="20170925 17:47:22.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:47:22.101" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:47:22.101" starttime="20170925 17:47:22.101"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.281" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:47:22.281" starttime="20170925 17:47:22.102"></status>
</kw>
<msg timestamp="20170925 17:47:22.282" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:22.282" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.282" starttime="20170925 17:47:22.102"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.282" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.283" starttime="20170925 17:47:22.282"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.283" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.283" starttime="20170925 17:47:22.283"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.283" starttime="20170925 17:47:22.097"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.283" starttime="20170925 17:47:22.097"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.284" starttime="20170925 17:47:22.096"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:47:22.284" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170925 17:47:22.284" starttime="20170925 17:47:22.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.285" starttime="20170925 17:47:22.285"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:47:22.348" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170925 17:47:22.348" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.348" starttime="20170925 17:47:22.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.349" starttime="20170925 17:47:22.348"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:47:22.349" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:47:22.349" starttime="20170925 17:47:22.349"></status>
</kw>
<msg timestamp="20170925 17:47:22.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.349" starttime="20170925 17:47:22.095"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.350" starttime="20170925 17:47:22.350"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:47:22.354" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:47:22.355" starttime="20170925 17:47:22.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:47:22.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:47:22.355" starttime="20170925 17:47:22.355"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:47:22.356" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:47:22.356" starttime="20170925 17:47:22.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:47:22.357" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:47:22.357" starttime="20170925 17:47:22.356"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.544" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:47:22.544" starttime="20170925 17:47:22.358"></status>
</kw>
<msg timestamp="20170925 17:47:22.544" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:22.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.545" starttime="20170925 17:47:22.357"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.545" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.545" starttime="20170925 17:47:22.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.546" starttime="20170925 17:47:22.546"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.546" starttime="20170925 17:47:22.353"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.546" starttime="20170925 17:47:22.353"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.546" starttime="20170925 17:47:22.352"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:47:22.547" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170925 17:47:22.547" starttime="20170925 17:47:22.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.548" starttime="20170925 17:47:22.547"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:47:22.613" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170925 17:47:22.613" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.613" starttime="20170925 17:47:22.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.614" starttime="20170925 17:47:22.614"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:47:22.615" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:47:22.615" starttime="20170925 17:47:22.614"></status>
</kw>
<msg timestamp="20170925 17:47:22.615" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.615" starttime="20170925 17:47:22.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.616" starttime="20170925 17:47:22.615"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170925 17:47:22.616" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170925 17:47:22.616" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170925 17:47:22.616" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/logging/entry/1']}</msg>
<status status="PASS" endtime="20170925 17:47:22.617" starttime="20170925 17:47:22.616"></status>
</kw>
<msg timestamp="20170925 17:47:22.617" level="INFO">${url_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170925 17:47:22.617" starttime="20170925 17:47:22.351"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.618" starttime="20170925 17:47:22.617"></status>
</kw>
<msg timestamp="20170925 17:47:22.618" level="INFO">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170925 17:47:22.618" starttime="20170925 17:47:22.350"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/1">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:22.620" starttime="20170925 17:47:22.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:47:22.621" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170925 17:47:22.621" starttime="20170925 17:47:22.621"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:47:22.625" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:47:22.626" starttime="20170925 17:47:22.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:47:22.627" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:47:22.627" starttime="20170925 17:47:22.626"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:47:22.628" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:47:22.628" starttime="20170925 17:47:22.627"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:47:22.632" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:47:22.632" starttime="20170925 17:47:22.628"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.841" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:47:22.841" starttime="20170925 17:47:22.633"></status>
</kw>
<msg timestamp="20170925 17:47:22.841" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:22.842" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.842" starttime="20170925 17:47:22.632"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.842" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.842" starttime="20170925 17:47:22.842"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.843" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.843" starttime="20170925 17:47:22.843"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.843" starttime="20170925 17:47:22.624"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.843" starttime="20170925 17:47:22.623"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.843" starttime="20170925 17:47:22.622"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:47:22.844" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1</msg>
<status status="PASS" endtime="20170925 17:47:22.844" starttime="20170925 17:47:22.844"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170925 17:47:22.846" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170925 17:47:22.846" starttime="20170925 17:47:22.845"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170925 17:47:22.847" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170925 17:47:22.847" starttime="20170925 17:47:22.847"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.847" starttime="20170925 17:47:22.846"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.847" starttime="20170925 17:47:22.844"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:47:22.980" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170925 17:47:22.980" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.980" starttime="20170925 17:47:22.847"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170925 17:47:22.982" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170925 17:47:22.982" starttime="20170925 17:47:22.981"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170925 17:47:22.983" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170925 17:47:22.983" starttime="20170925 17:47:22.983"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.983" starttime="20170925 17:47:22.982"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.983" starttime="20170925 17:47:22.981"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:47:22.984" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:47:22.984" starttime="20170925 17:47:22.983"></status>
</kw>
<msg timestamp="20170925 17:47:22.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.984" starttime="20170925 17:47:22.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:22.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:22.985" starttime="20170925 17:47:22.984"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.985" starttime="20170925 17:47:22.619"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.985" starttime="20170925 17:47:22.618"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.985" starttime="20170925 17:47:22.618"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:22.985" starttime="20170925 17:47:22.095"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170925 17:47:22.989" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170925 17:47:22.989" starttime="20170925 17:47:22.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170925 17:47:22.990" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170925 17:47:22.990" starttime="20170925 17:47:22.990"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170925 17:47:22.991" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170925 17:47:22.991" starttime="20170925 17:47:22.990"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170925 17:47:22.991" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170925 17:47:22.991" starttime="20170925 17:47:22.991"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170925 17:47:23.216" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170925 17:47:23.216" starttime="20170925 17:47:22.992"></status>
</kw>
<msg timestamp="20170925 17:47:23.216" level="INFO">${status} = PASS</msg>
<msg timestamp="20170925 17:47:23.217" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:23.217" starttime="20170925 17:47:22.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170925 17:47:23.217" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:23.218" starttime="20170925 17:47:23.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170925 17:47:23.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170925 17:47:23.219" starttime="20170925 17:47:23.218"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:23.219" starttime="20170925 17:47:22.988"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:23.219" starttime="20170925 17:47:22.987"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:23.219" starttime="20170925 17:47:22.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170925 17:47:23.220" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170925 17:47:23.220" starttime="20170925 17:47:23.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:23.221" starttime="20170925 17:47:23.220"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170925 17:47:23.264" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170925 17:47:23.264" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:23.264" starttime="20170925 17:47:23.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:23.265" starttime="20170925 17:47:23.265"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170925 17:47:23.265" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170925 17:47:23.266" starttime="20170925 17:47:23.265"></status>
</kw>
<msg timestamp="20170925 17:47:23.266" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170925 17:47:23.266" starttime="20170925 17:47:22.986"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170925 17:47:23.266" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170925 17:47:23.267" starttime="20170925 17:47:23.266"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:23.267" starttime="20170925 17:47:22.985"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:23.267" starttime="20170925 17:47:22.095"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:23.267" starttime="20170925 17:47:22.094"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:23.267" starttime="20170925 17:46:39.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170925 17:47:23.268" starttime="20170925 17:47:23.267"></status>
</kw>
<status status="PASS" endtime="20170925 17:47:23.268" starttime="20170925 17:46:39.747"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170925 17:47:23.268" critical="yes" starttime="20170925 17:38:44.534">#(UTC) 2017/09/25 17:46:39.732353 -    1.799383 - **ERROR** Boot failures exceed the boot failure threshold:
new_fail:                                         1
boot_fail_threshold:                              0
</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20170925 17:47:23.270" starttime="20170925 17:38:43.587"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
