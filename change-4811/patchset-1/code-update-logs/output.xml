<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170615 05:45:46.558" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170615 05:45:47.349" level="INFO">Length is 31</msg>
<status status="PASS" endtime="20170615 05:45:47.349" starttime="20170615 05:45:47.348"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170615 05:45:47.349" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon.pnor"&gt;/home/fspcibld/witherspoon.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170615 05:45:47.350" starttime="20170615 05:45:47.349"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:47.350" starttime="20170615 05:45:47.348"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170615 05:45:47.369" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170615 05:45:47.408" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170615 05:45:47.408" starttime="20170615 05:45:47.408"></status>
</kw>
<msg timestamp="20170615 05:45:47.409" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170615 05:45:47.409" starttime="20170615 05:45:47.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:47.410" starttime="20170615 05:45:47.409"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:47.410" starttime="20170615 05:45:47.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:47.411" starttime="20170615 05:45:47.410"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170615 05:45:47.412" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170615 05:45:47.412" starttime="20170615 05:45:47.411"></status>
</kw>
<msg timestamp="20170615 05:45:47.412" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170615 05:45:47.412" starttime="20170615 05:45:47.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:47.414" starttime="20170615 05:45:47.413"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:47.414" starttime="20170615 05:45:47.413"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:47.414" starttime="20170615 05:45:47.412"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170615 05:45:47.414" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170615 05:45:49.270" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170615 05:45:49.270" starttime="20170615 05:45:47.414"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:49.270" starttime="20170615 05:45:47.406"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170615 05:45:49.271" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170615 05:45:49.348" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170615 05:45:49.348" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170615 05:45:49.348" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170615 05:45:49.348" starttime="20170615 05:45:49.271"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170615 05:45:49.348" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170615 05:45:49.349" starttime="20170615 05:45:49.348"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170615 05:45:49.349" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170615 05:45:49.349" starttime="20170615 05:45:49.349"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:49.349" starttime="20170615 05:45:47.405"></status>
</kw>
<msg timestamp="20170615 05:45:49.350" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170615 05:45:49.570" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170615 05:45:49.584" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170615 05:45:49.584" starttime="20170615 05:45:49.583"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:45:49.586" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170615 05:45:49.586" starttime="20170615 05:45:49.585"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:45:49.588" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:45:49.589" starttime="20170615 05:45:49.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:45:49.590" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:45:49.590" starttime="20170615 05:45:49.590"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:45:49.591" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:45:49.591" starttime="20170615 05:45:49.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:45:49.591" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:45:49.591" starttime="20170615 05:45:49.591"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:45:49.790" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:45:49.790" starttime="20170615 05:45:49.592"></status>
</kw>
<msg timestamp="20170615 05:45:49.791" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:45:49.791" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:49.791" starttime="20170615 05:45:49.592"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:45:49.791" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:49.791" starttime="20170615 05:45:49.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:45:49.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:49.792" starttime="20170615 05:45:49.792"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:49.792" starttime="20170615 05:45:49.588"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:49.792" starttime="20170615 05:45:49.587"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:49.793" starttime="20170615 05:45:49.587"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:45:49.793" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170615 05:45:49.793" starttime="20170615 05:45:49.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:45:49.794" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:45:49.794" starttime="20170615 05:45:49.793"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:49.794" starttime="20170615 05:45:49.794"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170615 05:45:49.796" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170615 05:45:49.796" starttime="20170615 05:45:49.795"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170615 05:45:49.798" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170615 05:45:49.799" starttime="20170615 05:45:49.798"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:49.799" starttime="20170615 05:45:49.796"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:49.799" starttime="20170615 05:45:49.795"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:45:50.086" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170615 05:45:50.086" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:50.086" starttime="20170615 05:45:49.799"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170615 05:45:50.087" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170615 05:45:50.087" starttime="20170615 05:45:50.087"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170615 05:45:50.088" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170615 05:45:50.088" starttime="20170615 05:45:50.088"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:50.088" starttime="20170615 05:45:50.087"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:50.089" starttime="20170615 05:45:50.086"></status>
</kw>
<msg timestamp="20170615 05:45:50.089" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:50.089" starttime="20170615 05:45:49.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:45:50.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:50.090" starttime="20170615 05:45:50.089"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170615 05:45:50.090" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:45:50.090" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:45:50.090" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170615 05:45:50.090" starttime="20170615 05:45:50.090"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:50.090" starttime="20170615 05:45:49.585"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:45:50.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:45:50.094" starttime="20170615 05:45:50.093"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:45:50.095" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:45:50.095" starttime="20170615 05:45:50.094"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:45:50.096" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:45:50.096" starttime="20170615 05:45:50.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:45:50.097" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:45:50.097" starttime="20170615 05:45:50.096"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:45:50.285" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:45:50.285" starttime="20170615 05:45:50.097"></status>
</kw>
<msg timestamp="20170615 05:45:50.285" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:45:50.285" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:50.285" starttime="20170615 05:45:50.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:45:50.286" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:50.286" starttime="20170615 05:45:50.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:45:50.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:50.286" starttime="20170615 05:45:50.286"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:50.287" starttime="20170615 05:45:50.093"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:50.287" starttime="20170615 05:45:50.092"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:50.287" starttime="20170615 05:45:50.092"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:45:50.287" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170615 05:45:50.287" starttime="20170615 05:45:50.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:50.288" starttime="20170615 05:45:50.288"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:45:50.370" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170615 05:45:50.370" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:50.370" starttime="20170615 05:45:50.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:50.371" starttime="20170615 05:45:50.370"></status>
</kw>
<msg timestamp="20170615 05:45:50.371" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:50.371" starttime="20170615 05:45:50.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:45:50.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:50.371" starttime="20170615 05:45:50.371"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:45:50.372" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:45:50.372" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:45:50.372" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170615 05:45:50.372" starttime="20170615 05:45:50.372"></status>
</kw>
<msg timestamp="20170615 05:45:50.372" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170615 05:45:50.372" starttime="20170615 05:45:50.091"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170615 05:45:50.373" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:50.373" starttime="20170615 05:45:50.373"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:50.373" starttime="20170615 05:45:49.582"></status>
</kw>
<msg timestamp="20170615 05:45:50.416" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170615 05:45:50.433" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170615 05:45:50.438" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170615 05:45:50.438" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170615 05:45:50.441" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170615 05:45:50.441" starttime="20170615 05:45:50.440"></status>
</kw>
<msg timestamp="20170615 05:45:50.441" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170615 05:45:50.441" starttime="20170615 05:45:50.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:50.442" starttime="20170615 05:45:50.442"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:50.442" starttime="20170615 05:45:50.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:50.443" starttime="20170615 05:45:50.443"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170615 05:45:50.444" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170615 05:45:50.444" starttime="20170615 05:45:50.444"></status>
</kw>
<msg timestamp="20170615 05:45:50.444" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170615 05:45:50.444" starttime="20170615 05:45:50.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:50.446" starttime="20170615 05:45:50.446"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:50.446" starttime="20170615 05:45:50.445"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:50.446" starttime="20170615 05:45:50.445"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170615 05:45:50.447" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170615 05:45:52.093" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170615 05:45:52.093" starttime="20170615 05:45:50.447"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:52.094" starttime="20170615 05:45:50.439"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:45:52.126" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:45:52.127" starttime="20170615 05:45:52.126"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:45:52.128" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:45:52.128" starttime="20170615 05:45:52.128"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:45:52.129" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:45:52.129" starttime="20170615 05:45:52.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:45:52.130" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:45:52.130" starttime="20170615 05:45:52.129"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:45:52.308" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:45:52.308" starttime="20170615 05:45:52.130"></status>
</kw>
<msg timestamp="20170615 05:45:52.309" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:45:52.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.309" starttime="20170615 05:45:52.130"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:45:52.309" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.309" starttime="20170615 05:45:52.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:45:52.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.310" starttime="20170615 05:45:52.310"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:52.310" starttime="20170615 05:45:52.124"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:52.310" starttime="20170615 05:45:52.124"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:52.311" starttime="20170615 05:45:52.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:45:52.311" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:45:52.311" starttime="20170615 05:45:52.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:52.312" starttime="20170615 05:45:52.312"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:45:52.399" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:45:52.399" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.399" starttime="20170615 05:45:52.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:52.400" starttime="20170615 05:45:52.400"></status>
</kw>
<msg timestamp="20170615 05:45:52.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.400" starttime="20170615 05:45:52.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:45:52.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.401" starttime="20170615 05:45:52.401"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:45:52.402" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:45:52.402" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:45:52.402" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170615 05:45:52.402" starttime="20170615 05:45:52.401"></status>
</kw>
<msg timestamp="20170615 05:45:52.402" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170615 05:45:52.402" starttime="20170615 05:45:52.121"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:52.402" starttime="20170615 05:45:52.118"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:45:52.407" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:45:52.407" starttime="20170615 05:45:52.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:45:52.408" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:45:52.408" starttime="20170615 05:45:52.407"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:45:52.408" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:45:52.408" starttime="20170615 05:45:52.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:45:52.409" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:45:52.409" starttime="20170615 05:45:52.409"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:45:52.663" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:45:52.663" starttime="20170615 05:45:52.410"></status>
</kw>
<msg timestamp="20170615 05:45:52.663" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:45:52.663" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.663" starttime="20170615 05:45:52.409"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:45:52.664" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.664" starttime="20170615 05:45:52.663"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:45:52.664" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.665" starttime="20170615 05:45:52.664"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:52.665" starttime="20170615 05:45:52.406"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:52.665" starttime="20170615 05:45:52.405"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:52.665" starttime="20170615 05:45:52.405"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:45:52.666" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170615 05:45:52.666" starttime="20170615 05:45:52.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:52.666" starttime="20170615 05:45:52.666"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:45:52.738" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170615 05:45:52.739" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.739" starttime="20170615 05:45:52.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:52.739" starttime="20170615 05:45:52.739"></status>
</kw>
<msg timestamp="20170615 05:45:52.740" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.740" starttime="20170615 05:45:52.404"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:45:52.740" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.740" starttime="20170615 05:45:52.740"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:45:52.741" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:45:52.741" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:45:52.741" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170615 05:45:52.741" starttime="20170615 05:45:52.741"></status>
</kw>
<msg timestamp="20170615 05:45:52.741" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170615 05:45:52.741" starttime="20170615 05:45:52.403"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:52.742" starttime="20170615 05:45:52.403"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:45:52.746" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:45:52.746" starttime="20170615 05:45:52.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:45:52.747" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:45:52.747" starttime="20170615 05:45:52.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:45:52.748" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:45:52.748" starttime="20170615 05:45:52.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:45:52.749" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:45:52.749" starttime="20170615 05:45:52.748"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:45:52.928" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:45:52.929" starttime="20170615 05:45:52.750"></status>
</kw>
<msg timestamp="20170615 05:45:52.929" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:45:52.929" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.929" starttime="20170615 05:45:52.749"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:45:52.929" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.930" starttime="20170615 05:45:52.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:45:52.930" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.930" starttime="20170615 05:45:52.930"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:52.930" starttime="20170615 05:45:52.745"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:52.930" starttime="20170615 05:45:52.745"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:52.931" starttime="20170615 05:45:52.744"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:45:52.931" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:45:52.931" starttime="20170615 05:45:52.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:52.932" starttime="20170615 05:45:52.931"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:45:52.997" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:45:52.997" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.997" starttime="20170615 05:45:52.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:52.998" starttime="20170615 05:45:52.997"></status>
</kw>
<msg timestamp="20170615 05:45:52.998" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.998" starttime="20170615 05:45:52.743"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:45:52.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:52.999" starttime="20170615 05:45:52.998"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:45:52.999" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:45:52.999" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:45:53.000" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170615 05:45:53.000" starttime="20170615 05:45:52.999"></status>
</kw>
<msg timestamp="20170615 05:45:53.000" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170615 05:45:53.000" starttime="20170615 05:45:52.742"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:53.000" starttime="20170615 05:45:52.742"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:45:53.006" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:45:53.006" starttime="20170615 05:45:53.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:45:53.007" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:45:53.007" starttime="20170615 05:45:53.007"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:45:53.008" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:45:53.008" starttime="20170615 05:45:53.008"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:45:53.009" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:45:53.009" starttime="20170615 05:45:53.008"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:45:53.186" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:45:53.187" starttime="20170615 05:45:53.010"></status>
</kw>
<msg timestamp="20170615 05:45:53.187" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:45:53.187" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:53.187" starttime="20170615 05:45:53.009"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:45:53.188" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:53.188" starttime="20170615 05:45:53.187"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:45:53.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:53.188" starttime="20170615 05:45:53.188"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:53.188" starttime="20170615 05:45:53.005"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:53.189" starttime="20170615 05:45:53.004"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:53.189" starttime="20170615 05:45:53.003"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:45:53.189" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:45:53.189" starttime="20170615 05:45:53.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:53.190" starttime="20170615 05:45:53.190"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:45:53.251" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:45:53.251" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:53.251" starttime="20170615 05:45:53.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:53.252" starttime="20170615 05:45:53.252"></status>
</kw>
<msg timestamp="20170615 05:45:53.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:45:53.252" starttime="20170615 05:45:53.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:45:53.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:45:53.253" starttime="20170615 05:45:53.253"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:45:53.254" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:45:53.254" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:45:53.254" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170615 05:45:53.254" starttime="20170615 05:45:53.254"></status>
</kw>
<msg timestamp="20170615 05:45:53.255" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170615 05:45:53.255" starttime="20170615 05:45:53.001"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:53.255" starttime="20170615 05:45:53.001"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:53.293" starttime="20170615 05:45:47.369"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170615 05:45:53.298" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170615 05:45:53.299" starttime="20170615 05:45:53.294"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:53.299" starttime="20170615 05:45:47.368"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:53.299" starttime="20170615 05:45:47.352"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Delete Error logs</arg>
</arguments>
<kw name="Delete Error logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170615 05:45:53.308" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170615 05:45:53.308" starttime="20170615 05:45:53.308"></status>
</kw>
<msg timestamp="20170615 05:45:53.308" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170615 05:45:53.308" starttime="20170615 05:45:53.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:53.309" starttime="20170615 05:45:53.309"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:53.309" starttime="20170615 05:45:53.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:53.310" starttime="20170615 05:45:53.310"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170615 05:45:53.311" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170615 05:45:53.311" starttime="20170615 05:45:53.311"></status>
</kw>
<msg timestamp="20170615 05:45:53.311" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170615 05:45:53.311" starttime="20170615 05:45:53.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:45:53.314" starttime="20170615 05:45:53.313"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:53.314" starttime="20170615 05:45:53.313"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:53.314" starttime="20170615 05:45:53.312"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170615 05:45:53.315" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170615 05:45:55.062" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170615 05:45:55.062" starttime="20170615 05:45:53.314"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:55.063" starttime="20170615 05:45:53.307"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>systemctl restart xyz.openbmc_project.Logging.service</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170615 05:45:55.064" level="INFO">Executing command 'systemctl restart xyz.openbmc_project.Logging.service'.</msg>
<msg timestamp="20170615 05:45:55.611" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170615 05:45:55.611" level="INFO">${stdout} = </msg>
<msg timestamp="20170615 05:45:55.611" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170615 05:45:55.611" starttime="20170615 05:45:55.064"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170615 05:45:55.612" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170615 05:45:55.612" starttime="20170615 05:45:55.612"></status>
</kw>
<status status="PASS" endtime="20170615 05:45:55.612" starttime="20170615 05:45:55.063"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
<arg>reason=Wait for logging service to restart properly.</arg>
</arguments>
<msg timestamp="20170615 05:46:05.613" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20170615 05:46:05.613" level="INFO">Wait for logging service to restart properly.</msg>
<status status="PASS" endtime="20170615 05:46:05.613" starttime="20170615 05:45:55.612"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:05.613" starttime="20170615 05:45:53.306"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:05.614" starttime="20170615 05:45:53.300"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:05.614" starttime="20170615 05:45:47.350"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:05.630" starttime="20170615 05:46:05.623"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:05.632" starttime="20170615 05:46:05.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:06.303" starttime="20170615 05:46:05.633"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:06.303" starttime="20170615 05:46:05.632"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:06.304" starttime="20170615 05:46:05.630"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170615 05:46:06.304" level="INFO">Copying /home/fspcibld/witherspoon.pnor to /tmp</msg>
<status status="PASS" endtime="20170615 05:46:06.305" starttime="20170615 05:46:06.304"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:37.110" starttime="20170615 05:46:06.305"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:37.112" starttime="20170615 05:46:05.622"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:37.112" starttime="20170615 05:46:05.615"></status>
</kw>
<kw name="Split Path" library="OperatingSystem">
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
</arguments>
<assign>
<var>${pnor_path}</var>
<var>${pnor_basename}</var>
</assign>
<msg timestamp="20170615 05:46:37.116" level="INFO">${pnor_path} = /home/fspcibld</msg>
<msg timestamp="20170615 05:46:37.116" level="INFO">${pnor_basename} = witherspoon.pnor</msg>
<status status="PASS" endtime="20170615 05:46:37.116" starttime="20170615 05:46:37.114"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Flash PNOR \ /tmp/${pnor_basename}</arg>
</arguments>
<kw name="Flash PNOR" library="utils">
<doc>Calls flash bios update method to flash PNOR image</doc>
<arguments>
<arg>/tmp/witherspoon.pnor</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pnor_image}</arg>
</arguments>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170615 05:46:37.129" level="INFO">@{arglist} = [ /tmp/witherspoon.pnor ]</msg>
<status status="PASS" endtime="20170615 05:46:37.129" starttime="20170615 05:46:37.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170615 05:46:37.130" level="INFO">${args} = {u'data': [u'/tmp/witherspoon.pnor']}</msg>
<status status="PASS" endtime="20170615 05:46:37.130" starttime="20170615 05:46:37.129"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios/</arg>
<arg>update</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:46:37.131" level="INFO">${base_uri} = /org/openbmc/control/flash/bios/</msg>
<status status="PASS" endtime="20170615 05:46:37.131" starttime="20170615 05:46:37.131"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:46:37.136" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:46:37.137" starttime="20170615 05:46:37.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:46:37.139" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:46:37.139" starttime="20170615 05:46:37.138"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:46:37.140" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:46:37.141" starttime="20170615 05:46:37.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:46:37.141" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:46:37.141" starttime="20170615 05:46:37.141"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:46:37.321" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:46:37.321" starttime="20170615 05:46:37.143"></status>
</kw>
<msg timestamp="20170615 05:46:37.322" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:46:37.322" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:37.322" starttime="20170615 05:46:37.142"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:46:37.322" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:37.322" starttime="20170615 05:46:37.322"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:46:37.323" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:37.323" starttime="20170615 05:46:37.323"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:37.323" starttime="20170615 05:46:37.135"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:37.323" starttime="20170615 05:46:37.134"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:37.324" starttime="20170615 05:46:37.133"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:46:37.324" level="INFO">${base_uri} = /org/openbmc/control/flash/bios//action/update</msg>
<status status="PASS" endtime="20170615 05:46:37.324" starttime="20170615 05:46:37.324"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:46:37.325" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:46:37.325" starttime="20170615 05:46:37.324"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:37.325" starttime="20170615 05:46:37.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:37.326" starttime="20170615 05:46:37.326"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:46:37.609" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios//action/update, data={"data": ["/tmp/witherspoon.pnor"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170615 05:46:37.609" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:37.609" starttime="20170615 05:46:37.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:37.610" starttime="20170615 05:46:37.610"></status>
</kw>
<msg timestamp="20170615 05:46:37.610" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:37.610" starttime="20170615 05:46:37.132"></status>
</kw>
<msg timestamp="20170615 05:46:37.611" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:37.611" starttime="20170615 05:46:37.130"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:46:37.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:37.611" starttime="20170615 05:46:37.611"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>2 min</arg>
<arg>10 sec</arg>
<arg>Is PNOR Flashing</arg>
</arguments>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:46:37.616" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:46:37.616" starttime="20170615 05:46:37.616"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:46:37.617" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:46:37.617" starttime="20170615 05:46:37.617"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:46:37.618" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:46:37.618" starttime="20170615 05:46:37.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:46:37.619" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:46:37.619" starttime="20170615 05:46:37.618"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:46:37.992" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:46:37.992" starttime="20170615 05:46:37.620"></status>
</kw>
<msg timestamp="20170615 05:46:37.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:46:37.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:37.992" starttime="20170615 05:46:37.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:46:37.993" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:37.993" starttime="20170615 05:46:37.992"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:46:37.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:37.994" starttime="20170615 05:46:37.993"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:37.994" starttime="20170615 05:46:37.615"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:37.994" starttime="20170615 05:46:37.614"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:37.994" starttime="20170615 05:46:37.614"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:46:37.995" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:46:37.995" starttime="20170615 05:46:37.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:37.995" starttime="20170615 05:46:37.995"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:46:38.193" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:46:38.193" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:38.193" starttime="20170615 05:46:37.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:38.194" starttime="20170615 05:46:38.194"></status>
</kw>
<msg timestamp="20170615 05:46:38.194" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:38.195" starttime="20170615 05:46:37.613"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:46:38.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:38.195" starttime="20170615 05:46:38.195"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:46:38.196" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:46:38.196" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:46:38.196" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:46:38.196" starttime="20170615 05:46:38.195"></status>
</kw>
<msg timestamp="20170615 05:46:38.196" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:46:38.196" starttime="20170615 05:46:37.613"></status>
</kw>
<msg timestamp="20170615 05:46:38.197" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:46:38.197" starttime="20170615 05:46:37.612"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flashing</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:38.197" starttime="20170615 05:46:38.197"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:38.197" starttime="20170615 05:46:37.612"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:38.197" starttime="20170615 05:46:37.612"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:38.197" starttime="20170615 05:46:37.128"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:38.198" starttime="20170615 05:46:37.116"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds \ 7 min \ 10 sec \ Is PNOR Flash Done</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>7 min</arg>
<arg>10 sec</arg>
<arg>Is PNOR Flash Done</arg>
</arguments>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:46:38.210" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:46:38.211" starttime="20170615 05:46:38.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:46:38.211" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:46:38.212" starttime="20170615 05:46:38.211"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:46:38.212" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:46:38.212" starttime="20170615 05:46:38.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:46:38.213" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:46:38.213" starttime="20170615 05:46:38.212"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:46:38.630" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:46:38.630" starttime="20170615 05:46:38.213"></status>
</kw>
<msg timestamp="20170615 05:46:38.630" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:46:38.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:38.630" starttime="20170615 05:46:38.213"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:46:38.631" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:38.631" starttime="20170615 05:46:38.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:46:38.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:38.632" starttime="20170615 05:46:38.632"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:38.632" starttime="20170615 05:46:38.210"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:38.632" starttime="20170615 05:46:38.207"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:38.632" starttime="20170615 05:46:38.207"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:46:38.633" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:46:38.633" starttime="20170615 05:46:38.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:38.634" starttime="20170615 05:46:38.633"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:46:38.713" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:46:38.713" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:38.713" starttime="20170615 05:46:38.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:38.714" starttime="20170615 05:46:38.714"></status>
</kw>
<msg timestamp="20170615 05:46:38.714" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:38.714" starttime="20170615 05:46:38.206"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:46:38.715" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:38.715" starttime="20170615 05:46:38.714"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:46:38.715" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:46:38.716" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:46:38.716" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:46:38.716" starttime="20170615 05:46:38.715"></status>
</kw>
<msg timestamp="20170615 05:46:38.716" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:46:38.716" starttime="20170615 05:46:38.206"></status>
</kw>
<msg timestamp="20170615 05:46:38.716" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:46:38.716" starttime="20170615 05:46:38.206"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:46:38.717" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:46:38.717" starttime="20170615 05:46:38.717"></status>
</kw>
<status status="FAIL" endtime="20170615 05:46:38.717" starttime="20170615 05:46:38.205"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:46:48.723" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:46:48.723" starttime="20170615 05:46:48.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:46:48.724" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:46:48.724" starttime="20170615 05:46:48.723"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:46:48.724" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:46:48.724" starttime="20170615 05:46:48.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:46:48.725" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:46:48.725" starttime="20170615 05:46:48.725"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:46:48.903" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:46:48.903" starttime="20170615 05:46:48.726"></status>
</kw>
<msg timestamp="20170615 05:46:48.903" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:46:48.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:48.903" starttime="20170615 05:46:48.725"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:46:48.904" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:48.904" starttime="20170615 05:46:48.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:46:48.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:48.905" starttime="20170615 05:46:48.904"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:48.905" starttime="20170615 05:46:48.722"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:48.905" starttime="20170615 05:46:48.721"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:48.905" starttime="20170615 05:46:48.720"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:46:48.906" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:46:48.906" starttime="20170615 05:46:48.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:48.907" starttime="20170615 05:46:48.906"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:46:48.987" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:46:48.987" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:48.987" starttime="20170615 05:46:48.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:48.988" starttime="20170615 05:46:48.988"></status>
</kw>
<msg timestamp="20170615 05:46:48.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:48.988" starttime="20170615 05:46:48.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:46:48.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:48.989" starttime="20170615 05:46:48.989"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:46:48.990" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:46:48.990" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:46:48.990" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:46:48.990" starttime="20170615 05:46:48.989"></status>
</kw>
<msg timestamp="20170615 05:46:48.990" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:46:48.990" starttime="20170615 05:46:48.719"></status>
</kw>
<msg timestamp="20170615 05:46:48.990" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:46:48.990" starttime="20170615 05:46:48.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:46:48.991" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:46:48.991" starttime="20170615 05:46:48.991"></status>
</kw>
<status status="FAIL" endtime="20170615 05:46:48.991" starttime="20170615 05:46:48.718"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:46:58.997" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:46:58.997" starttime="20170615 05:46:58.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:46:58.998" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:46:58.998" starttime="20170615 05:46:58.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:46:58.998" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:46:58.998" starttime="20170615 05:46:58.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:46:58.999" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:46:58.999" starttime="20170615 05:46:58.999"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:46:59.176" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:46:59.177" starttime="20170615 05:46:59.000"></status>
</kw>
<msg timestamp="20170615 05:46:59.177" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:46:59.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:59.177" starttime="20170615 05:46:58.999"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:46:59.178" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:59.178" starttime="20170615 05:46:59.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:46:59.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:59.178" starttime="20170615 05:46:59.178"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:59.179" starttime="20170615 05:46:58.996"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:59.179" starttime="20170615 05:46:58.995"></status>
</kw>
<status status="PASS" endtime="20170615 05:46:59.179" starttime="20170615 05:46:58.995"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:46:59.179" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:46:59.179" starttime="20170615 05:46:59.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:59.180" starttime="20170615 05:46:59.180"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:46:59.261" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:46:59.261" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:59.261" starttime="20170615 05:46:59.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:46:59.262" starttime="20170615 05:46:59.262"></status>
</kw>
<msg timestamp="20170615 05:46:59.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:46:59.262" starttime="20170615 05:46:58.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:46:59.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:46:59.263" starttime="20170615 05:46:59.262"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:46:59.263" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:46:59.263" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:46:59.264" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:46:59.264" starttime="20170615 05:46:59.263"></status>
</kw>
<msg timestamp="20170615 05:46:59.264" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:46:59.264" starttime="20170615 05:46:58.993"></status>
</kw>
<msg timestamp="20170615 05:46:59.264" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:46:59.264" starttime="20170615 05:46:58.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:46:59.265" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:46:59.265" starttime="20170615 05:46:59.265"></status>
</kw>
<status status="FAIL" endtime="20170615 05:46:59.265" starttime="20170615 05:46:58.992"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:47:09.273" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:47:09.274" starttime="20170615 05:47:09.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:47:09.275" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:47:09.275" starttime="20170615 05:47:09.274"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:47:09.276" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:47:09.276" starttime="20170615 05:47:09.275"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:47:09.277" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:47:09.277" starttime="20170615 05:47:09.276"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:47:09.452" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:47:09.452" starttime="20170615 05:47:09.278"></status>
</kw>
<msg timestamp="20170615 05:47:09.453" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:47:09.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:09.453" starttime="20170615 05:47:09.277"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:47:09.453" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:09.453" starttime="20170615 05:47:09.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:47:09.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:09.454" starttime="20170615 05:47:09.454"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:09.454" starttime="20170615 05:47:09.272"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:09.454" starttime="20170615 05:47:09.271"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:09.454" starttime="20170615 05:47:09.270"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:47:09.455" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:47:09.455" starttime="20170615 05:47:09.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:47:09.456" starttime="20170615 05:47:09.455"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:47:09.538" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:47:09.538" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:09.538" starttime="20170615 05:47:09.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:47:09.539" starttime="20170615 05:47:09.538"></status>
</kw>
<msg timestamp="20170615 05:47:09.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:09.539" starttime="20170615 05:47:09.269"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:47:09.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:09.540" starttime="20170615 05:47:09.539"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:47:09.540" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:47:09.540" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:47:09.540" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:47:09.540" starttime="20170615 05:47:09.540"></status>
</kw>
<msg timestamp="20170615 05:47:09.541" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:47:09.541" starttime="20170615 05:47:09.268"></status>
</kw>
<msg timestamp="20170615 05:47:09.541" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:47:09.541" starttime="20170615 05:47:09.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:47:09.542" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:47:09.542" starttime="20170615 05:47:09.541"></status>
</kw>
<status status="FAIL" endtime="20170615 05:47:09.542" starttime="20170615 05:47:09.267"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:47:19.548" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:47:19.548" starttime="20170615 05:47:19.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:47:19.549" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:47:19.549" starttime="20170615 05:47:19.548"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:47:19.549" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:47:19.549" starttime="20170615 05:47:19.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:47:19.550" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:47:19.550" starttime="20170615 05:47:19.550"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:47:20.392" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:47:20.392" starttime="20170615 05:47:19.551"></status>
</kw>
<msg timestamp="20170615 05:47:20.392" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:47:20.392" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:20.392" starttime="20170615 05:47:19.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:47:20.393" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:20.393" starttime="20170615 05:47:20.393"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:47:20.394" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:20.394" starttime="20170615 05:47:20.393"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:20.394" starttime="20170615 05:47:19.547"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:20.394" starttime="20170615 05:47:19.546"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:20.394" starttime="20170615 05:47:19.546"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:47:20.395" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:47:20.395" starttime="20170615 05:47:20.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:47:20.396" starttime="20170615 05:47:20.396"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:47:20.477" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:47:20.477" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:20.477" starttime="20170615 05:47:20.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:47:20.478" starttime="20170615 05:47:20.478"></status>
</kw>
<msg timestamp="20170615 05:47:20.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:20.478" starttime="20170615 05:47:19.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:47:20.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:20.479" starttime="20170615 05:47:20.478"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:47:20.480" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:47:20.480" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:47:20.480" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:47:20.480" starttime="20170615 05:47:20.479"></status>
</kw>
<msg timestamp="20170615 05:47:20.480" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:47:20.480" starttime="20170615 05:47:19.544"></status>
</kw>
<msg timestamp="20170615 05:47:20.480" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:47:20.480" starttime="20170615 05:47:19.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:47:20.481" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:47:20.481" starttime="20170615 05:47:20.481"></status>
</kw>
<status status="FAIL" endtime="20170615 05:47:20.481" starttime="20170615 05:47:19.543"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:47:30.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:47:30.487" starttime="20170615 05:47:30.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:47:30.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:47:30.488" starttime="20170615 05:47:30.487"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:47:30.488" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:47:30.488" starttime="20170615 05:47:30.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:47:30.489" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:47:30.489" starttime="20170615 05:47:30.489"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:47:30.666" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:47:30.666" starttime="20170615 05:47:30.490"></status>
</kw>
<msg timestamp="20170615 05:47:30.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:47:30.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:30.666" starttime="20170615 05:47:30.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:47:30.667" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:30.667" starttime="20170615 05:47:30.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:47:30.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:30.668" starttime="20170615 05:47:30.667"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:30.668" starttime="20170615 05:47:30.486"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:30.668" starttime="20170615 05:47:30.485"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:30.668" starttime="20170615 05:47:30.485"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:47:30.669" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:47:30.669" starttime="20170615 05:47:30.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:47:30.669" starttime="20170615 05:47:30.669"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:47:30.751" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:47:30.751" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:30.751" starttime="20170615 05:47:30.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:47:30.752" starttime="20170615 05:47:30.752"></status>
</kw>
<msg timestamp="20170615 05:47:30.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:30.752" starttime="20170615 05:47:30.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:47:30.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:30.753" starttime="20170615 05:47:30.753"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:47:30.754" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:47:30.754" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:47:30.754" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:47:30.754" starttime="20170615 05:47:30.753"></status>
</kw>
<msg timestamp="20170615 05:47:30.754" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:47:30.754" starttime="20170615 05:47:30.484"></status>
</kw>
<msg timestamp="20170615 05:47:30.754" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:47:30.754" starttime="20170615 05:47:30.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:47:30.755" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:47:30.755" starttime="20170615 05:47:30.755"></status>
</kw>
<status status="FAIL" endtime="20170615 05:47:30.756" starttime="20170615 05:47:30.482"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:47:40.761" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:47:40.761" starttime="20170615 05:47:40.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:47:40.762" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:47:40.762" starttime="20170615 05:47:40.762"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:47:40.763" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:47:40.763" starttime="20170615 05:47:40.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:47:40.763" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:47:40.763" starttime="20170615 05:47:40.763"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:47:41.863" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:47:41.863" starttime="20170615 05:47:40.764"></status>
</kw>
<msg timestamp="20170615 05:47:41.863" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:47:41.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:41.863" starttime="20170615 05:47:40.764"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:47:41.864" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:41.864" starttime="20170615 05:47:41.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:47:41.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:41.865" starttime="20170615 05:47:41.864"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:41.865" starttime="20170615 05:47:40.760"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:41.865" starttime="20170615 05:47:40.759"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:41.865" starttime="20170615 05:47:40.759"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:47:41.866" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:47:41.866" starttime="20170615 05:47:41.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:47:41.866" starttime="20170615 05:47:41.866"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:47:41.946" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:47:41.946" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:41.946" starttime="20170615 05:47:41.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:47:41.947" starttime="20170615 05:47:41.947"></status>
</kw>
<msg timestamp="20170615 05:47:41.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:41.948" starttime="20170615 05:47:40.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:47:41.948" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:41.948" starttime="20170615 05:47:41.948"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:47:41.949" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:47:41.949" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:47:41.949" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:47:41.949" starttime="20170615 05:47:41.949"></status>
</kw>
<msg timestamp="20170615 05:47:41.949" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:47:41.949" starttime="20170615 05:47:40.758"></status>
</kw>
<msg timestamp="20170615 05:47:41.950" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:47:41.950" starttime="20170615 05:47:40.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:47:41.950" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:47:41.950" starttime="20170615 05:47:41.950"></status>
</kw>
<status status="FAIL" endtime="20170615 05:47:41.951" starttime="20170615 05:47:40.756"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:47:51.958" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:47:51.959" starttime="20170615 05:47:51.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:47:51.959" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:47:51.959" starttime="20170615 05:47:51.959"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:47:51.960" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:47:51.960" starttime="20170615 05:47:51.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:47:51.961" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:47:51.961" starttime="20170615 05:47:51.961"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:47:52.142" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:47:52.142" starttime="20170615 05:47:51.962"></status>
</kw>
<msg timestamp="20170615 05:47:52.142" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:47:52.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:52.142" starttime="20170615 05:47:51.962"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:47:52.143" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:52.143" starttime="20170615 05:47:52.143"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:47:52.144" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:52.144" starttime="20170615 05:47:52.143"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:52.144" starttime="20170615 05:47:51.957"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:52.144" starttime="20170615 05:47:51.956"></status>
</kw>
<status status="PASS" endtime="20170615 05:47:52.144" starttime="20170615 05:47:51.954"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:47:52.145" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:47:52.145" starttime="20170615 05:47:52.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:47:52.145" starttime="20170615 05:47:52.145"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:47:52.226" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:47:52.226" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:52.226" starttime="20170615 05:47:52.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:47:52.227" starttime="20170615 05:47:52.227"></status>
</kw>
<msg timestamp="20170615 05:47:52.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:47:52.227" starttime="20170615 05:47:51.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:47:52.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:47:52.228" starttime="20170615 05:47:52.228"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:47:52.229" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:47:52.229" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:47:52.229" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:47:52.229" starttime="20170615 05:47:52.228"></status>
</kw>
<msg timestamp="20170615 05:47:52.229" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:47:52.229" starttime="20170615 05:47:51.953"></status>
</kw>
<msg timestamp="20170615 05:47:52.229" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:47:52.230" starttime="20170615 05:47:51.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:47:52.230" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:47:52.230" starttime="20170615 05:47:52.230"></status>
</kw>
<status status="FAIL" endtime="20170615 05:47:52.230" starttime="20170615 05:47:51.952"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:48:02.235" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:48:02.236" starttime="20170615 05:48:02.235"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:48:02.237" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:48:02.237" starttime="20170615 05:48:02.236"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:48:02.237" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:48:02.237" starttime="20170615 05:48:02.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:48:02.238" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:48:02.238" starttime="20170615 05:48:02.238"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:48:03.344" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:48:03.344" starttime="20170615 05:48:02.239"></status>
</kw>
<msg timestamp="20170615 05:48:03.344" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:48:03.344" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:03.344" starttime="20170615 05:48:02.238"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:48:03.345" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:03.345" starttime="20170615 05:48:03.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:48:03.346" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:03.346" starttime="20170615 05:48:03.346"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:03.346" starttime="20170615 05:48:02.235"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:03.346" starttime="20170615 05:48:02.234"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:03.347" starttime="20170615 05:48:02.233"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:48:03.347" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:48:03.347" starttime="20170615 05:48:03.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:48:03.348" starttime="20170615 05:48:03.347"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:48:03.429" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:48:03.429" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:03.429" starttime="20170615 05:48:03.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:48:03.430" starttime="20170615 05:48:03.429"></status>
</kw>
<msg timestamp="20170615 05:48:03.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:03.430" starttime="20170615 05:48:02.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:48:03.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:03.431" starttime="20170615 05:48:03.430"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:48:03.431" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:48:03.431" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:48:03.432" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:48:03.432" starttime="20170615 05:48:03.431"></status>
</kw>
<msg timestamp="20170615 05:48:03.432" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:48:03.432" starttime="20170615 05:48:02.232"></status>
</kw>
<msg timestamp="20170615 05:48:03.432" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:48:03.432" starttime="20170615 05:48:02.232"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:48:03.433" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:48:03.433" starttime="20170615 05:48:03.432"></status>
</kw>
<status status="FAIL" endtime="20170615 05:48:03.433" starttime="20170615 05:48:02.231"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:48:13.438" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:48:13.438" starttime="20170615 05:48:13.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:48:13.439" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:48:13.439" starttime="20170615 05:48:13.439"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:48:13.440" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:48:13.440" starttime="20170615 05:48:13.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:48:13.440" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:48:13.440" starttime="20170615 05:48:13.440"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:48:13.624" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:48:13.624" starttime="20170615 05:48:13.441"></status>
</kw>
<msg timestamp="20170615 05:48:13.624" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:48:13.624" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:13.624" starttime="20170615 05:48:13.441"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:48:13.625" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:13.625" starttime="20170615 05:48:13.625"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:48:13.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:13.626" starttime="20170615 05:48:13.625"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:13.626" starttime="20170615 05:48:13.437"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:13.626" starttime="20170615 05:48:13.437"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:13.627" starttime="20170615 05:48:13.436"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:48:13.627" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:48:13.627" starttime="20170615 05:48:13.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:48:13.628" starttime="20170615 05:48:13.628"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:48:13.710" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:48:13.710" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:13.710" starttime="20170615 05:48:13.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:48:13.710" starttime="20170615 05:48:13.710"></status>
</kw>
<msg timestamp="20170615 05:48:13.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:13.711" starttime="20170615 05:48:13.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:48:13.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:13.711" starttime="20170615 05:48:13.711"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:48:13.712" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:48:13.712" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:48:13.712" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:48:13.712" starttime="20170615 05:48:13.712"></status>
</kw>
<msg timestamp="20170615 05:48:13.712" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:48:13.712" starttime="20170615 05:48:13.435"></status>
</kw>
<msg timestamp="20170615 05:48:13.713" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:48:13.713" starttime="20170615 05:48:13.434"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:48:13.713" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:48:13.713" starttime="20170615 05:48:13.713"></status>
</kw>
<status status="FAIL" endtime="20170615 05:48:13.714" starttime="20170615 05:48:13.434"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:48:23.718" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:48:23.719" starttime="20170615 05:48:23.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:48:23.719" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:48:23.719" starttime="20170615 05:48:23.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:48:23.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:48:23.720" starttime="20170615 05:48:23.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:48:23.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:48:23.721" starttime="20170615 05:48:23.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:48:23.899" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:48:23.899" starttime="20170615 05:48:23.721"></status>
</kw>
<msg timestamp="20170615 05:48:23.899" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:48:23.899" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:23.899" starttime="20170615 05:48:23.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:48:23.900" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:23.900" starttime="20170615 05:48:23.899"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:48:23.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:23.901" starttime="20170615 05:48:23.900"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:23.901" starttime="20170615 05:48:23.717"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:23.901" starttime="20170615 05:48:23.717"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:23.901" starttime="20170615 05:48:23.716"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:48:23.902" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:48:23.902" starttime="20170615 05:48:23.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:48:23.902" starttime="20170615 05:48:23.902"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:48:25.035" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:48:25.036" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:25.036" starttime="20170615 05:48:23.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:48:25.036" starttime="20170615 05:48:25.036"></status>
</kw>
<msg timestamp="20170615 05:48:25.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:25.037" starttime="20170615 05:48:23.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:48:25.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:25.037" starttime="20170615 05:48:25.037"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:48:25.038" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:48:25.038" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:48:25.038" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:48:25.038" starttime="20170615 05:48:25.038"></status>
</kw>
<msg timestamp="20170615 05:48:25.039" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:48:25.039" starttime="20170615 05:48:23.715"></status>
</kw>
<msg timestamp="20170615 05:48:25.039" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:48:25.039" starttime="20170615 05:48:23.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:48:25.040" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:48:25.040" starttime="20170615 05:48:25.039"></status>
</kw>
<status status="FAIL" endtime="20170615 05:48:25.040" starttime="20170615 05:48:23.714"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:48:35.045" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:48:35.045" starttime="20170615 05:48:35.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:48:35.046" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:48:35.046" starttime="20170615 05:48:35.045"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:48:35.046" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:48:35.047" starttime="20170615 05:48:35.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:48:35.047" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:48:35.047" starttime="20170615 05:48:35.047"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:48:35.225" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:48:35.225" starttime="20170615 05:48:35.048"></status>
</kw>
<msg timestamp="20170615 05:48:35.225" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:48:35.225" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:35.225" starttime="20170615 05:48:35.047"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:48:35.226" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:35.226" starttime="20170615 05:48:35.225"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:48:35.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:35.227" starttime="20170615 05:48:35.226"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:35.227" starttime="20170615 05:48:35.044"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:35.227" starttime="20170615 05:48:35.043"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:35.227" starttime="20170615 05:48:35.043"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:48:35.228" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:48:35.228" starttime="20170615 05:48:35.227"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:48:35.228" starttime="20170615 05:48:35.228"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:48:35.311" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:48:35.311" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:35.311" starttime="20170615 05:48:35.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:48:35.312" starttime="20170615 05:48:35.312"></status>
</kw>
<msg timestamp="20170615 05:48:35.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:35.312" starttime="20170615 05:48:35.042"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:48:35.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:35.313" starttime="20170615 05:48:35.312"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:48:35.313" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:48:35.313" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:48:35.314" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:48:35.314" starttime="20170615 05:48:35.313"></status>
</kw>
<msg timestamp="20170615 05:48:35.314" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:48:35.314" starttime="20170615 05:48:35.041"></status>
</kw>
<msg timestamp="20170615 05:48:35.314" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:48:35.314" starttime="20170615 05:48:35.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:48:35.315" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:48:35.315" starttime="20170615 05:48:35.314"></status>
</kw>
<status status="FAIL" endtime="20170615 05:48:35.315" starttime="20170615 05:48:35.040"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:48:45.322" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:48:45.323" starttime="20170615 05:48:45.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:48:45.323" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:48:45.323" starttime="20170615 05:48:45.323"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:48:45.324" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:48:45.324" starttime="20170615 05:48:45.324"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:48:45.325" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:48:45.325" starttime="20170615 05:48:45.324"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:48:45.503" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:48:45.504" starttime="20170615 05:48:45.326"></status>
</kw>
<msg timestamp="20170615 05:48:45.504" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:48:45.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:45.504" starttime="20170615 05:48:45.325"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:48:45.505" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:45.505" starttime="20170615 05:48:45.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:48:45.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:45.506" starttime="20170615 05:48:45.505"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:45.506" starttime="20170615 05:48:45.321"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:45.506" starttime="20170615 05:48:45.321"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:45.506" starttime="20170615 05:48:45.320"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:48:45.507" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:48:45.507" starttime="20170615 05:48:45.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:48:45.508" starttime="20170615 05:48:45.508"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:48:45.590" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:48:45.590" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:45.590" starttime="20170615 05:48:45.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:48:45.591" starttime="20170615 05:48:45.590"></status>
</kw>
<msg timestamp="20170615 05:48:45.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:45.591" starttime="20170615 05:48:45.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:48:45.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:45.592" starttime="20170615 05:48:45.591"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:48:45.592" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:48:45.592" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:48:45.592" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:48:45.592" starttime="20170615 05:48:45.592"></status>
</kw>
<msg timestamp="20170615 05:48:45.593" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:48:45.593" starttime="20170615 05:48:45.319"></status>
</kw>
<msg timestamp="20170615 05:48:45.593" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:48:45.593" starttime="20170615 05:48:45.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:48:45.594" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:48:45.594" starttime="20170615 05:48:45.593"></status>
</kw>
<status status="FAIL" endtime="20170615 05:48:45.594" starttime="20170615 05:48:45.316"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:48:55.599" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:48:55.599" starttime="20170615 05:48:55.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:48:55.600" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:48:55.600" starttime="20170615 05:48:55.600"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:48:55.600" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:48:55.600" starttime="20170615 05:48:55.600"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:48:55.602" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:48:55.602" starttime="20170615 05:48:55.601"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:48:55.861" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:48:55.862" starttime="20170615 05:48:55.602"></status>
</kw>
<msg timestamp="20170615 05:48:55.862" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:48:55.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:55.862" starttime="20170615 05:48:55.602"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:48:55.863" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:55.863" starttime="20170615 05:48:55.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:48:55.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:55.863" starttime="20170615 05:48:55.863"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:55.864" starttime="20170615 05:48:55.598"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:55.864" starttime="20170615 05:48:55.597"></status>
</kw>
<status status="PASS" endtime="20170615 05:48:55.864" starttime="20170615 05:48:55.597"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:48:55.864" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:48:55.864" starttime="20170615 05:48:55.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:48:55.865" starttime="20170615 05:48:55.865"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:48:55.977" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:48:55.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:55.977" starttime="20170615 05:48:55.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:48:55.978" starttime="20170615 05:48:55.978"></status>
</kw>
<msg timestamp="20170615 05:48:55.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:48:55.978" starttime="20170615 05:48:55.596"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:48:55.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:48:55.979" starttime="20170615 05:48:55.979"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:48:55.980" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:48:55.980" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:48:55.980" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170615 05:48:55.980" starttime="20170615 05:48:55.979"></status>
</kw>
<msg timestamp="20170615 05:48:55.980" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:48:55.980" starttime="20170615 05:48:55.596"></status>
</kw>
<msg timestamp="20170615 05:48:55.980" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170615 05:48:55.980" starttime="20170615 05:48:55.595"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:48:55.981" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:48:55.981" starttime="20170615 05:48:55.981"></status>
</kw>
<status status="FAIL" endtime="20170615 05:48:55.981" starttime="20170615 05:48:55.595"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:49:05.986" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:49:05.987" starttime="20170615 05:49:05.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:49:05.988" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:49:05.988" starttime="20170615 05:49:05.988"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:49:05.988" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:49:05.989" starttime="20170615 05:49:05.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:49:05.989" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:49:05.989" starttime="20170615 05:49:05.989"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:49:06.169" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:49:06.169" starttime="20170615 05:49:05.990"></status>
</kw>
<msg timestamp="20170615 05:49:06.169" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:49:06.169" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:06.169" starttime="20170615 05:49:05.989"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:49:06.170" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:06.170" starttime="20170615 05:49:06.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:49:06.171" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:06.171" starttime="20170615 05:49:06.170"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:06.171" starttime="20170615 05:49:05.985"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:06.171" starttime="20170615 05:49:05.985"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:06.172" starttime="20170615 05:49:05.984"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:49:06.172" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:49:06.172" starttime="20170615 05:49:06.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:49:06.173" starttime="20170615 05:49:06.172"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:49:06.261" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:49:06.261" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:06.262" starttime="20170615 05:49:06.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:49:06.262" starttime="20170615 05:49:06.262"></status>
</kw>
<msg timestamp="20170615 05:49:06.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:06.262" starttime="20170615 05:49:05.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:49:06.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:06.263" starttime="20170615 05:49:06.263"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:49:06.264" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 4%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:49:06.264" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:49:06.264" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 4%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/s...</msg>
<status status="PASS" endtime="20170615 05:49:06.264" starttime="20170615 05:49:06.263"></status>
</kw>
<msg timestamp="20170615 05:49:06.264" level="INFO">${data} = {u'status': u'Flashing: 4%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:49:06.264" starttime="20170615 05:49:05.983"></status>
</kw>
<msg timestamp="20170615 05:49:06.265" level="INFO">${status} = Flashing: 4%</msg>
<status status="PASS" endtime="20170615 05:49:06.265" starttime="20170615 05:49:05.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:49:06.265" level="FAIL">Flashing: 4% != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:49:06.265" starttime="20170615 05:49:06.265"></status>
</kw>
<status status="FAIL" endtime="20170615 05:49:06.266" starttime="20170615 05:49:05.982"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:49:16.271" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:49:16.272" starttime="20170615 05:49:16.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:49:16.272" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:49:16.272" starttime="20170615 05:49:16.272"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:49:16.273" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:49:16.273" starttime="20170615 05:49:16.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:49:16.274" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:49:16.274" starttime="20170615 05:49:16.273"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:49:16.452" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:49:16.452" starttime="20170615 05:49:16.274"></status>
</kw>
<msg timestamp="20170615 05:49:16.452" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:49:16.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:16.453" starttime="20170615 05:49:16.274"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:49:16.453" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:16.453" starttime="20170615 05:49:16.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:49:16.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:16.454" starttime="20170615 05:49:16.454"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:16.454" starttime="20170615 05:49:16.270"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:16.454" starttime="20170615 05:49:16.269"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:16.454" starttime="20170615 05:49:16.269"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:49:16.455" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:49:16.455" starttime="20170615 05:49:16.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:49:16.456" starttime="20170615 05:49:16.455"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:49:16.538" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:49:16.538" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:16.538" starttime="20170615 05:49:16.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:49:16.539" starttime="20170615 05:49:16.538"></status>
</kw>
<msg timestamp="20170615 05:49:16.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:16.539" starttime="20170615 05:49:16.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:49:16.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:16.540" starttime="20170615 05:49:16.539"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:49:16.540" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 16%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:49:16.540" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:49:16.541" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 16%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/...</msg>
<status status="PASS" endtime="20170615 05:49:16.541" starttime="20170615 05:49:16.540"></status>
</kw>
<msg timestamp="20170615 05:49:16.541" level="INFO">${data} = {u'status': u'Flashing: 16%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:49:16.541" starttime="20170615 05:49:16.267"></status>
</kw>
<msg timestamp="20170615 05:49:16.541" level="INFO">${status} = Flashing: 16%</msg>
<status status="PASS" endtime="20170615 05:49:16.541" starttime="20170615 05:49:16.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:49:16.542" level="FAIL">Flashing: 16% != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:49:16.542" starttime="20170615 05:49:16.542"></status>
</kw>
<status status="FAIL" endtime="20170615 05:49:16.542" starttime="20170615 05:49:16.266"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:49:26.547" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:49:26.548" starttime="20170615 05:49:26.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:49:26.548" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:49:26.548" starttime="20170615 05:49:26.548"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:49:26.549" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:49:26.549" starttime="20170615 05:49:26.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:49:26.550" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:49:26.550" starttime="20170615 05:49:26.549"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:49:26.727" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:49:26.727" starttime="20170615 05:49:26.550"></status>
</kw>
<msg timestamp="20170615 05:49:26.727" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:49:26.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:26.727" starttime="20170615 05:49:26.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:49:26.728" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:26.728" starttime="20170615 05:49:26.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:49:26.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:26.729" starttime="20170615 05:49:26.728"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:26.729" starttime="20170615 05:49:26.546"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:26.729" starttime="20170615 05:49:26.545"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:26.729" starttime="20170615 05:49:26.545"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:49:26.730" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:49:26.730" starttime="20170615 05:49:26.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:49:26.730" starttime="20170615 05:49:26.730"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:49:26.813" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:49:26.813" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:26.813" starttime="20170615 05:49:26.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:49:26.814" starttime="20170615 05:49:26.813"></status>
</kw>
<msg timestamp="20170615 05:49:26.814" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:26.814" starttime="20170615 05:49:26.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:49:26.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:26.814" starttime="20170615 05:49:26.814"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:49:26.815" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 30%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:49:26.815" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:49:26.815" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 30%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/...</msg>
<status status="PASS" endtime="20170615 05:49:26.815" starttime="20170615 05:49:26.815"></status>
</kw>
<msg timestamp="20170615 05:49:26.815" level="INFO">${data} = {u'status': u'Flashing: 30%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:49:26.816" starttime="20170615 05:49:26.544"></status>
</kw>
<msg timestamp="20170615 05:49:26.816" level="INFO">${status} = Flashing: 30%</msg>
<status status="PASS" endtime="20170615 05:49:26.816" starttime="20170615 05:49:26.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:49:26.816" level="FAIL">Flashing: 30% != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:49:26.817" starttime="20170615 05:49:26.816"></status>
</kw>
<status status="FAIL" endtime="20170615 05:49:26.817" starttime="20170615 05:49:26.543"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:49:36.822" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:49:36.823" starttime="20170615 05:49:36.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:49:36.824" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:49:36.824" starttime="20170615 05:49:36.824"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:49:36.825" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:49:36.825" starttime="20170615 05:49:36.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:49:36.826" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:49:36.826" starttime="20170615 05:49:36.825"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:49:37.006" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:49:37.006" starttime="20170615 05:49:36.826"></status>
</kw>
<msg timestamp="20170615 05:49:37.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:49:37.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:37.006" starttime="20170615 05:49:36.826"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:49:37.007" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:37.007" starttime="20170615 05:49:37.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:49:37.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:37.008" starttime="20170615 05:49:37.007"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:37.008" starttime="20170615 05:49:36.821"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:37.008" starttime="20170615 05:49:36.821"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:37.008" starttime="20170615 05:49:36.820"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:49:37.009" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:49:37.009" starttime="20170615 05:49:37.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:49:37.010" starttime="20170615 05:49:37.009"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:49:37.093" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:49:37.094" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:37.094" starttime="20170615 05:49:37.010"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:49:37.095" starttime="20170615 05:49:37.094"></status>
</kw>
<msg timestamp="20170615 05:49:37.095" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:37.095" starttime="20170615 05:49:36.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:49:37.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:37.096" starttime="20170615 05:49:37.095"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:49:37.096" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 45%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:49:37.096" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:49:37.097" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 45%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/...</msg>
<status status="PASS" endtime="20170615 05:49:37.097" starttime="20170615 05:49:37.096"></status>
</kw>
<msg timestamp="20170615 05:49:37.097" level="INFO">${data} = {u'status': u'Flashing: 45%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:49:37.097" starttime="20170615 05:49:36.819"></status>
</kw>
<msg timestamp="20170615 05:49:37.097" level="INFO">${status} = Flashing: 45%</msg>
<status status="PASS" endtime="20170615 05:49:37.097" starttime="20170615 05:49:36.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:49:37.098" level="FAIL">Flashing: 45% != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:49:37.098" starttime="20170615 05:49:37.098"></status>
</kw>
<status status="FAIL" endtime="20170615 05:49:37.098" starttime="20170615 05:49:36.817"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:49:47.104" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:49:47.104" starttime="20170615 05:49:47.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:49:47.105" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:49:47.105" starttime="20170615 05:49:47.105"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:49:47.106" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:49:47.106" starttime="20170615 05:49:47.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:49:47.106" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:49:47.106" starttime="20170615 05:49:47.106"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:49:48.717" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:49:48.717" starttime="20170615 05:49:47.107"></status>
</kw>
<msg timestamp="20170615 05:49:48.718" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:49:48.718" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:48.718" starttime="20170615 05:49:47.107"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:49:48.718" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:48.719" starttime="20170615 05:49:48.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:49:48.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:48.719" starttime="20170615 05:49:48.719"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:48.719" starttime="20170615 05:49:47.102"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:48.719" starttime="20170615 05:49:47.102"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:48.720" starttime="20170615 05:49:47.101"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:49:48.720" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:49:48.720" starttime="20170615 05:49:48.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:49:48.721" starttime="20170615 05:49:48.720"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:49:48.873" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:49:48.873" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:48.873" starttime="20170615 05:49:48.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:49:48.874" starttime="20170615 05:49:48.874"></status>
</kw>
<msg timestamp="20170615 05:49:48.875" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:48.875" starttime="20170615 05:49:47.101"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:49:48.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:48.875" starttime="20170615 05:49:48.875"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:49:48.876" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 61%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:49:48.876" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:49:48.876" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 61%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/...</msg>
<status status="PASS" endtime="20170615 05:49:48.876" starttime="20170615 05:49:48.875"></status>
</kw>
<msg timestamp="20170615 05:49:48.876" level="INFO">${data} = {u'status': u'Flashing: 61%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:49:48.876" starttime="20170615 05:49:47.100"></status>
</kw>
<msg timestamp="20170615 05:49:48.877" level="INFO">${status} = Flashing: 61%</msg>
<status status="PASS" endtime="20170615 05:49:48.877" starttime="20170615 05:49:47.100"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:49:48.877" level="FAIL">Flashing: 61% != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:49:48.877" starttime="20170615 05:49:48.877"></status>
</kw>
<status status="FAIL" endtime="20170615 05:49:48.878" starttime="20170615 05:49:47.099"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:49:58.883" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:49:58.883" starttime="20170615 05:49:58.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:49:58.884" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:49:58.884" starttime="20170615 05:49:58.884"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:49:58.884" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:49:58.885" starttime="20170615 05:49:58.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:49:58.885" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:49:58.885" starttime="20170615 05:49:58.885"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:49:59.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:49:59.062" starttime="20170615 05:49:58.886"></status>
</kw>
<msg timestamp="20170615 05:49:59.062" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:49:59.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:59.062" starttime="20170615 05:49:58.885"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:49:59.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:59.063" starttime="20170615 05:49:59.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:49:59.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:59.064" starttime="20170615 05:49:59.063"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:59.064" starttime="20170615 05:49:58.882"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:59.064" starttime="20170615 05:49:58.881"></status>
</kw>
<status status="PASS" endtime="20170615 05:49:59.064" starttime="20170615 05:49:58.880"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:49:59.065" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:49:59.065" starttime="20170615 05:49:59.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:49:59.066" starttime="20170615 05:49:59.065"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:49:59.155" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:49:59.155" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:59.155" starttime="20170615 05:49:59.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:49:59.156" starttime="20170615 05:49:59.155"></status>
</kw>
<msg timestamp="20170615 05:49:59.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:49:59.156" starttime="20170615 05:49:58.880"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:49:59.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:49:59.157" starttime="20170615 05:49:59.156"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:49:59.157" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 26%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:49:59.157" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:49:59.157" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 26%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/...</msg>
<status status="PASS" endtime="20170615 05:49:59.157" starttime="20170615 05:49:59.157"></status>
</kw>
<msg timestamp="20170615 05:49:59.158" level="INFO">${data} = {u'status': u'Flashing: 26%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:49:59.158" starttime="20170615 05:49:58.879"></status>
</kw>
<msg timestamp="20170615 05:49:59.158" level="INFO">${status} = Flashing: 26%</msg>
<status status="PASS" endtime="20170615 05:49:59.158" starttime="20170615 05:49:58.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170615 05:49:59.159" level="FAIL">Flashing: 26% != Flash Done</msg>
<status status="FAIL" endtime="20170615 05:49:59.159" starttime="20170615 05:49:59.158"></status>
</kw>
<status status="FAIL" endtime="20170615 05:49:59.159" starttime="20170615 05:49:58.878"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:09.164" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:09.165" starttime="20170615 05:50:09.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:09.165" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:09.165" starttime="20170615 05:50:09.165"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:09.166" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:09.166" starttime="20170615 05:50:09.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:09.167" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:09.167" starttime="20170615 05:50:09.166"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:09.390" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:09.390" starttime="20170615 05:50:09.168"></status>
</kw>
<msg timestamp="20170615 05:50:09.390" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:09.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:09.408" starttime="20170615 05:50:09.167"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:09.409" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:09.409" starttime="20170615 05:50:09.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:09.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:09.410" starttime="20170615 05:50:09.410"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:09.411" starttime="20170615 05:50:09.163"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:09.411" starttime="20170615 05:50:09.163"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:09.411" starttime="20170615 05:50:09.162"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:09.411" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170615 05:50:09.411" starttime="20170615 05:50:09.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:09.412" starttime="20170615 05:50:09.412"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:09.495" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170615 05:50:09.495" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:09.495" starttime="20170615 05:50:09.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:09.496" starttime="20170615 05:50:09.495"></status>
</kw>
<msg timestamp="20170615 05:50:09.496" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:09.496" starttime="20170615 05:50:09.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:09.497" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:09.497" starttime="20170615 05:50:09.496"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:09.497" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flash Done"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:09.497" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:09.497" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flash Done', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbi...</msg>
<status status="PASS" endtime="20170615 05:50:09.497" starttime="20170615 05:50:09.497"></status>
</kw>
<msg timestamp="20170615 05:50:09.498" level="INFO">${data} = {u'status': u'Flash Done', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170615 05:50:09.498" starttime="20170615 05:50:09.161"></status>
</kw>
<msg timestamp="20170615 05:50:09.498" level="INFO">${status} = Flash Done</msg>
<status status="PASS" endtime="20170615 05:50:09.498" starttime="20170615 05:50:09.160"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:09.499" starttime="20170615 05:50:09.498"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:09.499" starttime="20170615 05:50:09.160"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:09.499" starttime="20170615 05:46:38.205"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:09.499" starttime="20170615 05:46:38.198"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:09.499" starttime="20170615 05:46:05.614"></status>
</kw>
<kw name="Verify PNOR Update" library="utils">
<doc>Verify that the PNOR is not corrupted.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170615 05:50:09.501" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170615 05:50:09.501" starttime="20170615 05:50:09.501"></status>
</kw>
<msg timestamp="20170615 05:50:09.501" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170615 05:50:09.501" starttime="20170615 05:50:09.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:09.503" starttime="20170615 05:50:09.502"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:09.503" starttime="20170615 05:50:09.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:09.504" starttime="20170615 05:50:09.504"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170615 05:50:09.505" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170615 05:50:09.505" starttime="20170615 05:50:09.505"></status>
</kw>
<msg timestamp="20170615 05:50:09.505" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170615 05:50:09.505" starttime="20170615 05:50:09.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:09.509" starttime="20170615 05:50:09.508"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:09.509" starttime="20170615 05:50:09.507"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:09.509" starttime="20170615 05:50:09.506"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170615 05:50:09.510" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170615 05:50:11.221" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170615 05:50:11.222" starttime="20170615 05:50:09.510"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:11.222" starttime="20170615 05:50:09.500"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${pflash_cmd}</arg>
</arguments>
<assign>
<var>${pnor_info}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170615 05:50:11.223" level="INFO">Executing command '/usr/sbin/pflash -r /dev/stdout -P VERSION'.</msg>
<msg timestamp="20170615 05:50:11.319" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170615 05:50:11.319" level="INFO">${stdout} = Reading to "/dev/stdout" from 0x027e0000..0x027e1000 !
[                                                  ] 0%IBM-witherspoon-ibm-OP9_v1.17_1.20
	op-build-v1.16-87-g5e69953-dirty
	buildroot-2017.02.2...</msg>
<msg timestamp="20170615 05:50:11.320" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170615 05:50:11.320" starttime="20170615 05:50:11.223"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170615 05:50:11.320" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170615 05:50:11.320" starttime="20170615 05:50:11.320"></status>
</kw>
<msg timestamp="20170615 05:50:11.321" level="INFO">${pnor_info} = Reading to "/dev/stdout" from 0x027e0000..0x027e1000 !
[                                                  ] 0%IBM-witherspoon-ibm-OP9_v1.17_1.20
	op-build-v1.16-87-g5e69953-dirty
	buildroot-2017.02.2...</msg>
<status status="PASS" endtime="20170615 05:50:11.321" starttime="20170615 05:50:11.222"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${pnor_info}</arg>
<arg>Flash header not found</arg>
<arg>Error</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.321" starttime="20170615 05:50:11.321"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:11.321" starttime="20170615 05:50:09.499"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170615 05:50:11.323" starttime="20170615 05:50:11.322"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:11.336" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:11.336" starttime="20170615 05:50:11.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:11.337" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:11.338" starttime="20170615 05:50:11.337"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:11.338" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:11.338" starttime="20170615 05:50:11.338"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:11.339" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:11.339" starttime="20170615 05:50:11.339"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:11.534" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:11.535" starttime="20170615 05:50:11.340"></status>
</kw>
<msg timestamp="20170615 05:50:11.535" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:11.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:11.535" starttime="20170615 05:50:11.339"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:11.536" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:11.536" starttime="20170615 05:50:11.535"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:11.536" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:11.536" starttime="20170615 05:50:11.536"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:11.537" starttime="20170615 05:50:11.335"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:11.537" starttime="20170615 05:50:11.335"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:11.537" starttime="20170615 05:50:11.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:11.537" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:50:11.537" starttime="20170615 05:50:11.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.538" starttime="20170615 05:50:11.538"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:11.601" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:11.601" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:11.601" starttime="20170615 05:50:11.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.602" starttime="20170615 05:50:11.602"></status>
</kw>
<msg timestamp="20170615 05:50:11.602" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:11.602" starttime="20170615 05:50:11.333"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:11.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:11.603" starttime="20170615 05:50:11.603"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:11.604" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:11.604" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:11.604" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170615 05:50:11.604" starttime="20170615 05:50:11.603"></status>
</kw>
<msg timestamp="20170615 05:50:11.604" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170615 05:50:11.604" starttime="20170615 05:50:11.332"></status>
</kw>
<msg timestamp="20170615 05:50:11.605" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170615 05:50:11.605" starttime="20170615 05:50:11.332"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170615 05:50:11.606" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170615 05:50:11.606" starttime="20170615 05:50:11.605"></status>
</kw>
<msg timestamp="20170615 05:50:11.606" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170615 05:50:11.606" starttime="20170615 05:50:11.605"></status>
</kw>
<msg timestamp="20170615 05:50:11.606" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170615 05:50:11.606" starttime="20170615 05:50:11.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.607" starttime="20170615 05:50:11.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.607" starttime="20170615 05:50:11.607"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170615 05:50:11.609" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170615 05:50:11.609" starttime="20170615 05:50:11.608"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170615 05:50:11.609" level="INFO">${FFDC_DIR_PATH} = ./</msg>
<status status="PASS" endtime="20170615 05:50:11.609" starttime="20170615 05:50:11.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.610" starttime="20170615 05:50:11.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.611" starttime="20170615 05:50:11.610"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170615 05:50:11.611" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170615 05:50:11.611" starttime="20170615 05:50:11.611"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170615 05:50:11.615" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170615 05:50:11.615" starttime="20170615 05:50:11.615"></status>
</kw>
<msg timestamp="20170615 05:50:11.615" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170615 05:50:11.615" starttime="20170615 05:50:11.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.616" starttime="20170615 05:50:11.616"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.617" starttime="20170615 05:50:11.616"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170615 05:50:11.619" level="INFO">${cur_time} = 2017-06-15 05:50:11:618267</msg>
<status status="PASS" endtime="20170615 05:50:11.619" starttime="20170615 05:50:11.618"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170615 05:50:11.619" level="INFO">${cur_time} = 20170615055011618267</msg>
<status status="PASS" endtime="20170615 05:50:11.620" starttime="20170615 05:50:11.619"></status>
</kw>
<msg timestamp="20170615 05:50:11.620" level="INFO">${cur_time} = 20170615055011618267</msg>
<status status="PASS" endtime="20170615 05:50:11.620" starttime="20170615 05:50:11.617"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170615 05:50:11.621" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170615 05:50:11.621" starttime="20170615 05:50:11.620"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:11.621" starttime="20170615 05:50:11.608"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:11.621" starttime="20170615 05:50:11.331"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:11.622" starttime="20170615 05:50:11.323"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:11.622" starttime="20170615 05:50:11.322"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170615 05:50:11.622" critical="yes" starttime="20170615 05:45:47.347"></status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<kw name="Validate Power On">
<doc>Power the host on, and validate that the sytem booted.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Start SOL Console Logging</arg>
</arguments>
<kw name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170615 05:50:11.637" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170615 05:50:11.637" starttime="20170615 05:50:11.637"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170615 05:50:11.638" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170615 05:50:11.638" starttime="20170615 05:50:11.638"></status>
</kw>
<msg timestamp="20170615 05:50:11.639" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170615 05:50:11.639" starttime="20170615 05:50:11.636"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170615 05:50:11.640" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170615 05:50:11.640" starttime="20170615 05:50:11.640"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170615 05:50:11.641" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170615 05:50:11.641" starttime="20170615 05:50:11.641"></status>
</kw>
<msg timestamp="20170615 05:50:11.641" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170615 05:50:11.641" starttime="20170615 05:50:11.639"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170615 05:50:11.642" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170615 05:50:11.642" starttime="20170615 05:50:11.642"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.644" starttime="20170615 05:50:11.643"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170615 05:50:11.653" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170615 05:50:11.662" level="INFO">${rc} = 0</msg>
<msg timestamp="20170615 05:50:11.663" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170615 05:50:11.663" starttime="20170615 05:50:11.644"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.680" starttime="20170615 05:50:11.675"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.682" starttime="20170615 05:50:11.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170615 05:50:11.690" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170615 05:50:11.690" starttime="20170615 05:50:11.683"></status>
</kw>
<msg timestamp="20170615 05:50:11.691" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170615 05:50:11.691" starttime="20170615 05:50:11.641"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170615 05:50:11.692" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170615 05:50:11.692" starttime="20170615 05:50:11.692"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.693" starttime="20170615 05:50:11.693"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170615 05:50:11.698" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170615 05:50:11.717" level="INFO">${rc} = 0</msg>
<msg timestamp="20170615 05:50:11.717" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170615 05:50:11.717" starttime="20170615 05:50:11.694"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.720" starttime="20170615 05:50:11.719"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170615 05:50:11.720" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170615 05:50:11.721" starttime="20170615 05:50:11.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.722" starttime="20170615 05:50:11.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170615 05:50:11.723" level="INFO">${rc} = None</msg>
<msg timestamp="20170615 05:50:11.723" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170615 05:50:11.723" starttime="20170615 05:50:11.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.724" starttime="20170615 05:50:11.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.725" starttime="20170615 05:50:11.725"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170615 05:50:11.726" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170615 05:50:11.726" starttime="20170615 05:50:11.725"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170615 05:50:11.726" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170615 05:50:11.726" starttime="20170615 05:50:11.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.764" starttime="20170615 05:50:11.727"></status>
</kw>
<msg timestamp="20170615 05:50:11.765" level="INFO">${rc} = 1</msg>
<msg timestamp="20170615 05:50:11.765" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170615 05:50:11.765" starttime="20170615 05:50:11.727"></status>
</kw>
<msg timestamp="20170615 05:50:11.766" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170615 05:50:11.766" starttime="20170615 05:50:11.639"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170615 05:50:11.772" html="yes" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170615 05:50:11.773" starttime="20170615 05:50:11.771"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170615 05:50:11.775" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170615 05:50:11.775" starttime="20170615 05:50:11.775"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.776" starttime="20170615 05:50:11.776"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170615 05:50:11.782" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170615 05:50:11.801" level="INFO">${rc} = 0</msg>
<msg timestamp="20170615 05:50:11.801" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170615 05:50:11.801" starttime="20170615 05:50:11.776"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.805" starttime="20170615 05:50:11.804"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.806" starttime="20170615 05:50:11.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170615 05:50:11.806" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170615 05:50:11.806" starttime="20170615 05:50:11.806"></status>
</kw>
<msg timestamp="20170615 05:50:11.807" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170615 05:50:11.807" starttime="20170615 05:50:11.773"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170615 05:50:11.808" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" endtime="20170615 05:50:11.808" starttime="20170615 05:50:11.807"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.808" starttime="20170615 05:50:11.808"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170615 05:50:11.812" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170615 05:50:11.817" level="INFO">${rc} = 0</msg>
<msg timestamp="20170615 05:50:11.818" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170615 05:50:11.818" starttime="20170615 05:50:11.809"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:11.823" starttime="20170615 05:50:11.821"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:11.823" starttime="20170615 05:50:11.636"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:11.824" starttime="20170615 05:50:11.626"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power On</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power On</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170615 05:50:11.832" level="INFO">${boot_stack} = REST Power On</msg>
<msg timestamp="20170615 05:50:12.113" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170615 05:50:12.132" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170615 05:50:12.132" starttime="20170615 05:50:12.131"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:12.133" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170615 05:50:12.133" starttime="20170615 05:50:12.133"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:12.136" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:12.139" starttime="20170615 05:50:12.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:12.139" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:12.139" starttime="20170615 05:50:12.139"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:12.140" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:12.140" starttime="20170615 05:50:12.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:12.141" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:12.141" starttime="20170615 05:50:12.140"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:12.519" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:12.519" starttime="20170615 05:50:12.141"></status>
</kw>
<msg timestamp="20170615 05:50:12.519" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:12.519" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:12.519" starttime="20170615 05:50:12.141"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:12.520" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:12.520" starttime="20170615 05:50:12.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:12.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:12.521" starttime="20170615 05:50:12.520"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:12.521" starttime="20170615 05:50:12.135"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:12.521" starttime="20170615 05:50:12.135"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:12.521" starttime="20170615 05:50:12.134"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:12.522" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170615 05:50:12.522" starttime="20170615 05:50:12.521"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:12.522" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:12.522" starttime="20170615 05:50:12.522"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:12.523" starttime="20170615 05:50:12.523"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170615 05:50:12.524" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170615 05:50:12.525" starttime="20170615 05:50:12.524"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170615 05:50:12.525" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170615 05:50:12.526" starttime="20170615 05:50:12.525"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:12.526" starttime="20170615 05:50:12.525"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:12.526" starttime="20170615 05:50:12.523"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:12.903" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170615 05:50:12.903" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:12.903" starttime="20170615 05:50:12.526"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170615 05:50:12.904" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170615 05:50:12.904" starttime="20170615 05:50:12.904"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170615 05:50:12.905" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170615 05:50:12.905" starttime="20170615 05:50:12.905"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:12.906" starttime="20170615 05:50:12.904"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:12.906" starttime="20170615 05:50:12.903"></status>
</kw>
<msg timestamp="20170615 05:50:12.906" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:12.906" starttime="20170615 05:50:12.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:12.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:12.907" starttime="20170615 05:50:12.907"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170615 05:50:12.908" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:12.908" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:12.908" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170615 05:50:12.908" starttime="20170615 05:50:12.908"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:12.908" starttime="20170615 05:50:12.132"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:12.912" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:12.912" starttime="20170615 05:50:12.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:12.913" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:12.913" starttime="20170615 05:50:12.912"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:12.913" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:12.913" starttime="20170615 05:50:12.913"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:12.914" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:12.914" starttime="20170615 05:50:12.914"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:13.090" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:13.090" starttime="20170615 05:50:12.915"></status>
</kw>
<msg timestamp="20170615 05:50:13.090" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:13.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:13.090" starttime="20170615 05:50:12.914"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:13.091" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:13.091" starttime="20170615 05:50:13.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:13.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:13.092" starttime="20170615 05:50:13.091"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:13.092" starttime="20170615 05:50:12.911"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:13.092" starttime="20170615 05:50:12.910"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:13.092" starttime="20170615 05:50:12.910"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:13.093" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170615 05:50:13.093" starttime="20170615 05:50:13.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:13.093" starttime="20170615 05:50:13.093"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:13.178" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170615 05:50:13.178" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:13.178" starttime="20170615 05:50:13.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:13.179" starttime="20170615 05:50:13.178"></status>
</kw>
<msg timestamp="20170615 05:50:13.179" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:13.179" starttime="20170615 05:50:12.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:13.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:13.179" starttime="20170615 05:50:13.179"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:13.180" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:13.180" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:13.180" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170615 05:50:13.180" starttime="20170615 05:50:13.180"></status>
</kw>
<msg timestamp="20170615 05:50:13.180" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170615 05:50:13.181" starttime="20170615 05:50:12.908"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170615 05:50:13.181" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:13.181" starttime="20170615 05:50:13.181"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:13.181" starttime="20170615 05:50:12.129"></status>
</kw>
<msg timestamp="20170615 05:50:13.196" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170615 05:50:13.200" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170615 05:50:13.201" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170615 05:50:13.201" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170615 05:50:13.204" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170615 05:50:13.204" starttime="20170615 05:50:13.204"></status>
</kw>
<msg timestamp="20170615 05:50:13.204" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170615 05:50:13.205" starttime="20170615 05:50:13.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:13.206" starttime="20170615 05:50:13.206"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:13.206" starttime="20170615 05:50:13.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:13.207" starttime="20170615 05:50:13.207"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170615 05:50:13.209" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170615 05:50:13.209" starttime="20170615 05:50:13.208"></status>
</kw>
<msg timestamp="20170615 05:50:13.209" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170615 05:50:13.209" starttime="20170615 05:50:13.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:13.211" starttime="20170615 05:50:13.211"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:13.212" starttime="20170615 05:50:13.210"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:13.212" starttime="20170615 05:50:13.209"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170615 05:50:13.212" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170615 05:50:14.965" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170615 05:50:14.965" starttime="20170615 05:50:13.212"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:14.966" starttime="20170615 05:50:13.202"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:15.034" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:15.035" starttime="20170615 05:50:15.033"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:15.036" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:15.036" starttime="20170615 05:50:15.036"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:15.037" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:15.037" starttime="20170615 05:50:15.037"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:15.038" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:15.038" starttime="20170615 05:50:15.038"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:15.217" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:15.217" starttime="20170615 05:50:15.039"></status>
</kw>
<msg timestamp="20170615 05:50:15.217" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:15.217" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.218" starttime="20170615 05:50:15.039"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:15.218" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.218" starttime="20170615 05:50:15.218"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:15.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.219" starttime="20170615 05:50:15.219"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:15.219" starttime="20170615 05:50:15.033"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:15.219" starttime="20170615 05:50:15.032"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:15.219" starttime="20170615 05:50:15.031"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:15.220" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:50:15.220" starttime="20170615 05:50:15.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:15.221" starttime="20170615 05:50:15.220"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:15.283" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:15.283" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.283" starttime="20170615 05:50:15.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:15.283" starttime="20170615 05:50:15.283"></status>
</kw>
<msg timestamp="20170615 05:50:15.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.284" starttime="20170615 05:50:15.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:15.284" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.285" starttime="20170615 05:50:15.284"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:15.285" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:15.285" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:15.285" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170615 05:50:15.286" starttime="20170615 05:50:15.285"></status>
</kw>
<msg timestamp="20170615 05:50:15.286" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170615 05:50:15.286" starttime="20170615 05:50:15.029"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:15.286" starttime="20170615 05:50:15.019"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:15.290" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:15.290" starttime="20170615 05:50:15.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:15.291" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:15.291" starttime="20170615 05:50:15.291"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:15.292" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:15.292" starttime="20170615 05:50:15.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:15.292" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:15.292" starttime="20170615 05:50:15.292"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:15.474" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:15.474" starttime="20170615 05:50:15.293"></status>
</kw>
<msg timestamp="20170615 05:50:15.474" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:15.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.474" starttime="20170615 05:50:15.293"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:15.475" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.475" starttime="20170615 05:50:15.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:15.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.476" starttime="20170615 05:50:15.475"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:15.476" starttime="20170615 05:50:15.289"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:15.476" starttime="20170615 05:50:15.289"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:15.476" starttime="20170615 05:50:15.288"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:15.477" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170615 05:50:15.477" starttime="20170615 05:50:15.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:15.477" starttime="20170615 05:50:15.477"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:15.540" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:15.540" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.540" starttime="20170615 05:50:15.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:15.541" starttime="20170615 05:50:15.540"></status>
</kw>
<msg timestamp="20170615 05:50:15.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.541" starttime="20170615 05:50:15.287"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:15.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.542" starttime="20170615 05:50:15.542"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:15.543" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:15.543" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:15.543" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170615 05:50:15.543" starttime="20170615 05:50:15.543"></status>
</kw>
<msg timestamp="20170615 05:50:15.544" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170615 05:50:15.544" starttime="20170615 05:50:15.287"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:15.544" starttime="20170615 05:50:15.287"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:15.549" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:15.550" starttime="20170615 05:50:15.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:15.551" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:15.551" starttime="20170615 05:50:15.550"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:15.552" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:15.552" starttime="20170615 05:50:15.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:15.553" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:15.553" starttime="20170615 05:50:15.552"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:15.816" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:15.816" starttime="20170615 05:50:15.554"></status>
</kw>
<msg timestamp="20170615 05:50:15.817" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:15.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.817" starttime="20170615 05:50:15.553"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:15.817" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.817" starttime="20170615 05:50:15.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:15.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.818" starttime="20170615 05:50:15.818"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:15.818" starttime="20170615 05:50:15.548"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:15.819" starttime="20170615 05:50:15.547"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:15.819" starttime="20170615 05:50:15.547"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:15.819" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:50:15.819" starttime="20170615 05:50:15.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:15.820" starttime="20170615 05:50:15.820"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:15.922" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:50:15.922" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.922" starttime="20170615 05:50:15.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:15.923" starttime="20170615 05:50:15.923"></status>
</kw>
<msg timestamp="20170615 05:50:15.923" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.923" starttime="20170615 05:50:15.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:15.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:15.924" starttime="20170615 05:50:15.924"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:15.925" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:15.925" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:15.925" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170615 05:50:15.925" starttime="20170615 05:50:15.924"></status>
</kw>
<msg timestamp="20170615 05:50:15.925" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170615 05:50:15.925" starttime="20170615 05:50:15.545"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:15.925" starttime="20170615 05:50:15.544"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:15.930" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:15.931" starttime="20170615 05:50:15.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:15.931" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:15.932" starttime="20170615 05:50:15.931"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:15.932" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:15.932" starttime="20170615 05:50:15.932"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:15.933" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:15.933" starttime="20170615 05:50:15.933"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:16.111" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:16.111" starttime="20170615 05:50:15.934"></status>
</kw>
<msg timestamp="20170615 05:50:16.111" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:16.111" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:16.112" starttime="20170615 05:50:15.934"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:16.112" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:16.112" starttime="20170615 05:50:16.112"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:16.113" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:16.113" starttime="20170615 05:50:16.113"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.113" starttime="20170615 05:50:15.929"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.113" starttime="20170615 05:50:15.928"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.113" starttime="20170615 05:50:15.927"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:16.114" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:50:16.114" starttime="20170615 05:50:16.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:16.115" starttime="20170615 05:50:16.114"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:16.177" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:16.177" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:16.177" starttime="20170615 05:50:16.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:16.177" starttime="20170615 05:50:16.177"></status>
</kw>
<msg timestamp="20170615 05:50:16.178" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:16.178" starttime="20170615 05:50:15.927"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:16.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:16.178" starttime="20170615 05:50:16.178"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:16.179" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:16.179" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:16.179" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170615 05:50:16.179" starttime="20170615 05:50:16.179"></status>
</kw>
<msg timestamp="20170615 05:50:16.179" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170615 05:50:16.180" starttime="20170615 05:50:15.926"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.180" starttime="20170615 05:50:15.926"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>REST Power On</arg>
</arguments>
<msg timestamp="20170615 05:50:16.191" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170615 05:50:16.206" level="INFO">${QUIET} = 1</msg>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<arguments>
<arg>wait=${0}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170615 05:50:16.207" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" endtime="20170615 05:50:16.208" starttime="20170615 05:50:16.207"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:16.209" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170615 05:50:16.209" starttime="20170615 05:50:16.208"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:16.212" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:16.212" starttime="20170615 05:50:16.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:16.213" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:16.213" starttime="20170615 05:50:16.213"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:16.214" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:16.214" starttime="20170615 05:50:16.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:16.215" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:16.215" starttime="20170615 05:50:16.214"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:16.391" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:16.391" starttime="20170615 05:50:16.215"></status>
</kw>
<msg timestamp="20170615 05:50:16.391" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:16.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:16.391" starttime="20170615 05:50:16.215"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:16.392" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:16.392" starttime="20170615 05:50:16.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:16.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:16.393" starttime="20170615 05:50:16.393"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.393" starttime="20170615 05:50:16.211"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.393" starttime="20170615 05:50:16.210"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.393" starttime="20170615 05:50:16.210"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:16.394" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170615 05:50:16.394" starttime="20170615 05:50:16.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:16.395" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:16.395" starttime="20170615 05:50:16.394"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:16.395" starttime="20170615 05:50:16.395"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170615 05:50:16.397" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type'...</msg>
<status status="PASS" endtime="20170615 05:50:16.397" starttime="20170615 05:50:16.396"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170615 05:50:16.398" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170615 05:50:16.398" starttime="20170615 05:50:16.397"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.398" starttime="20170615 05:50:16.397"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.398" starttime="20170615 05:50:16.395"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:16.589" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170615 05:50:16.589" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:16.589" starttime="20170615 05:50:16.398"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170615 05:50:16.590" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170615 05:50:16.590" starttime="20170615 05:50:16.590"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170615 05:50:16.591" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170615 05:50:16.591" starttime="20170615 05:50:16.591"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.591" starttime="20170615 05:50:16.590"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.591" starttime="20170615 05:50:16.589"></status>
</kw>
<msg timestamp="20170615 05:50:16.592" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:16.592" starttime="20170615 05:50:16.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:16.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:16.593" starttime="20170615 05:50:16.592"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170615 05:50:16.593" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:16.593" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:16.593" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170615 05:50:16.593" starttime="20170615 05:50:16.593"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.593" starttime="20170615 05:50:16.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170615 05:50:16.594" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170615 05:50:16.595" starttime="20170615 05:50:16.594"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.595" starttime="20170615 05:50:16.594"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:16.595" starttime="20170615 05:50:16.207"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:16.612" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:16.612" starttime="20170615 05:50:16.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:16.613" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:16.613" starttime="20170615 05:50:16.612"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:16.613" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:16.614" starttime="20170615 05:50:16.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:16.614" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:16.614" starttime="20170615 05:50:16.614"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:17.667" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:17.667" starttime="20170615 05:50:16.615"></status>
</kw>
<msg timestamp="20170615 05:50:17.667" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:17.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:17.668" starttime="20170615 05:50:16.614"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:17.668" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:17.668" starttime="20170615 05:50:17.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:17.669" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:17.669" starttime="20170615 05:50:17.669"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:17.669" starttime="20170615 05:50:16.611"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:17.669" starttime="20170615 05:50:16.610"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:17.670" starttime="20170615 05:50:16.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:17.670" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:50:17.670" starttime="20170615 05:50:17.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:17.671" starttime="20170615 05:50:17.670"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:17.822" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:17.822" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:17.822" starttime="20170615 05:50:17.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:17.823" starttime="20170615 05:50:17.822"></status>
</kw>
<msg timestamp="20170615 05:50:17.823" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:17.823" starttime="20170615 05:50:16.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:17.824" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:17.824" starttime="20170615 05:50:17.823"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:17.824" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:17.824" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:17.824" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170615 05:50:17.824" starttime="20170615 05:50:17.824"></status>
</kw>
<msg timestamp="20170615 05:50:17.825" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170615 05:50:17.825" starttime="20170615 05:50:16.608"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:17.825" starttime="20170615 05:50:16.608"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:17.829" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:17.829" starttime="20170615 05:50:17.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:17.830" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:17.830" starttime="20170615 05:50:17.830"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:17.831" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:17.831" starttime="20170615 05:50:17.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:17.832" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:17.832" starttime="20170615 05:50:17.832"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:19.288" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:19.289" starttime="20170615 05:50:17.833"></status>
</kw>
<msg timestamp="20170615 05:50:19.289" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:19.289" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:19.289" starttime="20170615 05:50:17.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:19.290" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:19.290" starttime="20170615 05:50:19.289"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:19.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:19.291" starttime="20170615 05:50:19.290"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:19.291" starttime="20170615 05:50:17.828"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:19.291" starttime="20170615 05:50:17.828"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:19.291" starttime="20170615 05:50:17.827"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:19.292" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170615 05:50:19.292" starttime="20170615 05:50:19.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:19.292" starttime="20170615 05:50:19.292"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:23.361" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:23.361" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:23.361" starttime="20170615 05:50:19.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:23.362" starttime="20170615 05:50:23.362"></status>
</kw>
<msg timestamp="20170615 05:50:23.363" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:23.363" starttime="20170615 05:50:17.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:23.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:23.364" starttime="20170615 05:50:23.363"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:23.364" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:23.364" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:23.364" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170615 05:50:23.364" starttime="20170615 05:50:23.364"></status>
</kw>
<msg timestamp="20170615 05:50:23.365" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170615 05:50:23.365" starttime="20170615 05:50:17.826"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:23.365" starttime="20170615 05:50:17.825"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:23.369" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:23.369" starttime="20170615 05:50:23.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:23.370" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:23.370" starttime="20170615 05:50:23.369"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:23.370" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:23.370" starttime="20170615 05:50:23.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:23.371" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:23.371" starttime="20170615 05:50:23.371"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:23.966" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:23.966" starttime="20170615 05:50:23.372"></status>
</kw>
<msg timestamp="20170615 05:50:23.966" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:23.966" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:23.966" starttime="20170615 05:50:23.371"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:23.967" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:23.967" starttime="20170615 05:50:23.967"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:23.968" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:23.968" starttime="20170615 05:50:23.968"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:23.968" starttime="20170615 05:50:23.368"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:23.969" starttime="20170615 05:50:23.367"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:23.969" starttime="20170615 05:50:23.367"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:23.969" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:50:23.969" starttime="20170615 05:50:23.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:23.970" starttime="20170615 05:50:23.970"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:24.694" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:50:24.695" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:24.695" starttime="20170615 05:50:23.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:24.696" starttime="20170615 05:50:24.695"></status>
</kw>
<msg timestamp="20170615 05:50:24.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:24.696" starttime="20170615 05:50:23.366"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:24.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:24.697" starttime="20170615 05:50:24.697"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:24.698" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:24.698" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:24.698" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170615 05:50:24.698" starttime="20170615 05:50:24.697"></status>
</kw>
<msg timestamp="20170615 05:50:24.698" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170615 05:50:24.698" starttime="20170615 05:50:23.366"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:24.698" starttime="20170615 05:50:23.365"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:24.702" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:24.703" starttime="20170615 05:50:24.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:24.703" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:24.703" starttime="20170615 05:50:24.703"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:24.704" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:24.704" starttime="20170615 05:50:24.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:24.705" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:24.705" starttime="20170615 05:50:24.704"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:24.879" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:24.880" starttime="20170615 05:50:24.705"></status>
</kw>
<msg timestamp="20170615 05:50:24.880" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:24.880" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:24.880" starttime="20170615 05:50:24.705"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:24.881" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:24.881" starttime="20170615 05:50:24.880"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:24.881" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:24.881" starttime="20170615 05:50:24.881"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:24.881" starttime="20170615 05:50:24.701"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:24.882" starttime="20170615 05:50:24.701"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:24.882" starttime="20170615 05:50:24.700"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:24.882" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:50:24.882" starttime="20170615 05:50:24.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:24.883" starttime="20170615 05:50:24.883"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:25.411" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:25.412" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:25.412" starttime="20170615 05:50:24.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:25.413" starttime="20170615 05:50:25.412"></status>
</kw>
<msg timestamp="20170615 05:50:25.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:25.413" starttime="20170615 05:50:24.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:25.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:25.414" starttime="20170615 05:50:25.413"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:25.414" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:25.414" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:25.414" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170615 05:50:25.414" starttime="20170615 05:50:25.414"></status>
</kw>
<msg timestamp="20170615 05:50:25.415" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170615 05:50:25.415" starttime="20170615 05:50:24.699"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:25.415" starttime="20170615 05:50:24.699"></status>
</kw>
<msg timestamp="20170615 05:50:25.416" level="FAIL">
#(UTC) 2017/06/15 05:50:25.415562 -    9.228614 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170615 05:50:25.416" starttime="20170615 05:50:16.602"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:35.422" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:35.423" starttime="20170615 05:50:35.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:35.423" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:35.423" starttime="20170615 05:50:35.423"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:35.424" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:35.424" starttime="20170615 05:50:35.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:35.425" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:35.425" starttime="20170615 05:50:35.424"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:35.635" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:35.635" starttime="20170615 05:50:35.426"></status>
</kw>
<msg timestamp="20170615 05:50:35.635" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:35.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:35.635" starttime="20170615 05:50:35.425"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:35.636" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:35.636" starttime="20170615 05:50:35.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:35.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:35.637" starttime="20170615 05:50:35.636"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:35.637" starttime="20170615 05:50:35.421"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:35.637" starttime="20170615 05:50:35.421"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:35.637" starttime="20170615 05:50:35.420"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:35.637" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:50:35.638" starttime="20170615 05:50:35.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:35.638" starttime="20170615 05:50:35.638"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:35.701" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:35.701" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:35.702" starttime="20170615 05:50:35.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:35.702" starttime="20170615 05:50:35.702"></status>
</kw>
<msg timestamp="20170615 05:50:35.703" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:35.703" starttime="20170615 05:50:35.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:35.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:35.704" starttime="20170615 05:50:35.703"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:35.704" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:35.704" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:35.705" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:50:35.705" starttime="20170615 05:50:35.704"></status>
</kw>
<msg timestamp="20170615 05:50:35.705" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:50:35.705" starttime="20170615 05:50:35.419"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:35.705" starttime="20170615 05:50:35.419"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:35.711" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:35.711" starttime="20170615 05:50:35.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:35.712" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:35.712" starttime="20170615 05:50:35.712"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:35.713" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:35.713" starttime="20170615 05:50:35.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:35.713" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:35.714" starttime="20170615 05:50:35.713"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:35.893" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:35.893" starttime="20170615 05:50:35.714"></status>
</kw>
<msg timestamp="20170615 05:50:35.893" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:35.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:35.894" starttime="20170615 05:50:35.714"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:35.894" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:35.894" starttime="20170615 05:50:35.894"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:35.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:35.895" starttime="20170615 05:50:35.895"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:35.895" starttime="20170615 05:50:35.710"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:35.895" starttime="20170615 05:50:35.709"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:35.895" starttime="20170615 05:50:35.708"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:35.896" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170615 05:50:35.896" starttime="20170615 05:50:35.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:35.897" starttime="20170615 05:50:35.896"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:35.961" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:35.961" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:35.962" starttime="20170615 05:50:35.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:35.962" starttime="20170615 05:50:35.962"></status>
</kw>
<msg timestamp="20170615 05:50:35.962" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:35.962" starttime="20170615 05:50:35.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:35.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:35.963" starttime="20170615 05:50:35.963"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:35.964" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:35.964" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:35.964" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170615 05:50:35.964" starttime="20170615 05:50:35.963"></status>
</kw>
<msg timestamp="20170615 05:50:35.964" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170615 05:50:35.964" starttime="20170615 05:50:35.706"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:35.964" starttime="20170615 05:50:35.706"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:35.968" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:35.969" starttime="20170615 05:50:35.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:35.969" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:35.969" starttime="20170615 05:50:35.969"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:35.970" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:35.970" starttime="20170615 05:50:35.970"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:35.971" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:35.971" starttime="20170615 05:50:35.970"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:36.153" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:36.153" starttime="20170615 05:50:35.971"></status>
</kw>
<msg timestamp="20170615 05:50:36.154" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:36.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.154" starttime="20170615 05:50:35.971"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:36.154" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.154" starttime="20170615 05:50:36.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:36.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.155" starttime="20170615 05:50:36.155"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.155" starttime="20170615 05:50:35.967"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.155" starttime="20170615 05:50:35.967"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.155" starttime="20170615 05:50:35.966"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:36.156" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:50:36.156" starttime="20170615 05:50:36.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:36.157" starttime="20170615 05:50:36.156"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:36.222" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:50:36.222" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.222" starttime="20170615 05:50:36.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:36.223" starttime="20170615 05:50:36.223"></status>
</kw>
<msg timestamp="20170615 05:50:36.223" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.223" starttime="20170615 05:50:35.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:36.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.224" starttime="20170615 05:50:36.224"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:36.224" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:36.224" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:36.225" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170615 05:50:36.225" starttime="20170615 05:50:36.224"></status>
</kw>
<msg timestamp="20170615 05:50:36.225" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170615 05:50:36.225" starttime="20170615 05:50:35.965"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.225" starttime="20170615 05:50:35.965"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:36.229" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:36.229" starttime="20170615 05:50:36.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:36.230" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:36.230" starttime="20170615 05:50:36.230"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:36.231" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:36.231" starttime="20170615 05:50:36.230"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:36.231" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:36.231" starttime="20170615 05:50:36.231"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:36.515" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:36.515" starttime="20170615 05:50:36.232"></status>
</kw>
<msg timestamp="20170615 05:50:36.515" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:36.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.515" starttime="20170615 05:50:36.232"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:36.516" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.516" starttime="20170615 05:50:36.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:36.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.517" starttime="20170615 05:50:36.516"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.517" starttime="20170615 05:50:36.228"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.517" starttime="20170615 05:50:36.228"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.517" starttime="20170615 05:50:36.227"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:36.518" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:50:36.518" starttime="20170615 05:50:36.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:36.518" starttime="20170615 05:50:36.518"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:36.603" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:36.603" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.603" starttime="20170615 05:50:36.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:36.603" starttime="20170615 05:50:36.603"></status>
</kw>
<msg timestamp="20170615 05:50:36.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.604" starttime="20170615 05:50:36.226"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:36.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.604" starttime="20170615 05:50:36.604"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:36.605" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:36.605" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:36.605" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:50:36.605" starttime="20170615 05:50:36.605"></status>
</kw>
<msg timestamp="20170615 05:50:36.605" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:50:36.605" starttime="20170615 05:50:36.226"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.606" starttime="20170615 05:50:36.226"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.606" starttime="20170615 05:50:35.417"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:36.618" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:36.619" starttime="20170615 05:50:36.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:36.619" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:36.619" starttime="20170615 05:50:36.619"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:36.620" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:36.620" starttime="20170615 05:50:36.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:36.621" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:36.621" starttime="20170615 05:50:36.620"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:36.799" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:36.799" starttime="20170615 05:50:36.621"></status>
</kw>
<msg timestamp="20170615 05:50:36.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:36.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.799" starttime="20170615 05:50:36.621"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:36.800" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.800" starttime="20170615 05:50:36.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:36.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.800" starttime="20170615 05:50:36.800"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.801" starttime="20170615 05:50:36.618"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.801" starttime="20170615 05:50:36.617"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.801" starttime="20170615 05:50:36.617"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:36.802" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:50:36.802" starttime="20170615 05:50:36.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:36.803" starttime="20170615 05:50:36.802"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:36.867" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:36.868" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.868" starttime="20170615 05:50:36.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:36.868" starttime="20170615 05:50:36.868"></status>
</kw>
<msg timestamp="20170615 05:50:36.868" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.868" starttime="20170615 05:50:36.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:36.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:36.869" starttime="20170615 05:50:36.869"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:36.870" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:36.870" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:36.870" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:50:36.870" starttime="20170615 05:50:36.870"></status>
</kw>
<msg timestamp="20170615 05:50:36.870" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:50:36.870" starttime="20170615 05:50:36.615"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:36.871" starttime="20170615 05:50:36.615"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:36.874" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:36.875" starttime="20170615 05:50:36.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:36.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:36.876" starttime="20170615 05:50:36.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:36.876" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:36.876" starttime="20170615 05:50:36.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:36.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:36.877" starttime="20170615 05:50:36.877"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:37.054" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:37.054" starttime="20170615 05:50:36.878"></status>
</kw>
<msg timestamp="20170615 05:50:37.054" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:37.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:37.054" starttime="20170615 05:50:36.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:37.055" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:37.055" starttime="20170615 05:50:37.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:37.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:37.055" starttime="20170615 05:50:37.055"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:37.055" starttime="20170615 05:50:36.873"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:37.056" starttime="20170615 05:50:36.873"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:37.056" starttime="20170615 05:50:36.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:37.056" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:50:37.056" starttime="20170615 05:50:37.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:37.057" starttime="20170615 05:50:37.057"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:37.121" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:50:37.121" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:37.121" starttime="20170615 05:50:37.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:37.122" starttime="20170615 05:50:37.122"></status>
</kw>
<msg timestamp="20170615 05:50:37.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:37.122" starttime="20170615 05:50:36.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:37.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:37.123" starttime="20170615 05:50:37.123"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:37.124" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:37.124" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:37.124" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170615 05:50:37.124" starttime="20170615 05:50:37.123"></status>
</kw>
<msg timestamp="20170615 05:50:37.124" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170615 05:50:37.124" starttime="20170615 05:50:36.871"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:37.124" starttime="20170615 05:50:36.871"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:37.128" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:37.128" starttime="20170615 05:50:37.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:37.129" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:37.129" starttime="20170615 05:50:37.128"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:37.129" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:37.130" starttime="20170615 05:50:37.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:37.130" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:37.130" starttime="20170615 05:50:37.130"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:37.308" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:37.308" starttime="20170615 05:50:37.131"></status>
</kw>
<msg timestamp="20170615 05:50:37.308" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:37.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:37.309" starttime="20170615 05:50:37.130"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:37.309" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:37.309" starttime="20170615 05:50:37.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:37.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:37.310" starttime="20170615 05:50:37.310"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:37.310" starttime="20170615 05:50:37.127"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:37.310" starttime="20170615 05:50:37.127"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:37.310" starttime="20170615 05:50:37.126"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:37.311" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:50:37.311" starttime="20170615 05:50:37.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:37.312" starttime="20170615 05:50:37.311"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:37.375" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:37.375" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:37.375" starttime="20170615 05:50:37.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:37.376" starttime="20170615 05:50:37.376"></status>
</kw>
<msg timestamp="20170615 05:50:37.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:37.376" starttime="20170615 05:50:37.125"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:37.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:37.377" starttime="20170615 05:50:37.376"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:37.377" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:37.377" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:37.378" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:50:37.378" starttime="20170615 05:50:37.377"></status>
</kw>
<msg timestamp="20170615 05:50:37.378" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:50:37.378" starttime="20170615 05:50:37.125"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:37.378" starttime="20170615 05:50:37.124"></status>
</kw>
<msg timestamp="20170615 05:50:37.379" level="FAIL">
#(UTC) 2017/06/15 05:50:37.378376 -   11.962814 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:50:37.379" starttime="20170615 05:50:36.613"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:47.385" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:47.386" starttime="20170615 05:50:47.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:47.386" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:47.386" starttime="20170615 05:50:47.386"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:47.387" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:47.387" starttime="20170615 05:50:47.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:47.390" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:47.390" starttime="20170615 05:50:47.387"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:47.627" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:47.627" starttime="20170615 05:50:47.391"></status>
</kw>
<msg timestamp="20170615 05:50:47.627" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:47.628" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:47.628" starttime="20170615 05:50:47.390"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:47.628" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:47.628" starttime="20170615 05:50:47.628"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:47.629" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:47.629" starttime="20170615 05:50:47.629"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:47.629" starttime="20170615 05:50:47.384"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:47.629" starttime="20170615 05:50:47.384"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:47.630" starttime="20170615 05:50:47.383"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:47.630" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:50:47.630" starttime="20170615 05:50:47.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:47.631" starttime="20170615 05:50:47.630"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:47.693" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:47.693" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:47.693" starttime="20170615 05:50:47.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:47.694" starttime="20170615 05:50:47.693"></status>
</kw>
<msg timestamp="20170615 05:50:47.694" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:47.694" starttime="20170615 05:50:47.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:47.695" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:47.695" starttime="20170615 05:50:47.695"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:47.696" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:47.696" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:47.696" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:50:47.696" starttime="20170615 05:50:47.696"></status>
</kw>
<msg timestamp="20170615 05:50:47.697" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:50:47.697" starttime="20170615 05:50:47.382"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:47.697" starttime="20170615 05:50:47.381"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:47.701" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:47.701" starttime="20170615 05:50:47.701"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:47.702" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:47.702" starttime="20170615 05:50:47.702"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:47.703" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:47.703" starttime="20170615 05:50:47.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:47.704" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:47.704" starttime="20170615 05:50:47.703"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:47.888" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:47.888" starttime="20170615 05:50:47.704"></status>
</kw>
<msg timestamp="20170615 05:50:47.888" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:47.888" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:47.888" starttime="20170615 05:50:47.704"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:47.889" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:47.889" starttime="20170615 05:50:47.889"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:47.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:47.890" starttime="20170615 05:50:47.889"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:47.890" starttime="20170615 05:50:47.700"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:47.890" starttime="20170615 05:50:47.700"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:47.890" starttime="20170615 05:50:47.699"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:47.891" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:50:47.891" starttime="20170615 05:50:47.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:47.891" starttime="20170615 05:50:47.891"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:47.960" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:50:47.960" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:47.960" starttime="20170615 05:50:47.891"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:47.960" starttime="20170615 05:50:47.960"></status>
</kw>
<msg timestamp="20170615 05:50:47.961" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:47.961" starttime="20170615 05:50:47.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:47.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:47.961" starttime="20170615 05:50:47.961"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:47.962" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:47.962" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:47.962" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170615 05:50:47.962" starttime="20170615 05:50:47.962"></status>
</kw>
<msg timestamp="20170615 05:50:47.962" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170615 05:50:47.962" starttime="20170615 05:50:47.698"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:47.963" starttime="20170615 05:50:47.697"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:47.966" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:47.967" starttime="20170615 05:50:47.966"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:47.967" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:47.967" starttime="20170615 05:50:47.967"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:47.968" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:47.968" starttime="20170615 05:50:47.967"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:47.969" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:47.969" starttime="20170615 05:50:47.968"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:48.192" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:48.192" starttime="20170615 05:50:47.970"></status>
</kw>
<msg timestamp="20170615 05:50:48.193" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:48.193" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:48.193" starttime="20170615 05:50:47.969"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:48.193" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:48.193" starttime="20170615 05:50:48.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:48.194" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:48.194" starttime="20170615 05:50:48.194"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:48.194" starttime="20170615 05:50:47.965"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:48.194" starttime="20170615 05:50:47.965"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:48.194" starttime="20170615 05:50:47.964"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:48.195" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:50:48.195" starttime="20170615 05:50:48.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:48.196" starttime="20170615 05:50:48.195"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:48.338" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:48.338" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:48.338" starttime="20170615 05:50:48.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:48.338" starttime="20170615 05:50:48.338"></status>
</kw>
<msg timestamp="20170615 05:50:48.339" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:48.339" starttime="20170615 05:50:47.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:48.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:48.339" starttime="20170615 05:50:48.339"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:48.340" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:48.340" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:48.340" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:50:48.340" starttime="20170615 05:50:48.340"></status>
</kw>
<msg timestamp="20170615 05:50:48.340" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:50:48.340" starttime="20170615 05:50:47.963"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:48.341" starttime="20170615 05:50:47.963"></status>
</kw>
<msg timestamp="20170615 05:50:48.341" level="FAIL">
#(UTC) 2017/06/15 05:50:48.340920 -   10.962544 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:50:48.341" starttime="20170615 05:50:47.380"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:58.348" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:58.349" starttime="20170615 05:50:58.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:58.350" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:58.350" starttime="20170615 05:50:58.350"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:58.351" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:58.351" starttime="20170615 05:50:58.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:58.351" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:58.351" starttime="20170615 05:50:58.351"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:58.527" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:58.527" starttime="20170615 05:50:58.352"></status>
</kw>
<msg timestamp="20170615 05:50:58.528" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:58.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:58.528" starttime="20170615 05:50:58.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:58.528" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:58.528" starttime="20170615 05:50:58.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:58.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:58.529" starttime="20170615 05:50:58.529"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:58.529" starttime="20170615 05:50:58.347"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:58.529" starttime="20170615 05:50:58.347"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:58.530" starttime="20170615 05:50:58.346"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:58.530" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:50:58.530" starttime="20170615 05:50:58.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:58.531" starttime="20170615 05:50:58.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:58.597" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:58.597" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:58.597" starttime="20170615 05:50:58.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:58.598" starttime="20170615 05:50:58.598"></status>
</kw>
<msg timestamp="20170615 05:50:58.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:58.598" starttime="20170615 05:50:58.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:58.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:58.599" starttime="20170615 05:50:58.599"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:58.600" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:58.600" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:58.600" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:50:58.600" starttime="20170615 05:50:58.599"></status>
</kw>
<msg timestamp="20170615 05:50:58.600" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:50:58.600" starttime="20170615 05:50:58.345"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:58.600" starttime="20170615 05:50:58.344"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:58.604" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:58.605" starttime="20170615 05:50:58.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:58.605" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:58.605" starttime="20170615 05:50:58.605"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:58.606" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:58.606" starttime="20170615 05:50:58.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:58.607" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:58.607" starttime="20170615 05:50:58.606"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:58.785" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:58.786" starttime="20170615 05:50:58.607"></status>
</kw>
<msg timestamp="20170615 05:50:58.786" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:58.786" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:58.786" starttime="20170615 05:50:58.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:58.787" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:58.787" starttime="20170615 05:50:58.786"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:58.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:58.787" starttime="20170615 05:50:58.787"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:58.787" starttime="20170615 05:50:58.603"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:58.788" starttime="20170615 05:50:58.603"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:58.788" starttime="20170615 05:50:58.602"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:58.788" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:50:58.788" starttime="20170615 05:50:58.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:58.789" starttime="20170615 05:50:58.789"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:58.866" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:50:58.866" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:58.866" starttime="20170615 05:50:58.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:58.867" starttime="20170615 05:50:58.866"></status>
</kw>
<msg timestamp="20170615 05:50:58.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:58.867" starttime="20170615 05:50:58.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:58.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:58.868" starttime="20170615 05:50:58.867"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:58.868" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:58.868" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:58.868" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:50:58.868" starttime="20170615 05:50:58.868"></status>
</kw>
<msg timestamp="20170615 05:50:58.869" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:50:58.869" starttime="20170615 05:50:58.601"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:58.869" starttime="20170615 05:50:58.601"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:50:58.873" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:50:58.873" starttime="20170615 05:50:58.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:50:58.874" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:50:58.874" starttime="20170615 05:50:58.874"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:50:58.875" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:50:58.875" starttime="20170615 05:50:58.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:50:58.875" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:50:58.875" starttime="20170615 05:50:58.875"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:50:59.198" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:50:59.198" starttime="20170615 05:50:58.876"></status>
</kw>
<msg timestamp="20170615 05:50:59.198" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:50:59.198" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:59.198" starttime="20170615 05:50:58.876"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:50:59.199" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:59.199" starttime="20170615 05:50:59.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:59.200" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:59.200" starttime="20170615 05:50:59.200"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:59.200" starttime="20170615 05:50:58.872"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:59.200" starttime="20170615 05:50:58.871"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:59.200" starttime="20170615 05:50:58.871"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:50:59.201" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:50:59.201" starttime="20170615 05:50:59.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:59.202" starttime="20170615 05:50:59.201"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:50:59.271" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:50:59.271" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:59.271" starttime="20170615 05:50:59.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:50:59.272" starttime="20170615 05:50:59.272"></status>
</kw>
<msg timestamp="20170615 05:50:59.272" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:50:59.272" starttime="20170615 05:50:58.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:50:59.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:50:59.273" starttime="20170615 05:50:59.273"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:50:59.274" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:50:59.274" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:50:59.274" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:50:59.274" starttime="20170615 05:50:59.273"></status>
</kw>
<msg timestamp="20170615 05:50:59.274" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:50:59.274" starttime="20170615 05:50:58.870"></status>
</kw>
<status status="PASS" endtime="20170615 05:50:59.274" starttime="20170615 05:50:58.869"></status>
</kw>
<msg timestamp="20170615 05:50:59.275" level="FAIL">
#(UTC) 2017/06/15 05:50:59.274764 -   10.933844 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:50:59.275" starttime="20170615 05:50:58.342"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:09.281" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:09.282" starttime="20170615 05:51:09.281"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:09.283" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:09.283" starttime="20170615 05:51:09.283"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:09.284" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:09.284" starttime="20170615 05:51:09.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:09.284" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:09.284" starttime="20170615 05:51:09.284"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:09.463" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:09.464" starttime="20170615 05:51:09.285"></status>
</kw>
<msg timestamp="20170615 05:51:09.464" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:09.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:09.464" starttime="20170615 05:51:09.285"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:09.465" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:09.465" starttime="20170615 05:51:09.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:09.465" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:09.465" starttime="20170615 05:51:09.465"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:09.466" starttime="20170615 05:51:09.281"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:09.466" starttime="20170615 05:51:09.280"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:09.466" starttime="20170615 05:51:09.280"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:09.466" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:51:09.466" starttime="20170615 05:51:09.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:09.467" starttime="20170615 05:51:09.467"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:09.546" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:51:09.546" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:09.546" starttime="20170615 05:51:09.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:09.546" starttime="20170615 05:51:09.546"></status>
</kw>
<msg timestamp="20170615 05:51:09.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:09.547" starttime="20170615 05:51:09.279"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:09.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:09.547" starttime="20170615 05:51:09.547"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:09.548" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:09.548" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:09.548" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:51:09.548" starttime="20170615 05:51:09.548"></status>
</kw>
<msg timestamp="20170615 05:51:09.548" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:51:09.548" starttime="20170615 05:51:09.278"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:09.549" starttime="20170615 05:51:09.278"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:09.554" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:09.555" starttime="20170615 05:51:09.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:09.555" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:09.555" starttime="20170615 05:51:09.555"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:09.556" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:09.556" starttime="20170615 05:51:09.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:09.557" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:09.557" starttime="20170615 05:51:09.557"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:09.865" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:09.865" starttime="20170615 05:51:09.558"></status>
</kw>
<msg timestamp="20170615 05:51:09.865" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:09.865" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:09.865" starttime="20170615 05:51:09.558"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:09.866" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:09.866" starttime="20170615 05:51:09.865"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:09.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:09.867" starttime="20170615 05:51:09.866"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:09.867" starttime="20170615 05:51:09.553"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:09.867" starttime="20170615 05:51:09.552"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:09.867" starttime="20170615 05:51:09.551"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:09.867" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:51:09.867" starttime="20170615 05:51:09.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:09.868" starttime="20170615 05:51:09.868"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:10.117" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:51:10.117" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:10.117" starttime="20170615 05:51:09.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:10.118" starttime="20170615 05:51:10.117"></status>
</kw>
<msg timestamp="20170615 05:51:10.118" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:10.118" starttime="20170615 05:51:09.550"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:10.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:10.119" starttime="20170615 05:51:10.118"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:10.119" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:10.119" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:10.119" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:51:10.119" starttime="20170615 05:51:10.119"></status>
</kw>
<msg timestamp="20170615 05:51:10.120" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:51:10.120" starttime="20170615 05:51:09.549"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:10.120" starttime="20170615 05:51:09.549"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:10.124" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:10.124" starttime="20170615 05:51:10.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:10.125" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:10.125" starttime="20170615 05:51:10.125"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:10.126" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:10.126" starttime="20170615 05:51:10.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:10.126" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:10.126" starttime="20170615 05:51:10.126"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:10.778" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:10.778" starttime="20170615 05:51:10.127"></status>
</kw>
<msg timestamp="20170615 05:51:10.778" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:10.778" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:10.778" starttime="20170615 05:51:10.127"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:10.779" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:10.779" starttime="20170615 05:51:10.778"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:10.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:10.780" starttime="20170615 05:51:10.779"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:10.780" starttime="20170615 05:51:10.123"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:10.780" starttime="20170615 05:51:10.122"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:10.780" starttime="20170615 05:51:10.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:10.780" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:51:10.781" starttime="20170615 05:51:10.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:10.781" starttime="20170615 05:51:10.781"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:10.933" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:51:10.933" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:10.933" starttime="20170615 05:51:10.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:10.934" starttime="20170615 05:51:10.934"></status>
</kw>
<msg timestamp="20170615 05:51:10.934" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:10.934" starttime="20170615 05:51:10.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:10.935" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:10.935" starttime="20170615 05:51:10.935"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:10.936" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:10.936" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:10.936" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:51:10.936" starttime="20170615 05:51:10.936"></status>
</kw>
<msg timestamp="20170615 05:51:10.937" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:51:10.937" starttime="20170615 05:51:10.121"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:10.937" starttime="20170615 05:51:10.120"></status>
</kw>
<msg timestamp="20170615 05:51:10.938" level="FAIL">
#(UTC) 2017/06/15 05:51:10.937394 -   11.662630 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:51:10.938" starttime="20170615 05:51:09.276"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:20.944" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:20.945" starttime="20170615 05:51:20.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:20.946" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:20.946" starttime="20170615 05:51:20.945"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:20.946" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:20.946" starttime="20170615 05:51:20.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:20.947" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:20.947" starttime="20170615 05:51:20.946"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:21.298" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:21.298" starttime="20170615 05:51:20.948"></status>
</kw>
<msg timestamp="20170615 05:51:21.298" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:21.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:21.298" starttime="20170615 05:51:20.947"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:21.299" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:21.299" starttime="20170615 05:51:21.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:21.299" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:21.300" starttime="20170615 05:51:21.299"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:21.300" starttime="20170615 05:51:20.943"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:21.300" starttime="20170615 05:51:20.943"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:21.300" starttime="20170615 05:51:20.942"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:21.301" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:51:21.301" starttime="20170615 05:51:21.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:21.301" starttime="20170615 05:51:21.301"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:21.454" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:51:21.454" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:21.454" starttime="20170615 05:51:21.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:21.455" starttime="20170615 05:51:21.454"></status>
</kw>
<msg timestamp="20170615 05:51:21.455" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:21.455" starttime="20170615 05:51:20.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:21.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:21.456" starttime="20170615 05:51:21.455"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:21.457" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:21.457" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:21.457" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:51:21.457" starttime="20170615 05:51:21.456"></status>
</kw>
<msg timestamp="20170615 05:51:21.457" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:51:21.457" starttime="20170615 05:51:20.941"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:21.457" starttime="20170615 05:51:20.940"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:21.461" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:21.462" starttime="20170615 05:51:21.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:21.462" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:21.462" starttime="20170615 05:51:21.462"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:21.463" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:21.463" starttime="20170615 05:51:21.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:21.464" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:21.464" starttime="20170615 05:51:21.463"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:21.885" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:21.885" starttime="20170615 05:51:21.464"></status>
</kw>
<msg timestamp="20170615 05:51:21.885" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:21.885" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:21.885" starttime="20170615 05:51:21.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:21.886" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:21.886" starttime="20170615 05:51:21.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:21.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:21.887" starttime="20170615 05:51:21.886"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:21.887" starttime="20170615 05:51:21.460"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:21.887" starttime="20170615 05:51:21.460"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:21.887" starttime="20170615 05:51:21.459"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:21.888" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:51:21.888" starttime="20170615 05:51:21.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:21.888" starttime="20170615 05:51:21.888"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:22.075" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:51:22.076" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:22.076" starttime="20170615 05:51:21.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:22.076" starttime="20170615 05:51:22.076"></status>
</kw>
<msg timestamp="20170615 05:51:22.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:22.077" starttime="20170615 05:51:21.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:22.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:22.077" starttime="20170615 05:51:22.077"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:22.078" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:22.078" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:22.078" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:51:22.078" starttime="20170615 05:51:22.077"></status>
</kw>
<msg timestamp="20170615 05:51:22.078" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:51:22.078" starttime="20170615 05:51:21.458"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:22.078" starttime="20170615 05:51:21.458"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:22.083" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:22.083" starttime="20170615 05:51:22.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:22.084" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:22.084" starttime="20170615 05:51:22.083"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:22.084" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:22.084" starttime="20170615 05:51:22.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:22.085" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:22.085" starttime="20170615 05:51:22.084"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:22.689" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:22.689" starttime="20170615 05:51:22.086"></status>
</kw>
<msg timestamp="20170615 05:51:22.689" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:22.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:22.689" starttime="20170615 05:51:22.085"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:22.690" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:22.690" starttime="20170615 05:51:22.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:22.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:22.690" starttime="20170615 05:51:22.690"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:22.691" starttime="20170615 05:51:22.081"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:22.691" starttime="20170615 05:51:22.081"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:22.691" starttime="20170615 05:51:22.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:22.691" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:51:22.691" starttime="20170615 05:51:22.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:22.692" starttime="20170615 05:51:22.692"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:22.826" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:51:22.826" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:22.826" starttime="20170615 05:51:22.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:22.827" starttime="20170615 05:51:22.826"></status>
</kw>
<msg timestamp="20170615 05:51:22.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:22.827" starttime="20170615 05:51:22.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:22.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:22.827" starttime="20170615 05:51:22.827"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:22.828" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:22.828" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:22.828" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:51:22.828" starttime="20170615 05:51:22.828"></status>
</kw>
<msg timestamp="20170615 05:51:22.828" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:51:22.829" starttime="20170615 05:51:22.079"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:22.829" starttime="20170615 05:51:22.079"></status>
</kw>
<msg timestamp="20170615 05:51:22.830" level="FAIL">
#(UTC) 2017/06/15 05:51:22.829078 -   11.891684 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:51:22.830" starttime="20170615 05:51:20.939"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:32.839" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:32.840" starttime="20170615 05:51:32.839"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:32.840" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:32.840" starttime="20170615 05:51:32.840"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:32.841" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:32.841" starttime="20170615 05:51:32.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:32.842" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:32.842" starttime="20170615 05:51:32.841"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:33.064" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:33.064" starttime="20170615 05:51:32.842"></status>
</kw>
<msg timestamp="20170615 05:51:33.064" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:33.064" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.064" starttime="20170615 05:51:32.842"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:33.065" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.065" starttime="20170615 05:51:33.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:33.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.066" starttime="20170615 05:51:33.065"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:33.066" starttime="20170615 05:51:32.838"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:33.066" starttime="20170615 05:51:32.835"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:33.066" starttime="20170615 05:51:32.834"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:33.067" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:51:33.067" starttime="20170615 05:51:33.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:33.068" starttime="20170615 05:51:33.067"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:33.160" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:51:33.160" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.160" starttime="20170615 05:51:33.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:33.161" starttime="20170615 05:51:33.161"></status>
</kw>
<msg timestamp="20170615 05:51:33.161" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.161" starttime="20170615 05:51:32.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:33.162" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.162" starttime="20170615 05:51:33.162"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:33.163" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:33.163" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:33.163" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:51:33.163" starttime="20170615 05:51:33.162"></status>
</kw>
<msg timestamp="20170615 05:51:33.163" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:51:33.163" starttime="20170615 05:51:32.833"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:33.163" starttime="20170615 05:51:32.832"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:33.167" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:33.168" starttime="20170615 05:51:33.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:33.168" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:33.168" starttime="20170615 05:51:33.168"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:33.169" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:33.169" starttime="20170615 05:51:33.169"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:33.170" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:33.172" starttime="20170615 05:51:33.169"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:33.397" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:33.397" starttime="20170615 05:51:33.173"></status>
</kw>
<msg timestamp="20170615 05:51:33.397" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:33.397" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.397" starttime="20170615 05:51:33.172"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:33.398" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.398" starttime="20170615 05:51:33.398"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:33.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.399" starttime="20170615 05:51:33.398"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:33.399" starttime="20170615 05:51:33.167"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:33.399" starttime="20170615 05:51:33.166"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:33.399" starttime="20170615 05:51:33.165"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:33.400" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:51:33.400" starttime="20170615 05:51:33.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:33.400" starttime="20170615 05:51:33.400"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:33.487" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:51:33.487" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.487" starttime="20170615 05:51:33.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:33.488" starttime="20170615 05:51:33.488"></status>
</kw>
<msg timestamp="20170615 05:51:33.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.488" starttime="20170615 05:51:33.165"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:33.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.489" starttime="20170615 05:51:33.489"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:33.490" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:33.490" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:33.490" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:51:33.490" starttime="20170615 05:51:33.489"></status>
</kw>
<msg timestamp="20170615 05:51:33.490" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:51:33.490" starttime="20170615 05:51:33.164"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:33.490" starttime="20170615 05:51:33.164"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:33.495" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:33.495" starttime="20170615 05:51:33.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:33.496" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:33.496" starttime="20170615 05:51:33.495"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:33.496" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:33.496" starttime="20170615 05:51:33.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:33.497" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:33.497" starttime="20170615 05:51:33.497"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:33.758" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:33.758" starttime="20170615 05:51:33.498"></status>
</kw>
<msg timestamp="20170615 05:51:33.758" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:33.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.758" starttime="20170615 05:51:33.497"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:33.759" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.759" starttime="20170615 05:51:33.759"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:33.760" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.760" starttime="20170615 05:51:33.759"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:33.760" starttime="20170615 05:51:33.494"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:33.760" starttime="20170615 05:51:33.493"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:33.760" starttime="20170615 05:51:33.492"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:33.761" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:51:33.761" starttime="20170615 05:51:33.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:33.761" starttime="20170615 05:51:33.761"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:33.826" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:51:33.826" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.826" starttime="20170615 05:51:33.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:33.827" starttime="20170615 05:51:33.826"></status>
</kw>
<msg timestamp="20170615 05:51:33.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.827" starttime="20170615 05:51:33.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:33.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:33.828" starttime="20170615 05:51:33.827"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:33.828" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:33.828" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:33.828" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:51:33.829" starttime="20170615 05:51:33.828"></status>
</kw>
<msg timestamp="20170615 05:51:33.829" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:51:33.829" starttime="20170615 05:51:33.491"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:33.829" starttime="20170615 05:51:33.491"></status>
</kw>
<msg timestamp="20170615 05:51:33.830" level="FAIL">
#(UTC) 2017/06/15 05:51:33.829335 -   11.000257 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:51:33.830" starttime="20170615 05:51:32.830"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:43.837" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:43.837" starttime="20170615 05:51:43.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:43.838" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:43.838" starttime="20170615 05:51:43.837"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:43.838" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:43.838" starttime="20170615 05:51:43.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:43.839" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:43.839" starttime="20170615 05:51:43.838"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:44.148" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:44.148" starttime="20170615 05:51:43.840"></status>
</kw>
<msg timestamp="20170615 05:51:44.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:44.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:44.148" starttime="20170615 05:51:43.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:44.149" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:44.149" starttime="20170615 05:51:44.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:44.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:44.149" starttime="20170615 05:51:44.149"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:44.150" starttime="20170615 05:51:43.836"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:44.150" starttime="20170615 05:51:43.835"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:44.150" starttime="20170615 05:51:43.834"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:44.150" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:51:44.150" starttime="20170615 05:51:44.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:44.151" starttime="20170615 05:51:44.151"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:44.312" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:51:44.312" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:44.312" starttime="20170615 05:51:44.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:44.313" starttime="20170615 05:51:44.312"></status>
</kw>
<msg timestamp="20170615 05:51:44.313" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:44.313" starttime="20170615 05:51:43.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:44.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:44.314" starttime="20170615 05:51:44.313"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:44.314" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:44.314" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:44.314" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:51:44.314" starttime="20170615 05:51:44.314"></status>
</kw>
<msg timestamp="20170615 05:51:44.315" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:51:44.315" starttime="20170615 05:51:43.833"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:44.315" starttime="20170615 05:51:43.832"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:44.319" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:44.319" starttime="20170615 05:51:44.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:44.320" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:44.320" starttime="20170615 05:51:44.320"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:44.321" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:44.321" starttime="20170615 05:51:44.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:44.321" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:44.321" starttime="20170615 05:51:44.321"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:44.634" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:44.634" starttime="20170615 05:51:44.322"></status>
</kw>
<msg timestamp="20170615 05:51:44.634" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:44.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:44.634" starttime="20170615 05:51:44.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:44.635" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:44.635" starttime="20170615 05:51:44.634"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:44.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:44.635" starttime="20170615 05:51:44.635"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:44.636" starttime="20170615 05:51:44.318"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:44.636" starttime="20170615 05:51:44.318"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:44.636" starttime="20170615 05:51:44.317"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:44.636" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:51:44.636" starttime="20170615 05:51:44.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:44.637" starttime="20170615 05:51:44.637"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:44.737" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:51:44.738" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:44.738" starttime="20170615 05:51:44.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:44.738" starttime="20170615 05:51:44.738"></status>
</kw>
<msg timestamp="20170615 05:51:44.738" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:44.739" starttime="20170615 05:51:44.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:44.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:44.739" starttime="20170615 05:51:44.739"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:44.740" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:44.740" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:44.740" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:51:44.740" starttime="20170615 05:51:44.739"></status>
</kw>
<msg timestamp="20170615 05:51:44.740" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:51:44.740" starttime="20170615 05:51:44.316"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:44.740" starttime="20170615 05:51:44.315"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:44.745" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:44.745" starttime="20170615 05:51:44.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:44.745" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:44.745" starttime="20170615 05:51:44.745"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:44.746" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:44.746" starttime="20170615 05:51:44.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:44.747" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:44.747" starttime="20170615 05:51:44.746"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:45.030" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:45.030" starttime="20170615 05:51:44.747"></status>
</kw>
<msg timestamp="20170615 05:51:45.030" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:45.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:45.030" starttime="20170615 05:51:44.747"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:45.031" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:45.031" starttime="20170615 05:51:45.031"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:45.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:45.032" starttime="20170615 05:51:45.031"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:45.032" starttime="20170615 05:51:44.744"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:45.032" starttime="20170615 05:51:44.743"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:45.032" starttime="20170615 05:51:44.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:45.033" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:51:45.033" starttime="20170615 05:51:45.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:45.034" starttime="20170615 05:51:45.033"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:45.120" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:51:45.121" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:45.121" starttime="20170615 05:51:45.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:45.121" starttime="20170615 05:51:45.121"></status>
</kw>
<msg timestamp="20170615 05:51:45.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:45.122" starttime="20170615 05:51:44.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:45.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:45.122" starttime="20170615 05:51:45.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:45.123" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:45.123" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:45.123" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:51:45.123" starttime="20170615 05:51:45.123"></status>
</kw>
<msg timestamp="20170615 05:51:45.123" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:51:45.123" starttime="20170615 05:51:44.741"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:45.124" starttime="20170615 05:51:44.741"></status>
</kw>
<msg timestamp="20170615 05:51:45.124" level="FAIL">
#(UTC) 2017/06/15 05:51:45.123835 -   11.294500 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:51:45.124" starttime="20170615 05:51:43.831"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:55.131" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:55.131" starttime="20170615 05:51:55.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:55.132" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:55.132" starttime="20170615 05:51:55.132"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:55.133" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:55.133" starttime="20170615 05:51:55.132"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:55.133" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:55.133" starttime="20170615 05:51:55.133"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:55.346" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:55.347" starttime="20170615 05:51:55.134"></status>
</kw>
<msg timestamp="20170615 05:51:55.347" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:55.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.347" starttime="20170615 05:51:55.134"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:55.347" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.348" starttime="20170615 05:51:55.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:55.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.348" starttime="20170615 05:51:55.348"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:55.348" starttime="20170615 05:51:55.130"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:55.348" starttime="20170615 05:51:55.130"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:55.349" starttime="20170615 05:51:55.129"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:55.349" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:51:55.349" starttime="20170615 05:51:55.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:55.350" starttime="20170615 05:51:55.350"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:55.415" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:51:55.416" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.416" starttime="20170615 05:51:55.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:55.416" starttime="20170615 05:51:55.416"></status>
</kw>
<msg timestamp="20170615 05:51:55.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.417" starttime="20170615 05:51:55.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:55.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.417" starttime="20170615 05:51:55.417"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:55.418" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:55.418" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:55.418" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:51:55.418" starttime="20170615 05:51:55.418"></status>
</kw>
<msg timestamp="20170615 05:51:55.418" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:51:55.419" starttime="20170615 05:51:55.127"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:55.419" starttime="20170615 05:51:55.127"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:55.425" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:55.425" starttime="20170615 05:51:55.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:55.426" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:55.426" starttime="20170615 05:51:55.425"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:55.427" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:55.427" starttime="20170615 05:51:55.426"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:55.428" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:55.428" starttime="20170615 05:51:55.427"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:55.605" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:55.605" starttime="20170615 05:51:55.429"></status>
</kw>
<msg timestamp="20170615 05:51:55.605" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:55.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.605" starttime="20170615 05:51:55.428"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:55.606" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.606" starttime="20170615 05:51:55.606"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:55.607" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.607" starttime="20170615 05:51:55.607"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:55.607" starttime="20170615 05:51:55.423"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:55.607" starttime="20170615 05:51:55.423"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:55.608" starttime="20170615 05:51:55.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:55.608" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:51:55.608" starttime="20170615 05:51:55.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:55.609" starttime="20170615 05:51:55.609"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:55.676" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:51:55.676" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.676" starttime="20170615 05:51:55.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:55.676" starttime="20170615 05:51:55.676"></status>
</kw>
<msg timestamp="20170615 05:51:55.677" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.677" starttime="20170615 05:51:55.421"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:55.677" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.677" starttime="20170615 05:51:55.677"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:55.678" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:55.678" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:55.678" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:51:55.678" starttime="20170615 05:51:55.678"></status>
</kw>
<msg timestamp="20170615 05:51:55.678" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:51:55.678" starttime="20170615 05:51:55.420"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:55.679" starttime="20170615 05:51:55.419"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:51:55.683" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:51:55.683" starttime="20170615 05:51:55.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:51:55.684" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:51:55.684" starttime="20170615 05:51:55.683"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:51:55.684" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:51:55.684" starttime="20170615 05:51:55.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:51:55.685" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:51:55.685" starttime="20170615 05:51:55.685"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:51:55.861" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:51:55.861" starttime="20170615 05:51:55.686"></status>
</kw>
<msg timestamp="20170615 05:51:55.862" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:51:55.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.862" starttime="20170615 05:51:55.685"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:51:55.862" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.862" starttime="20170615 05:51:55.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:55.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.863" starttime="20170615 05:51:55.863"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:55.863" starttime="20170615 05:51:55.682"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:55.863" starttime="20170615 05:51:55.681"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:55.863" starttime="20170615 05:51:55.680"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:51:55.864" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:51:55.864" starttime="20170615 05:51:55.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:55.865" starttime="20170615 05:51:55.864"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:51:55.927" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:51:55.927" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.927" starttime="20170615 05:51:55.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:51:55.927" starttime="20170615 05:51:55.927"></status>
</kw>
<msg timestamp="20170615 05:51:55.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.928" starttime="20170615 05:51:55.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:51:55.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:51:55.928" starttime="20170615 05:51:55.928"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:51:55.929" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:51:55.929" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:51:55.929" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:51:55.929" starttime="20170615 05:51:55.929"></status>
</kw>
<msg timestamp="20170615 05:51:55.930" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:51:55.930" starttime="20170615 05:51:55.679"></status>
</kw>
<status status="PASS" endtime="20170615 05:51:55.930" starttime="20170615 05:51:55.679"></status>
</kw>
<msg timestamp="20170615 05:51:55.931" level="FAIL">
#(UTC) 2017/06/15 05:51:55.930295 -   10.806460 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:51:55.931" starttime="20170615 05:51:55.125"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:05.940" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:05.940" starttime="20170615 05:52:05.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:05.941" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:05.941" starttime="20170615 05:52:05.940"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:05.941" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:05.941" starttime="20170615 05:52:05.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:05.942" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:05.942" starttime="20170615 05:52:05.942"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:06.131" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:06.131" starttime="20170615 05:52:05.943"></status>
</kw>
<msg timestamp="20170615 05:52:06.131" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:06.131" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.131" starttime="20170615 05:52:05.942"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:06.132" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.132" starttime="20170615 05:52:06.131"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:06.132" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.133" starttime="20170615 05:52:06.132"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:06.133" starttime="20170615 05:52:05.939"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:06.133" starttime="20170615 05:52:05.938"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:06.133" starttime="20170615 05:52:05.937"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:06.134" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:52:06.134" starttime="20170615 05:52:06.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:06.134" starttime="20170615 05:52:06.134"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:06.199" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:52:06.199" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.199" starttime="20170615 05:52:06.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:06.200" starttime="20170615 05:52:06.199"></status>
</kw>
<msg timestamp="20170615 05:52:06.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.200" starttime="20170615 05:52:05.936"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:06.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.201" starttime="20170615 05:52:06.200"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:06.201" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:06.201" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:06.202" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:52:06.202" starttime="20170615 05:52:06.201"></status>
</kw>
<msg timestamp="20170615 05:52:06.202" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:52:06.202" starttime="20170615 05:52:05.935"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:06.202" starttime="20170615 05:52:05.935"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:06.207" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:06.207" starttime="20170615 05:52:06.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:06.208" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:06.208" starttime="20170615 05:52:06.207"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:06.208" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:06.208" starttime="20170615 05:52:06.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:06.209" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:06.209" starttime="20170615 05:52:06.209"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:06.391" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:06.391" starttime="20170615 05:52:06.210"></status>
</kw>
<msg timestamp="20170615 05:52:06.391" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:06.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.392" starttime="20170615 05:52:06.209"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:06.392" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.392" starttime="20170615 05:52:06.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:06.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.393" starttime="20170615 05:52:06.393"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:06.393" starttime="20170615 05:52:06.206"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:06.394" starttime="20170615 05:52:06.205"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:06.394" starttime="20170615 05:52:06.205"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:06.394" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:52:06.394" starttime="20170615 05:52:06.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:06.395" starttime="20170615 05:52:06.395"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:06.472" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:52:06.473" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.473" starttime="20170615 05:52:06.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:06.474" starttime="20170615 05:52:06.473"></status>
</kw>
<msg timestamp="20170615 05:52:06.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.474" starttime="20170615 05:52:06.204"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:06.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.475" starttime="20170615 05:52:06.475"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:06.476" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:06.476" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:06.476" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:52:06.476" starttime="20170615 05:52:06.475"></status>
</kw>
<msg timestamp="20170615 05:52:06.476" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:52:06.476" starttime="20170615 05:52:06.203"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:06.477" starttime="20170615 05:52:06.203"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:06.481" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:06.481" starttime="20170615 05:52:06.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:06.482" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:06.482" starttime="20170615 05:52:06.482"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:06.483" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:06.483" starttime="20170615 05:52:06.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:06.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:06.483" starttime="20170615 05:52:06.483"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:06.715" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:06.716" starttime="20170615 05:52:06.484"></status>
</kw>
<msg timestamp="20170615 05:52:06.716" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:06.716" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.716" starttime="20170615 05:52:06.484"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:06.717" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.717" starttime="20170615 05:52:06.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:06.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.718" starttime="20170615 05:52:06.717"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:06.718" starttime="20170615 05:52:06.480"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:06.718" starttime="20170615 05:52:06.480"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:06.718" starttime="20170615 05:52:06.479"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:06.719" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:52:06.719" starttime="20170615 05:52:06.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:06.720" starttime="20170615 05:52:06.719"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:06.796" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:52:06.796" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.796" starttime="20170615 05:52:06.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:06.797" starttime="20170615 05:52:06.797"></status>
</kw>
<msg timestamp="20170615 05:52:06.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.798" starttime="20170615 05:52:06.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:06.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:06.798" starttime="20170615 05:52:06.798"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:06.799" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:06.799" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:06.799" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:52:06.799" starttime="20170615 05:52:06.799"></status>
</kw>
<msg timestamp="20170615 05:52:06.800" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:52:06.800" starttime="20170615 05:52:06.477"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:06.800" starttime="20170615 05:52:06.477"></status>
</kw>
<msg timestamp="20170615 05:52:06.801" level="FAIL">
#(UTC) 2017/06/15 05:52:06.800700 -   10.870405 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:52:06.801" starttime="20170615 05:52:05.932"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:16.810" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:16.810" starttime="20170615 05:52:16.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:16.811" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:16.811" starttime="20170615 05:52:16.811"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:16.812" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:16.812" starttime="20170615 05:52:16.811"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:16.812" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:16.812" starttime="20170615 05:52:16.812"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:16.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:16.989" starttime="20170615 05:52:16.813"></status>
</kw>
<msg timestamp="20170615 05:52:16.989" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:16.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:16.989" starttime="20170615 05:52:16.813"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:16.990" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:16.990" starttime="20170615 05:52:16.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:16.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:16.991" starttime="20170615 05:52:16.991"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:16.991" starttime="20170615 05:52:16.809"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:16.991" starttime="20170615 05:52:16.808"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:16.991" starttime="20170615 05:52:16.808"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:16.992" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:52:16.992" starttime="20170615 05:52:16.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:16.993" starttime="20170615 05:52:16.992"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:17.065" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:52:17.065" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.065" starttime="20170615 05:52:16.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:17.066" starttime="20170615 05:52:17.066"></status>
</kw>
<msg timestamp="20170615 05:52:17.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.066" starttime="20170615 05:52:16.807"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:17.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.067" starttime="20170615 05:52:17.067"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:17.068" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:17.068" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:17.068" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:52:17.068" starttime="20170615 05:52:17.067"></status>
</kw>
<msg timestamp="20170615 05:52:17.068" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:52:17.068" starttime="20170615 05:52:16.804"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:17.068" starttime="20170615 05:52:16.804"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:17.074" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:17.074" starttime="20170615 05:52:17.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:17.075" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:17.075" starttime="20170615 05:52:17.074"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:17.076" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:17.076" starttime="20170615 05:52:17.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:17.077" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:17.077" starttime="20170615 05:52:17.076"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:17.282" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:17.282" starttime="20170615 05:52:17.078"></status>
</kw>
<msg timestamp="20170615 05:52:17.282" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:17.282" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.282" starttime="20170615 05:52:17.077"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:17.283" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.283" starttime="20170615 05:52:17.283"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:17.284" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.284" starttime="20170615 05:52:17.283"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:17.284" starttime="20170615 05:52:17.072"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:17.284" starttime="20170615 05:52:17.072"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:17.284" starttime="20170615 05:52:17.071"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:17.285" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:52:17.285" starttime="20170615 05:52:17.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:17.286" starttime="20170615 05:52:17.285"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:17.351" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:52:17.351" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.351" starttime="20170615 05:52:17.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:17.352" starttime="20170615 05:52:17.351"></status>
</kw>
<msg timestamp="20170615 05:52:17.352" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.352" starttime="20170615 05:52:17.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:17.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.353" starttime="20170615 05:52:17.352"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:17.354" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:17.354" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:17.354" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:52:17.354" starttime="20170615 05:52:17.353"></status>
</kw>
<msg timestamp="20170615 05:52:17.354" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:52:17.354" starttime="20170615 05:52:17.069"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:17.354" starttime="20170615 05:52:17.069"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:17.359" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:17.359" starttime="20170615 05:52:17.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:17.360" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:17.360" starttime="20170615 05:52:17.359"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:17.361" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:17.361" starttime="20170615 05:52:17.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:17.362" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:17.362" starttime="20170615 05:52:17.361"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:17.697" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:17.697" starttime="20170615 05:52:17.363"></status>
</kw>
<msg timestamp="20170615 05:52:17.697" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:17.697" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.697" starttime="20170615 05:52:17.362"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:17.698" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.698" starttime="20170615 05:52:17.698"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:17.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.699" starttime="20170615 05:52:17.699"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:17.699" starttime="20170615 05:52:17.358"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:17.699" starttime="20170615 05:52:17.357"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:17.699" starttime="20170615 05:52:17.357"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:17.700" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:52:17.700" starttime="20170615 05:52:17.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:17.701" starttime="20170615 05:52:17.700"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:17.799" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:52:17.799" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.799" starttime="20170615 05:52:17.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:17.800" starttime="20170615 05:52:17.799"></status>
</kw>
<msg timestamp="20170615 05:52:17.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.800" starttime="20170615 05:52:17.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:17.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:17.801" starttime="20170615 05:52:17.800"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:17.801" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:17.802" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:17.802" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:52:17.802" starttime="20170615 05:52:17.801"></status>
</kw>
<msg timestamp="20170615 05:52:17.802" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:52:17.802" starttime="20170615 05:52:17.356"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:17.802" starttime="20170615 05:52:17.355"></status>
</kw>
<msg timestamp="20170615 05:52:17.803" level="FAIL">
#(UTC) 2017/06/15 05:52:17.802573 -   11.001873 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:52:17.803" starttime="20170615 05:52:16.802"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:27.809" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:27.810" starttime="20170615 05:52:27.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:27.810" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:27.810" starttime="20170615 05:52:27.810"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:27.811" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:27.811" starttime="20170615 05:52:27.811"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:27.812" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:27.812" starttime="20170615 05:52:27.811"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:27.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:27.989" starttime="20170615 05:52:27.813"></status>
</kw>
<msg timestamp="20170615 05:52:27.989" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:27.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:27.989" starttime="20170615 05:52:27.812"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:27.990" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:27.990" starttime="20170615 05:52:27.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:27.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:27.991" starttime="20170615 05:52:27.991"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:27.991" starttime="20170615 05:52:27.808"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:27.991" starttime="20170615 05:52:27.808"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:27.991" starttime="20170615 05:52:27.807"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:27.992" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:52:27.992" starttime="20170615 05:52:27.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:27.993" starttime="20170615 05:52:27.992"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:28.057" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:52:28.057" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.057" starttime="20170615 05:52:27.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:28.058" starttime="20170615 05:52:28.058"></status>
</kw>
<msg timestamp="20170615 05:52:28.058" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.059" starttime="20170615 05:52:27.807"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:28.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.059" starttime="20170615 05:52:28.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:28.060" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:28.060" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:28.060" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:52:28.060" starttime="20170615 05:52:28.059"></status>
</kw>
<msg timestamp="20170615 05:52:28.060" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:52:28.060" starttime="20170615 05:52:27.806"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:28.061" starttime="20170615 05:52:27.806"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:28.065" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:28.065" starttime="20170615 05:52:28.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:28.066" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:28.066" starttime="20170615 05:52:28.066"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:28.067" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:28.067" starttime="20170615 05:52:28.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:28.068" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:28.068" starttime="20170615 05:52:28.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:28.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:28.342" starttime="20170615 05:52:28.068"></status>
</kw>
<msg timestamp="20170615 05:52:28.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:28.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.342" starttime="20170615 05:52:28.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:28.343" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.343" starttime="20170615 05:52:28.342"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:28.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.344" starttime="20170615 05:52:28.343"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:28.344" starttime="20170615 05:52:28.064"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:28.344" starttime="20170615 05:52:28.064"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:28.344" starttime="20170615 05:52:28.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:28.345" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:52:28.345" starttime="20170615 05:52:28.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:28.345" starttime="20170615 05:52:28.345"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:28.413" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:52:28.413" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.413" starttime="20170615 05:52:28.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:28.414" starttime="20170615 05:52:28.414"></status>
</kw>
<msg timestamp="20170615 05:52:28.414" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.414" starttime="20170615 05:52:28.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:28.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.415" starttime="20170615 05:52:28.415"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:28.416" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:28.416" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:28.416" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:52:28.416" starttime="20170615 05:52:28.415"></status>
</kw>
<msg timestamp="20170615 05:52:28.416" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:52:28.416" starttime="20170615 05:52:28.062"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:28.416" starttime="20170615 05:52:28.061"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:28.420" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:28.421" starttime="20170615 05:52:28.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:28.421" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:28.421" starttime="20170615 05:52:28.421"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:28.422" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:28.422" starttime="20170615 05:52:28.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:28.423" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:28.423" starttime="20170615 05:52:28.422"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:28.635" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:28.635" starttime="20170615 05:52:28.423"></status>
</kw>
<msg timestamp="20170615 05:52:28.635" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:28.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.635" starttime="20170615 05:52:28.423"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:28.636" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.636" starttime="20170615 05:52:28.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:28.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.636" starttime="20170615 05:52:28.636"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:28.637" starttime="20170615 05:52:28.419"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:28.637" starttime="20170615 05:52:28.419"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:28.637" starttime="20170615 05:52:28.418"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:28.637" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:52:28.637" starttime="20170615 05:52:28.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:28.638" starttime="20170615 05:52:28.638"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:28.700" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:52:28.700" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.700" starttime="20170615 05:52:28.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:28.701" starttime="20170615 05:52:28.700"></status>
</kw>
<msg timestamp="20170615 05:52:28.701" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.701" starttime="20170615 05:52:28.418"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:28.702" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:28.702" starttime="20170615 05:52:28.701"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:28.702" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:28.702" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:28.703" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:52:28.703" starttime="20170615 05:52:28.702"></status>
</kw>
<msg timestamp="20170615 05:52:28.703" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:52:28.703" starttime="20170615 05:52:28.417"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:28.703" starttime="20170615 05:52:28.417"></status>
</kw>
<msg timestamp="20170615 05:52:28.704" level="FAIL">
#(UTC) 2017/06/15 05:52:28.703362 -   10.900789 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:52:28.704" starttime="20170615 05:52:27.804"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:38.712" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:38.713" starttime="20170615 05:52:38.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:38.714" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:38.714" starttime="20170615 05:52:38.713"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:38.715" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:38.715" starttime="20170615 05:52:38.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:38.716" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:38.716" starttime="20170615 05:52:38.715"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:38.945" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:38.945" starttime="20170615 05:52:38.717"></status>
</kw>
<msg timestamp="20170615 05:52:38.945" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:38.945" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:38.945" starttime="20170615 05:52:38.716"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:38.946" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:38.946" starttime="20170615 05:52:38.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:38.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:38.947" starttime="20170615 05:52:38.946"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:38.947" starttime="20170615 05:52:38.711"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:38.947" starttime="20170615 05:52:38.710"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:38.947" starttime="20170615 05:52:38.709"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:38.948" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:52:38.948" starttime="20170615 05:52:38.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:38.948" starttime="20170615 05:52:38.948"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:39.057" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:52:39.058" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.058" starttime="20170615 05:52:38.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:39.059" starttime="20170615 05:52:39.058"></status>
</kw>
<msg timestamp="20170615 05:52:39.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.059" starttime="20170615 05:52:38.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:39.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.060" starttime="20170615 05:52:39.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:39.060" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:39.060" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:39.061" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:52:39.061" starttime="20170615 05:52:39.060"></status>
</kw>
<msg timestamp="20170615 05:52:39.061" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:52:39.061" starttime="20170615 05:52:38.707"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:39.061" starttime="20170615 05:52:38.707"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:39.065" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:39.066" starttime="20170615 05:52:39.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:39.066" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:39.066" starttime="20170615 05:52:39.066"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:39.067" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:39.067" starttime="20170615 05:52:39.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:39.068" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:39.068" starttime="20170615 05:52:39.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:39.250" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:39.250" starttime="20170615 05:52:39.069"></status>
</kw>
<msg timestamp="20170615 05:52:39.250" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:39.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.251" starttime="20170615 05:52:39.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:39.251" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.251" starttime="20170615 05:52:39.251"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:39.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.252" starttime="20170615 05:52:39.252"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:39.252" starttime="20170615 05:52:39.064"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:39.252" starttime="20170615 05:52:39.064"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:39.252" starttime="20170615 05:52:39.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:39.253" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:52:39.253" starttime="20170615 05:52:39.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:39.254" starttime="20170615 05:52:39.254"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:39.319" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:52:39.319" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.319" starttime="20170615 05:52:39.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:39.320" starttime="20170615 05:52:39.320"></status>
</kw>
<msg timestamp="20170615 05:52:39.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.320" starttime="20170615 05:52:39.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:39.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.321" starttime="20170615 05:52:39.321"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:39.322" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:39.322" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:39.322" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:52:39.322" starttime="20170615 05:52:39.322"></status>
</kw>
<msg timestamp="20170615 05:52:39.322" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:52:39.323" starttime="20170615 05:52:39.062"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:39.323" starttime="20170615 05:52:39.062"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:39.326" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:39.327" starttime="20170615 05:52:39.326"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:39.328" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:39.328" starttime="20170615 05:52:39.327"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:39.328" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:39.328" starttime="20170615 05:52:39.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:39.329" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:39.329" starttime="20170615 05:52:39.329"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:39.507" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:39.507" starttime="20170615 05:52:39.330"></status>
</kw>
<msg timestamp="20170615 05:52:39.507" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:39.507" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.507" starttime="20170615 05:52:39.329"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:39.508" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.508" starttime="20170615 05:52:39.508"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:39.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.509" starttime="20170615 05:52:39.509"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:39.509" starttime="20170615 05:52:39.326"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:39.509" starttime="20170615 05:52:39.325"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:39.509" starttime="20170615 05:52:39.325"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:39.510" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:52:39.510" starttime="20170615 05:52:39.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:39.511" starttime="20170615 05:52:39.510"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:39.575" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:52:39.576" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.576" starttime="20170615 05:52:39.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:39.577" starttime="20170615 05:52:39.576"></status>
</kw>
<msg timestamp="20170615 05:52:39.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.577" starttime="20170615 05:52:39.324"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:39.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:39.578" starttime="20170615 05:52:39.577"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:39.578" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:39.578" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:39.578" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:52:39.578" starttime="20170615 05:52:39.578"></status>
</kw>
<msg timestamp="20170615 05:52:39.579" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:52:39.579" starttime="20170615 05:52:39.323"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:39.579" starttime="20170615 05:52:39.323"></status>
</kw>
<msg timestamp="20170615 05:52:39.580" level="FAIL">
#(UTC) 2017/06/15 05:52:39.579276 -   10.875914 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:52:39.580" starttime="20170615 05:52:38.705"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:49.587" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:49.588" starttime="20170615 05:52:49.587"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:49.588" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:49.588" starttime="20170615 05:52:49.588"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:49.589" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:49.589" starttime="20170615 05:52:49.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:49.590" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:49.590" starttime="20170615 05:52:49.589"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:49.768" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:49.768" starttime="20170615 05:52:49.590"></status>
</kw>
<msg timestamp="20170615 05:52:49.769" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:49.769" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:49.769" starttime="20170615 05:52:49.590"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:49.770" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:49.770" starttime="20170615 05:52:49.769"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:49.770" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:49.770" starttime="20170615 05:52:49.770"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:49.771" starttime="20170615 05:52:49.586"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:49.771" starttime="20170615 05:52:49.586"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:49.771" starttime="20170615 05:52:49.585"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:49.771" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:52:49.771" starttime="20170615 05:52:49.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:49.772" starttime="20170615 05:52:49.772"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:49.836" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:52:49.836" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:49.836" starttime="20170615 05:52:49.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:49.837" starttime="20170615 05:52:49.836"></status>
</kw>
<msg timestamp="20170615 05:52:49.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:49.837" starttime="20170615 05:52:49.584"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:49.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:49.838" starttime="20170615 05:52:49.837"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:49.838" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:49.838" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:49.839" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:52:49.839" starttime="20170615 05:52:49.838"></status>
</kw>
<msg timestamp="20170615 05:52:49.839" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:52:49.839" starttime="20170615 05:52:49.584"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:49.839" starttime="20170615 05:52:49.583"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:49.845" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:49.845" starttime="20170615 05:52:49.844"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:49.846" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:49.846" starttime="20170615 05:52:49.846"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:49.847" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:49.847" starttime="20170615 05:52:49.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:49.848" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:49.848" starttime="20170615 05:52:49.847"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:50.055" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:50.055" starttime="20170615 05:52:49.849"></status>
</kw>
<msg timestamp="20170615 05:52:50.055" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:50.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:50.055" starttime="20170615 05:52:49.848"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:50.056" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:50.056" starttime="20170615 05:52:50.056"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:50.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:50.058" starttime="20170615 05:52:50.056"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:50.058" starttime="20170615 05:52:49.843"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:50.058" starttime="20170615 05:52:49.843"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:50.058" starttime="20170615 05:52:49.842"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:50.059" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:52:50.059" starttime="20170615 05:52:50.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:50.060" starttime="20170615 05:52:50.059"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:50.125" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:52:50.126" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:50.126" starttime="20170615 05:52:50.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:50.127" starttime="20170615 05:52:50.126"></status>
</kw>
<msg timestamp="20170615 05:52:50.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:50.127" starttime="20170615 05:52:49.841"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:50.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:50.128" starttime="20170615 05:52:50.127"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:50.128" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:50.128" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:50.128" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:52:50.128" starttime="20170615 05:52:50.128"></status>
</kw>
<msg timestamp="20170615 05:52:50.129" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:52:50.129" starttime="20170615 05:52:49.840"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:50.129" starttime="20170615 05:52:49.840"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:52:50.135" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:52:50.136" starttime="20170615 05:52:50.135"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:52:50.136" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:52:50.136" starttime="20170615 05:52:50.136"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:52:50.137" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:52:50.137" starttime="20170615 05:52:50.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:52:50.138" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:52:50.138" starttime="20170615 05:52:50.137"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:52:50.322" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:52:50.322" starttime="20170615 05:52:50.138"></status>
</kw>
<msg timestamp="20170615 05:52:50.322" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:52:50.322" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:50.322" starttime="20170615 05:52:50.138"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:52:50.323" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:50.324" starttime="20170615 05:52:50.323"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:50.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:50.325" starttime="20170615 05:52:50.324"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:50.325" starttime="20170615 05:52:50.132"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:50.325" starttime="20170615 05:52:50.132"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:50.325" starttime="20170615 05:52:50.131"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:52:50.325" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:52:50.325" starttime="20170615 05:52:50.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:50.326" starttime="20170615 05:52:50.326"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:52:50.403" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:52:50.403" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:50.403" starttime="20170615 05:52:50.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:52:50.404" starttime="20170615 05:52:50.403"></status>
</kw>
<msg timestamp="20170615 05:52:50.404" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:52:50.404" starttime="20170615 05:52:50.130"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:52:50.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:52:50.405" starttime="20170615 05:52:50.405"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:52:50.406" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:52:50.406" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:52:50.406" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:52:50.406" starttime="20170615 05:52:50.405"></status>
</kw>
<msg timestamp="20170615 05:52:50.406" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:52:50.406" starttime="20170615 05:52:50.130"></status>
</kw>
<status status="PASS" endtime="20170615 05:52:50.406" starttime="20170615 05:52:50.129"></status>
</kw>
<msg timestamp="20170615 05:52:50.412" level="FAIL">
#(UTC) 2017/06/15 05:52:50.406802 -   10.827526 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:52:50.412" starttime="20170615 05:52:49.581"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:00.485" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:00.485" starttime="20170615 05:53:00.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:00.486" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:00.486" starttime="20170615 05:53:00.486"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:00.487" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:00.487" starttime="20170615 05:53:00.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:00.488" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:00.488" starttime="20170615 05:53:00.488"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:00.674" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:00.674" starttime="20170615 05:53:00.489"></status>
</kw>
<msg timestamp="20170615 05:53:00.674" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:00.674" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:00.674" starttime="20170615 05:53:00.488"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:00.675" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:00.675" starttime="20170615 05:53:00.674"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:00.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:00.675" starttime="20170615 05:53:00.675"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:00.676" starttime="20170615 05:53:00.483"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:00.676" starttime="20170615 05:53:00.417"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:00.676" starttime="20170615 05:53:00.416"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:00.676" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:53:00.676" starttime="20170615 05:53:00.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:00.677" starttime="20170615 05:53:00.677"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:00.740" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:53:00.740" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:00.740" starttime="20170615 05:53:00.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:00.741" starttime="20170615 05:53:00.740"></status>
</kw>
<msg timestamp="20170615 05:53:00.741" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:00.741" starttime="20170615 05:53:00.416"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:00.742" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:00.742" starttime="20170615 05:53:00.741"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:00.742" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:00.742" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:00.743" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:53:00.743" starttime="20170615 05:53:00.742"></status>
</kw>
<msg timestamp="20170615 05:53:00.743" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:53:00.743" starttime="20170615 05:53:00.415"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:00.743" starttime="20170615 05:53:00.415"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:00.747" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:00.748" starttime="20170615 05:53:00.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:00.748" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:00.748" starttime="20170615 05:53:00.748"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:00.749" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:00.749" starttime="20170615 05:53:00.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:00.749" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:00.750" starttime="20170615 05:53:00.749"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:00.926" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:00.926" starttime="20170615 05:53:00.750"></status>
</kw>
<msg timestamp="20170615 05:53:00.926" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:00.926" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:00.926" starttime="20170615 05:53:00.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:00.927" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:00.927" starttime="20170615 05:53:00.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:00.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:00.928" starttime="20170615 05:53:00.927"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:00.928" starttime="20170615 05:53:00.746"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:00.928" starttime="20170615 05:53:00.746"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:00.928" starttime="20170615 05:53:00.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:00.929" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:53:00.929" starttime="20170615 05:53:00.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:00.929" starttime="20170615 05:53:00.929"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:01.041" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:53:01.041" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:01.041" starttime="20170615 05:53:00.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:01.042" starttime="20170615 05:53:01.042"></status>
</kw>
<msg timestamp="20170615 05:53:01.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:01.042" starttime="20170615 05:53:00.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:01.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:01.043" starttime="20170615 05:53:01.043"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:01.044" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:01.044" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:01.044" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:53:01.044" starttime="20170615 05:53:01.043"></status>
</kw>
<msg timestamp="20170615 05:53:01.044" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:53:01.044" starttime="20170615 05:53:00.744"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:01.044" starttime="20170615 05:53:00.743"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:01.049" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:01.049" starttime="20170615 05:53:01.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:01.050" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:01.050" starttime="20170615 05:53:01.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:01.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:01.050" starttime="20170615 05:53:01.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:01.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:01.051" starttime="20170615 05:53:01.050"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:01.250" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:01.250" starttime="20170615 05:53:01.052"></status>
</kw>
<msg timestamp="20170615 05:53:01.250" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:01.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:01.250" starttime="20170615 05:53:01.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:01.251" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:01.251" starttime="20170615 05:53:01.251"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:01.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:01.252" starttime="20170615 05:53:01.252"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:01.252" starttime="20170615 05:53:01.048"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:01.252" starttime="20170615 05:53:01.047"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:01.253" starttime="20170615 05:53:01.047"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:01.253" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:53:01.253" starttime="20170615 05:53:01.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:01.254" starttime="20170615 05:53:01.254"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:01.365" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:53:01.365" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:01.365" starttime="20170615 05:53:01.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:01.366" starttime="20170615 05:53:01.366"></status>
</kw>
<msg timestamp="20170615 05:53:01.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:01.366" starttime="20170615 05:53:01.046"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:01.367" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:01.367" starttime="20170615 05:53:01.366"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:01.367" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:01.367" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:01.368" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:53:01.368" starttime="20170615 05:53:01.367"></status>
</kw>
<msg timestamp="20170615 05:53:01.368" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:53:01.368" starttime="20170615 05:53:01.045"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:01.368" starttime="20170615 05:53:01.045"></status>
</kw>
<msg timestamp="20170615 05:53:01.369" level="FAIL">
#(UTC) 2017/06/15 05:53:01.368400 -   10.961598 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:53:01.369" starttime="20170615 05:53:00.412"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:11.378" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:11.379" starttime="20170615 05:53:11.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:11.380" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:11.380" starttime="20170615 05:53:11.379"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:11.380" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:11.380" starttime="20170615 05:53:11.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:11.381" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:11.381" starttime="20170615 05:53:11.381"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:11.601" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:11.601" starttime="20170615 05:53:11.382"></status>
</kw>
<msg timestamp="20170615 05:53:11.601" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:11.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:11.601" starttime="20170615 05:53:11.381"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:11.602" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:11.602" starttime="20170615 05:53:11.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:11.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:11.603" starttime="20170615 05:53:11.602"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:11.603" starttime="20170615 05:53:11.378"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:11.603" starttime="20170615 05:53:11.377"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:11.603" starttime="20170615 05:53:11.377"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:11.603" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:53:11.604" starttime="20170615 05:53:11.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:11.604" starttime="20170615 05:53:11.604"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:11.668" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:53:11.669" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:11.669" starttime="20170615 05:53:11.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:11.669" starttime="20170615 05:53:11.669"></status>
</kw>
<msg timestamp="20170615 05:53:11.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:11.670" starttime="20170615 05:53:11.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:11.670" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:11.671" starttime="20170615 05:53:11.670"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:11.671" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:11.671" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:11.671" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:53:11.671" starttime="20170615 05:53:11.671"></status>
</kw>
<msg timestamp="20170615 05:53:11.672" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:53:11.672" starttime="20170615 05:53:11.375"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:11.672" starttime="20170615 05:53:11.375"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:11.676" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:11.676" starttime="20170615 05:53:11.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:11.677" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:11.677" starttime="20170615 05:53:11.676"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:11.677" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:11.677" starttime="20170615 05:53:11.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:11.678" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:11.678" starttime="20170615 05:53:11.678"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:11.901" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:11.901" starttime="20170615 05:53:11.679"></status>
</kw>
<msg timestamp="20170615 05:53:11.901" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:11.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:11.901" starttime="20170615 05:53:11.678"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:11.902" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:11.902" starttime="20170615 05:53:11.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:11.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:11.902" starttime="20170615 05:53:11.902"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:11.903" starttime="20170615 05:53:11.675"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:11.903" starttime="20170615 05:53:11.674"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:11.903" starttime="20170615 05:53:11.674"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:11.903" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:53:11.903" starttime="20170615 05:53:11.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:11.904" starttime="20170615 05:53:11.904"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:12.033" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:53:12.033" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:12.033" starttime="20170615 05:53:11.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:12.034" starttime="20170615 05:53:12.034"></status>
</kw>
<msg timestamp="20170615 05:53:12.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:12.035" starttime="20170615 05:53:11.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:12.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:12.035" starttime="20170615 05:53:12.035"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:12.036" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:12.036" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:12.036" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:53:12.036" starttime="20170615 05:53:12.035"></status>
</kw>
<msg timestamp="20170615 05:53:12.036" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:53:12.036" starttime="20170615 05:53:11.673"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:12.036" starttime="20170615 05:53:11.672"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:12.040" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:12.041" starttime="20170615 05:53:12.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:12.041" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:12.041" starttime="20170615 05:53:12.041"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:12.042" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:12.042" starttime="20170615 05:53:12.041"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:12.043" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:12.043" starttime="20170615 05:53:12.042"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:12.266" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:12.266" starttime="20170615 05:53:12.043"></status>
</kw>
<msg timestamp="20170615 05:53:12.266" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:12.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:12.267" starttime="20170615 05:53:12.043"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:12.267" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:12.267" starttime="20170615 05:53:12.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:12.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:12.268" starttime="20170615 05:53:12.268"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:12.268" starttime="20170615 05:53:12.039"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:12.268" starttime="20170615 05:53:12.039"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:12.269" starttime="20170615 05:53:12.038"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:12.269" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:53:12.269" starttime="20170615 05:53:12.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:12.270" starttime="20170615 05:53:12.270"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:12.383" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:53:12.383" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:12.383" starttime="20170615 05:53:12.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:12.384" starttime="20170615 05:53:12.383"></status>
</kw>
<msg timestamp="20170615 05:53:12.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:12.384" starttime="20170615 05:53:12.038"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:12.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:12.385" starttime="20170615 05:53:12.384"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:12.385" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:12.385" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:12.385" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:53:12.385" starttime="20170615 05:53:12.385"></status>
</kw>
<msg timestamp="20170615 05:53:12.386" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:53:12.386" starttime="20170615 05:53:12.037"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:12.386" starttime="20170615 05:53:12.037"></status>
</kw>
<msg timestamp="20170615 05:53:12.387" level="FAIL">
#(UTC) 2017/06/15 05:53:12.386188 -   11.017788 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:53:12.387" starttime="20170615 05:53:11.372"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:22.393" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:22.393" starttime="20170615 05:53:22.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:22.394" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:22.394" starttime="20170615 05:53:22.394"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:22.395" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:22.395" starttime="20170615 05:53:22.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:22.395" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:22.395" starttime="20170615 05:53:22.395"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:22.677" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:22.677" starttime="20170615 05:53:22.396"></status>
</kw>
<msg timestamp="20170615 05:53:22.677" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:22.677" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:22.677" starttime="20170615 05:53:22.396"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:22.678" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:22.678" starttime="20170615 05:53:22.677"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:22.679" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:22.679" starttime="20170615 05:53:22.678"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:22.679" starttime="20170615 05:53:22.392"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:22.679" starttime="20170615 05:53:22.392"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:22.679" starttime="20170615 05:53:22.391"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:22.680" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:53:22.680" starttime="20170615 05:53:22.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:22.680" starttime="20170615 05:53:22.680"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:22.743" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:53:22.743" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:22.743" starttime="20170615 05:53:22.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:22.744" starttime="20170615 05:53:22.744"></status>
</kw>
<msg timestamp="20170615 05:53:22.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:22.745" starttime="20170615 05:53:22.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:22.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:22.746" starttime="20170615 05:53:22.745"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:22.746" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:22.746" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:22.747" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:53:22.747" starttime="20170615 05:53:22.746"></status>
</kw>
<msg timestamp="20170615 05:53:22.747" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:53:22.747" starttime="20170615 05:53:22.390"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:22.747" starttime="20170615 05:53:22.389"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:22.753" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:22.754" starttime="20170615 05:53:22.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:22.755" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:22.755" starttime="20170615 05:53:22.754"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:22.755" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:22.756" starttime="20170615 05:53:22.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:22.756" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:22.756" starttime="20170615 05:53:22.756"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:22.952" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:22.952" starttime="20170615 05:53:22.757"></status>
</kw>
<msg timestamp="20170615 05:53:22.953" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:22.953" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:22.953" starttime="20170615 05:53:22.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:22.953" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:22.954" starttime="20170615 05:53:22.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:22.954" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:22.954" starttime="20170615 05:53:22.954"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:22.954" starttime="20170615 05:53:22.752"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:22.955" starttime="20170615 05:53:22.751"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:22.955" starttime="20170615 05:53:22.750"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:22.955" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:53:22.955" starttime="20170615 05:53:22.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:22.956" starttime="20170615 05:53:22.956"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:23.054" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:53:23.054" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:23.054" starttime="20170615 05:53:22.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:23.055" starttime="20170615 05:53:23.055"></status>
</kw>
<msg timestamp="20170615 05:53:23.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:23.055" starttime="20170615 05:53:22.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:23.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:23.056" starttime="20170615 05:53:23.056"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:23.057" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:23.057" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:23.057" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:53:23.057" starttime="20170615 05:53:23.056"></status>
</kw>
<msg timestamp="20170615 05:53:23.057" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:53:23.057" starttime="20170615 05:53:22.748"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:23.057" starttime="20170615 05:53:22.748"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:23.062" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:23.063" starttime="20170615 05:53:23.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:23.064" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:23.064" starttime="20170615 05:53:23.063"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:23.065" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:23.065" starttime="20170615 05:53:23.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:23.066" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:23.066" starttime="20170615 05:53:23.065"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:23.257" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:23.258" starttime="20170615 05:53:23.067"></status>
</kw>
<msg timestamp="20170615 05:53:23.258" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:23.258" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:23.258" starttime="20170615 05:53:23.066"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:23.259" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:23.259" starttime="20170615 05:53:23.258"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:23.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:23.260" starttime="20170615 05:53:23.259"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:23.260" starttime="20170615 05:53:23.061"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:23.260" starttime="20170615 05:53:23.060"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:23.260" starttime="20170615 05:53:23.060"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:23.261" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:53:23.261" starttime="20170615 05:53:23.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:23.262" starttime="20170615 05:53:23.262"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:23.326" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:53:23.326" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:23.326" starttime="20170615 05:53:23.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:23.327" starttime="20170615 05:53:23.327"></status>
</kw>
<msg timestamp="20170615 05:53:23.327" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:23.327" starttime="20170615 05:53:23.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:23.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:23.328" starttime="20170615 05:53:23.328"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:23.329" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:23.329" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:23.329" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:53:23.329" starttime="20170615 05:53:23.328"></status>
</kw>
<msg timestamp="20170615 05:53:23.329" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:53:23.329" starttime="20170615 05:53:23.058"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:23.330" starttime="20170615 05:53:23.058"></status>
</kw>
<msg timestamp="20170615 05:53:23.330" level="FAIL">
#(UTC) 2017/06/15 05:53:23.329778 -   10.943590 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:53:23.330" starttime="20170615 05:53:22.387"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:33.337" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:33.337" starttime="20170615 05:53:33.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:33.338" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:33.338" starttime="20170615 05:53:33.338"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:33.339" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:33.339" starttime="20170615 05:53:33.338"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:33.340" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:33.340" starttime="20170615 05:53:33.339"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:33.553" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:33.554" starttime="20170615 05:53:33.341"></status>
</kw>
<msg timestamp="20170615 05:53:33.554" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:33.554" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:33.554" starttime="20170615 05:53:33.340"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:33.555" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:33.555" starttime="20170615 05:53:33.555"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:33.556" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:33.556" starttime="20170615 05:53:33.555"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:33.556" starttime="20170615 05:53:33.336"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:33.556" starttime="20170615 05:53:33.335"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:33.556" starttime="20170615 05:53:33.335"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:33.557" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:53:33.557" starttime="20170615 05:53:33.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:33.557" starttime="20170615 05:53:33.557"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:33.633" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:53:33.633" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:33.633" starttime="20170615 05:53:33.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:33.634" starttime="20170615 05:53:33.633"></status>
</kw>
<msg timestamp="20170615 05:53:33.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:33.634" starttime="20170615 05:53:33.334"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:33.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:33.635" starttime="20170615 05:53:33.634"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:33.635" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:33.635" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:33.636" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:53:33.636" starttime="20170615 05:53:33.635"></status>
</kw>
<msg timestamp="20170615 05:53:33.636" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:53:33.636" starttime="20170615 05:53:33.334"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:33.636" starttime="20170615 05:53:33.333"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:33.640" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:33.641" starttime="20170615 05:53:33.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:33.641" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:33.641" starttime="20170615 05:53:33.641"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:33.642" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:33.642" starttime="20170615 05:53:33.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:33.643" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:33.643" starttime="20170615 05:53:33.642"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:33.858" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:33.859" starttime="20170615 05:53:33.644"></status>
</kw>
<msg timestamp="20170615 05:53:33.859" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:33.859" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:33.859" starttime="20170615 05:53:33.643"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:33.860" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:33.860" starttime="20170615 05:53:33.859"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:33.860" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:33.861" starttime="20170615 05:53:33.860"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:33.861" starttime="20170615 05:53:33.639"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:33.861" starttime="20170615 05:53:33.639"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:33.861" starttime="20170615 05:53:33.638"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:33.861" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:53:33.861" starttime="20170615 05:53:33.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:33.862" starttime="20170615 05:53:33.862"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:33.928" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:53:33.928" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:33.928" starttime="20170615 05:53:33.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:33.929" starttime="20170615 05:53:33.928"></status>
</kw>
<msg timestamp="20170615 05:53:33.929" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:33.929" starttime="20170615 05:53:33.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:33.930" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:33.930" starttime="20170615 05:53:33.929"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:33.930" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:33.930" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:33.930" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:53:33.931" starttime="20170615 05:53:33.930"></status>
</kw>
<msg timestamp="20170615 05:53:33.931" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:53:33.931" starttime="20170615 05:53:33.637"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:33.931" starttime="20170615 05:53:33.636"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:33.935" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:33.938" starttime="20170615 05:53:33.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:33.938" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:33.938" starttime="20170615 05:53:33.938"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:33.939" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:33.939" starttime="20170615 05:53:33.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:33.940" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:33.940" starttime="20170615 05:53:33.939"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:34.144" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:34.144" starttime="20170615 05:53:33.940"></status>
</kw>
<msg timestamp="20170615 05:53:34.144" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:34.144" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:34.144" starttime="20170615 05:53:33.940"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:34.145" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:34.145" starttime="20170615 05:53:34.145"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:34.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:34.146" starttime="20170615 05:53:34.145"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:34.146" starttime="20170615 05:53:33.934"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:34.146" starttime="20170615 05:53:33.934"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:34.146" starttime="20170615 05:53:33.933"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:34.147" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:53:34.147" starttime="20170615 05:53:34.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:34.147" starttime="20170615 05:53:34.147"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:34.233" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:53:34.234" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:34.234" starttime="20170615 05:53:34.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:34.235" starttime="20170615 05:53:34.234"></status>
</kw>
<msg timestamp="20170615 05:53:34.235" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:34.235" starttime="20170615 05:53:33.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:34.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:34.236" starttime="20170615 05:53:34.235"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:34.236" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:34.236" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:34.236" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:53:34.236" starttime="20170615 05:53:34.236"></status>
</kw>
<msg timestamp="20170615 05:53:34.237" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:53:34.237" starttime="20170615 05:53:33.932"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:34.237" starttime="20170615 05:53:33.931"></status>
</kw>
<msg timestamp="20170615 05:53:34.238" level="FAIL">
#(UTC) 2017/06/15 05:53:34.237208 -   10.907430 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:53:34.238" starttime="20170615 05:53:33.331"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:44.246" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:44.246" starttime="20170615 05:53:44.245"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:44.247" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:44.247" starttime="20170615 05:53:44.247"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:44.248" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:44.248" starttime="20170615 05:53:44.247"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:44.248" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:44.248" starttime="20170615 05:53:44.248"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:44.598" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:44.599" starttime="20170615 05:53:44.249"></status>
</kw>
<msg timestamp="20170615 05:53:44.599" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:44.599" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:44.599" starttime="20170615 05:53:44.249"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:44.600" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:44.600" starttime="20170615 05:53:44.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:44.600" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:44.600" starttime="20170615 05:53:44.600"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:44.601" starttime="20170615 05:53:44.244"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:44.601" starttime="20170615 05:53:44.244"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:44.601" starttime="20170615 05:53:44.243"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:44.601" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:53:44.601" starttime="20170615 05:53:44.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:44.602" starttime="20170615 05:53:44.602"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:45.301" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:53:45.302" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:45.302" starttime="20170615 05:53:44.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:45.303" starttime="20170615 05:53:45.302"></status>
</kw>
<msg timestamp="20170615 05:53:45.303" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:45.303" starttime="20170615 05:53:44.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:45.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:45.304" starttime="20170615 05:53:45.304"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:45.304" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:45.305" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:45.305" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:53:45.305" starttime="20170615 05:53:45.304"></status>
</kw>
<msg timestamp="20170615 05:53:45.305" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:53:45.305" starttime="20170615 05:53:44.242"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:45.305" starttime="20170615 05:53:44.242"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:45.309" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:45.310" starttime="20170615 05:53:45.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:45.310" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:45.311" starttime="20170615 05:53:45.310"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:45.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:45.311" starttime="20170615 05:53:45.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:45.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:45.312" starttime="20170615 05:53:45.311"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:45.940" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:45.940" starttime="20170615 05:53:45.313"></status>
</kw>
<msg timestamp="20170615 05:53:45.940" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:45.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:45.940" starttime="20170615 05:53:45.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:45.941" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:45.941" starttime="20170615 05:53:45.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:45.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:45.942" starttime="20170615 05:53:45.941"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:45.942" starttime="20170615 05:53:45.308"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:45.942" starttime="20170615 05:53:45.308"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:45.942" starttime="20170615 05:53:45.307"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:45.943" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:53:45.943" starttime="20170615 05:53:45.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:45.943" starttime="20170615 05:53:45.943"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:46.009" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:53:46.010" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:46.010" starttime="20170615 05:53:45.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:46.011" starttime="20170615 05:53:46.010"></status>
</kw>
<msg timestamp="20170615 05:53:46.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:46.011" starttime="20170615 05:53:45.307"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:46.012" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:46.012" starttime="20170615 05:53:46.011"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:46.012" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:46.012" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:46.012" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:53:46.012" starttime="20170615 05:53:46.012"></status>
</kw>
<msg timestamp="20170615 05:53:46.013" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:53:46.013" starttime="20170615 05:53:45.306"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:46.013" starttime="20170615 05:53:45.306"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:46.017" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:46.018" starttime="20170615 05:53:46.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:46.018" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:46.018" starttime="20170615 05:53:46.018"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:46.019" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:46.019" starttime="20170615 05:53:46.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:46.019" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:46.019" starttime="20170615 05:53:46.019"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:46.539" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:46.539" starttime="20170615 05:53:46.020"></status>
</kw>
<msg timestamp="20170615 05:53:46.539" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:46.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:46.539" starttime="20170615 05:53:46.020"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:46.540" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:46.540" starttime="20170615 05:53:46.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:46.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:46.541" starttime="20170615 05:53:46.540"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:46.541" starttime="20170615 05:53:46.016"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:46.541" starttime="20170615 05:53:46.015"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:46.541" starttime="20170615 05:53:46.015"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:46.542" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:53:46.542" starttime="20170615 05:53:46.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:46.543" starttime="20170615 05:53:46.542"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:53:47.982" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:53:47.983" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:47.983" starttime="20170615 05:53:46.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:47.984" starttime="20170615 05:53:47.983"></status>
</kw>
<msg timestamp="20170615 05:53:47.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:47.984" starttime="20170615 05:53:46.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:47.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:47.985" starttime="20170615 05:53:47.984"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:53:47.985" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:53:47.985" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:53:47.986" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:53:47.986" starttime="20170615 05:53:47.985"></status>
</kw>
<msg timestamp="20170615 05:53:47.986" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:53:47.986" starttime="20170615 05:53:46.014"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:47.986" starttime="20170615 05:53:46.013"></status>
</kw>
<msg timestamp="20170615 05:53:47.987" level="FAIL">
#(UTC) 2017/06/15 05:53:47.986447 -   13.749239 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:53:47.987" starttime="20170615 05:53:44.238"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:53:57.994" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:53:57.994" starttime="20170615 05:53:57.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:53:57.995" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:53:57.995" starttime="20170615 05:53:57.995"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:53:57.996" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:53:57.996" starttime="20170615 05:53:57.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:53:57.996" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:53:57.996" starttime="20170615 05:53:57.996"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:53:58.707" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:53:58.707" starttime="20170615 05:53:57.997"></status>
</kw>
<msg timestamp="20170615 05:53:58.708" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:53:58.708" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:53:58.708" starttime="20170615 05:53:57.997"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:53:58.709" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:58.709" starttime="20170615 05:53:58.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:53:58.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:53:58.710" starttime="20170615 05:53:58.709"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:58.710" starttime="20170615 05:53:57.993"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:58.710" starttime="20170615 05:53:57.992"></status>
</kw>
<status status="PASS" endtime="20170615 05:53:58.710" starttime="20170615 05:53:57.991"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:53:58.711" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:53:58.711" starttime="20170615 05:53:58.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:53:58.711" starttime="20170615 05:53:58.711"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:02.994" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:54:02.994" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:02.994" starttime="20170615 05:53:58.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:02.995" starttime="20170615 05:54:02.995"></status>
</kw>
<msg timestamp="20170615 05:54:02.996" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:02.996" starttime="20170615 05:53:57.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:02.996" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:02.996" starttime="20170615 05:54:02.996"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:02.997" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:02.997" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:02.997" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170615 05:54:02.997" starttime="20170615 05:54:02.997"></status>
</kw>
<msg timestamp="20170615 05:54:02.997" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170615 05:54:02.997" starttime="20170615 05:53:57.990"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:02.998" starttime="20170615 05:53:57.990"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:03.002" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:03.002" starttime="20170615 05:54:03.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:03.003" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:03.003" starttime="20170615 05:54:03.003"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:03.004" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:03.004" starttime="20170615 05:54:03.003"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:03.004" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:03.004" starttime="20170615 05:54:03.004"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:03.249" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:03.249" starttime="20170615 05:54:03.005"></status>
</kw>
<msg timestamp="20170615 05:54:03.249" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:03.249" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:03.249" starttime="20170615 05:54:03.005"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:03.250" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:03.250" starttime="20170615 05:54:03.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:03.251" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:03.251" starttime="20170615 05:54:03.250"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:03.251" starttime="20170615 05:54:03.001"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:03.251" starttime="20170615 05:54:03.000"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:03.251" starttime="20170615 05:54:03.000"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:03.252" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:54:03.252" starttime="20170615 05:54:03.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:03.252" starttime="20170615 05:54:03.252"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:04.980" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:54:04.980" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:04.980" starttime="20170615 05:54:03.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:04.981" starttime="20170615 05:54:04.981"></status>
</kw>
<msg timestamp="20170615 05:54:04.981" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:04.981" starttime="20170615 05:54:02.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:04.982" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:04.982" starttime="20170615 05:54:04.982"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:04.983" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:04.983" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:04.983" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170615 05:54:04.983" starttime="20170615 05:54:04.982"></status>
</kw>
<msg timestamp="20170615 05:54:04.983" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170615 05:54:04.983" starttime="20170615 05:54:02.998"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:04.983" starttime="20170615 05:54:02.998"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:04.988" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:04.988" starttime="20170615 05:54:04.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:04.989" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:04.989" starttime="20170615 05:54:04.988"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:04.989" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:04.989" starttime="20170615 05:54:04.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:04.990" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:04.990" starttime="20170615 05:54:04.990"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:05.965" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:05.965" starttime="20170615 05:54:04.991"></status>
</kw>
<msg timestamp="20170615 05:54:05.965" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:05.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:05.965" starttime="20170615 05:54:04.990"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:05.966" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:05.966" starttime="20170615 05:54:05.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:05.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:05.967" starttime="20170615 05:54:05.966"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:05.967" starttime="20170615 05:54:04.987"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:05.967" starttime="20170615 05:54:04.986"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:05.967" starttime="20170615 05:54:04.985"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:05.968" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:54:05.968" starttime="20170615 05:54:05.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:05.968" starttime="20170615 05:54:05.968"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:07.910" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:54:07.911" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:07.911" starttime="20170615 05:54:05.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:07.912" starttime="20170615 05:54:07.911"></status>
</kw>
<msg timestamp="20170615 05:54:07.912" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:07.912" starttime="20170615 05:54:04.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:07.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:07.912" starttime="20170615 05:54:07.912"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:07.913" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:07.913" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:07.913" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170615 05:54:07.913" starttime="20170615 05:54:07.913"></status>
</kw>
<msg timestamp="20170615 05:54:07.914" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170615 05:54:07.914" starttime="20170615 05:54:04.984"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:07.914" starttime="20170615 05:54:04.984"></status>
</kw>
<msg timestamp="20170615 05:54:07.914" level="FAIL">
#(UTC) 2017/06/15 05:54:07.914137 -   19.927690 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Off
  state[chassis]:                                 Off
</msg>
<status status="FAIL" endtime="20170615 05:54:07.915" starttime="20170615 05:53:57.988"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:17.921" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:17.922" starttime="20170615 05:54:17.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:17.923" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:17.923" starttime="20170615 05:54:17.922"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:17.923" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:17.923" starttime="20170615 05:54:17.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:17.924" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:17.924" starttime="20170615 05:54:17.924"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:18.104" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:18.104" starttime="20170615 05:54:17.925"></status>
</kw>
<msg timestamp="20170615 05:54:18.104" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:18.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.104" starttime="20170615 05:54:17.924"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:18.105" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.105" starttime="20170615 05:54:18.104"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:18.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.105" starttime="20170615 05:54:18.105"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:18.106" starttime="20170615 05:54:17.921"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:18.106" starttime="20170615 05:54:17.920"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:18.106" starttime="20170615 05:54:17.919"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:18.106" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:54:18.106" starttime="20170615 05:54:18.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:18.107" starttime="20170615 05:54:18.107"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:18.171" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:54:18.171" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.171" starttime="20170615 05:54:18.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:18.172" starttime="20170615 05:54:18.171"></status>
</kw>
<msg timestamp="20170615 05:54:18.172" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.172" starttime="20170615 05:54:17.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:18.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.173" starttime="20170615 05:54:18.172"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:18.173" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:18.173" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:18.173" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:54:18.174" starttime="20170615 05:54:18.173"></status>
</kw>
<msg timestamp="20170615 05:54:18.174" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:54:18.174" starttime="20170615 05:54:17.918"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:18.174" starttime="20170615 05:54:17.917"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:18.178" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:18.179" starttime="20170615 05:54:18.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:18.179" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:18.179" starttime="20170615 05:54:18.179"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:18.180" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:18.180" starttime="20170615 05:54:18.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:18.181" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:18.181" starttime="20170615 05:54:18.180"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:18.403" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:18.403" starttime="20170615 05:54:18.181"></status>
</kw>
<msg timestamp="20170615 05:54:18.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:18.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.404" starttime="20170615 05:54:18.181"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:18.404" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.404" starttime="20170615 05:54:18.404"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:18.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.405" starttime="20170615 05:54:18.405"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:18.405" starttime="20170615 05:54:18.178"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:18.405" starttime="20170615 05:54:18.177"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:18.405" starttime="20170615 05:54:18.176"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:18.406" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:54:18.406" starttime="20170615 05:54:18.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:18.407" starttime="20170615 05:54:18.406"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:18.472" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:54:18.472" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.472" starttime="20170615 05:54:18.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:18.473" starttime="20170615 05:54:18.472"></status>
</kw>
<msg timestamp="20170615 05:54:18.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.473" starttime="20170615 05:54:18.175"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:18.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.474" starttime="20170615 05:54:18.473"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:18.474" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:18.474" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:18.475" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170615 05:54:18.475" starttime="20170615 05:54:18.474"></status>
</kw>
<msg timestamp="20170615 05:54:18.475" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170615 05:54:18.475" starttime="20170615 05:54:18.175"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:18.475" starttime="20170615 05:54:18.174"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:18.480" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:18.481" starttime="20170615 05:54:18.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:18.481" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:18.481" starttime="20170615 05:54:18.481"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:18.482" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:18.482" starttime="20170615 05:54:18.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:18.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:18.483" starttime="20170615 05:54:18.483"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:18.665" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:18.665" starttime="20170615 05:54:18.484"></status>
</kw>
<msg timestamp="20170615 05:54:18.665" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:18.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.666" starttime="20170615 05:54:18.484"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:18.666" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.666" starttime="20170615 05:54:18.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:18.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.667" starttime="20170615 05:54:18.667"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:18.667" starttime="20170615 05:54:18.479"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:18.667" starttime="20170615 05:54:18.478"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:18.667" starttime="20170615 05:54:18.477"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:18.668" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:54:18.668" starttime="20170615 05:54:18.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:18.669" starttime="20170615 05:54:18.668"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:18.731" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:54:18.731" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.731" starttime="20170615 05:54:18.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:18.732" starttime="20170615 05:54:18.732"></status>
</kw>
<msg timestamp="20170615 05:54:18.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.732" starttime="20170615 05:54:18.476"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:18.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:18.733" starttime="20170615 05:54:18.733"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:18.734" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:18.734" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:18.734" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:54:18.734" starttime="20170615 05:54:18.733"></status>
</kw>
<msg timestamp="20170615 05:54:18.734" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:54:18.734" starttime="20170615 05:54:18.476"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:18.734" starttime="20170615 05:54:18.475"></status>
</kw>
<msg timestamp="20170615 05:54:18.735" level="FAIL">
#(UTC) 2017/06/15 05:54:18.734709 -   10.820572 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:54:18.735" starttime="20170615 05:54:17.915"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:28.742" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:28.742" starttime="20170615 05:54:28.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:28.743" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:28.743" starttime="20170615 05:54:28.743"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:28.744" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:28.744" starttime="20170615 05:54:28.743"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:28.744" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:28.744" starttime="20170615 05:54:28.744"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:28.929" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:28.930" starttime="20170615 05:54:28.745"></status>
</kw>
<msg timestamp="20170615 05:54:28.930" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:28.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:28.930" starttime="20170615 05:54:28.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:28.930" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:28.931" starttime="20170615 05:54:28.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:28.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:28.931" starttime="20170615 05:54:28.931"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:28.931" starttime="20170615 05:54:28.741"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:28.931" starttime="20170615 05:54:28.740"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:28.932" starttime="20170615 05:54:28.740"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:28.932" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:54:28.932" starttime="20170615 05:54:28.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:28.933" starttime="20170615 05:54:28.933"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:28.996" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:54:28.996" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:28.996" starttime="20170615 05:54:28.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:28.997" starttime="20170615 05:54:28.996"></status>
</kw>
<msg timestamp="20170615 05:54:28.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:28.997" starttime="20170615 05:54:28.739"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:28.997" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:28.998" starttime="20170615 05:54:28.997"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:28.998" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:28.998" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:28.998" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:54:28.998" starttime="20170615 05:54:28.998"></status>
</kw>
<msg timestamp="20170615 05:54:28.999" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:54:28.999" starttime="20170615 05:54:28.738"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:28.999" starttime="20170615 05:54:28.738"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:29.005" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:29.005" starttime="20170615 05:54:29.004"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:29.006" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:29.006" starttime="20170615 05:54:29.006"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:29.007" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:29.007" starttime="20170615 05:54:29.007"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:29.008" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:29.008" starttime="20170615 05:54:29.007"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:29.190" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:29.190" starttime="20170615 05:54:29.009"></status>
</kw>
<msg timestamp="20170615 05:54:29.191" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:29.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:29.191" starttime="20170615 05:54:29.008"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:29.191" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:29.192" starttime="20170615 05:54:29.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:29.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:29.192" starttime="20170615 05:54:29.192"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:29.193" starttime="20170615 05:54:29.003"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:29.193" starttime="20170615 05:54:29.003"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:29.193" starttime="20170615 05:54:29.002"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:29.193" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:54:29.193" starttime="20170615 05:54:29.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:29.194" starttime="20170615 05:54:29.194"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:29.261" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:54:29.261" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:29.261" starttime="20170615 05:54:29.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:29.262" starttime="20170615 05:54:29.261"></status>
</kw>
<msg timestamp="20170615 05:54:29.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:29.262" starttime="20170615 05:54:29.001"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:29.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:29.263" starttime="20170615 05:54:29.262"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:29.263" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:29.263" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:29.263" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170615 05:54:29.264" starttime="20170615 05:54:29.263"></status>
</kw>
<msg timestamp="20170615 05:54:29.264" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170615 05:54:29.264" starttime="20170615 05:54:29.000"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:29.264" starttime="20170615 05:54:28.999"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:29.272" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:29.273" starttime="20170615 05:54:29.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:29.273" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:29.274" starttime="20170615 05:54:29.273"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:29.274" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:29.274" starttime="20170615 05:54:29.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:29.275" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:29.275" starttime="20170615 05:54:29.275"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:29.450" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:29.450" starttime="20170615 05:54:29.276"></status>
</kw>
<msg timestamp="20170615 05:54:29.450" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:29.450" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:29.450" starttime="20170615 05:54:29.275"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:29.451" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:29.451" starttime="20170615 05:54:29.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:29.451" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:29.451" starttime="20170615 05:54:29.451"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:29.452" starttime="20170615 05:54:29.271"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:29.452" starttime="20170615 05:54:29.271"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:29.452" starttime="20170615 05:54:29.270"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:29.452" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:54:29.452" starttime="20170615 05:54:29.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:29.453" starttime="20170615 05:54:29.453"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:29.517" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:54:29.517" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:29.517" starttime="20170615 05:54:29.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:29.518" starttime="20170615 05:54:29.518"></status>
</kw>
<msg timestamp="20170615 05:54:29.518" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:29.519" starttime="20170615 05:54:29.269"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:29.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:29.519" starttime="20170615 05:54:29.519"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:29.520" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:29.520" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:29.520" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:54:29.520" starttime="20170615 05:54:29.519"></status>
</kw>
<msg timestamp="20170615 05:54:29.520" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:54:29.520" starttime="20170615 05:54:29.265"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:29.521" starttime="20170615 05:54:29.264"></status>
</kw>
<msg timestamp="20170615 05:54:29.521" level="FAIL">
#(UTC) 2017/06/15 05:54:29.520819 -   10.786110 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:54:29.521" starttime="20170615 05:54:28.736"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:39.530" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:39.531" starttime="20170615 05:54:39.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:39.531" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:39.531" starttime="20170615 05:54:39.531"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:39.532" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:39.532" starttime="20170615 05:54:39.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:39.533" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:39.533" starttime="20170615 05:54:39.533"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:39.777" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:39.778" starttime="20170615 05:54:39.534"></status>
</kw>
<msg timestamp="20170615 05:54:39.778" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:39.778" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:39.778" starttime="20170615 05:54:39.534"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:39.779" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:39.779" starttime="20170615 05:54:39.778"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:39.779" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:39.779" starttime="20170615 05:54:39.779"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:39.780" starttime="20170615 05:54:39.529"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:39.780" starttime="20170615 05:54:39.528"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:39.780" starttime="20170615 05:54:39.527"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:39.780" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:54:39.780" starttime="20170615 05:54:39.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:39.781" starttime="20170615 05:54:39.781"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:39.867" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:54:39.867" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:39.867" starttime="20170615 05:54:39.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:39.868" starttime="20170615 05:54:39.868"></status>
</kw>
<msg timestamp="20170615 05:54:39.869" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:39.869" starttime="20170615 05:54:39.526"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:39.870" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:39.870" starttime="20170615 05:54:39.869"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:39.870" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:39.870" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:39.870" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:54:39.870" starttime="20170615 05:54:39.870"></status>
</kw>
<msg timestamp="20170615 05:54:39.871" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:54:39.871" starttime="20170615 05:54:39.526"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:39.871" starttime="20170615 05:54:39.524"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:39.875" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:39.876" starttime="20170615 05:54:39.875"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:39.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:39.876" starttime="20170615 05:54:39.876"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:39.877" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:39.877" starttime="20170615 05:54:39.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:39.878" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:39.878" starttime="20170615 05:54:39.877"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:40.182" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:40.182" starttime="20170615 05:54:39.879"></status>
</kw>
<msg timestamp="20170615 05:54:40.182" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:40.182" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:40.182" starttime="20170615 05:54:39.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:40.183" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:40.183" starttime="20170615 05:54:40.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:40.184" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:40.184" starttime="20170615 05:54:40.184"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:40.184" starttime="20170615 05:54:39.875"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:40.184" starttime="20170615 05:54:39.874"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:40.185" starttime="20170615 05:54:39.873"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:40.185" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:54:40.185" starttime="20170615 05:54:40.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:40.186" starttime="20170615 05:54:40.186"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:40.312" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:54:40.313" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:40.313" starttime="20170615 05:54:40.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:40.313" starttime="20170615 05:54:40.313"></status>
</kw>
<msg timestamp="20170615 05:54:40.313" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:40.313" starttime="20170615 05:54:39.873"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:40.314" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:40.314" starttime="20170615 05:54:40.314"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:40.315" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:40.315" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:40.315" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:54:40.315" starttime="20170615 05:54:40.314"></status>
</kw>
<msg timestamp="20170615 05:54:40.316" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:54:40.316" starttime="20170615 05:54:39.872"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:40.316" starttime="20170615 05:54:39.871"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:40.320" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:40.320" starttime="20170615 05:54:40.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:40.321" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:40.321" starttime="20170615 05:54:40.320"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:40.321" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:40.321" starttime="20170615 05:54:40.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:40.322" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:40.322" starttime="20170615 05:54:40.322"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:40.564" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:40.564" starttime="20170615 05:54:40.323"></status>
</kw>
<msg timestamp="20170615 05:54:40.564" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:40.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:40.565" starttime="20170615 05:54:40.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:40.565" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:40.565" starttime="20170615 05:54:40.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:40.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:40.566" starttime="20170615 05:54:40.566"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:40.566" starttime="20170615 05:54:40.319"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:40.567" starttime="20170615 05:54:40.318"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:40.567" starttime="20170615 05:54:40.318"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:40.567" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:54:40.567" starttime="20170615 05:54:40.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:40.569" starttime="20170615 05:54:40.568"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:40.725" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:54:40.725" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:40.725" starttime="20170615 05:54:40.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:40.726" starttime="20170615 05:54:40.726"></status>
</kw>
<msg timestamp="20170615 05:54:40.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:40.727" starttime="20170615 05:54:40.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:40.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:40.727" starttime="20170615 05:54:40.727"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:40.728" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:40.728" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:40.728" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:54:40.728" starttime="20170615 05:54:40.728"></status>
</kw>
<msg timestamp="20170615 05:54:40.728" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:54:40.729" starttime="20170615 05:54:40.317"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:40.729" starttime="20170615 05:54:40.316"></status>
</kw>
<msg timestamp="20170615 05:54:40.730" level="FAIL">
#(UTC) 2017/06/15 05:54:40.729045 -   11.208226 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:54:40.730" starttime="20170615 05:54:39.522"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:50.736" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:50.737" starttime="20170615 05:54:50.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:50.738" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:50.738" starttime="20170615 05:54:50.737"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:50.738" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:50.738" starttime="20170615 05:54:50.738"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:50.739" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:50.739" starttime="20170615 05:54:50.739"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:50.940" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:50.941" starttime="20170615 05:54:50.740"></status>
</kw>
<msg timestamp="20170615 05:54:50.941" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:50.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:50.941" starttime="20170615 05:54:50.739"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:50.942" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:50.942" starttime="20170615 05:54:50.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:50.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:50.943" starttime="20170615 05:54:50.942"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:50.943" starttime="20170615 05:54:50.736"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:50.943" starttime="20170615 05:54:50.735"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:50.943" starttime="20170615 05:54:50.734"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:50.943" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:54:50.943" starttime="20170615 05:54:50.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:50.944" starttime="20170615 05:54:50.944"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:51.007" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:54:51.007" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.007" starttime="20170615 05:54:50.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:51.008" starttime="20170615 05:54:51.007"></status>
</kw>
<msg timestamp="20170615 05:54:51.008" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.008" starttime="20170615 05:54:50.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:51.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.009" starttime="20170615 05:54:51.008"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:51.009" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:51.009" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:51.009" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:54:51.009" starttime="20170615 05:54:51.009"></status>
</kw>
<msg timestamp="20170615 05:54:51.010" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:54:51.010" starttime="20170615 05:54:50.733"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:51.010" starttime="20170615 05:54:50.732"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:51.014" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:51.014" starttime="20170615 05:54:51.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:51.015" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:51.015" starttime="20170615 05:54:51.015"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:51.016" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:51.016" starttime="20170615 05:54:51.015"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:51.016" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:51.016" starttime="20170615 05:54:51.016"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:51.195" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:51.195" starttime="20170615 05:54:51.017"></status>
</kw>
<msg timestamp="20170615 05:54:51.195" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:51.195" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.195" starttime="20170615 05:54:51.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:51.196" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.196" starttime="20170615 05:54:51.196"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:51.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.197" starttime="20170615 05:54:51.196"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:51.197" starttime="20170615 05:54:51.013"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:51.197" starttime="20170615 05:54:51.013"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:51.197" starttime="20170615 05:54:51.012"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:51.198" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:54:51.198" starttime="20170615 05:54:51.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:51.198" starttime="20170615 05:54:51.198"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:51.264" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:54:51.264" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.264" starttime="20170615 05:54:51.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:51.265" starttime="20170615 05:54:51.264"></status>
</kw>
<msg timestamp="20170615 05:54:51.265" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.265" starttime="20170615 05:54:51.011"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:51.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.265" starttime="20170615 05:54:51.265"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:51.266" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:51.266" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:51.266" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:54:51.266" starttime="20170615 05:54:51.266"></status>
</kw>
<msg timestamp="20170615 05:54:51.267" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:54:51.267" starttime="20170615 05:54:51.011"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:51.267" starttime="20170615 05:54:51.010"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:54:51.271" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:54:51.271" starttime="20170615 05:54:51.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:54:51.272" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:54:51.272" starttime="20170615 05:54:51.271"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:54:51.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:54:51.272" starttime="20170615 05:54:51.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:54:51.273" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:54:51.273" starttime="20170615 05:54:51.273"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:54:51.456" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:54:51.457" starttime="20170615 05:54:51.274"></status>
</kw>
<msg timestamp="20170615 05:54:51.457" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:54:51.457" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.457" starttime="20170615 05:54:51.273"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:54:51.458" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.458" starttime="20170615 05:54:51.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:51.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.459" starttime="20170615 05:54:51.458"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:51.459" starttime="20170615 05:54:51.270"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:51.459" starttime="20170615 05:54:51.269"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:51.460" starttime="20170615 05:54:51.269"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:54:51.460" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:54:51.460" starttime="20170615 05:54:51.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:51.461" starttime="20170615 05:54:51.461"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:54:51.546" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:54:51.547" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.547" starttime="20170615 05:54:51.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:54:51.547" starttime="20170615 05:54:51.547"></status>
</kw>
<msg timestamp="20170615 05:54:51.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.547" starttime="20170615 05:54:51.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:54:51.548" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:54:51.548" starttime="20170615 05:54:51.548"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:54:51.549" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:54:51.549" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:54:51.549" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:54:51.549" starttime="20170615 05:54:51.549"></status>
</kw>
<msg timestamp="20170615 05:54:51.549" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:54:51.549" starttime="20170615 05:54:51.268"></status>
</kw>
<status status="PASS" endtime="20170615 05:54:51.550" starttime="20170615 05:54:51.267"></status>
</kw>
<msg timestamp="20170615 05:54:51.550" level="FAIL">
#(UTC) 2017/06/15 05:54:51.549836 -   10.820791 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:54:51.550" starttime="20170615 05:54:50.731"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:01.556" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:01.557" starttime="20170615 05:55:01.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:01.558" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:01.558" starttime="20170615 05:55:01.557"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:01.558" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:01.558" starttime="20170615 05:55:01.558"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:01.559" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:01.559" starttime="20170615 05:55:01.559"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:01.869" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:01.869" starttime="20170615 05:55:01.560"></status>
</kw>
<msg timestamp="20170615 05:55:01.870" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:01.870" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:01.870" starttime="20170615 05:55:01.559"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:01.870" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:01.870" starttime="20170615 05:55:01.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:01.871" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:01.871" starttime="20170615 05:55:01.871"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:01.871" starttime="20170615 05:55:01.556"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:01.871" starttime="20170615 05:55:01.555"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:01.872" starttime="20170615 05:55:01.555"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:01.872" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:55:01.873" starttime="20170615 05:55:01.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:01.873" starttime="20170615 05:55:01.873"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:01.979" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:55:01.979" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:01.979" starttime="20170615 05:55:01.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:01.980" starttime="20170615 05:55:01.979"></status>
</kw>
<msg timestamp="20170615 05:55:01.980" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:01.980" starttime="20170615 05:55:01.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:01.981" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:01.981" starttime="20170615 05:55:01.980"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:01.982" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:01.982" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:01.982" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:55:01.982" starttime="20170615 05:55:01.981"></status>
</kw>
<msg timestamp="20170615 05:55:01.982" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:55:01.982" starttime="20170615 05:55:01.553"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:01.983" starttime="20170615 05:55:01.553"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:01.988" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:01.989" starttime="20170615 05:55:01.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:01.989" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:01.990" starttime="20170615 05:55:01.989"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:01.990" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:01.990" starttime="20170615 05:55:01.990"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:01.991" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:01.991" starttime="20170615 05:55:01.991"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:02.172" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:02.172" starttime="20170615 05:55:01.992"></status>
</kw>
<msg timestamp="20170615 05:55:02.172" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:02.172" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:02.172" starttime="20170615 05:55:01.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:02.173" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:02.173" starttime="20170615 05:55:02.172"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:02.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:02.173" starttime="20170615 05:55:02.173"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:02.173" starttime="20170615 05:55:01.987"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:02.174" starttime="20170615 05:55:01.986"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:02.174" starttime="20170615 05:55:01.985"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:02.175" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:55:02.175" starttime="20170615 05:55:02.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:02.175" starttime="20170615 05:55:02.175"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:02.245" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:55:02.246" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:02.246" starttime="20170615 05:55:02.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:02.246" starttime="20170615 05:55:02.246"></status>
</kw>
<msg timestamp="20170615 05:55:02.247" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:02.247" starttime="20170615 05:55:01.984"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:02.247" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:02.247" starttime="20170615 05:55:02.247"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:02.248" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:02.248" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:02.248" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:55:02.248" starttime="20170615 05:55:02.248"></status>
</kw>
<msg timestamp="20170615 05:55:02.248" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:55:02.248" starttime="20170615 05:55:01.984"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:02.249" starttime="20170615 05:55:01.983"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:02.252" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:02.253" starttime="20170615 05:55:02.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:02.254" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:02.254" starttime="20170615 05:55:02.253"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:02.254" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:02.254" starttime="20170615 05:55:02.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:02.255" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:02.255" starttime="20170615 05:55:02.255"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:02.566" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:02.567" starttime="20170615 05:55:02.256"></status>
</kw>
<msg timestamp="20170615 05:55:02.567" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:02.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:02.567" starttime="20170615 05:55:02.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:02.568" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:02.568" starttime="20170615 05:55:02.567"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:02.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:02.568" starttime="20170615 05:55:02.568"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:02.569" starttime="20170615 05:55:02.252"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:02.569" starttime="20170615 05:55:02.251"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:02.569" starttime="20170615 05:55:02.251"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:02.570" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:55:02.570" starttime="20170615 05:55:02.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:02.570" starttime="20170615 05:55:02.570"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:02.702" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:55:02.702" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:02.702" starttime="20170615 05:55:02.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:02.703" starttime="20170615 05:55:02.702"></status>
</kw>
<msg timestamp="20170615 05:55:02.703" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:02.703" starttime="20170615 05:55:02.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:02.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:02.703" starttime="20170615 05:55:02.703"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:02.704" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:02.704" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:02.704" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:55:02.704" starttime="20170615 05:55:02.704"></status>
</kw>
<msg timestamp="20170615 05:55:02.704" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:55:02.704" starttime="20170615 05:55:02.249"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:02.705" starttime="20170615 05:55:02.249"></status>
</kw>
<msg timestamp="20170615 05:55:02.705" level="FAIL">
#(UTC) 2017/06/15 05:55:02.705004 -   11.155168 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:55:02.706" starttime="20170615 05:55:01.551"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:12.715" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:12.715" starttime="20170615 05:55:12.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:12.716" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:12.716" starttime="20170615 05:55:12.716"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:12.717" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:12.717" starttime="20170615 05:55:12.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:12.718" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:12.718" starttime="20170615 05:55:12.717"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:12.904" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:12.904" starttime="20170615 05:55:12.719"></status>
</kw>
<msg timestamp="20170615 05:55:12.904" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:12.905" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:12.905" starttime="20170615 05:55:12.718"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:12.905" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:12.905" starttime="20170615 05:55:12.905"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:12.906" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:12.906" starttime="20170615 05:55:12.906"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:12.906" starttime="20170615 05:55:12.713"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:12.907" starttime="20170615 05:55:12.712"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:12.907" starttime="20170615 05:55:12.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:12.907" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:55:12.907" starttime="20170615 05:55:12.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:12.908" starttime="20170615 05:55:12.908"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:12.986" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:55:12.986" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:12.987" starttime="20170615 05:55:12.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:12.987" starttime="20170615 05:55:12.987"></status>
</kw>
<msg timestamp="20170615 05:55:12.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:12.988" starttime="20170615 05:55:12.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:12.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:12.988" starttime="20170615 05:55:12.988"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:12.989" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:12.989" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:12.989" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:55:12.989" starttime="20170615 05:55:12.989"></status>
</kw>
<msg timestamp="20170615 05:55:12.989" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:55:12.989" starttime="20170615 05:55:12.709"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:12.990" starttime="20170615 05:55:12.709"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:12.996" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:12.997" starttime="20170615 05:55:12.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:12.997" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:12.997" starttime="20170615 05:55:12.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:12.998" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:12.998" starttime="20170615 05:55:12.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:12.999" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:12.999" starttime="20170615 05:55:12.998"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:13.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:13.356" starttime="20170615 05:55:13.000"></status>
</kw>
<msg timestamp="20170615 05:55:13.357" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:13.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:13.357" starttime="20170615 05:55:12.999"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:13.357" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:13.357" starttime="20170615 05:55:13.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:13.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:13.358" starttime="20170615 05:55:13.358"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:13.358" starttime="20170615 05:55:12.993"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:13.358" starttime="20170615 05:55:12.992"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:13.359" starttime="20170615 05:55:12.992"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:13.359" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:55:13.359" starttime="20170615 05:55:13.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:13.360" starttime="20170615 05:55:13.359"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:13.463" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:55:13.464" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:13.464" starttime="20170615 05:55:13.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:13.464" starttime="20170615 05:55:13.464"></status>
</kw>
<msg timestamp="20170615 05:55:13.465" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:13.465" starttime="20170615 05:55:12.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:13.465" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:13.465" starttime="20170615 05:55:13.465"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:13.466" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:13.466" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:13.466" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:55:13.466" starttime="20170615 05:55:13.466"></status>
</kw>
<msg timestamp="20170615 05:55:13.466" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:55:13.466" starttime="20170615 05:55:12.990"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:13.467" starttime="20170615 05:55:12.990"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:13.471" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:13.471" starttime="20170615 05:55:13.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:13.472" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:13.472" starttime="20170615 05:55:13.472"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:13.473" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:13.473" starttime="20170615 05:55:13.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:13.473" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:13.473" starttime="20170615 05:55:13.473"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:13.649" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:13.649" starttime="20170615 05:55:13.474"></status>
</kw>
<msg timestamp="20170615 05:55:13.649" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:13.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:13.649" starttime="20170615 05:55:13.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:13.650" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:13.650" starttime="20170615 05:55:13.650"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:13.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:13.651" starttime="20170615 05:55:13.650"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:13.651" starttime="20170615 05:55:13.470"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:13.651" starttime="20170615 05:55:13.469"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:13.651" starttime="20170615 05:55:13.468"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:13.652" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:55:13.652" starttime="20170615 05:55:13.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:13.652" starttime="20170615 05:55:13.652"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:13.722" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:55:13.722" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:13.722" starttime="20170615 05:55:13.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:13.723" starttime="20170615 05:55:13.722"></status>
</kw>
<msg timestamp="20170615 05:55:13.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:13.723" starttime="20170615 05:55:13.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:13.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:13.724" starttime="20170615 05:55:13.723"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:13.724" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:13.724" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:13.724" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:55:13.724" starttime="20170615 05:55:13.724"></status>
</kw>
<msg timestamp="20170615 05:55:13.725" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:55:13.725" starttime="20170615 05:55:13.467"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:13.725" starttime="20170615 05:55:13.467"></status>
</kw>
<msg timestamp="20170615 05:55:13.726" level="FAIL">
#(UTC) 2017/06/15 05:55:13.725354 -   11.020350 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:55:13.726" starttime="20170615 05:55:12.706"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:23.733" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:23.733" starttime="20170615 05:55:23.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:23.734" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:23.734" starttime="20170615 05:55:23.733"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:23.734" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:23.734" starttime="20170615 05:55:23.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:23.735" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:23.735" starttime="20170615 05:55:23.735"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:23.986" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:23.986" starttime="20170615 05:55:23.736"></status>
</kw>
<msg timestamp="20170615 05:55:23.986" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:23.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:23.986" starttime="20170615 05:55:23.735"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:23.987" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:23.987" starttime="20170615 05:55:23.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:23.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:23.988" starttime="20170615 05:55:23.987"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:23.988" starttime="20170615 05:55:23.731"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:23.988" starttime="20170615 05:55:23.731"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:23.988" starttime="20170615 05:55:23.730"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:23.989" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:55:23.989" starttime="20170615 05:55:23.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:23.990" starttime="20170615 05:55:23.989"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:24.083" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:55:24.084" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.084" starttime="20170615 05:55:23.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:24.084" starttime="20170615 05:55:24.084"></status>
</kw>
<msg timestamp="20170615 05:55:24.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.085" starttime="20170615 05:55:23.730"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:24.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.086" starttime="20170615 05:55:24.085"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:24.086" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:24.086" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:24.086" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:55:24.086" starttime="20170615 05:55:24.086"></status>
</kw>
<msg timestamp="20170615 05:55:24.087" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:55:24.087" starttime="20170615 05:55:23.729"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:24.087" starttime="20170615 05:55:23.728"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:24.091" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:24.092" starttime="20170615 05:55:24.091"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:24.092" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:24.092" starttime="20170615 05:55:24.092"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:24.093" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:24.093" starttime="20170615 05:55:24.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:24.093" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:24.093" starttime="20170615 05:55:24.093"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:24.274" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:24.275" starttime="20170615 05:55:24.094"></status>
</kw>
<msg timestamp="20170615 05:55:24.275" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:24.275" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.275" starttime="20170615 05:55:24.094"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:24.276" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.276" starttime="20170615 05:55:24.275"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:24.276" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.276" starttime="20170615 05:55:24.276"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:24.276" starttime="20170615 05:55:24.090"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:24.277" starttime="20170615 05:55:24.089"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:24.277" starttime="20170615 05:55:24.089"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:24.277" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:55:24.277" starttime="20170615 05:55:24.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:24.278" starttime="20170615 05:55:24.278"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:24.346" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:55:24.346" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.346" starttime="20170615 05:55:24.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:24.347" starttime="20170615 05:55:24.347"></status>
</kw>
<msg timestamp="20170615 05:55:24.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.347" starttime="20170615 05:55:24.088"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:24.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.348" starttime="20170615 05:55:24.348"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:24.349" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:24.349" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:24.349" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:55:24.349" starttime="20170615 05:55:24.348"></status>
</kw>
<msg timestamp="20170615 05:55:24.349" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:55:24.349" starttime="20170615 05:55:24.088"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:24.349" starttime="20170615 05:55:24.087"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:24.354" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:24.354" starttime="20170615 05:55:24.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:24.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:24.355" starttime="20170615 05:55:24.354"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:24.355" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:24.355" starttime="20170615 05:55:24.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:24.356" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:24.356" starttime="20170615 05:55:24.356"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:24.542" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:24.542" starttime="20170615 05:55:24.357"></status>
</kw>
<msg timestamp="20170615 05:55:24.542" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:24.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.543" starttime="20170615 05:55:24.356"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:24.543" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.543" starttime="20170615 05:55:24.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:24.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.544" starttime="20170615 05:55:24.544"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:24.544" starttime="20170615 05:55:24.352"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:24.544" starttime="20170615 05:55:24.352"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:24.545" starttime="20170615 05:55:24.351"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:24.545" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:55:24.545" starttime="20170615 05:55:24.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:24.546" starttime="20170615 05:55:24.546"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:24.664" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:55:24.664" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.664" starttime="20170615 05:55:24.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:24.665" starttime="20170615 05:55:24.665"></status>
</kw>
<msg timestamp="20170615 05:55:24.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.665" starttime="20170615 05:55:24.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:24.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:24.666" starttime="20170615 05:55:24.666"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:24.667" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:24.667" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:24.667" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:55:24.667" starttime="20170615 05:55:24.666"></status>
</kw>
<msg timestamp="20170615 05:55:24.667" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:55:24.667" starttime="20170615 05:55:24.350"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:24.667" starttime="20170615 05:55:24.350"></status>
</kw>
<msg timestamp="20170615 05:55:24.668" level="FAIL">
#(UTC) 2017/06/15 05:55:24.667681 -   10.942327 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:55:24.668" starttime="20170615 05:55:23.727"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:34.675" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:34.676" starttime="20170615 05:55:34.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:34.676" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:34.676" starttime="20170615 05:55:34.676"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:34.677" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:34.677" starttime="20170615 05:55:34.676"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:34.678" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:34.678" starttime="20170615 05:55:34.677"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:34.855" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:34.855" starttime="20170615 05:55:34.678"></status>
</kw>
<msg timestamp="20170615 05:55:34.855" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:34.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:34.855" starttime="20170615 05:55:34.678"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:34.856" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:34.856" starttime="20170615 05:55:34.856"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:34.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:34.857" starttime="20170615 05:55:34.856"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:34.857" starttime="20170615 05:55:34.674"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:34.857" starttime="20170615 05:55:34.673"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:34.857" starttime="20170615 05:55:34.672"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:34.858" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:55:34.858" starttime="20170615 05:55:34.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:34.859" starttime="20170615 05:55:34.858"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:34.923" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:55:34.923" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:34.923" starttime="20170615 05:55:34.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:34.924" starttime="20170615 05:55:34.923"></status>
</kw>
<msg timestamp="20170615 05:55:34.924" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:34.924" starttime="20170615 05:55:34.671"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:34.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:34.925" starttime="20170615 05:55:34.924"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:34.925" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:34.925" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:34.925" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:55:34.925" starttime="20170615 05:55:34.925"></status>
</kw>
<msg timestamp="20170615 05:55:34.926" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:55:34.926" starttime="20170615 05:55:34.671"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:34.926" starttime="20170615 05:55:34.670"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:34.930" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:34.930" starttime="20170615 05:55:34.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:34.931" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:34.931" starttime="20170615 05:55:34.931"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:34.932" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:34.932" starttime="20170615 05:55:34.931"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:34.932" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:34.932" starttime="20170615 05:55:34.932"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:35.159" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:35.159" starttime="20170615 05:55:34.933"></status>
</kw>
<msg timestamp="20170615 05:55:35.159" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:35.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:35.159" starttime="20170615 05:55:34.933"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:35.160" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:35.160" starttime="20170615 05:55:35.159"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:35.160" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:35.161" starttime="20170615 05:55:35.160"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:35.161" starttime="20170615 05:55:34.929"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:35.161" starttime="20170615 05:55:34.929"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:35.161" starttime="20170615 05:55:34.928"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:35.161" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:55:35.161" starttime="20170615 05:55:35.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:35.162" starttime="20170615 05:55:35.162"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:35.229" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:55:35.229" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:35.229" starttime="20170615 05:55:35.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:35.230" starttime="20170615 05:55:35.229"></status>
</kw>
<msg timestamp="20170615 05:55:35.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:35.230" starttime="20170615 05:55:34.927"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:35.230" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:35.230" starttime="20170615 05:55:35.230"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:35.231" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:35.231" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:35.231" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:55:35.231" starttime="20170615 05:55:35.231"></status>
</kw>
<msg timestamp="20170615 05:55:35.232" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:55:35.232" starttime="20170615 05:55:34.927"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:35.232" starttime="20170615 05:55:34.926"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:35.236" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:35.236" starttime="20170615 05:55:35.236"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:35.237" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:35.237" starttime="20170615 05:55:35.237"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:35.238" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:35.238" starttime="20170615 05:55:35.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:35.239" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:35.239" starttime="20170615 05:55:35.238"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:35.424" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:35.424" starttime="20170615 05:55:35.240"></status>
</kw>
<msg timestamp="20170615 05:55:35.424" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:35.424" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:35.424" starttime="20170615 05:55:35.239"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:35.425" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:35.425" starttime="20170615 05:55:35.424"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:35.426" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:35.426" starttime="20170615 05:55:35.425"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:35.426" starttime="20170615 05:55:35.235"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:35.426" starttime="20170615 05:55:35.235"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:35.426" starttime="20170615 05:55:35.234"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:35.427" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:55:35.427" starttime="20170615 05:55:35.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:35.427" starttime="20170615 05:55:35.427"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:35.490" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:55:35.490" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:35.490" starttime="20170615 05:55:35.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:35.491" starttime="20170615 05:55:35.490"></status>
</kw>
<msg timestamp="20170615 05:55:35.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:35.491" starttime="20170615 05:55:35.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:35.492" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:35.492" starttime="20170615 05:55:35.491"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:35.492" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:35.492" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:35.492" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:55:35.492" starttime="20170615 05:55:35.492"></status>
</kw>
<msg timestamp="20170615 05:55:35.493" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:55:35.493" starttime="20170615 05:55:35.232"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:35.493" starttime="20170615 05:55:35.232"></status>
</kw>
<msg timestamp="20170615 05:55:35.494" level="FAIL">
#(UTC) 2017/06/15 05:55:35.493288 -   10.825607 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:55:35.494" starttime="20170615 05:55:34.669"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:45.501" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:45.501" starttime="20170615 05:55:45.500"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:45.502" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:45.502" starttime="20170615 05:55:45.502"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:45.503" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:45.503" starttime="20170615 05:55:45.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:45.503" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:45.504" starttime="20170615 05:55:45.503"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:45.721" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:45.721" starttime="20170615 05:55:45.504"></status>
</kw>
<msg timestamp="20170615 05:55:45.722" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:45.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:45.722" starttime="20170615 05:55:45.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:45.722" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:45.723" starttime="20170615 05:55:45.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:45.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:45.723" starttime="20170615 05:55:45.723"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:45.723" starttime="20170615 05:55:45.500"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:45.723" starttime="20170615 05:55:45.500"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:45.724" starttime="20170615 05:55:45.499"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:45.724" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:55:45.724" starttime="20170615 05:55:45.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:45.725" starttime="20170615 05:55:45.725"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:45.788" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:55:45.788" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:45.788" starttime="20170615 05:55:45.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:45.789" starttime="20170615 05:55:45.789"></status>
</kw>
<msg timestamp="20170615 05:55:45.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:45.789" starttime="20170615 05:55:45.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:45.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:45.790" starttime="20170615 05:55:45.790"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:45.791" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:45.791" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:45.791" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:55:45.791" starttime="20170615 05:55:45.790"></status>
</kw>
<msg timestamp="20170615 05:55:45.791" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:55:45.791" starttime="20170615 05:55:45.497"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:45.791" starttime="20170615 05:55:45.496"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:45.796" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:45.796" starttime="20170615 05:55:45.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:45.797" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:45.797" starttime="20170615 05:55:45.796"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:45.797" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:45.797" starttime="20170615 05:55:45.797"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:45.798" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:45.798" starttime="20170615 05:55:45.797"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:45.974" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:45.974" starttime="20170615 05:55:45.799"></status>
</kw>
<msg timestamp="20170615 05:55:45.974" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:45.974" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:45.975" starttime="20170615 05:55:45.798"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:45.975" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:45.975" starttime="20170615 05:55:45.975"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:45.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:45.976" starttime="20170615 05:55:45.976"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:45.976" starttime="20170615 05:55:45.795"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:45.976" starttime="20170615 05:55:45.794"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:45.976" starttime="20170615 05:55:45.794"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:45.977" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:55:45.977" starttime="20170615 05:55:45.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:45.978" starttime="20170615 05:55:45.977"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:46.046" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:55:46.046" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:46.046" starttime="20170615 05:55:45.978"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:46.047" starttime="20170615 05:55:46.047"></status>
</kw>
<msg timestamp="20170615 05:55:46.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:46.047" starttime="20170615 05:55:45.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:46.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:46.048" starttime="20170615 05:55:46.047"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:46.048" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:46.048" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:46.049" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:55:46.049" starttime="20170615 05:55:46.048"></status>
</kw>
<msg timestamp="20170615 05:55:46.049" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:55:46.049" starttime="20170615 05:55:45.792"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:46.049" starttime="20170615 05:55:45.792"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:46.053" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:46.054" starttime="20170615 05:55:46.053"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:46.054" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:46.054" starttime="20170615 05:55:46.054"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:46.055" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:46.055" starttime="20170615 05:55:46.054"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:46.056" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:46.056" starttime="20170615 05:55:46.055"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:46.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:46.233" starttime="20170615 05:55:46.057"></status>
</kw>
<msg timestamp="20170615 05:55:46.233" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:46.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:46.233" starttime="20170615 05:55:46.056"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:46.234" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:46.234" starttime="20170615 05:55:46.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:46.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:46.235" starttime="20170615 05:55:46.234"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:46.235" starttime="20170615 05:55:46.052"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:46.235" starttime="20170615 05:55:46.052"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:46.235" starttime="20170615 05:55:46.051"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:46.236" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:55:46.236" starttime="20170615 05:55:46.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:46.236" starttime="20170615 05:55:46.236"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:46.301" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:55:46.301" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:46.301" starttime="20170615 05:55:46.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:46.302" starttime="20170615 05:55:46.302"></status>
</kw>
<msg timestamp="20170615 05:55:46.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:46.302" starttime="20170615 05:55:46.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:46.303" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:46.303" starttime="20170615 05:55:46.303"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:46.304" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:46.304" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:46.304" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:55:46.304" starttime="20170615 05:55:46.303"></status>
</kw>
<msg timestamp="20170615 05:55:46.304" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:55:46.304" starttime="20170615 05:55:46.050"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:46.304" starttime="20170615 05:55:46.049"></status>
</kw>
<msg timestamp="20170615 05:55:46.305" level="FAIL">
#(UTC) 2017/06/15 05:55:46.304590 -   10.811302 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:55:46.305" starttime="20170615 05:55:45.495"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:56.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:56.316" starttime="20170615 05:55:56.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:56.316" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:56.316" starttime="20170615 05:55:56.316"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:56.317" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:56.317" starttime="20170615 05:55:56.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:56.317" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:56.318" starttime="20170615 05:55:56.317"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:56.536" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:56.536" starttime="20170615 05:55:56.318"></status>
</kw>
<msg timestamp="20170615 05:55:56.536" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:56.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:56.537" starttime="20170615 05:55:56.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:56.537" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:56.537" starttime="20170615 05:55:56.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:56.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:56.538" starttime="20170615 05:55:56.538"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:56.538" starttime="20170615 05:55:56.314"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:56.538" starttime="20170615 05:55:56.314"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:56.539" starttime="20170615 05:55:56.313"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:56.539" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:55:56.539" starttime="20170615 05:55:56.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:56.540" starttime="20170615 05:55:56.540"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:56.613" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:55:56.614" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:56.614" starttime="20170615 05:55:56.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:56.615" starttime="20170615 05:55:56.614"></status>
</kw>
<msg timestamp="20170615 05:55:56.615" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:56.615" starttime="20170615 05:55:56.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:56.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:56.616" starttime="20170615 05:55:56.615"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:56.616" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:56.616" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:56.616" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:55:56.616" starttime="20170615 05:55:56.616"></status>
</kw>
<msg timestamp="20170615 05:55:56.617" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:55:56.617" starttime="20170615 05:55:56.311"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:56.617" starttime="20170615 05:55:56.311"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:56.623" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:56.624" starttime="20170615 05:55:56.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:56.624" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:56.624" starttime="20170615 05:55:56.624"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:56.625" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:56.625" starttime="20170615 05:55:56.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:56.625" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:56.626" starttime="20170615 05:55:56.625"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:56.854" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:56.855" starttime="20170615 05:55:56.626"></status>
</kw>
<msg timestamp="20170615 05:55:56.855" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:56.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:56.855" starttime="20170615 05:55:56.626"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:56.855" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:56.856" starttime="20170615 05:55:56.855"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:56.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:56.856" starttime="20170615 05:55:56.856"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:56.856" starttime="20170615 05:55:56.622"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:56.857" starttime="20170615 05:55:56.622"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:56.857" starttime="20170615 05:55:56.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:56.857" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:55:56.857" starttime="20170615 05:55:56.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:56.858" starttime="20170615 05:55:56.858"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:56.935" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:55:56.935" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:56.935" starttime="20170615 05:55:56.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:56.936" starttime="20170615 05:55:56.936"></status>
</kw>
<msg timestamp="20170615 05:55:56.936" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:56.937" starttime="20170615 05:55:56.621"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:56.937" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:56.937" starttime="20170615 05:55:56.937"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:56.938" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:56.938" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:56.938" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170615 05:55:56.938" starttime="20170615 05:55:56.937"></status>
</kw>
<msg timestamp="20170615 05:55:56.938" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170615 05:55:56.938" starttime="20170615 05:55:56.618"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:56.938" starttime="20170615 05:55:56.617"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:55:56.943" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:55:56.943" starttime="20170615 05:55:56.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:55:56.944" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:55:56.944" starttime="20170615 05:55:56.943"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:55:56.944" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:55:56.944" starttime="20170615 05:55:56.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:55:56.945" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:55:56.945" starttime="20170615 05:55:56.945"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:55:57.277" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:55:57.277" starttime="20170615 05:55:56.946"></status>
</kw>
<msg timestamp="20170615 05:55:57.277" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:55:57.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:57.277" starttime="20170615 05:55:56.945"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:55:57.278" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:57.278" starttime="20170615 05:55:57.278"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:57.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:57.279" starttime="20170615 05:55:57.278"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:57.279" starttime="20170615 05:55:56.942"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:57.279" starttime="20170615 05:55:56.941"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:57.279" starttime="20170615 05:55:56.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:55:57.280" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:55:57.280" starttime="20170615 05:55:57.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:57.280" starttime="20170615 05:55:57.280"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:55:57.357" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:55:57.357" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:57.357" starttime="20170615 05:55:57.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:55:57.358" starttime="20170615 05:55:57.358"></status>
</kw>
<msg timestamp="20170615 05:55:57.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:55:57.358" starttime="20170615 05:55:56.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:55:57.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:55:57.359" starttime="20170615 05:55:57.359"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:55:57.359" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:55:57.360" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:55:57.360" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:55:57.360" starttime="20170615 05:55:57.359"></status>
</kw>
<msg timestamp="20170615 05:55:57.360" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:55:57.360" starttime="20170615 05:55:56.939"></status>
</kw>
<status status="PASS" endtime="20170615 05:55:57.360" starttime="20170615 05:55:56.939"></status>
</kw>
<msg timestamp="20170615 05:55:57.361" level="FAIL">
#(UTC) 2017/06/15 05:55:57.360511 -   11.055921 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170615 05:55:57.361" starttime="20170615 05:55:56.306"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:56:07.367" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:56:07.368" starttime="20170615 05:56:07.367"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:56:07.368" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:56:07.368" starttime="20170615 05:56:07.368"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:56:07.369" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:56:07.369" starttime="20170615 05:56:07.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:56:07.370" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:56:07.370" starttime="20170615 05:56:07.369"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:56:07.545" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:56:07.545" starttime="20170615 05:56:07.370"></status>
</kw>
<msg timestamp="20170615 05:56:07.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:56:07.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:56:07.545" starttime="20170615 05:56:07.370"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:56:07.546" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:56:07.546" starttime="20170615 05:56:07.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:56:07.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:56:07.547" starttime="20170615 05:56:07.546"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:07.547" starttime="20170615 05:56:07.367"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:07.547" starttime="20170615 05:56:07.366"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:07.547" starttime="20170615 05:56:07.365"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:56:07.548" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170615 05:56:07.548" starttime="20170615 05:56:07.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:07.548" starttime="20170615 05:56:07.548"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:56:07.620" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170615 05:56:07.620" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:56:07.620" starttime="20170615 05:56:07.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:07.621" starttime="20170615 05:56:07.620"></status>
</kw>
<msg timestamp="20170615 05:56:07.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:56:07.621" starttime="20170615 05:56:07.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:56:07.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:56:07.622" starttime="20170615 05:56:07.621"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:56:07.622" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:56:07.622" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:56:07.622" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170615 05:56:07.622" starttime="20170615 05:56:07.622"></status>
</kw>
<msg timestamp="20170615 05:56:07.623" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170615 05:56:07.623" starttime="20170615 05:56:07.364"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:07.623" starttime="20170615 05:56:07.363"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:56:07.627" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:56:07.627" starttime="20170615 05:56:07.627"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:56:07.628" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:56:07.628" starttime="20170615 05:56:07.627"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:56:07.628" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:56:07.628" starttime="20170615 05:56:07.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:56:07.629" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:56:07.629" starttime="20170615 05:56:07.629"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:56:07.956" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:56:07.956" starttime="20170615 05:56:07.630"></status>
</kw>
<msg timestamp="20170615 05:56:07.956" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:56:07.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:56:07.956" starttime="20170615 05:56:07.629"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:56:07.957" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:56:07.957" starttime="20170615 05:56:07.957"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:56:07.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:56:07.958" starttime="20170615 05:56:07.957"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:07.958" starttime="20170615 05:56:07.626"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:07.958" starttime="20170615 05:56:07.625"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:07.958" starttime="20170615 05:56:07.625"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:56:07.959" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170615 05:56:07.959" starttime="20170615 05:56:07.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:07.959" starttime="20170615 05:56:07.959"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:56:08.025" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170615 05:56:08.025" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:56:08.025" starttime="20170615 05:56:07.960"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:08.026" starttime="20170615 05:56:08.026"></status>
</kw>
<msg timestamp="20170615 05:56:08.026" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:56:08.027" starttime="20170615 05:56:07.624"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:56:08.027" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:56:08.027" starttime="20170615 05:56:08.027"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:56:08.028" level="INFO">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:56:08.028" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:56:08.028" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Starting OS'}</msg>
<status status="PASS" endtime="20170615 05:56:08.028" starttime="20170615 05:56:08.027"></status>
</kw>
<msg timestamp="20170615 05:56:08.028" level="INFO">${state} = FW Progress, Starting OS</msg>
<status status="PASS" endtime="20170615 05:56:08.028" starttime="20170615 05:56:07.624"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:08.028" starttime="20170615 05:56:07.623"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:56:08.032" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:56:08.033" starttime="20170615 05:56:08.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:56:08.033" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:56:08.033" starttime="20170615 05:56:08.033"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:56:08.034" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:56:08.034" starttime="20170615 05:56:08.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:56:08.035" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:56:08.035" starttime="20170615 05:56:08.034"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:56:08.210" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:56:08.210" starttime="20170615 05:56:08.035"></status>
</kw>
<msg timestamp="20170615 05:56:08.210" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:56:08.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:56:08.210" starttime="20170615 05:56:08.035"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:56:08.211" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:56:08.211" starttime="20170615 05:56:08.211"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:56:08.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:56:08.212" starttime="20170615 05:56:08.212"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:08.212" starttime="20170615 05:56:08.031"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:08.212" starttime="20170615 05:56:08.031"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:08.212" starttime="20170615 05:56:08.030"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:56:08.213" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:56:08.213" starttime="20170615 05:56:08.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:08.214" starttime="20170615 05:56:08.213"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:56:08.278" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:56:08.278" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:56:08.278" starttime="20170615 05:56:08.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:08.279" starttime="20170615 05:56:08.279"></status>
</kw>
<msg timestamp="20170615 05:56:08.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:56:08.279" starttime="20170615 05:56:08.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:56:08.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:56:08.280" starttime="20170615 05:56:08.280"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:56:08.281" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:56:08.281" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:56:08.281" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:56:08.281" starttime="20170615 05:56:08.280"></status>
</kw>
<msg timestamp="20170615 05:56:08.281" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:56:08.281" starttime="20170615 05:56:08.029"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:08.281" starttime="20170615 05:56:08.029"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:08.282" starttime="20170615 05:56:07.362"></status>
</kw>
<msg timestamp="20170615 05:56:08.286" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170615 05:56:08.287" starttime="20170615 05:50:16.187"></status>
</kw>
<msg timestamp="20170615 05:56:08.293" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170615 05:56:08.297" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Delete Error logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170615 05:56:08.309" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170615 05:56:08.309" starttime="20170615 05:56:08.309"></status>
</kw>
<msg timestamp="20170615 05:56:08.309" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170615 05:56:08.310" starttime="20170615 05:56:08.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:08.311" starttime="20170615 05:56:08.310"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:08.311" starttime="20170615 05:56:08.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:08.312" starttime="20170615 05:56:08.311"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170615 05:56:08.313" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170615 05:56:08.313" starttime="20170615 05:56:08.313"></status>
</kw>
<msg timestamp="20170615 05:56:08.314" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170615 05:56:08.314" starttime="20170615 05:56:08.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:08.315" starttime="20170615 05:56:08.315"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:08.316" starttime="20170615 05:56:08.315"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:08.316" starttime="20170615 05:56:08.314"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170615 05:56:08.316" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170615 05:56:10.016" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170615 05:56:10.017" starttime="20170615 05:56:08.316"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:10.017" starttime="20170615 05:56:08.308"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>systemctl restart xyz.openbmc_project.Logging.service</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170615 05:56:10.018" level="INFO">Executing command 'systemctl restart xyz.openbmc_project.Logging.service'.</msg>
<msg timestamp="20170615 05:56:10.548" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170615 05:56:10.548" level="INFO">${stdout} = </msg>
<msg timestamp="20170615 05:56:10.548" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170615 05:56:10.548" starttime="20170615 05:56:10.018"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170615 05:56:10.549" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170615 05:56:10.549" starttime="20170615 05:56:10.549"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:10.549" starttime="20170615 05:56:10.017"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
<arg>reason=Wait for logging service to restart properly.</arg>
</arguments>
<msg timestamp="20170615 05:56:20.550" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20170615 05:56:20.550" level="INFO">Wait for logging service to restart properly.</msg>
<status status="PASS" endtime="20170615 05:56:20.550" starttime="20170615 05:56:10.549"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:20.551" starttime="20170615 05:56:08.307"></status>
</kw>
<msg timestamp="20170615 05:56:20.555" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170615 05:56:20.562" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170615 05:56:20.578" starttime="20170615 05:56:20.562"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:20.582" starttime="20170615 05:50:11.832"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170615 05:56:20.588" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170615 05:56:20.590" starttime="20170615 05:56:20.582"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:20.590" starttime="20170615 05:50:11.831"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:20.590" starttime="20170615 05:50:11.824"></status>
</kw>
<kw type="teardown" name="Validate Power On Teardown">
<doc>Teardown after Validate Power On.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Stop SOL Console Logging</arg>
<arg>\ targ_file_path=${EXECDIR}${/}logs${/}SOL.log</arg>
</arguments>
<assign>
<var>${keyword_buf}</var>
</assign>
<msg timestamp="20170615 05:56:20.591" level="INFO">${keyword_buf} = Stop SOL Console Logging  targ_file_path=/home/fspcibld/logs/SOL.log</msg>
<status status="PASS" endtime="20170615 05:56:20.591" starttime="20170615 05:56:20.591"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_buf}</arg>
</arguments>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>targ_file_path=/home/fspcibld/logs/SOL.log</arg>
</arguments>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170615 05:56:20.602" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170615 05:56:20.602" starttime="20170615 05:56:20.601"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170615 05:56:20.602" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170615 05:56:20.602" starttime="20170615 05:56:20.602"></status>
</kw>
<msg timestamp="20170615 05:56:20.603" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170615 05:56:20.603" starttime="20170615 05:56:20.601"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170615 05:56:20.603" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170615 05:56:20.604" starttime="20170615 05:56:20.603"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:20.604" starttime="20170615 05:56:20.604"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170615 05:56:20.613" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170615 05:56:20.643" level="INFO">${rc} = 0</msg>
<msg timestamp="20170615 05:56:20.644" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170615 05:56:20.645" starttime="20170615 05:56:20.605"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:20.658" starttime="20170615 05:56:20.657"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:20.659" starttime="20170615 05:56:20.658"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170615 05:56:20.660" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170615 05:56:20.660" starttime="20170615 05:56:20.659"></status>
</kw>
<msg timestamp="20170615 05:56:20.661" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170615 05:56:20.661" starttime="20170615 05:56:20.603"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170615 05:56:20.662" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170615 05:56:20.662" starttime="20170615 05:56:20.661"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:20.663" starttime="20170615 05:56:20.662"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170615 05:56:20.667" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170615 05:56:20.682" level="INFO">${rc} = 0</msg>
<msg timestamp="20170615 05:56:20.683" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170615 05:56:20.683" starttime="20170615 05:56:20.663"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:20.686" starttime="20170615 05:56:20.685"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170615 05:56:20.688" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170615 05:56:20.688" starttime="20170615 05:56:20.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:20.691" starttime="20170615 05:56:20.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170615 05:56:20.694" level="INFO">${rc} = None</msg>
<msg timestamp="20170615 05:56:20.694" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170615 05:56:20.696" starttime="20170615 05:56:20.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:20.698" starttime="20170615 05:56:20.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170615 05:56:20.728" html="yes" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///home/fspcibld/logs/SOL.log"&gt;/home/fspcibld/logs/SOL.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170615 05:56:20.728" starttime="20170615 05:56:20.722"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:20.728" starttime="20170615 05:56:20.702"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:20.728" starttime="20170615 05:56:20.699"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170615 05:56:20.729" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170615 05:56:20.729" starttime="20170615 05:56:20.728"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170615 05:56:20.729" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170615 05:56:20.729" starttime="20170615 05:56:20.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:20.800" starttime="20170615 05:56:20.730"></status>
</kw>
<msg timestamp="20170615 05:56:20.802" level="INFO">${rc} = 0</msg>
<msg timestamp="20170615 05:56:20.802" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" endtime="20170615 05:56:20.802" starttime="20170615 05:56:20.730"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:20.803" starttime="20170615 05:56:20.600"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:20.804" starttime="20170615 05:56:20.591"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:20.804" starttime="20170615 05:56:20.590"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:20.804" starttime="20170615 05:50:11.626"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:20.804" starttime="20170615 05:50:11.625"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170615 05:56:20.808" starttime="20170615 05:56:20.808"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170615 05:56:20.823" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170615 05:56:20.824" starttime="20170615 05:56:20.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170615 05:56:20.825" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170615 05:56:20.825" starttime="20170615 05:56:20.825"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170615 05:56:20.826" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170615 05:56:20.826" starttime="20170615 05:56:20.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170615 05:56:20.827" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170615 05:56:20.827" starttime="20170615 05:56:20.826"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170615 05:56:21.168" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170615 05:56:21.168" starttime="20170615 05:56:20.827"></status>
</kw>
<msg timestamp="20170615 05:56:21.169" level="INFO">${status} = PASS</msg>
<msg timestamp="20170615 05:56:21.169" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:56:21.169" starttime="20170615 05:56:20.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170615 05:56:21.169" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:56:21.169" starttime="20170615 05:56:21.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:56:21.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:56:21.170" starttime="20170615 05:56:21.170"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:21.170" starttime="20170615 05:56:20.822"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:21.170" starttime="20170615 05:56:20.822"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:21.171" starttime="20170615 05:56:20.821"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170615 05:56:21.171" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170615 05:56:21.171" starttime="20170615 05:56:21.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:21.172" starttime="20170615 05:56:21.171"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170615 05:56:21.261" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170615 05:56:21.262" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:56:21.262" starttime="20170615 05:56:21.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:21.262" starttime="20170615 05:56:21.262"></status>
</kw>
<msg timestamp="20170615 05:56:21.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170615 05:56:21.263" starttime="20170615 05:56:20.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170615 05:56:21.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170615 05:56:21.263" starttime="20170615 05:56:21.263"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170615 05:56:21.264" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170615 05:56:21.264" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170615 05:56:21.264" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170615 05:56:21.264" starttime="20170615 05:56:21.263"></status>
</kw>
<msg timestamp="20170615 05:56:21.264" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170615 05:56:21.264" starttime="20170615 05:56:20.819"></status>
</kw>
<msg timestamp="20170615 05:56:21.265" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170615 05:56:21.265" starttime="20170615 05:56:20.819"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170615 05:56:21.266" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" endtime="20170615 05:56:21.266" starttime="20170615 05:56:21.265"></status>
</kw>
<msg timestamp="20170615 05:56:21.266" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170615 05:56:21.266" starttime="20170615 05:56:21.265"></status>
</kw>
<msg timestamp="20170615 05:56:21.266" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170615 05:56:21.266" starttime="20170615 05:56:20.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:21.267" starttime="20170615 05:56:21.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:21.267" starttime="20170615 05:56:21.267"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170615 05:56:21.268" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170615 05:56:21.268" starttime="20170615 05:56:21.268"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170615 05:56:21.269" level="INFO">${FFDC_DIR_PATH} = ./</msg>
<status status="PASS" endtime="20170615 05:56:21.269" starttime="20170615 05:56:21.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:21.270" starttime="20170615 05:56:21.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:21.270" starttime="20170615 05:56:21.270"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170615 05:56:21.271" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170615 05:56:21.271" starttime="20170615 05:56:21.271"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170615 05:56:21.272" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170615 05:56:21.272" starttime="20170615 05:56:21.272"></status>
</kw>
<msg timestamp="20170615 05:56:21.272" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170615 05:56:21.272" starttime="20170615 05:56:21.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:21.273" starttime="20170615 05:56:21.273"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170615 05:56:21.274" starttime="20170615 05:56:21.273"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170615 05:56:21.275" level="INFO">${cur_time} = 2017-06-15 05:56:21:274653</msg>
<status status="PASS" endtime="20170615 05:56:21.275" starttime="20170615 05:56:21.274"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170615 05:56:21.275" level="INFO">${cur_time} = 20170615055621274653</msg>
<status status="PASS" endtime="20170615 05:56:21.276" starttime="20170615 05:56:21.275"></status>
</kw>
<msg timestamp="20170615 05:56:21.276" level="INFO">${cur_time} = 20170615055621274653</msg>
<status status="PASS" endtime="20170615 05:56:21.276" starttime="20170615 05:56:21.274"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170615 05:56:21.277" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170615 05:56:21.277" starttime="20170615 05:56:21.276"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:21.277" starttime="20170615 05:56:21.268"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:21.277" starttime="20170615 05:56:20.818"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:21.277" starttime="20170615 05:56:20.810"></status>
</kw>
<status status="PASS" endtime="20170615 05:56:21.278" starttime="20170615 05:56:20.806"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170615 05:56:21.278" critical="yes" starttime="20170615 05:50:11.622"></status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="PASS" endtime="20170615 05:56:21.279" starttime="20170615 05:45:46.559"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="2">Critical Tests</stat>
<stat fail="0" pass="2">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">Host_BIOS_Power_On</stat>
<stat fail="0" pass="1">Host_BIOS_Update</stat>
<stat fail="0" pass="2">open-power</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="Test Bios Update" pass="2">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
