<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170708 15:28:43.234" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:28:44.142" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:28:44.142" starttime="20170708 15:28:44.142"></status>
</kw>
<msg timestamp="20170708 15:28:44.142" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:28:44.142" starttime="20170708 15:28:44.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:44.144" starttime="20170708 15:28:44.143"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:44.144" starttime="20170708 15:28:44.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:44.145" starttime="20170708 15:28:44.144"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:28:44.146" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:28:44.146" starttime="20170708 15:28:44.146"></status>
</kw>
<msg timestamp="20170708 15:28:44.146" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:28:44.146" starttime="20170708 15:28:44.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:44.148" starttime="20170708 15:28:44.148"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:44.149" starttime="20170708 15:28:44.147"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:44.149" starttime="20170708 15:28:44.147"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:28:44.149" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:28:45.861" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:28:45.862" starttime="20170708 15:28:44.149"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:45.862" starttime="20170708 15:28:44.140"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:28:45.863" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170708 15:28:45.939" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:28:45.940" level="INFO">${output} = 1499519272</msg>
<msg timestamp="20170708 15:28:45.940" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:28:45.940" starttime="20170708 15:28:45.862"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:28:45.940" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:28:45.941" starttime="20170708 15:28:45.940"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170708 15:28:45.941" level="INFO">${btime} = 1499519272</msg>
<status status="PASS" endtime="20170708 15:28:45.941" starttime="20170708 15:28:45.941"></status>
</kw>
<msg timestamp="20170708 15:28:45.941" level="INFO">${cur_btime} = 1499519272</msg>
<status status="PASS" endtime="20170708 15:28:45.941" starttime="20170708 15:28:44.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170708 15:28:45.943" level="INFO">${BOOT_TIME} = 1499519272</msg>
<status status="PASS" endtime="20170708 15:28:45.943" starttime="20170708 15:28:45.943"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:45.943" starttime="20170708 15:28:45.942"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:45.944" starttime="20170708 15:28:44.138"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:45.944" starttime="20170708 15:28:45.944"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:45.946" starttime="20170708 15:28:45.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:45.947" starttime="20170708 15:28:45.946"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:45.947" starttime="20170708 15:28:44.138"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:28:45.950" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:28:45.950" starttime="20170708 15:28:45.950"></status>
</kw>
<msg timestamp="20170708 15:28:45.950" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:28:45.950" starttime="20170708 15:28:45.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:45.952" starttime="20170708 15:28:45.951"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:45.952" starttime="20170708 15:28:45.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:45.952" starttime="20170708 15:28:45.952"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:28:45.953" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:28:45.954" starttime="20170708 15:28:45.953"></status>
</kw>
<msg timestamp="20170708 15:28:45.954" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:28:45.954" starttime="20170708 15:28:45.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:45.955" starttime="20170708 15:28:45.955"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:45.955" starttime="20170708 15:28:45.955"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:45.956" starttime="20170708 15:28:45.954"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:28:45.956" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:28:47.868" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:28:47.868" starttime="20170708 15:28:45.956"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:47.868" starttime="20170708 15:28:45.948"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170708 15:28:47.869" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170708 15:28:47.945" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:28:47.945" level="INFO">${output} = </msg>
<msg timestamp="20170708 15:28:47.946" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/169f9b5a822f4338824a4e146beb5550.</msg>
<msg timestamp="20170708 15:28:47.946" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170708 15:28:47.946" starttime="20170708 15:28:47.868"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:47.946" starttime="20170708 15:28:47.946"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:47.946" starttime="20170708 15:28:45.947"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170708 15:28:47.949" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170708 15:28:47.949" starttime="20170708 15:28:47.948"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:28:47.950" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170708 15:28:47.950" starttime="20170708 15:28:47.950"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:28:47.953" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:28:47.954" starttime="20170708 15:28:47.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:28:47.955" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:28:47.955" starttime="20170708 15:28:47.954"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:28:47.955" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:28:47.955" starttime="20170708 15:28:47.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:28:47.956" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:28:47.956" starttime="20170708 15:28:47.956"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:28:48.155" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:28:48.155" starttime="20170708 15:28:47.957"></status>
</kw>
<msg timestamp="20170708 15:28:48.155" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:28:48.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:28:48.155" starttime="20170708 15:28:47.956"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:28:48.156" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:28:48.156" starttime="20170708 15:28:48.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:28:48.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:28:48.157" starttime="20170708 15:28:48.156"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:48.157" starttime="20170708 15:28:47.952"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:48.157" starttime="20170708 15:28:47.952"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:48.157" starttime="20170708 15:28:47.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:28:48.158" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170708 15:28:48.158" starttime="20170708 15:28:48.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:28:48.158" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:28:48.158" starttime="20170708 15:28:48.158"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:48.159" starttime="20170708 15:28:48.158"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:28:48.160" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170708 15:28:48.160" starttime="20170708 15:28:48.160"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:28:48.161" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:28:48.163" starttime="20170708 15:28:48.161"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:48.163" starttime="20170708 15:28:48.161"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:48.163" starttime="20170708 15:28:48.159"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:28:49.281" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 15:28:49.281" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:28:49.281" starttime="20170708 15:28:48.164"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:28:49.283" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:28:49.283" starttime="20170708 15:28:49.282"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:28:49.284" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:28:49.284" starttime="20170708 15:28:49.283"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:49.284" starttime="20170708 15:28:49.283"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:49.284" starttime="20170708 15:28:49.281"></status>
</kw>
<msg timestamp="20170708 15:28:49.285" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:28:49.285" starttime="20170708 15:28:47.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:28:49.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:28:49.286" starttime="20170708 15:28:49.285"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 15:28:49.286" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:28:49.286" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:28:49.287" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 15:28:49.287" starttime="20170708 15:28:49.286"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:49.287" starttime="20170708 15:28:47.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:49.287" starttime="20170708 15:28:49.287"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:28:49.292" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:28:49.293" starttime="20170708 15:28:49.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:28:49.293" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:28:49.293" starttime="20170708 15:28:49.293"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:28:49.294" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:28:49.294" starttime="20170708 15:28:49.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:28:49.295" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:28:49.295" starttime="20170708 15:28:49.294"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:28:50.478" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:28:50.478" starttime="20170708 15:28:49.296"></status>
</kw>
<msg timestamp="20170708 15:28:50.479" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:28:50.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:28:50.479" starttime="20170708 15:28:49.295"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:28:50.479" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:28:50.479" starttime="20170708 15:28:50.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:28:50.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:28:50.480" starttime="20170708 15:28:50.480"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:50.480" starttime="20170708 15:28:49.291"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:50.480" starttime="20170708 15:28:49.291"></status>
</kw>
<status status="PASS" endtime="20170708 15:28:50.480" starttime="20170708 15:28:49.290"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:28:50.481" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 15:28:50.481" starttime="20170708 15:28:50.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:50.482" starttime="20170708 15:28:50.481"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:28:56.852" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 15:28:56.853" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:28:56.853" starttime="20170708 15:28:50.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:28:56.854" starttime="20170708 15:28:56.853"></status>
</kw>
<msg timestamp="20170708 15:28:56.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:28:56.854" starttime="20170708 15:28:49.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:28:56.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:28:56.855" starttime="20170708 15:28:56.855"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:28:56.856" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:28:56.856" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:28:56.856" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170708 15:28:56.856" starttime="20170708 15:28:56.856"></status>
</kw>
<msg timestamp="20170708 15:28:56.857" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170708 15:28:56.857" starttime="20170708 15:28:49.289"></status>
</kw>
<msg timestamp="20170708 15:28:56.857" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170708 15:28:56.857" starttime="20170708 15:28:49.289"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170708 15:28:56.858" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170708 15:28:56.858" starttime="20170708 15:28:56.858"></status>
</kw>
<status status="FAIL" endtime="20170708 15:28:56.859" starttime="20170708 15:28:49.288"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:29:06.865" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:29:06.865" starttime="20170708 15:29:06.864"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:29:06.866" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:29:06.866" starttime="20170708 15:29:06.866"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:29:06.867" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:29:06.867" starttime="20170708 15:29:06.867"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:29:06.868" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:29:06.868" starttime="20170708 15:29:06.867"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:29:07.075" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:29:07.075" starttime="20170708 15:29:06.869"></status>
</kw>
<msg timestamp="20170708 15:29:07.075" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:29:07.075" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:07.075" starttime="20170708 15:29:06.868"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:29:07.076" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:07.076" starttime="20170708 15:29:07.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:29:07.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:07.077" starttime="20170708 15:29:07.076"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:07.077" starttime="20170708 15:29:06.863"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:07.077" starttime="20170708 15:29:06.863"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:07.077" starttime="20170708 15:29:06.862"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:29:07.078" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 15:29:07.078" starttime="20170708 15:29:07.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:07.078" starttime="20170708 15:29:07.078"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:29:07.197" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 15:29:07.197" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:07.197" starttime="20170708 15:29:07.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:07.198" starttime="20170708 15:29:07.198"></status>
</kw>
<msg timestamp="20170708 15:29:07.198" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:07.198" starttime="20170708 15:29:06.861"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:29:07.199" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:07.199" starttime="20170708 15:29:07.199"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:29:07.200" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:29:07.200" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:29:07.200" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170708 15:29:07.200" starttime="20170708 15:29:07.199"></status>
</kw>
<msg timestamp="20170708 15:29:07.200" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170708 15:29:07.200" starttime="20170708 15:29:06.860"></status>
</kw>
<msg timestamp="20170708 15:29:07.200" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170708 15:29:07.200" starttime="20170708 15:29:06.860"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170708 15:29:07.201" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170708 15:29:07.201" starttime="20170708 15:29:07.201"></status>
</kw>
<status status="FAIL" endtime="20170708 15:29:07.201" starttime="20170708 15:29:06.859"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:29:17.207" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:29:17.207" starttime="20170708 15:29:17.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:29:17.208" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:29:17.208" starttime="20170708 15:29:17.207"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:29:17.208" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:29:17.208" starttime="20170708 15:29:17.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:29:17.209" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:29:17.209" starttime="20170708 15:29:17.209"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:29:17.427" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:29:17.427" starttime="20170708 15:29:17.210"></status>
</kw>
<msg timestamp="20170708 15:29:17.427" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:29:17.427" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:17.427" starttime="20170708 15:29:17.209"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:29:17.428" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:17.428" starttime="20170708 15:29:17.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:29:17.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:17.429" starttime="20170708 15:29:17.428"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.429" starttime="20170708 15:29:17.206"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.429" starttime="20170708 15:29:17.205"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.429" starttime="20170708 15:29:17.204"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:29:17.430" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 15:29:17.430" starttime="20170708 15:29:17.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:17.430" starttime="20170708 15:29:17.430"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:29:17.510" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 15:29:17.510" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:17.510" starttime="20170708 15:29:17.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:17.511" starttime="20170708 15:29:17.511"></status>
</kw>
<msg timestamp="20170708 15:29:17.511" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:17.511" starttime="20170708 15:29:17.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:29:17.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:17.512" starttime="20170708 15:29:17.512"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:29:17.513" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:29:17.513" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:29:17.513" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170708 15:29:17.513" starttime="20170708 15:29:17.512"></status>
</kw>
<msg timestamp="20170708 15:29:17.513" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170708 15:29:17.513" starttime="20170708 15:29:17.203"></status>
</kw>
<msg timestamp="20170708 15:29:17.513" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170708 15:29:17.513" starttime="20170708 15:29:17.202"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:17.514" starttime="20170708 15:29:17.514"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.514" starttime="20170708 15:29:17.202"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.514" starttime="20170708 15:28:49.288"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.514" starttime="20170708 15:28:47.948"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.514" starttime="20170708 15:28:47.947"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.515" starttime="20170708 15:28:47.947"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170708 15:29:17.516" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170708 15:29:17.516" starttime="20170708 15:29:17.516"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:29:17.517" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170708 15:29:17.517" starttime="20170708 15:29:17.517"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:29:17.520" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:29:17.521" starttime="20170708 15:29:17.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:29:17.521" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:29:17.521" starttime="20170708 15:29:17.521"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:29:17.522" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:29:17.522" starttime="20170708 15:29:17.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:29:17.523" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:29:17.523" starttime="20170708 15:29:17.522"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:29:17.719" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:29:17.720" starttime="20170708 15:29:17.523"></status>
</kw>
<msg timestamp="20170708 15:29:17.720" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:29:17.720" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:17.720" starttime="20170708 15:29:17.523"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:29:17.720" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:17.721" starttime="20170708 15:29:17.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:29:17.721" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:17.721" starttime="20170708 15:29:17.721"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.721" starttime="20170708 15:29:17.519"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.721" starttime="20170708 15:29:17.519"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.722" starttime="20170708 15:29:17.518"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:29:17.722" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170708 15:29:17.722" starttime="20170708 15:29:17.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:29:17.723" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:29:17.723" starttime="20170708 15:29:17.723"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:17.723" starttime="20170708 15:29:17.723"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:29:17.725" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:29:17.725" starttime="20170708 15:29:17.724"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:29:17.726" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:29:17.727" starttime="20170708 15:29:17.726"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.727" starttime="20170708 15:29:17.725"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.727" starttime="20170708 15:29:17.724"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:29:17.929" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 15:29:17.929" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:17.929" starttime="20170708 15:29:17.727"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:29:17.931" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:29:17.931" starttime="20170708 15:29:17.930"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:29:17.932" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:29:17.932" starttime="20170708 15:29:17.932"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.932" starttime="20170708 15:29:17.931"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.932" starttime="20170708 15:29:17.929"></status>
</kw>
<msg timestamp="20170708 15:29:17.933" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:17.933" starttime="20170708 15:29:17.517"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:29:17.933" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:17.933" starttime="20170708 15:29:17.933"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 15:29:17.934" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:29:17.934" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:29:17.934" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 15:29:17.934" starttime="20170708 15:29:17.934"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:17.934" starttime="20170708 15:29:17.516"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:29:17.937" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:29:17.938" starttime="20170708 15:29:17.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:29:17.939" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:29:17.939" starttime="20170708 15:29:17.938"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:29:17.939" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:29:17.939" starttime="20170708 15:29:17.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:29:17.940" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:29:17.940" starttime="20170708 15:29:17.940"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:29:18.198" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:29:18.198" starttime="20170708 15:29:17.941"></status>
</kw>
<msg timestamp="20170708 15:29:18.198" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:29:18.198" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:18.199" starttime="20170708 15:29:17.940"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:29:18.199" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:18.199" starttime="20170708 15:29:18.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:29:18.200" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:18.200" starttime="20170708 15:29:18.200"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:18.200" starttime="20170708 15:29:17.937"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:18.200" starttime="20170708 15:29:17.936"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:18.200" starttime="20170708 15:29:17.936"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:29:18.201" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170708 15:29:18.201" starttime="20170708 15:29:18.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:18.202" starttime="20170708 15:29:18.201"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:29:18.303" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170708 15:29:18.303" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:18.303" starttime="20170708 15:29:18.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:18.304" starttime="20170708 15:29:18.304"></status>
</kw>
<msg timestamp="20170708 15:29:18.304" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:18.304" starttime="20170708 15:29:17.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:29:18.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:18.305" starttime="20170708 15:29:18.305"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:29:18.306" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:29:18.306" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:29:18.306" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170708 15:29:18.306" starttime="20170708 15:29:18.305"></status>
</kw>
<msg timestamp="20170708 15:29:18.306" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170708 15:29:18.306" starttime="20170708 15:29:17.934"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:18.307" starttime="20170708 15:29:18.306"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:18.307" starttime="20170708 15:29:17.515"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:29:18.308" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170708 15:29:18.308" starttime="20170708 15:29:18.307"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:29:18.311" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:29:18.311" starttime="20170708 15:29:18.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:29:18.312" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:29:18.312" starttime="20170708 15:29:18.311"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:29:18.312" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:29:18.312" starttime="20170708 15:29:18.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:29:18.313" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:29:18.313" starttime="20170708 15:29:18.313"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:29:18.623" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:29:18.623" starttime="20170708 15:29:18.314"></status>
</kw>
<msg timestamp="20170708 15:29:18.623" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:29:18.623" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:18.623" starttime="20170708 15:29:18.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:29:18.624" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:18.624" starttime="20170708 15:29:18.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:29:18.624" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:18.624" starttime="20170708 15:29:18.624"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:18.625" starttime="20170708 15:29:18.310"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:18.625" starttime="20170708 15:29:18.309"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:18.625" starttime="20170708 15:29:18.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:29:18.625" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170708 15:29:18.625" starttime="20170708 15:29:18.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:29:18.626" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:29:18.626" starttime="20170708 15:29:18.626"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:18.627" starttime="20170708 15:29:18.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:18.627" starttime="20170708 15:29:18.627"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:29:19.033" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170708 15:29:19.033" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:19.033" starttime="20170708 15:29:18.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:19.034" starttime="20170708 15:29:19.034"></status>
</kw>
<msg timestamp="20170708 15:29:19.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:29:19.034" starttime="20170708 15:29:18.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:29:19.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:29:19.035" starttime="20170708 15:29:19.034"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170708 15:29:29.036" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170708 15:29:29.036" starttime="20170708 15:29:19.035"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:29.036" starttime="20170708 15:29:18.307"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:29:29.039" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170708 15:29:29.039" starttime="20170708 15:29:29.039"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:29:29.047" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:29:32.051" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 15:29:32.051" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.61 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=4.40 ms
64 bytes from 9.3.86.161: icmp_seq=...</msg>
<status status="PASS" endtime="20170708 15:29:32.051" starttime="20170708 15:29:29.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:29:32.054" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.61 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=4.40 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.599 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.583 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.583/1.798/4.401/1.559 ms</msg>
<status status="PASS" endtime="20170708 15:29:32.055" starttime="20170708 15:29:32.054"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:32.055" starttime="20170708 15:29:32.055"></status>
</kw>
<status status="PASS" endtime="20170708 15:29:32.055" starttime="20170708 15:29:29.039"></status>
</kw>
<msg timestamp="20170708 15:29:32.056" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170708 15:29:32.056" starttime="20170708 15:29:29.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170708 15:29:32.057" starttime="20170708 15:29:32.056"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:29:32.060" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:29:32.061" starttime="20170708 15:29:32.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:29:32.061" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:29:32.061" starttime="20170708 15:29:32.061"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:29:32.062" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:29:32.062" starttime="20170708 15:29:32.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:29:32.062" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:29:32.063" starttime="20170708 15:29:32.062"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:29:32.422" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170708 15:29:32.422" starttime="20170708 15:29:32.063"></status>
</kw>
<msg timestamp="20170708 15:29:32.422" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170708 15:29:32.422" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170708 15:29:32.422" starttime="20170708 15:29:32.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:29:32.423" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:29:32.423" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:29:32.423" starttime="20170708 15:29:32.422"></status>
</kw>
<status status="FAIL" endtime="20170708 15:29:32.423" starttime="20170708 15:29:32.059"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:29:52.425" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:29:52.425" starttime="20170708 15:29:52.425"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:29:52.426" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:29:52.426" starttime="20170708 15:29:52.426"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:29:52.427" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:29:52.427" starttime="20170708 15:29:52.426"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:29:52.427" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:29:52.427" starttime="20170708 15:29:52.427"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:30:12.451" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8c02b6d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170708 15:30:32.673" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8c02b810&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170708 15:31:07.730" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170708 15:31:07.730" starttime="20170708 15:29:52.428"></status>
</kw>
<msg timestamp="20170708 15:31:07.730" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170708 15:31:07.730" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170708 15:31:07.730" starttime="20170708 15:29:52.428"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:31:07.731" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:31:07.731" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:31:07.731" starttime="20170708 15:31:07.731"></status>
</kw>
<status status="FAIL" endtime="20170708 15:31:07.732" starttime="20170708 15:29:52.424"></status>
</kw>
<msg timestamp="20170708 15:31:07.732" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:31:07.732" starttime="20170708 15:29:32.058"></status>
</kw>
<status status="FAIL" endtime="20170708 15:31:07.732" starttime="20170708 15:29:32.057"></status>
</kw>
<msg timestamp="20170708 15:31:07.732" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170708 15:31:07.732" starttime="20170708 15:29:32.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170708 15:31:07.733" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170708 15:31:07.733" starttime="20170708 15:31:07.733"></status>
</kw>
<status status="FAIL" endtime="20170708 15:31:07.733" starttime="20170708 15:31:07.733"></status>
</kw>
<status status="FAIL" endtime="20170708 15:31:07.734" starttime="20170708 15:29:29.038"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:31:17.736" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170708 15:31:17.736" starttime="20170708 15:31:17.736"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:31:17.741" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:31:20.753" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 15:31:20.753" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.27 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.674 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170708 15:31:20.753" starttime="20170708 15:31:17.737"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:31:20.757" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.27 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.674 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.620 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=10.0 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.620/3.154/10.046/3.987 ms</msg>
<status status="PASS" endtime="20170708 15:31:20.757" starttime="20170708 15:31:20.756"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:31:20.758" starttime="20170708 15:31:20.757"></status>
</kw>
<status status="PASS" endtime="20170708 15:31:20.758" starttime="20170708 15:31:17.735"></status>
</kw>
<msg timestamp="20170708 15:31:20.758" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170708 15:31:20.758" starttime="20170708 15:31:17.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170708 15:31:20.759" starttime="20170708 15:31:20.759"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:31:20.762" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:31:20.764" starttime="20170708 15:31:20.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:31:20.765" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:31:20.765" starttime="20170708 15:31:20.765"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:31:20.765" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:31:20.766" starttime="20170708 15:31:20.765"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:31:20.766" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:31:20.766" starttime="20170708 15:31:20.766"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:31:40.795" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170708 15:31:40.795" starttime="20170708 15:31:20.767"></status>
</kw>
<msg timestamp="20170708 15:31:40.795" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170708 15:31:40.795" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170708 15:31:40.795" starttime="20170708 15:31:20.767"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:31:40.796" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:31:40.796" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:31:40.796" starttime="20170708 15:31:40.796"></status>
</kw>
<status status="FAIL" endtime="20170708 15:31:40.797" starttime="20170708 15:31:20.761"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:32:00.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:32:00.799" starttime="20170708 15:32:00.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:00.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:00.800" starttime="20170708 15:32:00.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:32:00.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:32:00.801" starttime="20170708 15:32:00.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:32:00.802" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:32:00.802" starttime="20170708 15:32:00.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:32:01.026" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:32:01.027" starttime="20170708 15:32:00.803"></status>
</kw>
<msg timestamp="20170708 15:32:01.027" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:01.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:01.027" starttime="20170708 15:32:00.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:32:01.027" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:01.027" starttime="20170708 15:32:01.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:01.028" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:01.028" starttime="20170708 15:32:01.028"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:01.028" starttime="20170708 15:32:00.797"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:01.028" starttime="20170708 15:31:20.761"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:01.029" starttime="20170708 15:31:20.760"></status>
</kw>
<msg timestamp="20170708 15:32:01.029" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170708 15:32:01.029" starttime="20170708 15:31:20.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:01.029" starttime="20170708 15:32:01.029"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:32:01.031" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:32:01.031" starttime="20170708 15:32:01.031"></status>
</kw>
<msg timestamp="20170708 15:32:01.031" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:32:01.031" starttime="20170708 15:32:01.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:01.033" starttime="20170708 15:32:01.032"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:01.033" starttime="20170708 15:32:01.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:01.033" starttime="20170708 15:32:01.033"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:32:01.034" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:32:01.034" starttime="20170708 15:32:01.034"></status>
</kw>
<msg timestamp="20170708 15:32:01.035" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:32:01.035" starttime="20170708 15:32:01.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:01.038" starttime="20170708 15:32:01.036"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:01.038" starttime="20170708 15:32:01.036"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:01.038" starttime="20170708 15:32:01.035"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:32:01.039" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:32:03.088" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:32:03.089" starttime="20170708 15:32:01.038"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:03.089" starttime="20170708 15:32:01.030"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:03.090" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170708 15:32:03.146" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:03.146" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170708 15:32:03.146" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:03.146" starttime="20170708 15:32:03.089"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:32:03.147" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:32:03.147" starttime="20170708 15:32:03.146"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:03.147" starttime="20170708 15:31:17.734"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:03.147" starttime="20170708 15:29:29.037"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:03.147" starttime="20170708 15:29:29.036"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:32:03.150" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:32:03.150" starttime="20170708 15:32:03.149"></status>
</kw>
<msg timestamp="20170708 15:32:03.150" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:32:03.150" starttime="20170708 15:32:03.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:03.151" starttime="20170708 15:32:03.151"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:03.151" starttime="20170708 15:32:03.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:03.152" starttime="20170708 15:32:03.152"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:32:03.153" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:32:03.153" starttime="20170708 15:32:03.153"></status>
</kw>
<msg timestamp="20170708 15:32:03.153" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:32:03.153" starttime="20170708 15:32:03.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:03.155" starttime="20170708 15:32:03.155"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:03.155" starttime="20170708 15:32:03.155"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:03.155" starttime="20170708 15:32:03.154"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:32:03.156" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:32:04.932" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:32:04.933" starttime="20170708 15:32:03.156"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:04.933" starttime="20170708 15:32:03.148"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:04.933" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170708 15:32:05.050" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:05.050" level="INFO">${output} = 1499527809</msg>
<msg timestamp="20170708 15:32:05.050" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:05.051" starttime="20170708 15:32:04.933"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.051" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:32:05.051" starttime="20170708 15:32:05.051"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170708 15:32:05.052" level="INFO">${btime} = 1499527809</msg>
<status status="PASS" endtime="20170708 15:32:05.052" starttime="20170708 15:32:05.051"></status>
</kw>
<msg timestamp="20170708 15:32:05.052" level="INFO">${cur_btime} = 1499527809</msg>
<status status="PASS" endtime="20170708 15:32:05.052" starttime="20170708 15:32:03.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.054" level="INFO">${BOOT_TIME} = 1499527809</msg>
<status status="PASS" endtime="20170708 15:32:05.054" starttime="20170708 15:32:05.054"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.055" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170708 15:32:05.055" starttime="20170708 15:32:05.055"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.055" starttime="20170708 15:32:05.053"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.055" starttime="20170708 15:32:05.052"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.055" starttime="20170708 15:32:03.148"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:05.056" starttime="20170708 15:32:05.056"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:05.057" starttime="20170708 15:32:05.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:05.057" starttime="20170708 15:32:05.057"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.057" starttime="20170708 15:32:03.147"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:32:05.061" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:32:05.061" starttime="20170708 15:32:05.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:05.062" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:05.062" starttime="20170708 15:32:05.062"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:32:05.062" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:32:05.063" starttime="20170708 15:32:05.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:32:05.063" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:32:05.063" starttime="20170708 15:32:05.063"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.243" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:32:05.243" starttime="20170708 15:32:05.064"></status>
</kw>
<msg timestamp="20170708 15:32:05.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:05.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.243" starttime="20170708 15:32:05.064"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.244" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.244" starttime="20170708 15:32:05.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.245" starttime="20170708 15:32:05.245"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.245" starttime="20170708 15:32:05.060"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.245" starttime="20170708 15:32:05.059"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.246" starttime="20170708 15:32:05.059"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:32:05.247" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170708 15:32:05.247" starttime="20170708 15:32:05.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:05.247" starttime="20170708 15:32:05.247"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:32:05.292" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170708 15:32:05.292" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.292" starttime="20170708 15:32:05.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:05.293" starttime="20170708 15:32:05.292"></status>
</kw>
<msg timestamp="20170708 15:32:05.293" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.293" starttime="20170708 15:32:05.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:32:05.294" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:32:05.294" starttime="20170708 15:32:05.293"></status>
</kw>
<status status="FAIL" endtime="20170708 15:32:05.294" starttime="20170708 15:32:05.058"></status>
</kw>
<msg timestamp="20170708 15:32:05.294" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:32:05.294" starttime="20170708 15:32:05.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170708 15:32:05.296" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170708 15:32:05.296" starttime="20170708 15:32:05.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:32:05.301" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:32:05.302" starttime="20170708 15:32:05.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:05.302" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:05.302" starttime="20170708 15:32:05.302"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:32:05.303" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:32:05.303" starttime="20170708 15:32:05.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:32:05.304" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:32:05.304" starttime="20170708 15:32:05.303"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.483" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:32:05.483" starttime="20170708 15:32:05.304"></status>
</kw>
<msg timestamp="20170708 15:32:05.484" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:05.484" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.484" starttime="20170708 15:32:05.304"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.484" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.484" starttime="20170708 15:32:05.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.485" starttime="20170708 15:32:05.485"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.485" starttime="20170708 15:32:05.300"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.485" starttime="20170708 15:32:05.300"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.485" starttime="20170708 15:32:05.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:32:05.486" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170708 15:32:05.486" starttime="20170708 15:32:05.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:05.487" starttime="20170708 15:32:05.486"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:32:05.564" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170708 15:32:05.564" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.564" starttime="20170708 15:32:05.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:05.565" starttime="20170708 15:32:05.564"></status>
</kw>
<msg timestamp="20170708 15:32:05.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.565" starttime="20170708 15:32:05.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.566" starttime="20170708 15:32:05.565"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:32:05.566" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:32:05.566" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:32:05.566" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170708 15:32:05.566" starttime="20170708 15:32:05.566"></status>
</kw>
<msg timestamp="20170708 15:32:05.567" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170708 15:32:05.567" starttime="20170708 15:32:05.298"></status>
</kw>
<msg timestamp="20170708 15:32:05.567" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170708 15:32:05.567" starttime="20170708 15:32:05.298"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:05.568" starttime="20170708 15:32:05.567"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.568" starttime="20170708 15:32:05.297"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.568" starttime="20170708 15:32:05.297"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.568" starttime="20170708 15:32:05.296"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.568" starttime="20170708 15:32:05.295"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.568" starttime="20170708 15:32:05.294"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.568" starttime="20170708 15:28:44.138"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.568" starttime="20170708 15:28:44.137"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170708 15:32:05.578" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170708 15:32:05.578" starttime="20170708 15:32:05.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170708 15:32:05.579" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170708 15:32:05.579" starttime="20170708 15:32:05.579"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:32:05.580" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170708 15:32:05.580" starttime="20170708 15:32:05.580"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:32:05.584" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:32:05.584" starttime="20170708 15:32:05.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:05.584" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:05.585" starttime="20170708 15:32:05.584"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:32:05.585" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:32:05.585" starttime="20170708 15:32:05.585"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:32:05.586" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:32:05.586" starttime="20170708 15:32:05.585"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.771" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:32:05.772" starttime="20170708 15:32:05.587"></status>
</kw>
<msg timestamp="20170708 15:32:05.772" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:05.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.772" starttime="20170708 15:32:05.586"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.772" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.773" starttime="20170708 15:32:05.772"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:05.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:05.773" starttime="20170708 15:32:05.773"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.773" starttime="20170708 15:32:05.583"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.773" starttime="20170708 15:32:05.582"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.774" starttime="20170708 15:32:05.581"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:32:05.774" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170708 15:32:05.774" starttime="20170708 15:32:05.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:05.775" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:05.775" starttime="20170708 15:32:05.774"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:05.775" starttime="20170708 15:32:05.775"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:32:05.777" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:32:05.777" starttime="20170708 15:32:05.776"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:32:05.778" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:32:05.778" starttime="20170708 15:32:05.778"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.778" starttime="20170708 15:32:05.777"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:05.778" starttime="20170708 15:32:05.776"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:32:06.065" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 15:32:06.065" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.065" starttime="20170708 15:32:05.779"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:32:06.067" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:32:06.067" starttime="20170708 15:32:06.066"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:32:06.068" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:32:06.068" starttime="20170708 15:32:06.068"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:06.068" starttime="20170708 15:32:06.067"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:06.069" starttime="20170708 15:32:06.065"></status>
</kw>
<msg timestamp="20170708 15:32:06.069" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.069" starttime="20170708 15:32:05.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:06.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.070" starttime="20170708 15:32:06.069"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 15:32:06.070" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:32:06.070" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:32:06.070" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 15:32:06.071" starttime="20170708 15:32:06.070"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:06.071" starttime="20170708 15:32:05.579"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:32:06.074" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:32:06.075" starttime="20170708 15:32:06.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:06.075" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:06.075" starttime="20170708 15:32:06.075"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:32:06.076" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:32:06.076" starttime="20170708 15:32:06.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:32:06.077" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:32:06.077" starttime="20170708 15:32:06.076"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:32:06.337" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:32:06.337" starttime="20170708 15:32:06.077"></status>
</kw>
<msg timestamp="20170708 15:32:06.337" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:06.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.337" starttime="20170708 15:32:06.077"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:32:06.338" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.338" starttime="20170708 15:32:06.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:06.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.339" starttime="20170708 15:32:06.338"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:06.339" starttime="20170708 15:32:06.073"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:06.339" starttime="20170708 15:32:06.073"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:06.339" starttime="20170708 15:32:06.072"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:32:06.339" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170708 15:32:06.339" starttime="20170708 15:32:06.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:06.340" starttime="20170708 15:32:06.340"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:32:06.474" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170708 15:32:06.474" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.474" starttime="20170708 15:32:06.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:06.474" starttime="20170708 15:32:06.474"></status>
</kw>
<msg timestamp="20170708 15:32:06.475" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.475" starttime="20170708 15:32:06.071"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:06.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.476" starttime="20170708 15:32:06.475"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:32:06.477" level="INFO">To JSON using : content={
  "auto_apply": 0, 
  "clear_persistent_files": 0, 
  "filename": "", 
  "preserve_network_settings": 1, 
  "restore_application_defaults": 0, 
  "status": "Idle", 
  "update_kernel_and_apps": 0
} </msg>
<msg timestamp="20170708 15:32:06.477" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:32:06.477" level="INFO">${content} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170708 15:32:06.477" starttime="20170708 15:32:06.476"></status>
</kw>
<msg timestamp="20170708 15:32:06.477" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 15:32:06.477" starttime="20170708 15:32:06.071"></status>
</kw>
<status status="FAIL" endtime="20170708 15:32:06.477" starttime="20170708 15:32:05.578"></status>
</kw>
<msg timestamp="20170708 15:32:06.479" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 15:32:06.479" starttime="20170708 15:32:05.569"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:32:06.491" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:32:06.492" starttime="20170708 15:32:06.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:06.493" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:06.493" starttime="20170708 15:32:06.492"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:32:06.493" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:32:06.493" starttime="20170708 15:32:06.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:32:06.494" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:32:06.494" starttime="20170708 15:32:06.494"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:32:06.670" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:32:06.670" starttime="20170708 15:32:06.495"></status>
</kw>
<msg timestamp="20170708 15:32:06.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:06.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.670" starttime="20170708 15:32:06.494"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:32:06.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.671" starttime="20170708 15:32:06.671"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:06.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.672" starttime="20170708 15:32:06.672"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:06.672" starttime="20170708 15:32:06.491"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:06.672" starttime="20170708 15:32:06.490"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:06.672" starttime="20170708 15:32:06.489"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:32:06.673" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 15:32:06.673" starttime="20170708 15:32:06.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:06.674" starttime="20170708 15:32:06.673"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:32:06.756" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 15:32:06.756" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.756" starttime="20170708 15:32:06.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:06.757" starttime="20170708 15:32:06.756"></status>
</kw>
<msg timestamp="20170708 15:32:06.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.757" starttime="20170708 15:32:06.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:06.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:06.758" starttime="20170708 15:32:06.757"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:32:06.758" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:32:06.758" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:32:06.759" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170708 15:32:06.759" starttime="20170708 15:32:06.758"></status>
</kw>
<msg timestamp="20170708 15:32:06.759" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170708 15:32:06.759" starttime="20170708 15:32:06.488"></status>
</kw>
<msg timestamp="20170708 15:32:06.759" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170708 15:32:06.759" starttime="20170708 15:32:06.488"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170708 15:32:06.761" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170708 15:32:06.761" starttime="20170708 15:32:06.760"></status>
</kw>
<msg timestamp="20170708 15:32:06.761" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:32:06.761" starttime="20170708 15:32:06.760"></status>
</kw>
<msg timestamp="20170708 15:32:06.761" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:32:06.761" starttime="20170708 15:32:06.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:32:06.772" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170708 15:32:06.772" starttime="20170708 15:32:06.772"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:32:06.776" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:32:09.779" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 15:32:09.779" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.686 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.643 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170708 15:32:09.779" starttime="20170708 15:32:06.772"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.783" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.686 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.643 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.634 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.687 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.634/0.662/0.687/0.035 ms</msg>
<status status="PASS" endtime="20170708 15:32:09.783" starttime="20170708 15:32:09.782"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:09.784" starttime="20170708 15:32:09.783"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.784" starttime="20170708 15:32:06.771"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:32:09.806" level="INFO">${cur_time} = 2017-07-08 15:32:09:805718</msg>
<status status="PASS" endtime="20170708 15:32:09.806" starttime="20170708 15:32:09.805"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:32:09.807" level="INFO">${cur_time} = 20170708153209805718</msg>
<status status="PASS" endtime="20170708 15:32:09.807" starttime="20170708 15:32:09.806"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.807" starttime="20170708 15:32:09.805"></status>
</kw>
<msg timestamp="20170708 15:32:09.811" level="INFO">${FFDC_TIME} = 20170708153209805718</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170708 15:32:09.813" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170708 15:32:09.813" starttime="20170708 15:32:09.812"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170708 15:32:09.813" level="INFO">${suite_name} = 20170708153209805718_UpdateBmc</msg>
<status status="PASS" endtime="20170708 15:32:09.813" starttime="20170708 15:32:09.813"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170708 15:32:09.814" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170708 15:32:09.814" starttime="20170708 15:32:09.814"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170708 15:32:09.815" level="INFO">${test_name} = 20170708153209805718_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170708 15:32:09.815" starttime="20170708 15:32:09.814"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.815" starttime="20170708 15:32:09.812"></status>
</kw>
<msg timestamp="20170708 15:32:09.819" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170708 15:32:09.824" level="INFO">${FFDC_PREFIX} = 20170708153209805718_</msg>
<msg timestamp="20170708 15:32:09.843" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170708 15:32:09.844" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.845" starttime="20170708 15:32:09.843"></status>
</kw>
<msg timestamp="20170708 15:32:09.849" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.861" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.861" starttime="20170708 15:32:09.860"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.861" starttime="20170708 15:32:09.859"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.862" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.862" starttime="20170708 15:32:09.862"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.862" starttime="20170708 15:32:09.861"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.864" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.864" starttime="20170708 15:32:09.863"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.864" starttime="20170708 15:32:09.863"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.865" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.865" starttime="20170708 15:32:09.865"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.865" starttime="20170708 15:32:09.864"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.867" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.867" starttime="20170708 15:32:09.866"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.867" starttime="20170708 15:32:09.865"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.868" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.868" starttime="20170708 15:32:09.868"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.868" starttime="20170708 15:32:09.867"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.869" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.869" starttime="20170708 15:32:09.869"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.870" starttime="20170708 15:32:09.868"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.871" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.871" starttime="20170708 15:32:09.870"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.871" starttime="20170708 15:32:09.870"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.872" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.872" starttime="20170708 15:32:09.872"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.872" starttime="20170708 15:32:09.871"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.874" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.874" starttime="20170708 15:32:09.873"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.874" starttime="20170708 15:32:09.873"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.875" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.875" starttime="20170708 15:32:09.875"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.875" starttime="20170708 15:32:09.874"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.876" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.876" starttime="20170708 15:32:09.876"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.877" starttime="20170708 15:32:09.875"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.878" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:09.878" starttime="20170708 15:32:09.877"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.878" starttime="20170708 15:32:09.877"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:32:09.880" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:32:09.880" starttime="20170708 15:32:09.880"></status>
</kw>
<msg timestamp="20170708 15:32:09.880" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:32:09.881" starttime="20170708 15:32:09.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:09.882" starttime="20170708 15:32:09.881"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.882" starttime="20170708 15:32:09.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:09.883" starttime="20170708 15:32:09.882"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:32:09.884" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:32:09.884" starttime="20170708 15:32:09.883"></status>
</kw>
<msg timestamp="20170708 15:32:09.884" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:32:09.884" starttime="20170708 15:32:09.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:09.886" starttime="20170708 15:32:09.885"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.886" starttime="20170708 15:32:09.885"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:09.886" starttime="20170708 15:32:09.884"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:32:09.886" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:32:11.535" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:32:11.536" starttime="20170708 15:32:09.886"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.536" starttime="20170708 15:32:09.879"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:11.536" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170708 15:32:11.633" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:11.633" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170708 15:32:11.633" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:11.633" starttime="20170708 15:32:11.536"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:32:11.634" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:32:11.634" starttime="20170708 15:32:11.634"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170708 15:32:11.634" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170708 15:32:11.635" starttime="20170708 15:32:11.634"></status>
</kw>
<msg timestamp="20170708 15:32:11.635" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170708 15:32:11.635" starttime="20170708 15:32:09.878"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:11.636" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:11.636" starttime="20170708 15:32:11.636"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.636" starttime="20170708 15:32:11.635"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.636" starttime="20170708 15:32:09.872"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:11.638" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:11.638" starttime="20170708 15:32:11.637"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.638" starttime="20170708 15:32:11.637"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:32:11.638" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170708 15:32:11.638" starttime="20170708 15:32:11.638"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:11.640" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:11.640" starttime="20170708 15:32:11.639"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.640" starttime="20170708 15:32:11.639"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:11.641" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:11.641" starttime="20170708 15:32:11.641"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.642" starttime="20170708 15:32:11.640"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.642" starttime="20170708 15:32:11.639"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:11.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:11.643" starttime="20170708 15:32:11.643"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.643" starttime="20170708 15:32:11.642"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:11.644" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:11.644" starttime="20170708 15:32:11.644"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.644" starttime="20170708 15:32:11.643"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.644" starttime="20170708 15:32:11.642"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:11.646" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:11.646" starttime="20170708 15:32:11.645"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.646" starttime="20170708 15:32:11.645"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:11.647" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:11.647" starttime="20170708 15:32:11.647"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.647" starttime="20170708 15:32:11.646"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.647" starttime="20170708 15:32:11.645"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.647" starttime="20170708 15:32:11.638"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:11.648" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:11.648" starttime="20170708 15:32:11.648"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.649" starttime="20170708 15:32:11.647"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.649" starttime="20170708 15:32:09.859"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:32:11.654" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170708 15:32:11.654" starttime="20170708 15:32:11.654"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170708 15:32:11.656" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170708 15:32:11.656" starttime="20170708 15:32:11.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:11.657" starttime="20170708 15:32:11.657"></status>
</kw>
<msg timestamp="20170708 15:32:11.657" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170708 15:32:11.657" starttime="20170708 15:32:11.656"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:11.660" starttime="20170708 15:32:11.659"></status>
</kw>
<msg timestamp="20170708 15:32:11.660" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:11.660" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:32:11.660" starttime="20170708 15:32:11.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:11.661" starttime="20170708 15:32:11.660"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:32:11.677" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:32:11.677" starttime="20170708 15:32:11.677"></status>
</kw>
<msg timestamp="20170708 15:32:11.677" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:32:11.677" starttime="20170708 15:32:11.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:11.679" starttime="20170708 15:32:11.678"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.679" starttime="20170708 15:32:11.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:11.679" starttime="20170708 15:32:11.679"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:32:11.680" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:32:11.681" starttime="20170708 15:32:11.680"></status>
</kw>
<msg timestamp="20170708 15:32:11.681" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:32:11.681" starttime="20170708 15:32:11.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:11.682" starttime="20170708 15:32:11.682"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.683" starttime="20170708 15:32:11.682"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:11.683" starttime="20170708 15:32:11.681"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:32:11.683" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:32:13.430" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:32:13.430" starttime="20170708 15:32:11.683"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:13.430" starttime="20170708 15:32:11.676"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:32:13.431" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170708 15:32:13.431" starttime="20170708 15:32:13.430"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:32:13.432" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170708 15:32:13.432" starttime="20170708 15:32:13.432"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 15:32:13.437" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170708 15:32:13.437" starttime="20170708 15:32:13.432"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:13.441" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:13.441" starttime="20170708 15:32:13.440"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:13.441" starttime="20170708 15:32:13.440"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:13.442" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:13.442" starttime="20170708 15:32:13.442"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:13.442" starttime="20170708 15:32:13.441"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:13.443" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:13.444" starttime="20170708 15:32:13.443"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:13.444" starttime="20170708 15:32:13.443"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:13.445" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:13.445" starttime="20170708 15:32:13.444"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:13.445" starttime="20170708 15:32:13.444"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:13.445" starttime="20170708 15:32:13.439"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:13.445" starttime="20170708 15:32:13.439"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:13.446" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170708 15:32:14.842" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:14.842" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170708 15:32:14.842" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:14.842" starttime="20170708 15:32:13.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:14.849" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:14.849" starttime="20170708 15:32:14.848"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.849" starttime="20170708 15:32:14.848"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.849" starttime="20170708 15:32:14.843"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.849" starttime="20170708 15:32:13.438"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.849" starttime="20170708 15:32:13.438"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.849" starttime="20170708 15:32:13.437"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.849" starttime="20170708 15:32:13.431"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.849" starttime="20170708 15:32:13.431"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:32:14.851" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170708 15:32:14.851" starttime="20170708 15:32:14.850"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 15:32:14.851" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170708 15:32:14.852" starttime="20170708 15:32:14.851"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:14.855" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:14.855" starttime="20170708 15:32:14.855"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.855" starttime="20170708 15:32:14.854"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:14.856" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:14.857" starttime="20170708 15:32:14.856"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.857" starttime="20170708 15:32:14.855"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:14.858" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:14.858" starttime="20170708 15:32:14.857"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.858" starttime="20170708 15:32:14.857"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:14.859" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:14.859" starttime="20170708 15:32:14.859"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.859" starttime="20170708 15:32:14.858"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.859" starttime="20170708 15:32:14.853"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.859" starttime="20170708 15:32:14.853"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:14.860" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170708 15:32:14.917" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170708 15:32:14.917" level="INFO">${stdout} = </msg>
<msg timestamp="20170708 15:32:14.917" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170708 15:32:14.917" starttime="20170708 15:32:14.860"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:14.923" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:14.923" starttime="20170708 15:32:14.923"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.923" starttime="20170708 15:32:14.922"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.924" starttime="20170708 15:32:14.917"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.924" starttime="20170708 15:32:14.852"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.924" starttime="20170708 15:32:14.852"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:14.927" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:14.927" starttime="20170708 15:32:14.926"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.927" starttime="20170708 15:32:14.926"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:14.928" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:14.928" starttime="20170708 15:32:14.928"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.928" starttime="20170708 15:32:14.927"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:14.930" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:14.930" starttime="20170708 15:32:14.930"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.930" starttime="20170708 15:32:14.929"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:14.932" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:14.932" starttime="20170708 15:32:14.931"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.932" starttime="20170708 15:32:14.930"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.932" starttime="20170708 15:32:14.925"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:14.932" starttime="20170708 15:32:14.925"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:14.933" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170708 15:32:15.007" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:15.008" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-108"
VERSION_ID="v1.99.7-108-gc34efb9"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<msg timestamp="20170708 15:32:15.008" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:15.008" starttime="20170708 15:32:14.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.017" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.017" starttime="20170708 15:32:15.017"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.017" starttime="20170708 15:32:15.015"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.018" starttime="20170708 15:32:15.008"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.018" starttime="20170708 15:32:14.924"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.018" starttime="20170708 15:32:14.924"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.018" starttime="20170708 15:32:14.852"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.018" starttime="20170708 15:32:14.850"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.018" starttime="20170708 15:32:14.850"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:32:15.019" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170708 15:32:15.019" starttime="20170708 15:32:15.019"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.020" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170708 15:32:15.020" starttime="20170708 15:32:15.019"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.023" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.023" starttime="20170708 15:32:15.023"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.023" starttime="20170708 15:32:15.022"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.024" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.025" starttime="20170708 15:32:15.024"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.025" starttime="20170708 15:32:15.023"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.026" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.026" starttime="20170708 15:32:15.025"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.026" starttime="20170708 15:32:15.025"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.027" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.027" starttime="20170708 15:32:15.027"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.027" starttime="20170708 15:32:15.026"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.027" starttime="20170708 15:32:15.022"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.027" starttime="20170708 15:32:15.021"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:15.028" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170708 15:32:15.113" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:15.113" level="INFO">${stdout} =  15:32:27 up 2 min,  load average: 2.87, 1.58, 0.61</msg>
<msg timestamp="20170708 15:32:15.113" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:15.113" starttime="20170708 15:32:15.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.119" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.119" starttime="20170708 15:32:15.119"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.119" starttime="20170708 15:32:15.118"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.119" starttime="20170708 15:32:15.113"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.119" starttime="20170708 15:32:15.020"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.120" starttime="20170708 15:32:15.020"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.123" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.123" starttime="20170708 15:32:15.123"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.123" starttime="20170708 15:32:15.122"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.124" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.125" starttime="20170708 15:32:15.124"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.125" starttime="20170708 15:32:15.123"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.126" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.126" starttime="20170708 15:32:15.125"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.126" starttime="20170708 15:32:15.125"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.127" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.127" starttime="20170708 15:32:15.127"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.127" starttime="20170708 15:32:15.126"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.127" starttime="20170708 15:32:15.121"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.127" starttime="20170708 15:32:15.121"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:15.128" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170708 15:32:15.247" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:15.247" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     37.4...</msg>
<msg timestamp="20170708 15:32:15.248" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:15.248" starttime="20170708 15:32:15.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.257" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.257" starttime="20170708 15:32:15.257"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.258" starttime="20170708 15:32:15.256"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.258" starttime="20170708 15:32:15.248"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.258" starttime="20170708 15:32:15.120"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.258" starttime="20170708 15:32:15.120"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.262" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.263" starttime="20170708 15:32:15.262"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.263" starttime="20170708 15:32:15.261"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.264" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.264" starttime="20170708 15:32:15.264"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.264" starttime="20170708 15:32:15.263"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.265" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.265" starttime="20170708 15:32:15.265"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.265" starttime="20170708 15:32:15.264"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.267" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.267" starttime="20170708 15:32:15.266"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.267" starttime="20170708 15:32:15.266"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.267" starttime="20170708 15:32:15.260"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.267" starttime="20170708 15:32:15.259"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:15.268" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170708 15:32:15.427" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:15.427" level="INFO">${stdout} = Linux witherspoon 4.10.17-7858cdff46b6d8aa4a4f88884a0623ff50fb78c9 #1 Sat Jul 8 06:02:17 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170708 15:32:15.427" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:15.427" starttime="20170708 15:32:15.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.435" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:15.435" starttime="20170708 15:32:15.435"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.436" starttime="20170708 15:32:15.433"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.436" starttime="20170708 15:32:15.427"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.436" starttime="20170708 15:32:15.258"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.436" starttime="20170708 15:32:15.258"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.436" starttime="20170708 15:32:15.020"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.436" starttime="20170708 15:32:15.018"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.436" starttime="20170708 15:32:15.018"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.436" starttime="20170708 15:32:13.431"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.436" starttime="20170708 15:32:11.675"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.436" starttime="20170708 15:32:11.661"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.436" starttime="20170708 15:32:11.657"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.436" starttime="20170708 15:32:11.657"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:15.438" starttime="20170708 15:32:15.438"></status>
</kw>
<msg timestamp="20170708 15:32:15.438" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:15.438" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:32:15.438" starttime="20170708 15:32:15.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:15.439" starttime="20170708 15:32:15.439"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:32:15.455" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:32:15.455" starttime="20170708 15:32:15.454"></status>
</kw>
<msg timestamp="20170708 15:32:15.455" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:32:15.455" starttime="20170708 15:32:15.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:15.456" starttime="20170708 15:32:15.456"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.456" starttime="20170708 15:32:15.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:15.457" starttime="20170708 15:32:15.456"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:32:15.458" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:32:15.458" starttime="20170708 15:32:15.458"></status>
</kw>
<msg timestamp="20170708 15:32:15.458" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:32:15.458" starttime="20170708 15:32:15.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:15.460" starttime="20170708 15:32:15.459"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.460" starttime="20170708 15:32:15.459"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:15.460" starttime="20170708 15:32:15.458"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:32:15.460" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:32:17.108" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:32:17.108" starttime="20170708 15:32:15.460"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:17.108" starttime="20170708 15:32:15.453"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:32:17.109" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170708 15:32:17.109" starttime="20170708 15:32:17.108"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:32:17.110" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170708 15:32:17.110" starttime="20170708 15:32:17.110"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:32:17.111" level="INFO">${logpath} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_elog.txt</msg>
<status status="PASS" endtime="20170708 15:32:17.111" starttime="20170708 15:32:17.111"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:32:17.114" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:32:17.115" starttime="20170708 15:32:17.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:17.115" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:17.115" starttime="20170708 15:32:17.115"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:32:17.116" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:32:17.116" starttime="20170708 15:32:17.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:32:17.117" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:32:17.117" starttime="20170708 15:32:17.116"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:32:17.317" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:32:17.317" starttime="20170708 15:32:17.117"></status>
</kw>
<msg timestamp="20170708 15:32:17.317" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:17.318" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:17.318" starttime="20170708 15:32:17.117"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:32:17.318" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:17.318" starttime="20170708 15:32:17.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:17.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:17.319" starttime="20170708 15:32:17.319"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:17.319" starttime="20170708 15:32:17.113"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:17.319" starttime="20170708 15:32:17.113"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:17.319" starttime="20170708 15:32:17.112"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:32:17.320" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170708 15:32:17.320" starttime="20170708 15:32:17.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:17.321" starttime="20170708 15:32:17.320"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:32:17.365" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:32:17.365" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:17.366" starttime="20170708 15:32:17.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:17.366" starttime="20170708 15:32:17.366"></status>
</kw>
<msg timestamp="20170708 15:32:17.366" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:17.366" starttime="20170708 15:32:17.111"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:17.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:32:17.368" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:32:17.368" starttime="20170708 15:32:17.367"></status>
</kw>
<msg timestamp="20170708 15:32:17.368" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:32:17.368" starttime="20170708 15:32:17.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 15:32:17.369" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 15:32:17.369" starttime="20170708 15:32:17.369"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:17.369" starttime="20170708 15:32:17.368"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:17.369" starttime="20170708 15:32:17.110"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:32:17.370" level="INFO">${logpath} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170708 15:32:17.370" starttime="20170708 15:32:17.370"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:32:17.374" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:32:17.375" starttime="20170708 15:32:17.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:17.375" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:17.375" starttime="20170708 15:32:17.375"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:32:17.376" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:32:17.376" starttime="20170708 15:32:17.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:32:17.377" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:32:17.377" starttime="20170708 15:32:17.376"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:32:17.555" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:32:17.555" starttime="20170708 15:32:17.378"></status>
</kw>
<msg timestamp="20170708 15:32:17.555" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:17.555" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:17.555" starttime="20170708 15:32:17.377"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:32:17.556" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:17.556" starttime="20170708 15:32:17.556"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:17.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:17.557" starttime="20170708 15:32:17.556"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:17.557" starttime="20170708 15:32:17.373"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:17.557" starttime="20170708 15:32:17.372"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:17.557" starttime="20170708 15:32:17.371"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:32:17.558" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170708 15:32:17.558" starttime="20170708 15:32:17.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:17.558" starttime="20170708 15:32:17.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:32:17.877" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:32:17.877" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:17.877" starttime="20170708 15:32:17.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:17.878" starttime="20170708 15:32:17.877"></status>
</kw>
<msg timestamp="20170708 15:32:17.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:17.878" starttime="20170708 15:32:17.371"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:17.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:17.879" starttime="20170708 15:32:17.879"></status>
</kw>
<msg timestamp="20170708 15:32:17.879" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170708 15:32:17.879" starttime="20170708 15:32:17.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:17.880" starttime="20170708 15:32:17.880"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170708 15:32:17.881" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:32:17.881" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170708 15:32:17.881" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170708 15:32:17.881" starttime="20170708 15:32:17.880"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:17.882" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:17.883" starttime="20170708 15:32:17.882"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:17.883" starttime="20170708 15:32:17.881"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:17.883" starttime="20170708 15:32:17.369"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:32:17.883" level="INFO">${logpath} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170708 15:32:17.884" starttime="20170708 15:32:17.883"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:32:17.886" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:32:17.887" starttime="20170708 15:32:17.886"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:17.887" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:17.887" starttime="20170708 15:32:17.887"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:32:17.888" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:32:17.888" starttime="20170708 15:32:17.888"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:32:17.889" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:32:17.889" starttime="20170708 15:32:17.889"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.098" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:32:18.098" starttime="20170708 15:32:17.890"></status>
</kw>
<msg timestamp="20170708 15:32:18.098" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:18.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.099" starttime="20170708 15:32:17.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.099" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.099" starttime="20170708 15:32:18.099"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.100" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.100" starttime="20170708 15:32:18.100"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.100" starttime="20170708 15:32:17.885"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.100" starttime="20170708 15:32:17.885"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.100" starttime="20170708 15:32:17.884"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:32:18.101" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170708 15:32:18.101" starttime="20170708 15:32:18.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:18.102" starttime="20170708 15:32:18.101"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:32:18.255" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:32:18.255" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.255" starttime="20170708 15:32:18.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:18.256" starttime="20170708 15:32:18.256"></status>
</kw>
<msg timestamp="20170708 15:32:18.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.256" starttime="20170708 15:32:17.884"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.257" starttime="20170708 15:32:18.257"></status>
</kw>
<msg timestamp="20170708 15:32:18.258" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170708 15:32:18.258" starttime="20170708 15:32:18.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:18.258" starttime="20170708 15:32:18.258"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170708 15:32:18.259" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:32:18.259" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170708 15:32:18.259" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170708 15:32:18.259" starttime="20170708 15:32:18.258"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.260" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:18.261" starttime="20170708 15:32:18.260"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.261" starttime="20170708 15:32:18.259"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.261" starttime="20170708 15:32:17.883"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:32:18.261" level="INFO">${logpath} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_led.txt</msg>
<status status="PASS" endtime="20170708 15:32:18.262" starttime="20170708 15:32:18.261"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:32:18.264" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:32:18.265" starttime="20170708 15:32:18.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:18.265" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:18.265" starttime="20170708 15:32:18.265"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:32:18.266" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:32:18.266" starttime="20170708 15:32:18.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:32:18.267" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:32:18.267" starttime="20170708 15:32:18.266"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.466" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:32:18.467" starttime="20170708 15:32:18.268"></status>
</kw>
<msg timestamp="20170708 15:32:18.467" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:18.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.467" starttime="20170708 15:32:18.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.467" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.468" starttime="20170708 15:32:18.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.468" starttime="20170708 15:32:18.468"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.468" starttime="20170708 15:32:18.263"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.469" starttime="20170708 15:32:18.263"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.469" starttime="20170708 15:32:18.262"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:32:18.469" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170708 15:32:18.469" starttime="20170708 15:32:18.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:18.470" starttime="20170708 15:32:18.470"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:32:18.513" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:32:18.514" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.514" starttime="20170708 15:32:18.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:18.514" starttime="20170708 15:32:18.514"></status>
</kw>
<msg timestamp="20170708 15:32:18.514" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.515" starttime="20170708 15:32:18.262"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.516" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:32:18.516" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:32:18.516" starttime="20170708 15:32:18.515"></status>
</kw>
<msg timestamp="20170708 15:32:18.516" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:32:18.516" starttime="20170708 15:32:18.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 15:32:18.517" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 15:32:18.517" starttime="20170708 15:32:18.517"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.517" starttime="20170708 15:32:18.516"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.517" starttime="20170708 15:32:18.261"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:32:18.518" level="INFO">${logpath} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170708 15:32:18.518" starttime="20170708 15:32:18.518"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:32:18.521" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:32:18.521" starttime="20170708 15:32:18.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:18.522" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:18.522" starttime="20170708 15:32:18.521"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:32:18.523" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:32:18.523" starttime="20170708 15:32:18.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:32:18.523" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:32:18.523" starttime="20170708 15:32:18.523"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.726" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:32:18.726" starttime="20170708 15:32:18.524"></status>
</kw>
<msg timestamp="20170708 15:32:18.726" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:18.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.727" starttime="20170708 15:32:18.524"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.727" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.728" starttime="20170708 15:32:18.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.729" starttime="20170708 15:32:18.728"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.729" starttime="20170708 15:32:18.520"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.729" starttime="20170708 15:32:18.519"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.729" starttime="20170708 15:32:18.519"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:32:18.730" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170708 15:32:18.730" starttime="20170708 15:32:18.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:18.731" starttime="20170708 15:32:18.731"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:32:18.774" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:32:18.774" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.774" starttime="20170708 15:32:18.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:18.775" starttime="20170708 15:32:18.775"></status>
</kw>
<msg timestamp="20170708 15:32:18.775" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:18.775" starttime="20170708 15:32:18.518"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.777" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:32:18.777" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:32:18.777" starttime="20170708 15:32:18.776"></status>
</kw>
<msg timestamp="20170708 15:32:18.778" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:32:18.778" starttime="20170708 15:32:18.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 15:32:18.779" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 15:32:18.779" starttime="20170708 15:32:18.779"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.779" starttime="20170708 15:32:18.778"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.779" starttime="20170708 15:32:18.517"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.779" starttime="20170708 15:32:17.110"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.780" starttime="20170708 15:32:17.109"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.780" starttime="20170708 15:32:17.109"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.780" starttime="20170708 15:32:17.109"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.780" starttime="20170708 15:32:15.453"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.780" starttime="20170708 15:32:15.439"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.780" starttime="20170708 15:32:15.437"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.780" starttime="20170708 15:32:15.436"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:18.783" starttime="20170708 15:32:18.783"></status>
</kw>
<msg timestamp="20170708 15:32:18.783" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:18.783" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:32:18.783" starttime="20170708 15:32:18.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:18.784" starttime="20170708 15:32:18.783"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:32:18.799" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:32:18.799" starttime="20170708 15:32:18.799"></status>
</kw>
<msg timestamp="20170708 15:32:18.799" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:32:18.799" starttime="20170708 15:32:18.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:18.801" starttime="20170708 15:32:18.800"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.801" starttime="20170708 15:32:18.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:18.802" starttime="20170708 15:32:18.801"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:32:18.803" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:32:18.803" starttime="20170708 15:32:18.802"></status>
</kw>
<msg timestamp="20170708 15:32:18.803" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:32:18.803" starttime="20170708 15:32:18.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:18.805" starttime="20170708 15:32:18.804"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.805" starttime="20170708 15:32:18.804"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:18.805" starttime="20170708 15:32:18.803"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:32:18.805" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:32:20.584" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:32:20.585" starttime="20170708 15:32:18.805"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:20.585" starttime="20170708 15:32:18.798"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170708 15:32:20.586" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170708 15:32:20.633" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170708 15:32:20.633" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170708 15:32:20.633" starttime="20170708 15:32:20.585"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170708 15:32:20.634" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170708 15:32:20.634" starttime="20170708 15:32:20.634"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:20.643" starttime="20170708 15:32:20.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:21.279" starttime="20170708 15:32:20.644"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:21.279" starttime="20170708 15:32:20.643"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:21.279" starttime="20170708 15:32:20.634"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170708 15:32:21.280" starttime="20170708 15:32:21.279"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:21.280" starttime="20170708 15:32:18.797"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:21.280" starttime="20170708 15:32:18.784"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:21.280" starttime="20170708 15:32:18.781"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:21.280" starttime="20170708 15:32:18.780"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:21.282" starttime="20170708 15:32:21.282"></status>
</kw>
<msg timestamp="20170708 15:32:21.282" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:21.282" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:32:21.282" starttime="20170708 15:32:21.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:21.283" starttime="20170708 15:32:21.283"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:32:21.299" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:32:21.299" starttime="20170708 15:32:21.299"></status>
</kw>
<msg timestamp="20170708 15:32:21.299" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:32:21.299" starttime="20170708 15:32:21.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:21.300" starttime="20170708 15:32:21.300"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:21.300" starttime="20170708 15:32:21.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:21.301" starttime="20170708 15:32:21.301"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:32:21.302" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:32:21.302" starttime="20170708 15:32:21.302"></status>
</kw>
<msg timestamp="20170708 15:32:21.303" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:32:21.303" starttime="20170708 15:32:21.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:21.304" starttime="20170708 15:32:21.304"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:21.304" starttime="20170708 15:32:21.304"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:21.305" starttime="20170708 15:32:21.303"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:32:21.305" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:32:23.082" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:32:23.082" starttime="20170708 15:32:21.305"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.082" starttime="20170708 15:32:21.297"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:32:23.083" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170708 15:32:23.083" starttime="20170708 15:32:23.082"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:32:23.084" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170708 15:32:23.084" starttime="20170708 15:32:23.084"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:32:23.085" level="INFO">${logpath} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170708 15:32:23.085" starttime="20170708 15:32:23.085"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:23.087" starttime="20170708 15:32:23.086"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:23.087" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170708 15:32:23.385" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:23.386" level="INFO">${stdout} = Mem: 175604K used, 256696K free, 38360K shrd, 10836K buff, 73972K cached
CPU:   0% usr  16% sys   0% nic  75% idle   0% io   0% irq   8% sirq
Load average: 2.58 1.57 0.62 1/151 1171
  PID  PPID USER  ...</msg>
<msg timestamp="20170708 15:32:23.386" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:23.386" starttime="20170708 15:32:23.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:23.394" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:23.394" starttime="20170708 15:32:23.393"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.394" starttime="20170708 15:32:23.392"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.394" starttime="20170708 15:32:23.386"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.394" starttime="20170708 15:32:23.085"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.394" starttime="20170708 15:32:23.084"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:32:23.395" level="INFO">${logpath} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170708 15:32:23.395" starttime="20170708 15:32:23.395"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:23.396" starttime="20170708 15:32:23.396"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:23.397" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170708 15:32:23.514" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:23.514" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-7858cdff46b6d8aa4a4f88884a0623ff50fb78c9 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Sat Jul 8 06:02:...</msg>
<msg timestamp="20170708 15:32:23.514" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:23.514" starttime="20170708 15:32:23.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:23.521" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:23.521" starttime="20170708 15:32:23.520"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.521" starttime="20170708 15:32:23.519"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.521" starttime="20170708 15:32:23.514"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.521" starttime="20170708 15:32:23.395"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.521" starttime="20170708 15:32:23.394"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:32:23.522" level="INFO">${logpath} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170708 15:32:23.522" starttime="20170708 15:32:23.521"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:23.523" starttime="20170708 15:32:23.523"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:23.524" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170708 15:32:23.609" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:23.609" level="INFO">${stdout} = MemTotal:         432300 kB
MemFree:          256540 kB
MemAvailable:     299932 kB
Buffers:           10836 kB
Cached:            73976 kB
SwapCached:            0 kB
Active:           109244 kB
Inac...</msg>
<msg timestamp="20170708 15:32:23.609" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:23.609" starttime="20170708 15:32:23.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:23.616" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:23.616" starttime="20170708 15:32:23.615"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.616" starttime="20170708 15:32:23.614"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.616" starttime="20170708 15:32:23.609"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.616" starttime="20170708 15:32:23.522"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.616" starttime="20170708 15:32:23.521"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:32:23.617" level="INFO">${logpath} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170708 15:32:23.617" starttime="20170708 15:32:23.616"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:23.618" starttime="20170708 15:32:23.618"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:23.619" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170708 15:32:23.756" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:23.756" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170708 15:32:23.756" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:23.756" starttime="20170708 15:32:23.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:23.762" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:23.762" starttime="20170708 15:32:23.762"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.763" starttime="20170708 15:32:23.761"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.763" starttime="20170708 15:32:23.756"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.763" starttime="20170708 15:32:23.617"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:23.763" starttime="20170708 15:32:23.616"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:32:23.763" level="INFO">${logpath} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170708 15:32:23.764" starttime="20170708 15:32:23.763"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:23.765" starttime="20170708 15:32:23.765"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:32:23.765" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170708 15:32:24.782" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:32:24.784" level="INFO">${stdout} = -- Logs begin at Sat 2017-07-08 15:30:26 UTC, end at Sat 2017-07-08 15:32:34 UTC. --
Jul 08 15:30:26 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 08 15:30:26 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170708 15:32:24.785" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:32:24.785" starttime="20170708 15:32:23.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:32:24.795" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/20170708153209805718_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:24.795" starttime="20170708 15:32:24.793"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:24.796" starttime="20170708 15:32:24.790"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:24.796" starttime="20170708 15:32:24.785"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:24.796" starttime="20170708 15:32:23.764"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:24.796" starttime="20170708 15:32:23.763"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:24.796" starttime="20170708 15:32:23.084"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:24.796" starttime="20170708 15:32:23.083"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:24.796" starttime="20170708 15:32:23.083"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:24.796" starttime="20170708 15:32:23.083"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:24.796" starttime="20170708 15:32:21.297"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:24.797" starttime="20170708 15:32:21.283"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:24.797" starttime="20170708 15:32:21.280"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:24.797" starttime="20170708 15:32:21.280"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:24.800" starttime="20170708 15:32:24.799"></status>
</kw>
<msg timestamp="20170708 15:32:24.800" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:24.800" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:32:24.800" starttime="20170708 15:32:24.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:24.801" starttime="20170708 15:32:24.800"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:32:24.818" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:32:24.818" starttime="20170708 15:32:24.818"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:32:24.819" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:32:24.819" starttime="20170708 15:32:24.819"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:32:24.820" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:32:24.820" starttime="20170708 15:32:24.819"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:32:24.820" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:32:24.820" starttime="20170708 15:32:24.820"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:32:25.105" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:32:25.105" starttime="20170708 15:32:24.821"></status>
</kw>
<msg timestamp="20170708 15:32:25.105" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:25.105" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:25.105" starttime="20170708 15:32:24.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:32:25.106" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:25.106" starttime="20170708 15:32:25.105"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:25.106" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:32:25.107" starttime="20170708 15:32:25.106"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.107" starttime="20170708 15:32:24.817"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.107" starttime="20170708 15:32:24.816"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.107" starttime="20170708 15:32:24.816"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:32:25.107" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170708 15:32:25.107" starttime="20170708 15:32:25.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:25.108" starttime="20170708 15:32:25.108"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:32:25.156" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:32:25.156" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:25.156" starttime="20170708 15:32:25.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:25.157" starttime="20170708 15:32:25.156"></status>
</kw>
<msg timestamp="20170708 15:32:25.157" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:32:25.157" starttime="20170708 15:32:24.815"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:32:25.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:32:25.158" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:32:25.158" starttime="20170708 15:32:25.158"></status>
</kw>
<msg timestamp="20170708 15:32:25.158" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:32:25.158" starttime="20170708 15:32:25.157"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170708 15:32:25.159" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170708 15:32:25.159" starttime="20170708 15:32:25.159"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.159" starttime="20170708 15:32:24.815"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.159" starttime="20170708 15:32:24.801"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.159" starttime="20170708 15:32:24.797"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.159" starttime="20170708 15:32:24.797"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:25.161" starttime="20170708 15:32:25.161"></status>
</kw>
<msg timestamp="20170708 15:32:25.161" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:32:25.161" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:32:25.162" starttime="20170708 15:32:25.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:25.162" starttime="20170708 15:32:25.162"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170708 15:32:25.178" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170708 15:32:25.178" starttime="20170708 15:32:25.178"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.179" starttime="20170708 15:32:25.177"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.179" starttime="20170708 15:32:25.162"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.179" starttime="20170708 15:32:25.160"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.179" starttime="20170708 15:32:25.160"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.179" starttime="20170708 15:32:11.657"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.179" starttime="20170708 15:32:11.655"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.179" starttime="20170708 15:32:11.655"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.179" starttime="20170708 15:32:11.654"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170708 15:32:25.365" starttime="20170708 15:32:25.180"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.365" starttime="20170708 15:32:11.653"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.365" starttime="20170708 15:32:06.762"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.365" starttime="20170708 15:32:06.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:25.366" starttime="20170708 15:32:25.366"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170708 15:32:25.368" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170708 15:32:25.368" starttime="20170708 15:32:25.367"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170708 15:32:25.369" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170708153209805718_UpdateBmc/20170708153209805718_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170708 15:32:25.369" starttime="20170708 15:32:25.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:25.369" starttime="20170708 15:32:25.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:25.370" starttime="20170708 15:32:25.370"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170708 15:32:25.370" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170708 15:32:25.371" starttime="20170708 15:32:25.370"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170708 15:32:25.372" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170708 15:32:25.372" starttime="20170708 15:32:25.371"></status>
</kw>
<msg timestamp="20170708 15:32:25.372" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170708 15:32:25.372" starttime="20170708 15:32:25.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:25.372" starttime="20170708 15:32:25.372"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170708 15:32:25.373" starttime="20170708 15:32:25.373"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:32:25.374" level="INFO">${cur_time} = 2017-07-08 15:32:25:374212</msg>
<status status="PASS" endtime="20170708 15:32:25.374" starttime="20170708 15:32:25.374"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:32:25.375" level="INFO">${cur_time} = 20170708153225374212</msg>
<status status="PASS" endtime="20170708 15:32:25.375" starttime="20170708 15:32:25.375"></status>
</kw>
<msg timestamp="20170708 15:32:25.375" level="INFO">${cur_time} = 20170708153225374212</msg>
<status status="PASS" endtime="20170708 15:32:25.375" starttime="20170708 15:32:25.373"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170708 15:32:25.376" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:32:25.376" starttime="20170708 15:32:25.376"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.376" starttime="20170708 15:32:25.367"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.377" starttime="20170708 15:32:06.487"></status>
</kw>
<status status="PASS" endtime="20170708 15:32:25.377" starttime="20170708 15:32:06.480"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170708 15:32:25.377" critical="yes" starttime="20170708 15:28:44.132">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170708 15:32:25.378" starttime="20170708 15:28:43.235"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170708 15:30:12.451" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8c02b6d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170708 15:30:32.673" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8c02b810&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
</errors>
</robot>
